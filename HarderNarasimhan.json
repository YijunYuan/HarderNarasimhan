[{"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "Module",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.impl.μ_nonempty",
   "Prod.fst",
   "PrimeSpectrum.isPrime",
   "Finset.min'",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "PrimeSpectrum.asIdeal",
   "HarderNarasimhan._μ",
   "CommRing.toCommSemiring",
   "LinearExtension",
   "CommSemiring.toSemiring",
   "Set.toFinset",
   "AddCommGroup",
   "Prod.snd",
   "CommRing",
   "LT.lt",
   "Prod",
   "PrimeSpectrum",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.CP.f1._proof_1",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  ((HarderNarasimhan._μ R M I).toFinset.min' ⋯).asIdeal.IsPrime",
  "constCategory": "Theorem"},
 {"references":
  ["instLTNat",
   "Nat.find",
   "Exists",
   "True",
   "Eq.trans",
   "And",
   "DecidablePred",
   "congrArg",
   "LT.lt",
   "Nat.find_lt_iff._simp_1",
   "Nat",
   "iff_self",
   "of_eq_true",
   "Nat.succ",
   "congr",
   "Iff",
   "funext",
   "Nat.find_le_iff._simp_1_1",
   "LE.le",
   "instLENat"],
  "name": "Nat.find_le_iff",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (h : ∃ n, p n) (n : ℕ), Nat.find h ≤ n ↔ ∃ m ≤ n, p m",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Subtype.instLT",
   "Subtype",
   "Eq",
   "Subtype.val",
   "LT",
   "propext",
   "Subtype.coe_lt_coe"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_15",
  "constType":
  "∀ {α : Type u_2} [inst : LT α] {p : α → Prop} {x y : Subtype p}, (↑x < ↑y) = (x < y)",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "AddRightStrictMono",
   "sub_pos",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "SubNegZeroMonoid.toNegZeroClass",
   "AddGroup.toSubtractionMonoid",
   "OfNat.ofNat",
   "LT.lt",
   "SubNegMonoid.toAddMonoid",
   "SubNegMonoid.toSub",
   "HSub.hSub",
   "NegZeroClass.toZero",
   "AddGroup",
   "Zero.toOfNat0",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "instHSub",
   "LT",
   "propext",
   "AddMonoid.toAddZeroClass"],
  "name":
  "HarderNarasimhan.impl.not_top_of_Nontrivial_TotallyOrderedRealVectorSpace._simp_1_2",
  "constType":
  "∀ {α : Type u} [inst : AddGroup α] [inst_1 : LT α] [AddRightStrictMono α] {a b : α}, (0 < a - b) = (b < a)",
  "constCategory": "Theorem"},
 {"references":
  ["Set",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "BooleanAlgebra.toBiheytingAlgebra",
   "EmptyCollection.emptyCollection",
   "Set.instEmptyCollection",
   "Set.instHasSubset",
   "sdiff_eq_bot_iff",
   "HasSubset.Subset",
   "Iff",
   "SDiff.sdiff",
   "Eq",
   "BiheytingAlgebra.toCoheytingAlgebra",
   "Set.instBooleanAlgebra",
   "Set.instSDiff"],
  "name": "Set.diff_eq_empty",
  "constType": "∀ {α : Type u_1} {s t : Set α}, s \\ t = ∅ ↔ s ⊆ t",
  "constCategory": "Theorem"},
 {"references": ["SMul", "SMulZeroClass", "Zero"],
  "name": "SMulZeroClass.toSMul",
  "constType":
  "{M : Type u_12} → {A : Type u_13} → {inst : Zero A} → [self : SMulZeroClass M A] → SMul M A",
  "constCategory": "Definition"},
 {"references": ["Or.inr", "True", "Or", "eq_true", "Eq", "trivial"],
  "name": "or_true",
  "constType": "∀ (p : Prop), (p ∨ True) = True",
  "constCategory": "Theorem"},
 {"references": ["HEq.refl", "HEq", "Eq.subst", "Eq"],
  "name": "heq_of_eq",
  "constType": "∀ {α : Sort u} {a a' : α}, a = a' → a ≍ a'",
  "constCategory": "Theorem"},
 {"references":
  ["Exists", "Exists.intro", "Eq", "forall_exists_index", "propext"],
  "name": "HarderNarasimhan.impl.rmk2d5₂._simp_1_1",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {q : (∃ x, p x) → Prop}, (∀ (h : ∃ x, p x), q h) = ∀ (x : α) (h : p x), q ⋯",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Prod.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.S₁I._proof_1",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "Ne",
   "Subtype.mk",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.S₂I",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] →\n      [BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [CompleteLattice S] →\n            ({ p // p.1 < p.2 } → S) →\n              (I : { p // p.1 < p.2 }) → (x : ℒ) → HarderNarasimhan.InIntvl I x → (↑I).1 ≠ x → Prop",
  "constCategory": "Definition"},
 {"references": ["Min"],
  "name": "Min.mk",
  "constType": "{α : Type u} → (α → α → α) → Min α",
  "constCategory": "Other"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "LT.lt",
   "Prod",
   "Nat",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "lt_top_iff_ne_top",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil._proof_3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (n : ℕ),\n  ¬HarderNarasimhan.impl.HNFil μ n = ⊤ → (HarderNarasimhan.impl.HNFil μ n, ⊤).1 < ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["Real.instIsStrictOrderedRing",
   "Real",
   "Nonneg.linearOrderedCommGroupWithZero",
   "NNReal",
   "Real.linearOrder",
   "LinearOrderedCommGroupWithZero",
   "Real.instField"],
  "name": "NNReal.instLinearOrderedCommGroupWithZero",
  "constType": "LinearOrderedCommGroupWithZero NNReal",
  "constCategory": "Definition"},
 {"references": [],
  "name": "AddCommMonoid",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.trans",
   "SemilatticeSup.toPartialOrder",
   "And",
   "Iff.rfl",
   "sup_le_iff._simp_1",
   "congrArg",
   "Max.max",
   "and_assoc",
   "congr",
   "Iff",
   "SemilatticeSup.toMax",
   "LE.le",
   "id",
   "SemilatticeSup",
   "eq_of_forall_ge_iff",
   "Eq.mpr",
   "Preorder.toLE",
   "Eq",
   "propext"],
  "name": "sup_assoc",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] (a b c : α), a ⊔ b ⊔ c = a ⊔ (b ⊔ c)",
  "constCategory": "Theorem"},
 {"references": ["rfl", "Eq.rec", "Eq"],
  "name": "congrFun",
  "constType":
  "∀ {α : Sort u} {β : α → Sort v} {f g : (x : α) → β x}, f = g → ∀ (a : α), f a = g a",
  "constCategory": "Theorem"},
 {"references":
  ["not_le",
   "LT.lt",
   "Not",
   "LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Eq",
   "Preorder.toLE",
   "propext"],
  "name":
  "HarderNarasimhan.exists_unique_relSeries_isIntervalSemistable_of_completeLinearOrder._simp_1_1",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, (¬a ≤ b) = (b < a)",
  "constCategory": "Theorem"},
 {"references":
  ["AddMonoid.toZero",
   "Nat.cast",
   "SubNegMonoid.zsmul_zero'._autoParam",
   "SubNegMonoid.zsmul_neg'._autoParam",
   "HSub.hSub",
   "Zero.toOfNat0",
   "Eq",
   "AddSemigroup.toAdd",
   "instNatCastInt",
   "SubNegMonoid.zsmul_succ'._autoParam",
   "Neg.neg",
   "instHAdd",
   "Int.negSucc",
   "Sub",
   "Neg",
   "AddMonoid",
   "OfNat.ofNat",
   "Int",
   "HAdd.hAdd",
   "Nat",
   "instOfNat",
   "Nat.succ",
   "SubNegMonoid",
   "AddMonoid.toAddSemigroup",
   "autoParam",
   "instHSub",
   "SubNegMonoid.sub_eq_add_neg._autoParam"],
  "name": "SubNegMonoid.mk",
  "constType":
  "{G : Type u} →\n  [toAddMonoid : AddMonoid G] →\n    [toNeg : Neg G] →\n      [toSub : Sub G] →\n        autoParam (∀ (a b : G), a - b = a + -b) SubNegMonoid.sub_eq_add_neg._autoParam →\n          (zsmul : ℤ → G → G) →\n            autoParam (∀ (a : G), zsmul 0 a = 0) SubNegMonoid.zsmul_zero'._autoParam →\n              autoParam (∀ (n : ℕ) (a : G), zsmul (↑n.succ) a = zsmul (↑n) a + a) SubNegMonoid.zsmul_succ'._autoParam →\n                autoParam (∀ (n : ℕ) (a : G), zsmul (Int.negSucc n) a = -zsmul (↑n.succ) a)\n                    SubNegMonoid.zsmul_neg'._autoParam →\n                  SubNegMonoid G",
  "constCategory": "Other"},
 {"references":
  ["HAdd.hAdd",
   "LT.lt",
   "instOfNat",
   "instHAdd",
   "Int.instAdd",
   "LE.le",
   "Int.instLEInt",
   "Int.instLTInt",
   "OfNat.ofNat",
   "Int"],
  "name": "Int.add_one_le_of_lt",
  "constType": "∀ {a b : ℤ}, a < b → a + 1 ≤ b",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.μmin",
   "PartialOrder",
   "HarderNarasimhan.impl.rmk4d10₀",
   "LE.le",
   "Nontrivial",
   "Preorder.toLE",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μmin_lt_μ_lt_μmax",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.μmin μ I ≤ μ I ∧ μ I ≤ HarderNarasimhan.μmax μ I",
  "constCategory": "Theorem"},
 {"references": ["Bool"],
  "name": "Bool.true",
  "constType": "Bool",
  "constCategory": "Other"},
 {"references":
  ["CommRing.toCommSemiring",
   "Submodule.instNontrivial",
   "Module",
   "HarderNarasimhan.μ",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "IsNoetherianRing",
   "HarderNarasimhan.impl.instConvexOfConvexITotIntvl",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Nontrivial",
   "Submodule.completeLattice",
   "AddCommGroup.toAddCommMonoid",
   "HarderNarasimhan.Convex",
   "HarderNarasimhan.S₀",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.impl.prop3d11",
   "HarderNarasimhan.S",
   "CompleteLattice.toBoundedOrder",
   "CompleteLattice.toConditionallyCompleteLattice",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_2",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_1} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  HarderNarasimhan.Convex (HarderNarasimhan.μ R M)",
  "constCategory": "Theorem"},
 {"references":
  ["instDistribLatticeOfLinearOrder",
   "DistribLattice.toLattice",
   "Lattice",
   "inferInstance",
   "Int.instLinearOrder",
   "Int"],
  "name": "instLatticeInt",
  "constType": "Lattice ℤ",
  "constCategory": "Definition"},
 {"references": ["CommMonoidWithZero", "LinearOrderedCommMonoidWithZero"],
  "name": "LinearOrderedCommMonoidWithZero.toCommMonoidWithZero",
  "constType":
  "{α : Type u_3} → [self : LinearOrderedCommMonoidWithZero α] → CommMonoidWithZero α",
  "constCategory": "Definition"},
 {"references":
  ["AddCommMonoid",
   "SetLike.instMembership",
   "Subtype",
   "Submodule.setLike",
   "Module",
   "Subtype.property",
   "Membership.mem",
   "Subtype.val",
   "Submodule",
   "Semiring"],
  "name": "Submodule.coe_mem",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] {module_M : _root_.Module R M}\n  {p : Submodule R M} (x : ↥p), ↑x ∈ p",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.hasQuotient",
   "Submodule.Quotient.mk",
   "HasQuotient.Quotient",
   "IsScalarTower",
   "Module",
   "AddCommGroup.toAddGroup",
   "SMulZeroClass.toSMul",
   "Submodule",
   "SMul",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "DistribSMul.toSMulZeroClass",
   "rfl",
   "DistribMulAction.toDistribSMul",
   "Submodule.Quotient.instSMul'",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "AddZeroClass.toAddZero",
   "Ring.toSemiring",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "HSMul.hSMul",
   "AddCommGroup.toAddCommMonoid",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Ring"],
  "name": "Submodule.Quotient.mk_smul",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M) {S : Type u_3} [inst_3 : SMul S R] [inst_4 : SMul S M] [inst_5 : IsScalarTower S R M] (r : S)\n  (x : M), Submodule.Quotient.mk (r • x) = r • Submodule.Quotient.mk x",
  "constCategory": "Theorem"},
 {"references":
  ["Preorder",
   "OrderEmbedding.le_iff_le",
   "LE.le",
   "Eq",
   "Preorder.toLE",
   "OrderEmbedding",
   "DFunLike.coe",
   "RelEmbedding.instFunLike",
   "propext"],
  "name": "HarderNarasimhan.impl.prop3d11._simp_1",
  "constType":
  "∀ {α : Type u_2} {β : Type u_3} [inst : Preorder α] [inst_1 : Preorder β] (f : α ↪o β) {a b : α}, (f a ≤ f b) = (a ≤ b)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "SizeOf",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.JordanHolderFiltration.rec",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "SizeOf.sizeOf",
   "lt_add_one",
   "LE.le",
   "instSizeOfDefault",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration._sizeOf_1",
  "constType":
  "{ℒ : Type u_1} →\n  {inst : Nontrivial ℒ} →\n    {inst_1 : Lattice ℒ} →\n      {inst_2 : BoundedOrder ℒ} →\n        {S : Type u_2} →\n          {inst_3 : CompleteLattice S} →\n            {μ : { p // p.1 < p.2 } → S} → [SizeOf ℒ] → [SizeOf S] → HarderNarasimhan.JordanHolderFiltration μ → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["SemilatticeSup.le_sup_left",
   "Max.max",
   "PartialOrder.toPreorder",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup.toPartialOrder",
   "SemilatticeSup",
   "Preorder.toLE"],
  "name": "le_sup_left",
  "constType": "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, a ≤ a ⊔ b",
  "constCategory": "Theorem"},
 {"references":
  ["le_refl",
   "OrderDual",
   "Preorder",
   "lt_iff_le_not_ge",
   "OrderDual.instLT",
   "LE.le",
   "Preorder.toLT",
   "OrderDual.instLE",
   "Preorder.mk",
   "Preorder.toLE",
   "LE.le.trans"],
  "name": "OrderDual.instPreorder",
  "constType": "(α : Type u_5) → [Preorder α] → Preorder αᵒᵈ",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Eq.refl",
   "PartialOrder",
   "Nontrivial",
   "Eq.rec",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μmax.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S),\n  μ = μ_1 → ∀ (I I_1 : { p // p.1 < p.2 }), I = I_1 → HarderNarasimhan.μmax μ I = HarderNarasimhan.μmax μ_1 I_1",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat",
   "Nat.succ",
   "Nat.le_of_succ_le_succ",
   "LE.le",
   "instLENat"],
  "name": "Nat.le_of_lt_succ",
  "constType": "∀ {m n : ℕ}, m < n.succ → m ≤ n",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "Module",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "Submodule",
   "Submodule.mk_eq_zero",
   "AddCommMonoid",
   "Submodule.setLike",
   "Zero.toOfNat0",
   "Submodule.zero",
   "Subtype.mk",
   "Eq",
   "AddZero.toZero",
   "propext",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_12",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] {module_M : _root_.Module R M}\n  (p : Submodule R M) {x : M} (h : x ∈ p), (⟨x, h⟩ = 0) = (x = 0)",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "instOfNat",
   "Int.negOfNat.match_1",
   "Int.negSucc",
   "OfNat.ofNat",
   "Unit",
   "Int"],
  "name": "Int.negOfNat",
  "constType": "ℕ → ℤ",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.semistableI",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Eq.rec",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.semistableI.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S),\n  μ = μ_1 →\n    ∀ (I I_1 : { p // p.1 < p.2 }), I = I_1 → HarderNarasimhan.semistableI μ I = HarderNarasimhan.semistableI μ_1 I_1",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Not",
   "Preorder",
   "IsMin.not_lt",
   "Preorder.toLT",
   "OrderBot.toBot",
   "Preorder.toLE",
   "isMin_bot",
   "Bot.bot",
   "OrderBot"],
  "name": "not_lt_bot",
  "constType":
  "∀ {α : Type u} [inst : Preorder α] [inst_1 : OrderBot α] {a : α}, ¬a < ⊥",
  "constCategory": "Theorem"},
 {"references": ["Covariant", "CovariantClass"],
  "name": "CovariantClass.mk",
  "constType":
  "∀ {M : Type u_1} {N : Type u_2} {μ : M → N → N} {r : N → N → Prop}, Covariant M N μ r → CovariantClass M N μ r",
  "constCategory": "Other"},
 {"references":
  ["Int.instSub", "Eq.refl", "HSub.hSub", "instHSub", "Eq.ndrec", "Eq", "Int"],
  "name": "Lean.Omega.Int.sub_congr",
  "constType": "∀ {a b c d : ℤ}, a = b → c = d → a - c = b - d",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "le_top",
   "PartialOrder.toPreorder",
   "Iff",
   "PartialOrder",
   "Preorder.toLT",
   "Top.top",
   "LE.le.lt_iff_ne",
   "OrderTop",
   "Ne",
   "Preorder.toLE",
   "OrderTop.toTop"],
  "name": "lt_top_iff_ne_top",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderTop α] {a : α}, a < ⊤ ↔ a ≠ ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.hasQuotient",
   "Submodule.Quotient.mk",
   "SetLike.instMembership",
   "HasQuotient.Quotient",
   "Module",
   "Membership.mem",
   "Submodule.Quotient.instZeroQuotient",
   "AddCommGroup",
   "Submodule.Quotient.mk_eq_zero",
   "OfNat.ofNat",
   "Ring.toSemiring",
   "Submodule",
   "Submodule.setLike",
   "AddCommGroup.toAddCommMonoid",
   "Zero.toOfNat0",
   "Eq",
   "propext",
   "Ring"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_9",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} {x : M} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M), (Submodule.Quotient.mk x = 0) = (x ∈ p)",
  "constCategory": "Theorem"},
 {"references": ["LE.le", "LE", "ge_iff_le", "Eq", "GE.ge", "propext"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_defprop2._simp_1_8",
  "constType": "∀ {α : Type u_1} [inst : LE α] {x y : α}, (x ≥ y) = (y ≤ x)",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "Iff", "Iff.rfl", "GT.gt", "LT"],
  "name": "gt_iff_lt",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, x > y ↔ y < x",
  "constCategory": "Theorem"},
 {"references": ["Decidable", "True", "trivial", "Decidable.isTrue"],
  "name": "instDecidableTrue",
  "constType": "Decidable True",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "HarderNarasimhan.SlopeLike",
   "Eq.trans",
   "Nat.lt_add_one._simp_1",
   "HarderNarasimhan.impl.prop4d20",
   "eq_true",
   "List.tfae_of_cycle",
   "List.instGetElem?NatLtLength",
   "Subtype.val",
   "GetElem?.getElem?",
   "HarderNarasimhan.NashEquilibrium",
   "Nat.instCharZero",
   "Nat.ofNat_pos._simp_1",
   "instLTNat",
   "getElem?_pos",
   "Subtype.coe_le_coe._simp_1",
   "BoundedOrder",
   "Nat.instNontrivial",
   "Prod.snd",
   "List.IsChain.singleton",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Iff",
   "AddMonoid.toAddSemigroup",
   "Eq.refl",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.WeakSlopeLike₂",
   "Eq.mpr",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "Or.inr",
   "HarderNarasimhan.WeakSlopeLike₁.mk",
   "HarderNarasimhan.impl.prop4d16₂",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "List",
   "GetElem.getElem",
   "Option.some",
   "HarderNarasimhan.impl.prop4d18₂",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Nat.instAddMonoidWithOne",
   "Prod.casesOn",
   "Nat.instNeZeroSucc",
   "Or.inl",
   "Nat.instSemiring",
   "instOfNatNat",
   "congr",
   "HarderNarasimhan.WeakSlopeLike₁",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Preorder.toLE",
   "Eq",
   "Nat.instAddMonoid",
   "lt_iff_le_not_ge",
   "IsStrictOrderedRing.toIsOrderedRing",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HarderNarasimhan.impl.prop4d16₁",
   "CompletelyDistribLattice.toCompleteLattice",
   "HAdd.hAdd",
   "eq_self",
   "GetElem?.toGetElem",
   "Ne",
   "Nat.instIsStrictOrderedRing",
   "Subtype.casesOn",
   "Nat.instAtLeastTwoHAddOfNat",
   "lt_trans",
   "PartialOrder.toPreorder",
   "Subtype.instLE",
   "Prod.mk",
   "Iff.mp",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "Nat.one_lt_ofNat._simp_1",
   "AddMonoidWithOne.toAddMonoid",
   "HarderNarasimhan.μmax",
   "Nat.instAddCommMonoid",
   "Mathlib.Meta.NormNum.IsNat.to_eq",
   "And.intro",
   "Mathlib.Meta.NormNum.isNat_add",
   "Or",
   "List.TFAE",
   "CompleteLinearOrder",
   "Nat.instIsOrderedAddMonoid",
   "List.cons",
   "List.IsChain.cons_cons",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "AddSemigroup.toAdd",
   "Nat.instPartialOrder",
   "And.right",
   "Nat.instStarRing",
   "And",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "True.intro",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Nat",
   "zero_add",
   "Iff.mpr",
   "Option",
   "Nontrivial",
   "id",
   "Mathlib.Meta.NormNum.isNat_ofNat",
   "AddZero.toZero",
   "List.length",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "congrArg",
   "Subtype.prop",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "Zero.toOfNat0",
   "OrderBot.toBot",
   "Not",
   "List.nil",
   "bot_lt_iff_ne_bot",
   "List.TFAE.out",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "List.instLawfulGetElemNatLtLength",
   "Or.casesOn",
   "LT.lt",
   "HarderNarasimhan.instNontrivialInterval",
   "of_eq_true",
   "le_of_lt",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "Subtype.mk",
   "OrderTop.toTop",
   "HarderNarasimhan.SlopeLike.slopelike"],
  "name": "HarderNarasimhan.impl.thm4d21",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.SlopeLike μ →\n    HarderNarasimhan.WeakAscendingChainCondition μ →\n      HarderNarasimhan.StrongDescendingChainCondition μ →\n        [HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl,\n              HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl,\n              HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl,\n              HarderNarasimhan.NashEquilibrium μ].TFAE ∧\n          (HarderNarasimhan.Semistable μ → HarderNarasimhan.NashEquilibrium μ) ∧\n            ((∀ (x : ℒ) (hx : x ≠ ⊥),\n                HarderNarasimhan.WeakAscendingChainCondition (HarderNarasimhan.Resμ ⟨(⊥, x), ⋯⟩ μ)) →\n              HarderNarasimhan.NashEquilibrium μ → HarderNarasimhan.Semistable μ)",
  "constCategory": "Theorem"},
 {"references": ["Nat", "Nat.le.refl", "LE.le", "instLENat"],
  "name": "Nat.le_refl",
  "constType": "∀ (n : ℕ), n ≤ n",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "Not", "Preorder", "lt_irrefl", "Preorder.toLT"],
  "name": "Mathlib.Tactic.Linarith.lt_irrefl",
  "constType": "∀ {α : Type u} [inst : Preorder α] {a : α}, ¬a < a",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.hasQuotient",
   "Subtype",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Eq",
   "Eq.rec",
   "CommRing.toCommSemiring",
   "SetLike.instMembership",
   "CommSemiring.toSemiring",
   "Submodule.addCommGroup",
   "AddCommGroup",
   "CommRing",
   "CommRing.toRing",
   "IsNoetherianRing",
   "Submodule.setLike",
   "Eq.refl",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "HarderNarasimhan.impl.lift_quot",
   "Submodule.addCommMonoid",
   "Module.Finite",
   "Submodule.submoduleOf"],
  "name": "HarderNarasimhan.impl.lift_quot.congr_simp",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (N₁ N₂ : Submodule R M)\n  (x x_1 : Submodule R (↥N₂ ⧸ N₁.submoduleOf N₂)),\n  x = x_1 → HarderNarasimhan.impl.lift_quot N₁ N₂ x = HarderNarasimhan.impl.lift_quot N₁ N₂ x_1",
  "constCategory": "Theorem"},
 {"references": ["Prod"],
  "name": "Prod.fst",
  "constType": "{α : Type u} → {β : Type v} → α × β → α",
  "constCategory": "Definition"},
 {"references":
  ["NeZero",
   "instAddNat",
   "HAdd.hAdd",
   "Nat",
   "Zero.ofOfNat0",
   "instHAdd",
   "instOfNatNat",
   "Nat.succ_ne_zero",
   "NeZero.mk",
   "OfNat.ofNat"],
  "name": "Nat.instNeZeroSucc",
  "constType": "∀ {n : ℕ}, NeZero (n + 1)",
  "constCategory": "Theorem"},
 {"references": ["Set", "Add", "AddSubsemigroup"],
  "name": "AddSubsemigroup.carrier",
  "constType": "{M : Type u_3} → [inst : Add M] → AddSubsemigroup M → Set M",
  "constCategory": "Definition"},
 {"references": [],
  "name": "IsEmpty",
  "constType": "Sort u_4 → Prop",
  "constCategory": "Other"},
 {"references":
  ["Preorder",
   "Iff",
   "RelEmbedding.map_rel_iff",
   "LE.le",
   "Preorder.toLE",
   "OrderEmbedding",
   "DFunLike.coe",
   "RelEmbedding.instFunLike"],
  "name": "OrderEmbedding.le_iff_le",
  "constType":
  "∀ {α : Type u_2} {β : Type u_3} [inst : Preorder α] [inst_1 : Preorder β] (f : α ↪o β) {a b : α}, f a ≤ f b ↔ a ≤ b",
  "constCategory": "Theorem"},
 {"references":
  ["Int.instSub",
   "Or.inr",
   "Nat.cast",
   "Eq.trans",
   "Iff.mp",
   "and_true",
   "congrArg",
   "And.intro",
   "Or",
   "Or.inl",
   "Lean.Omega.Int.ofNat_sub_eq_zero",
   "HSub.hSub",
   "Eq",
   "instNatCastInt",
   "Not",
   "instLTNat",
   "True",
   "And",
   "Nat.decLe",
   "Nat.not_le",
   "OfNat.ofNat",
   "Int",
   "LT.lt",
   "eq_self",
   "Nat",
   "instSubNat",
   "instOfNat",
   "gt_iff_lt._simp_1",
   "LE.le",
   "id",
   "Int.ofNat_sub",
   "Eq.mpr",
   "instHSub",
   "dite",
   "instLENat"],
  "name": "Lean.Omega.Int.ofNat_sub_dichotomy",
  "constType": "∀ {a b : ℕ}, b ≤ a ∧ ↑(a - b) = ↑a - ↑b ∨ a < b ∧ ↑(a - b) = 0",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "Module",
   "LinearMap.toAddHom",
   "LinearEquiv.toLinearMap",
   "LinearEquiv.instEquivLike._proof_1",
   "LinearEquiv",
   "LinearEquiv.invFun",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "AddCommMonoid.toAddCommSemigroup",
   "EquivLike.mk",
   "AddHom.toFun",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "LinearEquiv.right_inv",
   "RingHomInvPair",
   "EquivLike",
   "LinearEquiv.left_inv",
   "Semiring"],
  "name": "LinearEquiv.instEquivLike",
  "constType":
  "{R : Type u_1} →\n  {S : Type u_6} →\n    {M : Type u_7} →\n      {M₂ : Type u_9} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring S] →\n            [inst_2 : AddCommMonoid M] →\n              [inst_3 : AddCommMonoid M₂] →\n                [inst_4 : _root_.Module R M] →\n                  [inst_5 : _root_.Module S M₂] →\n                    {σ : R →+* S} →\n                      {σ' : S →+* R} →\n                        [inst_6 : RingHomInvPair σ σ'] → [inst_7 : RingHomInvPair σ' σ] → EquivLike (M ≃ₛₗ[σ] M₂) M M₂",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "SizeOf",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.HarderNarasimhanFiltration._sizeOf_1",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "SizeOf.mk",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration._sizeOf_inst",
  "constType":
  "{ℒ : Type u_1} →\n  {inst : Nontrivial ℒ} →\n    {inst_1 : Lattice ℒ} →\n      {inst_2 : BoundedOrder ℒ} →\n        {S : Type u_2} →\n          {inst_3 : CompleteLattice S} →\n            (μ : { p // p.1 < p.2 } → S) →\n              [SizeOf ℒ] → [SizeOf S] → SizeOf (HarderNarasimhan.HarderNarasimhanFiltration μ)",
  "constCategory": "Definition"},
 {"references": ["NatCast.mk", "Nat", "NatCast", "Int.ofNat", "Int"],
  "name": "instNatCastInt",
  "constType": "NatCast ℤ",
  "constCategory": "Definition"},
 {"references":
  ["implies_congr",
   "Nat.not_lt_zero._simp_1",
   "Nat.find",
   "Eq.trans",
   "DecidablePred",
   "and_true",
   "congrArg",
   "iff_self",
   "Nat.find_eq_zero._simp_1_1",
   "instOfNatNat",
   "forall_congr",
   "false_implies",
   "Eq",
   "Not",
   "instLTNat",
   "Exists",
   "True",
   "And",
   "OfNat.ofNat",
   "LT.lt",
   "implies_true",
   "Nat",
   "of_eq_true",
   "Iff",
   "Eq.refl",
   "False"],
  "name": "Nat.find_eq_zero",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (h : ∃ n, p n), Nat.find h = 0 ↔ p 0",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "HarderNarasimhan.Affine.rec",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "HarderNarasimhan.Affine.mk",
   "HarderNarasimhan.Affine",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Affine.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.Affine μ → Sort u} →\n                (t : HarderNarasimhan.Affine μ) →\n                  ((affine : ∀ (a b : ℒ) (h : ¬a ≤ b), μ ⟨(a ⊓ b, a), ⋯⟩ = μ ⟨(b, a ⊔ b), ⋯⟩) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["IsOrderedAddMonoid.mk",
   "Lattice.toSemilatticeInf",
   "PartialOrder.toPreorder",
   "instHAdd",
   "congrArg",
   "Int",
   "HAdd.hAdd",
   "AddCommMonoid.toAddCommSemigroup",
   "IsOrderedAddMonoid",
   "Int.add_le_add_left",
   "LE.le",
   "id",
   "Int.instAddCommMonoid",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Eq.mpr",
   "Eq",
   "Preorder.toLE",
   "add_comm",
   "SemilatticeInf.toPartialOrder",
   "instLatticeInt"],
  "name": "Int.instIsOrderedAddMonoid",
  "constType": "IsOrderedAddMonoid ℤ",
  "constCategory": "Theorem"},
 {"references":
  ["SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "True",
   "congrArg",
   "SemilatticeInf",
   "eq_self",
   "of_eq_true",
   "Min.min",
   "inf_of_le_left",
   "LE.le",
   "Eq",
   "Preorder.toLE",
   "le_refl._simp_1",
   "SemilatticeInf.toPartialOrder"],
  "name": "inf_idem",
  "constType": "∀ {α : Type u} [inst : SemilatticeInf α] (a : α), a ⊓ a = a",
  "constCategory": "Theorem"},
 {"references":
  ["Finset.univ",
   "Finset.map",
   "Finset",
   "Subtype",
   "Set",
   "Membership.mem",
   "Function.Embedding.subtype",
   "Fintype",
   "Set.Elem",
   "Set.instMembership"],
  "name": "Set.toFinset",
  "constType": "{α : Type u_1} → (s : Set α) → [Fintype ↑s] → Finset α",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.μ_Admissible",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "IsTotal",
   "Or",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "WellFoundedGT",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.μ_Admissible.μ_adm",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {inst_3 : WellFoundedGT ℒ}\n  {S : Type u_2} {inst_4 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.μ_Admissible μ],\n  (IsTotal S fun x1 x2 ↦ x1 ≤ x2) ∨ ∀ (I : { p // p.1 < p.2 }), HarderNarasimhan.IsAttained μ I",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace", "AddCommGroup"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.toAddCommGroup",
  "constType":
  "{V : Type u_1} → [self : HarderNarasimhan.TotallyOrderedRealVectorSpace V] → AddCommGroup V",
  "constCategory": "Definition"},
 {"references": ["CompletelyDistribLattice", "CompleteLattice"],
  "name": "CompletelyDistribLattice.toCompleteLattice",
  "constType":
  "{α : Type u} → [self : CompletelyDistribLattice α] → CompleteLattice α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Submodule.Quotient.module",
   "HarderNarasimhan.μ",
   "Membership.mem",
   "Classical.propDecidable",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_5",
   "HarderNarasimhan.S",
   "HarderNarasimhan.Coprimary.coprimary",
   "instLTNat",
   "Exists",
   "SetLike.instMembership",
   "Submodule.addCommGroup",
   "HarderNarasimhan.impl.piecewise_coprimary",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Set.instMembership",
   "Nat",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Top.top",
   "ConditionallyCompleteLattice.toLattice",
   "CompleteLattice.toBoundedOrder",
   "Submodule.submoduleOf",
   "Submodule.hasQuotient",
   "Nat.find",
   "associatedPrimes",
   "Subtype",
   "Submodule.instNontrivial",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "Submodule",
   "ExistsUnique.exists",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "Eq",
   "CompleteLattice.toConditionallyCompleteLattice",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
   "CommRing.toCommSemiring",
   "instHAdd",
   "Set",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Submodule.setLike",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Submodule.completeLattice",
   "HarderNarasimhan.S₀",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_10",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (HNFil : HarderNarasimhan.HarderNarasimhanFiltration (HarderNarasimhan.μ R M)) (n : ℕ),\n  n + 1 < Nat.find ⋯ →\n    ∃ x,\n      x ∈\n        associatedPrimes R\n          (↥(HNFil.filtration (n + 1)) ⧸ Submodule.submoduleOf (HNFil.filtration n) (HNFil.filtration (n + 1)))",
  "constCategory": "Theorem"},
 {"references":
  ["Int.instSub",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "le_of_le_of_eq",
   "Lean.Omega.LinearCombo.coordinate_eval_3",
   "Preorder.toLT",
   "Classical.propDecidable",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "Lean.Omega.Int.ofNat_le_of_le",
   "Int.instLEInt",
   "Eq.symm",
   "HSub.hSub",
   "HarderNarasimhan.JordanHolderFiltration",
   "CompleteLinearOrder",
   "Int.add_one_le_of_lt",
   "List.cons",
   "Bool.true",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Neg.neg",
   "And.right",
   "Lean.Omega.Constraint.addInequality_sat",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Lean.Omega.LinearCombo.coordinate",
   "Bot.bot",
   "Int.instNegInt",
   "Prod",
   "instDecidableEqBool",
   "Nat",
   "BoundedOrder.toOrderBot",
   "instOfNat",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Lean.Omega.Constraint.addEquality_sat",
   "id",
   "Lean.Omega.Int.sub_congr",
   "Or.elim",
   "Nat.find",
   "Lean.Omega.LinearCombo.coordinate_eval_2",
   "Bool",
   "Subtype",
   "Nat.cast",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Lean.Omega.Constraint.combine_sat'",
   "Option.some",
   "Int.sub_eq_zero_of_eq",
   "Decidable.decide",
   "Lean.Omega.LinearCombo.mk",
   "Prod.fst",
   "Lean.Omega.LinearCombo.instSub",
   "Lean.Omega.Coeffs.ofList",
   "instOfNatNat",
   "Lean.Omega.Int.ofNat_sub_dichotomy",
   "Int.instAdd",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "Lean.Omega.Constraint.not_sat'_of_isImpossible",
   "of_decide_eq_true",
   "instNatCastInt",
   "List.nil",
   "Not",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "Lean.Omega.LinearCombo",
   "Lean.Omega.Constraint.isImpossible",
   "Int.sub_nonneg_of_le",
   "OfNat.ofNat",
   "Int",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "LT.lt",
   "Nat.le_of_not_lt",
   "Lean.Omega.Int.ofNat_lt_of_lt",
   "Lean.Omega.LinearCombo.sub_eval",
   "Option.none",
   "instSubNat",
   "LE.le",
   "False",
   "Lean.Omega.LinearCombo.eval",
   "Lean.Omega.Constraint.mk",
   "instHSub",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "instLENat"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_9",
  "constType":
  "∀ (n : ℕ) (ℒ : Type u_1) (ntl : Nontrivial ℒ) (l : Lattice ℒ) (bo : BoundedOrder ℒ) (S : Type u_2)\n  (clo : CompleteLinearOrder S) (μ : { p // p.1 < p.2 } → S) (JHy JHx : HarderNarasimhan.JordanHolderFiltration μ),\n  0 < Nat.find ⋯ - 1 → ¬Nat.find ⋯ - 1 < Nat.find ⋯ → False",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "HarderNarasimhan.impl.prop2d6₁I",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "GE.ge",
   "HarderNarasimhan.impl.prop2d6₀",
   "Prod.fst",
   "Eq.symm",
   "Eq",
   "Eq.rec",
   "Preorder.toLE",
   "le_antisymm",
   "CompleteLattice.toConditionallyCompleteLattice",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Lattice.toSemilatticeInf",
   "inf_eq_right",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Min.min",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "ConditionallyCompleteLattice.toLattice",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop2d6₂I₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        ∀ (y : ℒ),\n          HarderNarasimhan.InIntvl I y →\n            ∀ (z : ℒ),\n              HarderNarasimhan.InIntvl I z →\n                ∀ (h : x < y ∧ y < z),\n                  HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩ ≥ HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩ →\n                    HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩ = HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Quotient.mk''",
   "AddSubgroup",
   "HasQuotient.Quotient",
   "QuotientAddGroup.instHasQuotientAddSubgroup",
   "QuotientAddGroup.leftRel",
   "AddGroup"],
  "name": "QuotientAddGroup.mk",
  "constType":
  "{α : Type u_1} → [inst : AddGroup α] → {s : AddSubgroup α} → α → α ⧸ s",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "PartialOrder",
   "LE.le",
   "SemilatticeSup",
   "Preorder.toLE"],
  "name": "SemilatticeSup.mk",
  "constType":
  "{α : Type u} →\n  [toPartialOrder : PartialOrder α] →\n    (sup : α → α → α) →\n      (∀ (a b : α), a ≤ sup a b) →\n        (∀ (a b : α), b ≤ sup a b) → (∀ (a b c : α), a ≤ c → b ≤ c → sup a b ≤ c) → SemilatticeSup α",
  "constCategory": "Other"},
 {"references":
  ["add_right_inj",
   "HAdd.hAdd",
   "IsLeftCancelAdd",
   "instHAdd",
   "Add",
   "Eq",
   "propext"],
  "name": "HarderNarasimhan.impl.prop4d8._simp_1_8",
  "constType":
  "∀ {G : Type u_1} [inst : Add G] [IsLeftCancelAdd G] (a : G) {b c : G}, (a + b = a + c) = (b = c)",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Real.instPreorder",
   "PartialOrder.toPreorder",
   "PosSMulStrictMono",
   "Real",
   "AddCommGroup.add_comm",
   "AddCommGroup.toAddGroup",
   "AddCommMonoid.mk",
   "Semiring.toMonoidWithZero",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toAddCommGroup",
   "Real.semiring",
   "LinearOrder.toPartialOrder",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toModule",
   "MulAction.toSMul",
   "Module.toDistribMulAction",
   "Real.instZero",
   "SubNegMonoid.toAddMonoid",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toLinearOrder",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "AddGroup.toSubNegMonoid"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.toPosSMulStrictMono",
  "constType":
  "∀ {V : Type u_1} [self : HarderNarasimhan.TotallyOrderedRealVectorSpace V], PosSMulStrictMono ℝ V",
  "constCategory": "Theorem"},
 {"references":
  ["Finset",
   "Set.mem_toFinset",
   "Set",
   "Membership.mem",
   "Finset.instMembership",
   "Set.toFinset",
   "Eq",
   "Fintype",
   "propext",
   "Set.Elem",
   "Set.instMembership"],
  "name": "HarderNarasimhan.impl.prop3d12p2._simp_1_1",
  "constType":
  "∀ {α : Type u_1} {s : Set α} [inst : Fintype ↑s] {a : α}, (a ∈ s.toFinset) = (a ∈ s)",
  "constCategory": "Theorem"},
 {"references":
  ["OrderTheory.DedekindMacNeilleClosureOperator",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "ClosureOperator.Closeds",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Set",
   "PartialOrder",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteBooleanAlgebra.toCompleteLattice"],
  "name": "OrderTheory.DedekindMacNeilleCompletion",
  "constType": "(α : Type u_1) → [PartialOrder α] → Type u_1",
  "constCategory": "Definition"},
 {"references": ["BEq.mk", "BEq", "DecidableEq", "Eq", "Decidable.decide"],
  "name": "instBEqOfDecidableEq",
  "constType": "{α : Type u_1} → [DecidableEq α] → BEq α",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "HarderNarasimhan.Affine.mk",
   "HarderNarasimhan.Affine",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Affine.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.Affine μ → Sort u} →\n                ((affine : ∀ (a b : ℒ) (h : ¬a ≤ b), μ ⟨(a ⊓ b, a), ⋯⟩ = μ ⟨(b, a ⊔ b), ⋯⟩) → motive ⋯) →\n                  (t : HarderNarasimhan.Affine μ) → motive t",
  "constCategory": "Other"},
 {"references":
  ["LinearOrder.toPartialOrder",
   "CommRing.toCommSemiring",
   "IsNoetherianRing",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.instLinearOrderS₀",
   "CommSemiring.toSemiring",
   "LE",
   "HarderNarasimhan.S₀",
   "Preorder.toLE",
   "CommRing"],
  "name": "HarderNarasimhan.instLES₀",
  "constType":
  "{R : Type u_1} → [inst : CommRing R] → [inst_1 : IsNoetherianRing R] → LE (HarderNarasimhan.S₀ R)",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "SetLike.instMembership",
   "SemilinearMapClass",
   "Submodule.mem_comap",
   "Module",
   "Membership.mem",
   "DFunLike.coe",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.comap",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_8",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} {x : M} {F : Type u_9} [inst_6 : FunLike F M M₂] [inst_7 : SemilinearMapClass F σ₁₂ M M₂] {f : F}\n  {p : Submodule R₂ M₂}, (x ∈ Submodule.comap f p) = (f x ∈ p)",
  "constCategory": "Theorem"},
 {"references": ["eq_false", "And", "False", "Eq", "And.left"],
  "name": "false_and",
  "constType": "∀ (p : Prop), (False ∧ p) = False",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "PartialOrder.toPreorder",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "Nontrivial",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice"],
  "name": "HarderNarasimhan.NashEquilibrium.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  HarderNarasimhan.μAstar μ = HarderNarasimhan.μBstar μ → HarderNarasimhan.NashEquilibrium μ",
  "constCategory": "Other"},
 {"references":
  ["LT.lt",
   "Prod",
   "Lattice.toSemilatticeInf",
   "PartialOrder.toPreorder",
   "Subtype",
   "Lattice",
   "Preorder.toLT",
   "Prod.snd",
   "CompleteLattice",
   "Prod.fst",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.ConvexI",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Lattice ℒ] → {S : Type u_2} → [CompleteLattice S] → { p // p.1 < p.2 } → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["neg_eq_zero_sub",
   "Neg.neg",
   "SubNegMonoid.toNeg",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "SubNegMonoid.toAddMonoid",
   "SubNegMonoid",
   "SubNegMonoid.toSub",
   "Eq.symm",
   "HSub.hSub",
   "Zero.toOfNat0",
   "Eq",
   "instHSub",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass"],
  "name": "zero_sub",
  "constType": "∀ {G : Type u_1} [inst : SubNegMonoid G] (a : G), 0 - a = -a",
  "constCategory": "Theorem"},
 {"references": ["Preorder", "LT"],
  "name": "Preorder.toLT",
  "constType": "{α : Type u_2} → [self : Preorder α] → LT α",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "BoundedOrder",
   "Bot.bot",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "eq_false",
   "Nontrivial",
   "Top.top",
   "False",
   "OrderBot.toBot",
   "bot_ne_top",
   "Preorder.toLE",
   "Eq",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.semistable_of_step_cond₂._simp_1_1",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : BoundedOrder α] [Nontrivial α], (⊥ = ⊤) = False",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "FunLike",
   "SetLike.instMembership",
   "SemilinearMapClass",
   "Submodule.mem_comap",
   "Module",
   "Membership.mem",
   "DFunLike.coe",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.comap",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.piecewise_coprimary._simp_1_1",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} {x : M} {F : Type u_9} [inst_6 : FunLike F M M₂] [inst_7 : SemilinearMapClass F σ₁₂ M M₂] {f : F}\n  {p : Submodule R₂ M₂}, (x ∈ Submodule.comap f p) = (f x ∈ p)",
  "constCategory": "Theorem"},
 {"references":
  ["MulOneClass.toMulOne",
   "MonoidHom.mk",
   "RingHom",
   "CommSemiring",
   "Mul.toSMul",
   "MulZeroOneClass.toMulOneClass",
   "Algebra.id._proof_6",
   "SMul",
   "Semiring.toNonAssocSemiring",
   "Algebra.id._proof_5",
   "Algebra.id._proof_1",
   "RingHom.id",
   "NonAssocSemiring.toMulZeroOneClass",
   "MulOne.toOne",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Algebra.id._proof_4",
   "CommSemiring.toSemiring",
   "Distrib.toMul",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Algebra.algebraMap",
   "Algebra.id._proof_3",
   "Algebra",
   "OneHom.mk",
   "Algebra.id._proof_2",
   "RingHom.mk",
   "Algebra.mk",
   "RingHom.toAlgebra"],
  "name": "Algebra.id",
  "constType": "(R : Type u) → [inst : CommSemiring R] → Algebra R R",
  "constCategory": "Definition"},
 {"references":
  ["contravariant_le_iff_contravariant_lt_and_eq",
   "ContravariantClass.mk",
   "PartialOrder.toPreorder",
   "Add",
   "instHAdd",
   "And",
   "Preorder.toLT",
   "Contravariant",
   "ContravariantClass.elim",
   "Function.swap",
   "AddRightReflectLT",
   "LT.lt",
   "HAdd.hAdd",
   "And.intro",
   "add_right_cancel",
   "PartialOrder",
   "Iff.mpr",
   "IsRightCancelAdd",
   "LE.le",
   "Eq",
   "Preorder.toLE",
   "AddRightReflectLE"],
  "name": "IsRightCancelAdd.addRightReflectLE_of_addRightReflectLT",
  "constType":
  "∀ (N : Type u_2) [inst : Add N] [IsRightCancelAdd N] [inst_2 : PartialOrder N] [AddRightReflectLT N],\n  AddRightReflectLE N",
  "constCategory": "Theorem"},
 {"references":
  ["Preorder",
   "OrderEmbedding.le_iff_le",
   "LE.le",
   "Eq",
   "Preorder.toLE",
   "OrderEmbedding",
   "DFunLike.coe",
   "RelEmbedding.instFunLike",
   "propext"],
  "name": "HarderNarasimhan.impl.μmax_eq_μ._simp_1_1",
  "constType":
  "∀ {α : Type u_2} {β : Type u_3} [inst : Preorder α] [inst_1 : Preorder β] (f : α ↪o β) {a b : α}, (f a ≤ f b) = (a ≤ b)",
  "constCategory": "Theorem"},
 {"references":
  ["PrimeSpectrum",
   "CommRing.toCommSemiring",
   "Ideal.IsPrime",
   "CommSemiring.toSemiring",
   "PrimeSpectrum.asIdeal",
   "CommRing",
   "PrimeSpectrum.isPrime"],
  "name": "Module.support._proof_1",
  "constType":
  "∀ (R : Type u_1) [inst : CommRing R] (p : PrimeSpectrum R), p.asIdeal.IsPrime",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "IsNoetherian",
   "AddCommMonoid",
   "PartialOrder.toPreorder",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "IsNoetherian.wellFoundedGT",
   "Submodule.completeLattice",
   "Preorder.toLT",
   "WellFoundedGT",
   "Submodule",
   "Semiring"],
  "name": "wellFoundedGT",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  [h : IsNoetherian R M], WellFoundedGT (Submodule R M)",
  "constCategory": "Theorem"},
 {"references": ["IsEmpty", "isEmptyElim"],
  "name": "IsEmpty.elim",
  "constType": "{α : Sort u} → IsEmpty α → {p : α → Sort u_4} → (a : α) → p a",
  "constCategory": "Definition"},
 {"references":
  ["CommSemiring",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum",
   "Semiring.toNonAssocSemiring",
   "Ideal",
   "PartialOrder",
   "CompleteSemilatticeInf.toPartialOrder",
   "PrimeSpectrum.ext",
   "Submodule.completeLattice",
   "PrimeSpectrum.asIdeal",
   "PartialOrder.lift",
   "CompleteLattice.toCompleteSemilatticeInf",
   "Semiring.toModule"],
  "name": "PrimeSpectrum.instPartialOrder",
  "constType":
  "{R : Type u_1} → [inst : CommSemiring R] → PartialOrder (PrimeSpectrum R)",
  "constCategory": "Definition"},
 {"references":
  ["Module",
   "Semiring.toModule._proof_4",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "DistribMulAction.mk",
   "Semiring.toModule._proof_1",
   "Semiring.toMonoidWithZero",
   "Semiring.toModule._proof_3",
   "MonoidWithZero.toMulZeroOneClass",
   "AddCommMonoid.toAddMonoid",
   "MonoidWithZero.toMulActionWithZero",
   "Module.mk",
   "Semiring.toModule._proof_2",
   "Semiring.toNonAssocSemiring",
   "MulZeroOneClass.toMulZeroClass",
   "MulZeroClass.toZero",
   "MonoidWithZero.toMonoid",
   "Semiring",
   "MulActionWithZero.toMulAction"],
  "name": "Semiring.toModule",
  "constType": "{R : Type u_1} → [inst : Semiring R] → _root_.Module R R",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "CommRing.toCommSemiring",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.CoprimaryFiltration.filtration",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "CommRing",
   "Nat.instPreorder",
   "Submodule",
   "IsNoetherianRing",
   "Nat",
   "Monotone",
   "HarderNarasimhan.CoprimaryFiltration",
   "Nontrivial",
   "Submodule.completeLattice",
   "AddCommGroup.toAddCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.monotone",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (self : HarderNarasimhan.CoprimaryFiltration R M), Monotone self.filtration",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.Convex",
   "Eq",
   "Preorder.toLE",
   "propext",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex._simp_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ = HarderNarasimhan.Convex μ",
  "constCategory": "Theorem"},
 {"references":
  ["le_rfl",
   "Max.max",
   "PartialOrder.toPreorder",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup.toPartialOrder",
   "sup_le_sup",
   "SemilatticeSup",
   "Preorder.toLE"],
  "name": "sup_le_sup_left",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, a ≤ b → ∀ (c : α), c ⊔ a ≤ c ⊔ b",
  "constCategory": "Theorem"},
 {"references": ["Exists", "exists_and_right", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_7",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {b : Prop}, (∃ x, p x ∧ b) = ((∃ x, p x) ∧ b)",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Add",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references": [],
  "name": "outParam",
  "constType": "Sort u → Sort u",
  "constCategory": "Definition"},
 {"references": ["Nat", "Int"],
  "name": "Int.negSucc",
  "constType": "ℕ → ℤ",
  "constCategory": "Other"},
 {"references":
  ["LT.lt",
   "Nat.succ_le_succ",
   "instLTNat",
   "Nat",
   "Nat.succ",
   "instOfNatNat",
   "Nat.zero_le",
   "OfNat.ofNat"],
  "name": "Nat.zero_lt_succ",
  "constType": "∀ (n : ℕ), 0 < n.succ",
  "constCategory": "Theorem"},
 {"references":
  ["Lean.mkAtom",
   "Lean.Name.mkStr4",
   "Lean.Syntax.node",
   "Lean.Name.mkStr1",
   "Array.push",
   "Lean.Syntax",
   "Array.empty",
   "Lean.SourceInfo.none"],
  "name": "LinearOrder.max_def._autoParam",
  "constType": "Syntax",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Nonempty",
  "constType": "Sort u → Prop",
  "constCategory": "Other"},
 {"references":
  ["implies_congr",
   "instAddNat",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "WellFounded.has_min",
   "Prod.mk",
   "Eq.mpr_not",
   "Membership.mem",
   "Preorder.toLT",
   "Classical.propDecidable",
   "eq_true",
   "Membership.mem.out",
   "GT.gt",
   "Subtype.val",
   "False.elim",
   "forall_congr",
   "funext",
   "Eq.rec",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.impl.ℒₛ._proof_1",
   "of_eq_false",
   "Exists",
   "Exists.choose_spec",
   "HarderNarasimhan.impl.ℒₛ",
   "And.right",
   "And",
   "HarderNarasimhan.impl.prop3d4₀func._proof_6",
   "BoundedOrder",
   "HarderNarasimhan.impl.prop3d4₀func_helper",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "dite.congr_simp",
   "Eq.refl",
   "eq_false",
   "Classical.byContradiction",
   "Nontrivial",
   "Lattice",
   "id",
   "Eq.mpr",
   "Exists.choose.congr_simp",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "instDecidableTrue",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "dite_congr",
   "congrArg",
   "Prod.fst",
   "Subtype.prop",
   "instOfNatNat",
   "IsWellFounded.wf",
   "not_true_eq_false",
   "WellFoundedGT",
   "instDecidableFalse",
   "dite_cond_eq_false",
   "Preorder.toLE",
   "Eq",
   "Not",
   "HarderNarasimhan.impl.prop3d4₀func._proof_2",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "Set",
   "HarderNarasimhan.impl.prop3d4₀func",
   "Exists.choose",
   "OfNat.ofNat",
   "Eq.mpr_prop",
   "HAdd.hAdd",
   "LT.lt",
   "eq_self",
   "HarderNarasimhan.impl.prop3d4₀func_strict_decreasing._simp_1_5",
   "dite_cond_eq_true",
   "of_eq_true",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.impl.prop3d4₀func._proof_5",
   "LE.le",
   "False",
   "Ne",
   "Subtype.mk",
   "dite",
   "HarderNarasimhan.impl.ℒₛ._proof_2",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_strict_decreasing",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (i : ℕ),\n  (↑I).1 ≠ ↑(HarderNarasimhan.impl.prop3d4₀func μ I i) →\n    ↑(HarderNarasimhan.impl.prop3d4₀func μ I i) > ↑(HarderNarasimhan.impl.prop3d4₀func μ I (i + 1))",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Type u_1",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "AddMonoid.nsmul_zero._autoParam",
   "instHAdd",
   "AddMonoid",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "AddSemigroup",
   "Nat",
   "instOfNatNat",
   "Zero.toOfNat0",
   "autoParam",
   "Zero",
   "Eq",
   "AddMonoid.nsmul_succ._autoParam",
   "AddSemigroup.toAdd"],
  "name": "AddMonoid.mk",
  "constType":
  "{M : Type u} →\n  [toAddSemigroup : AddSemigroup M] →\n    [toZero : Zero M] →\n      (∀ (a : M), 0 + a = a) →\n        (∀ (a : M), a + 0 = a) →\n          (nsmul : ℕ → M → M) →\n            autoParam (∀ (x : M), nsmul 0 x = 0) AddMonoid.nsmul_zero._autoParam →\n              autoParam (∀ (n : ℕ) (x : M), nsmul (n + 1) x = nsmul n x + x) AddMonoid.nsmul_succ._autoParam →\n                AddMonoid M",
  "constCategory": "Other"},
 {"references": ["AddGroup"],
  "name": "AddSubgroup",
  "constType": "(G : Type u_3) → [AddGroup G] → Type u_3",
  "constCategory": "Other"},
 {"references":
  ["Iff.trans",
   "PartialOrder.toPreorder",
   "True",
   "Eq.trans",
   "SemilatticeSup.toPartialOrder",
   "And",
   "le_sup_left._simp_1",
   "and_true",
   "true_and",
   "sup_le_iff._simp_1",
   "congrArg",
   "Max.max",
   "le_antisymm_iff",
   "iff_self",
   "of_eq_true",
   "congr",
   "Iff",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup",
   "Eq",
   "Preorder.toLE",
   "le_refl._simp_1"],
  "name": "sup_of_le_left",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, b ≤ a → a ⊔ b = a",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "Real.instPreorder",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "WellFounded.has_min",
   "Membership.mem",
   "Preorder.toLT",
   "bot_le",
   "Exists.intro",
   "Membership.mem.out",
   "Subtype.val",
   "Set.Elem",
   "Monotone",
   "PartialOrder",
   "Eq.symm",
   "Eq.rec",
   "Set.mem_range_self",
   "And.left",
   "Subtype.instLT",
   "Exists",
   "Exists.choose_spec",
   "Real",
   "CompleteLattice.toLattice",
   "lt_of_le_of_lt",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Nat.lt_add_one",
   "Set.instMembership",
   "Prod",
   "IsWellOrder",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Iff.mpr",
   "Eq.refl",
   "Nontrivial",
   "Top.top",
   "CompleteLattice.toBoundedOrder",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "IsWellOrder.toIsWellFounded",
   "SemilatticeSup.toPartialOrder",
   "Set.range",
   "Prod.fst",
   "Nat.instPreorder",
   "Set.mem_setOf",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "IsWellFounded.wf",
   "Real.instLT",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Real.partialOrder",
   "eq_of_le_of_not_lt'",
   "Not",
   "Set.Nonempty",
   "le_top",
   "Set",
   "instHAdd",
   "Exists.choose",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "StrictAnti",
   "le_of_lt",
   "LE.le",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.rmk4d4",
  "constType":
  "∀ {ℒ : Type u_1} [Nontrivial ℒ] [inst : PartialOrder ℒ] [inst_1 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_2 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (r : ℒ → ℝ),\n  Monotone r →\n    (IsWellOrder ↑(Set.range r) fun x1 x2 ↦ x1 < x2) →\n      (∀ (z : { p // p.1 < p.2 }), r (↑z).1 = r (↑z).2 → μ z = ⊤) →\n        ∀ (x : ℕ → ℒ) (saf : StrictAnti x), ∃ N, μ ⟨(⊥, x N), ⋯⟩ ≤ μ ⟨(x (N + 1), x N), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Preorder", "LE.le", "le_of_eq", "Eq.symm", "Preorder.toLE", "Eq"],
  "name": "ge_of_eq",
  "constType": "∀ {α : Type u_2} [inst : Preorder α] {a b : α}, a = b → b ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "WellFounded.has_min",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "GT.gt",
   "HarderNarasimhan.impl.JHFil._proof_2",
   "CompleteLinearOrder",
   "SemilatticeInf.toPartialOrder",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Set.instMembership",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteDistribLattice.toCoframe",
   "setOf",
   "HarderNarasimhan.Semistable",
   "Subtype",
   "GeneralizedCoheytingAlgebra.toLattice",
   "SemilatticeSup.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "Nat.instPreorder",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Nat.instOne",
   "BoundedOrder.toOrderTop",
   "IsWellFounded.wf",
   "WellFoundedGT",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.JHFil._proof_1",
   "Preorder.toLE",
   "Eq",
   "Not",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "Set",
   "instHAdd",
   "OfNat.ofNat",
   "LT.lt",
   "CompletelyDistribLattice.toCompleteLattice",
   "HAdd.hAdd",
   "StrictAnti",
   "One.toOfNat1",
   "HarderNarasimhan.impl.JHFil",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.JHFil._proof_4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [hacc : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) (hμ : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤)\n  (hμsl : HarderNarasimhan.SlopeLike μ) (hst : HarderNarasimhan.Semistable μ)\n  (hdc : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) (n : ℕ),\n  {p | ∃ (h : ⊥ < p), p < HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc n ∧ μ ⟨(⊥, p), h⟩ = μ ⟨(⊥, ⊤), ⋯⟩}.Nonempty →\n    ∃ a ∈ {p | ∃ (h : ⊥ < p), p < HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc n ∧ μ ⟨(⊥, p), h⟩ = μ ⟨(⊥, ⊤), ⋯⟩},\n      ∀ x ∈ {p | ∃ (h : ⊥ < p), p < HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc n ∧ μ ⟨(⊥, p), h⟩ = μ ⟨(⊥, ⊤), ⋯⟩},\n        ¬x > a",
  "constCategory": "Theorem"},
 {"references": ["Iff", "Nonempty", "Nonempty.elim", "Iff.intro"],
  "name": "forall_const",
  "constType":
  "∀ {b : Prop} (α : Sort u_1) [i : Nonempty α], (∀ (a : α), b) ↔ b",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toRing",
   "NonUnitalNonAssocSemiring.toMul",
   "NonUnitalSemiring.toNonUnitalNonAssocSemiring",
   "instHMul",
   "HMul.hMul",
   "Eq",
   "CommRing",
   "Semiring.toNonUnitalSemiring",
   "Ring.toSemiring"],
  "name": "CommRing.mul_comm",
  "constType": "∀ {α : Type u} [self : CommRing α] (a b : α), a * b = b * a",
  "constCategory": "Theorem"},
 {"references":
  ["NonUnitalCommRing",
   "NonUnitalNormedRing.toNonUnitalRing",
   "NonUnitalNormedCommRing.toNonUnitalNormedRing",
   "NonUnitalNormedCommRing.mul_comm",
   "NonUnitalCommRing.mk",
   "NonUnitalNormedCommRing"],
  "name": "NonUnitalNormedCommRing.toNonUnitalCommRing",
  "constType":
  "{α : Type u_5} → [self : NonUnitalNormedCommRing α] → NonUnitalCommRing α",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "LT.lt",
   "instLTNat",
   "Decidable.byContradiction",
   "Nat",
   "instSubNat",
   "instOfNatNat",
   "HSub.hSub",
   "instHSub",
   "OfNat.ofNat",
   "_private.Init.Data.Nat.Lemmas.0.Nat.lt_of_lt_pred._proof_1_1",
   "Nat.decLt"],
  "name": "Nat.lt_of_lt_pred",
  "constType": "∀ {m n : ℕ}, m < n - 1 → m < n",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "And.right",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Or",
   "PartialOrder",
   "LE.le",
   "Nontrivial",
   "Subtype.mk",
   "Preorder.toLE",
   "CompleteLattice",
   "And.left"],
  "name": "HarderNarasimhan.SlopeLike.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x y z : ℒ) (h : x < y ∧ y < z),\n      (μ ⟨(x, y), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ < μ ⟨(x, z), ⋯⟩) ∧\n        (μ ⟨(x, y), ⋯⟩ < μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩) ∧\n          (μ ⟨(x, z), ⋯⟩ < μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(y, z), ⋯⟩) ∧\n            (μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ < μ ⟨(y, z), ⋯⟩)) →\n    HarderNarasimhan.SlopeLike μ",
  "constCategory": "Other"},
 {"references":
  ["LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "Or",
   "LE.le",
   "LinearOrder",
   "Preorder.toLE",
   "LinearOrder.le_total"],
  "name": "le_total",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] (a b : α), a ≤ b ∨ b ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["ConditionallyCompleteLinearOrderBot", "ConditionallyCompleteLinearOrder"],
  "name":
  "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder",
  "constType":
  "{α : Type u_5} → [self : ConditionallyCompleteLinearOrderBot α] → ConditionallyCompleteLinearOrder α",
  "constCategory": "Definition"},
 {"references":
  ["Exists",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Set",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.S₂I",
   "Subtype.val",
   "HarderNarasimhan.S₁I",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.InIntvl",
   "Nontrivial",
   "Lattice",
   "Ne",
   "Preorder.toLE",
   "CompleteLattice",
   "setOf",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.StI",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] →\n      [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → { p // p.1 < p.2 } → Set ℒ",
  "constCategory": "Definition"},
 {"references": ["Preorder.le_trans", "Preorder", "LE.le", "Preorder.toLE"],
  "name": "le_trans",
  "constType":
  "∀ {α : Type u_1} [inst : Preorder α] {a b c : α}, a ≤ b → b ≤ c → a ≤ c",
  "constCategory": "Theorem"},
 {"references":
  ["SMulMemClass",
   "Submodule.toSubMulAction",
   "SetLike.instMembership",
   "Module",
   "Membership.mem",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "Submodule",
   "SMulMemClass.mk",
   "Module.toDistribMulAction",
   "AddCommMonoid",
   "SubMulAction.smul_mem'",
   "Submodule.setLike",
   "MonoidWithZero.toMonoid",
   "AddZero.toZero",
   "Semiring",
   "AddMonoid.toAddZeroClass",
   "DistribSMul.toSMulZeroClass"],
  "name": "Submodule.smulMemClass",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M],\n  SMulMemClass (Submodule R M) R M",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.hasQuotient",
   "Submodule.Quotient.mk",
   "SetLike.instMembership",
   "HasQuotient.Quotient",
   "Module",
   "Membership.mem",
   "Submodule.Quotient.instZeroQuotient",
   "AddCommGroup",
   "Submodule.Quotient.mk_eq_zero",
   "OfNat.ofNat",
   "Ring.toSemiring",
   "Submodule",
   "Submodule.setLike",
   "AddCommGroup.toAddCommMonoid",
   "Zero.toOfNat0",
   "Eq",
   "propext",
   "Ring"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_14",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} {x : M} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M), (Submodule.Quotient.mk x = 0) = (x ∈ p)",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "instAddNat",
   "Real.instPreorder",
   "AddGroup.mk",
   "SubNegMonoid.zsmul_zero'._autoParam",
   "Preorder.toLT",
   "SubNegMonoid.zsmul_neg'._autoParam",
   "HMul.hMul",
   "Min.mk",
   "Semiring.toNonAssocSemiring",
   "AddCommGroup.mk",
   "Or",
   "Sub.mk",
   "HSub.hSub",
   "LT.mk",
   "SubNegMonoid.mk",
   "PosSMulStrictMono.mk",
   "SubNegMonoid.zsmul_succ'._autoParam",
   "Real",
   "MulOne.toOne",
   "NonUnitalNonAssocSemiring.toDistrib",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "And",
   "AddCommMonoid.mk",
   "Int.negSucc",
   "LinearOrder.max_def._autoParam",
   "Ordering",
   "AddZeroClass.toAddZero",
   "Max.mk",
   "AddMonoid.mk",
   "Nat",
   "instOfNat",
   "Zero.mk",
   "Iff",
   "HSMul.hSMul",
   "Add.mk",
   "instHMul",
   "autoParam",
   "Preorder.mk",
   "SubNegMonoid.sub_eq_add_neg._autoParam",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "MulOneClass.toMulOne",
   "Nat.cast",
   "AddMonoid.nsmul_zero._autoParam",
   "DecidableEq",
   "compareOfLessAndEq",
   "LinearOrder.min_def._autoParam",
   "PartialOrder.mk",
   "Module.mk",
   "MulOne.toMul",
   "Preorder.lt_iff_le_not_ge._autoParam",
   "instOfNatNat",
   "Ord.mk",
   "Monoid.toMulOneClass",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Zero.toOfNat0",
   "Eq",
   "AddSemigroup.mk",
   "instNatCastInt",
   "Not",
   "SMul.mk",
   "LinearOrder.compare_eq_compareOfLessAndEq._autoParam",
   "Distrib.toAdd",
   "DecidableLE",
   "ite",
   "DecidableLT",
   "instHAdd",
   "DistribMulAction.mk",
   "Semiring.toMonoidWithZero",
   "LinearOrder.mk",
   "OfNat.ofNat",
   "Real.semiring",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.mk",
   "Int",
   "LT.lt",
   "HAdd.hAdd",
   "Real.instZero",
   "AddCommMonoid.toAddCommSemigroup",
   "One.toOfNat1",
   "MulZeroClass.toZero",
   "Nat.succ",
   "LE.mk",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "instHSub",
   "Neg.mk",
   "MulAction.mk",
   "AddMonoid.nsmul_succ._autoParam"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.mk._flat_ctor",
  "constType":
  "{V : Type u_1} →\n  (add : V → V → V) →\n    (add_assoc : ∀ (a b c : V), a + b + c = a + (b + c)) →\n      (zero : V) →\n        (zero_add : ∀ (a : V), 0 + a = a) →\n          (add_zero : ∀ (a : V), a + 0 = a) →\n            (nsmul : ℕ → V → V) →\n              (nsmul_zero : autoParam (∀ (x : V), nsmul 0 x = 0) AddMonoid.nsmul_zero._autoParam) →\n                (nsmul_succ :\n                    autoParam (∀ (n : ℕ) (x : V), nsmul (n + 1) x = nsmul n x + x) AddMonoid.nsmul_succ._autoParam) →\n                  (neg : V → V) →\n                    (sub : V → V → V) →\n                      autoParam (∀ (a b : V), a - b = a + neg b) SubNegMonoid.sub_eq_add_neg._autoParam →\n                        (zsmul : ℤ → V → V) →\n                          autoParam (∀ (a : V), zsmul 0 a = 0) SubNegMonoid.zsmul_zero'._autoParam →\n                            autoParam (∀ (n : ℕ) (a : V), zsmul (↑n.succ) a = zsmul (↑n) a + a)\n                                SubNegMonoid.zsmul_succ'._autoParam →\n                              autoParam (∀ (n : ℕ) (a : V), zsmul (Int.negSucc n) a = neg (zsmul (↑n.succ) a))\n                                  SubNegMonoid.zsmul_neg'._autoParam →\n                                (∀ (a : V), neg a + a = 0) →\n                                  (add_comm : ∀ (a b : V), a + b = b + a) →\n                                    (smul : ℝ → V → V) →\n                                      (∀ (b : V), 1 • b = b) →\n                                        (∀ (x y : ℝ) (b : V), (x * y) • b = x • y • b) →\n                                          (∀ (a : ℝ), a • 0 = 0) →\n                                            (∀ (a : ℝ) (x y : V), a • (x + y) = a • x + a • y) →\n                                              (∀ (r s : ℝ) (x : V), (r + s) • x = r • x + s • x) →\n                                                (∀ (x : V), 0 • x = 0) →\n                                                  (le lt : V → V → Prop) →\n                                                    (∀ (a : V), le a a) →\n                                                      (∀ (a b c : V), le a b → le b c → le a c) →\n                                                        autoParam (∀ (a b : V), lt a b ↔ le a b ∧ ¬le b a)\n                                                            Preorder.lt_iff_le_not_ge._autoParam →\n                                                          (∀ (a b : V), le a b → le b a → a = b) →\n                                                            (min max : V → V → V) →\n                                                              (compare : V → V → Ordering) →\n                                                                (∀ (a b : V), le a b ∨ le b a) →\n                                                                  (toDecidableLE : DecidableLE V) →\n                                                                    (toDecidableEq : DecidableEq V) →\n                                                                      (toDecidableLT : DecidableLT V) →\n                                                                        autoParam\n                                                                            (∀ (a b : V),\n                                                                              min a b = if le a b then a else b)\n                                                                            LinearOrder.min_def._autoParam →\n                                                                          autoParam\n                                                                              (∀ (a b : V),\n                                                                                max a b = if le a b then b else a)\n                                                                              LinearOrder.max_def._autoParam →\n                                                                            autoParam\n                                                                                (∀ (a b : V),\n                                                                                  compare a b = compareOfLessAndEq a b)\n                                                                                LinearOrder.compare_eq_compareOfLessAndEq._autoParam →\n                                                                              (∀ ⦃a : ℝ⦄,\n                                                                                  0 < a →\n                                                                                    ∀ ⦃b₁ b₂ : V⦄,\n                                                                                      lt b₁ b₂ → lt (a • b₁) (a • b₂)) →\n                                                                                (∀ {y z : V} (x : V),\n                                                                                    le y z → le (x + y) (x + z)) →\n                                                                                  HarderNarasimhan.TotallyOrderedRealVectorSpace\n                                                                                    V",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "PartialOrder",
   "InfSet.sInf",
   "Preorder.toLE",
   "Eq",
   "Exists",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.InIntvl",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.μmin",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] →\n      [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → { p // p.1 < p.2 } → S",
  "constCategory": "Definition"},
 {"references":
  ["le_refl",
   "Preorder",
   "LE.le",
   "id",
   "Eq.mpr",
   "Preorder.toLE",
   "Eq",
   "congrArg"],
  "name": "le_of_eq",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] {a b : α}, a = b → a ≤ b",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_defprop2._simp_1_7",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["Set.instHasSubset", "HasSubset.Subset", "Set", "Iff", "Iff.rfl", "setOf"],
  "name": "Set.setOf_subset_setOf",
  "constType":
  "∀ {α : Type u} {p q : α → Prop}, {a | p a} ⊆ {a | q a} ↔ ∀ (a : α), p a → q a",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "CoeOut.mk",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "CoeOut",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "PartialOrder",
   "LE.le",
   "Nontrivial",
   "HarderNarasimhan.Interval",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.instCoeOutInterval",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] → {z : { p // p.1 < p.2 }} → CoeOut (HarderNarasimhan.Interval z) ℒ",
  "constCategory": "Definition"},
 {"references": ["AddCommMonoidWithOne", "AddMonoidWithOne"],
  "name": "AddCommMonoidWithOne.toAddMonoidWithOne",
  "constType":
  "{R : Type u_2} → [self : AddCommMonoidWithOne R] → AddMonoidWithOne R",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "Lean.Omega.Constraint",
   "Bool",
   "Lean.Omega.Coeffs",
   "Lean.Omega.Constraint.not_sat_of_isImpossible",
   "Lean.Omega.Constraint.isImpossible",
   "Eq",
   "Lean.Omega.Coeffs.dot",
   "Bool.true",
   "Lean.Omega.Constraint.sat'"],
  "name": "Lean.Omega.Constraint.not_sat'_of_isImpossible",
  "constType":
  "∀ {c : Omega.Constraint}, c.isImpossible = true → ∀ {x y : Omega.Coeffs}, ¬c.sat' x y = true",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "FunLike",
   "Exists",
   "SetLike.instMembership",
   "RingHomSurjective",
   "SemilinearMapClass",
   "Module",
   "Submodule.map",
   "Membership.mem",
   "And",
   "DFunLike.coe",
   "Submodule",
   "Submodule.mem_map",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.Submodule.mem_map_subtype_iff._simp_1_1",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} [inst_6 : RingHomSurjective σ₁₂] {F : Type u_9} [inst_7 : FunLike F M M₂]\n  [inst_8 : SemilinearMapClass F σ₁₂ M M₂] {f : F} {p : Submodule R M} {x : M₂},\n  (x ∈ Submodule.map f p) = ∃ y ∈ p, f y = x",
  "constCategory": "Theorem"},
 {"references": ["Nat", "SizeOf"],
  "name": "SizeOf.mk",
  "constType": "{α : Sort u} → (α → ℕ) → SizeOf α",
  "constCategory": "Other"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁.wsl₁",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "le_trans",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.WeakAscendingChainCondition.wacc",
   "HarderNarasimhan.impl.rmk4d10₀",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "HarderNarasimhan.WeakSlopeLike₂.wsl₂",
   "HarderNarasimhan.WeakSlopeLike₁",
   "OrderBot.toBot",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "HarderNarasimhan.impl.prop4d1₁",
   "Eq",
   "Eq.rec",
   "Preorder.toLE",
   "And.left",
   "HarderNarasimhan.impl.prop4d3₁",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "And.right",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.StrongDescendingChainCondition.wdcc",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "HarderNarasimhan.WeakSlopeLike₂",
   "eq_of_le_of_ge",
   "Subtype.mk",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop4d11₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.WeakAscendingChainCondition μ →\n    HarderNarasimhan.WeakSlopeLike₁ μ →\n      HarderNarasimhan.StrongDescendingChainCondition μ →\n        HarderNarasimhan.WeakSlopeLike₂ μ →\n          HarderNarasimhan.μBstar μ ≤ HarderNarasimhan.μAstar μ →\n            HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "LinearEquiv.injective",
   "associatedPrimes",
   "CommRing.toCommSemiring",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Module",
   "Set",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CommSemiring.toSemiring",
   "LinearEquiv.toLinearMap",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "AddCommGroup",
   "associatedPrimes.subset_of_injective",
   "CommRing",
   "LinearEquiv",
   "LinearEquiv.symm",
   "Semiring.toNonAssocSemiring",
   "Ideal",
   "Set.instCompleteAtomicBooleanAlgebra",
   "RingHom.id",
   "AddCommGroup.toAddCommMonoid",
   "RingHomInvPair.ids",
   "Eq",
   "le_antisymm"],
  "name": "LinearEquiv.AssociatedPrimes.eq",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  {M' : Type u_3} [inst_3 : AddCommGroup M'] [inst_4 : _root_.Module R M'] (l : M ≃ₗ[R] M'),\n  associatedPrimes R M = associatedPrimes R M'",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Or",
   "Iff",
   "And",
   "Classical.propDecidable",
   "Decidable.not_and_iff_not_or_not"],
  "name": "not_and_or",
  "constType": "∀ {a b : Prop}, ¬(a ∧ b) ↔ ¬a ∨ ¬b",
  "constCategory": "Theorem"},
 {"references":
  ["OrderDual",
   "Equiv.instEquivLike",
   "Iff",
   "EquivLike.toFunLike",
   "LE.le",
   "LE",
   "OrderDual.instLE",
   "Iff.rfl",
   "DFunLike.coe",
   "Equiv",
   "OrderDual.ofDual"],
  "name": "OrderDual.ofDual_le_ofDual",
  "constType":
  "∀ {α : Type u_1} [inst : LE α] {a b : αᵒᵈ}, OrderDual.ofDual a ≤ OrderDual.ofDual b ↔ b ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "LinearMap.instFunLike",
   "SemilinearMapClass",
   "Module",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "AddCommGroup",
   "LinearMap",
   "CommRing",
   "LinearMap.semilinearMapClass",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "AddCommGroup.toAddCommMonoid",
   "Semiring.toModule"],
  "name": "IsAssociatedPrime._proof_1",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] (M : Type u_1) [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M],\n  SemilinearMapClass (R →ₗ[R] M) (RingHom.id R) R M",
  "constCategory": "Theorem"},
 {"references": ["Set.singleton", "Set", "Singleton.mk", "Singleton"],
  "name": "Set.instSingletonSet",
  "constType": "{α : Type u} → Singleton α (Set α)",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "LinearEquiv.symm._proof_1",
   "Equiv.left_inv",
   "LinearEquiv.toEquiv",
   "LinearMap.inverse",
   "LinearMap.instFunLike",
   "Module",
   "LinearMap.mk",
   "AddHom.mk",
   "LinearEquiv",
   "DFunLike.coe",
   "Equiv",
   "LinearEquiv.invFun",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Equiv.right_inv",
   "Equiv.symm",
   "LinearEquiv.mk",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "LinearEquiv.left_inv",
   "LinearEquiv.toLinearMap",
   "LinearMap",
   "LinearEquiv.symm._proof_2",
   "AddCommMonoid.toAddCommSemigroup",
   "Equiv.invFun",
   "LinearEquiv.right_inv",
   "RingHomInvPair",
   "Semiring"],
  "name": "LinearEquiv.symm",
  "constType":
  "{R : Type u_1} →\n  {S : Type u_6} →\n    {M : Type u_7} →\n      {M₂ : Type u_9} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring S] →\n            [inst_2 : AddCommMonoid M] →\n              [inst_3 : AddCommMonoid M₂] →\n                {module_M : _root_.Module R M} →\n                  {module_S_M₂ : _root_.Module S M₂} →\n                    {σ : R →+* S} →\n                      {σ' : S →+* R} →\n                        {re₁ : RingHomInvPair σ σ'} → {re₂ : RingHomInvPair σ' σ} → (M ≃ₛₗ[σ] M₂) → M₂ ≃ₛₗ[σ'] M",
  "constCategory": "Definition"},
 {"references":
  ["SetLike.instMembership",
   "instHAdd",
   "Module",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "Submodule",
   "HAdd.hAdd",
   "AddCommMonoid",
   "AddSubmonoidClass.toAddMemClass",
   "AddCommMonoid.toAddCommSemigroup",
   "Submodule.setLike",
   "AddMemClass.add_mem",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "Submodule.addSubmonoidClass",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.add_mem",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] {module_M : _root_.Module R M}\n  (p : Submodule R M) {x y : M}, x ∈ p → y ∈ p → x + y ∈ p",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "Exists",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "StrictAnti",
   "Nat",
   "HarderNarasimhan.μA",
   "Lattice",
   "Nontrivial",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μA_DescendingChainCondition.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (a : ℒ) (f : ℕ → ℒ) (h₁ : ∀ (n : ℕ), f n > a),\n      StrictAnti f → ∃ N, ¬HarderNarasimhan.μA μ ⟨(a, f N), ⋯⟩ < HarderNarasimhan.μA μ ⟨(a, f (N + 1)), ⋯⟩) →\n    HarderNarasimhan.μA_DescendingChainCondition μ",
  "constCategory": "Other"},
 {"references":
  ["lt_add_of_pos_right",
   "PartialOrder.toPreorder",
   "AddZeroClass",
   "instHAdd",
   "AddLeftStrictMono",
   "Preorder.toLT",
   "zero_lt_one",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "ZeroLEOneClass",
   "HAdd.hAdd",
   "LT.lt",
   "NeZero",
   "One.toOfNat1",
   "PartialOrder",
   "One",
   "Preorder.toLE",
   "AddZero.toZero"],
  "name": "lt_add_one",
  "constType":
  "∀ {α : Type u_1} [inst : One α] [inst_1 : AddZeroClass α] [inst_2 : PartialOrder α] [ZeroLEOneClass α] [NeZero 1]\n  [AddLeftStrictMono α] (a : α), a < a + 1",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "IsTotal",
  "constType": "(α : Sort u_1) → (α → α → Prop) → Prop",
  "constCategory": "Other"},
 {"references": ["True", "Eq.symm", "trivial", "Eq.rec", "Eq"],
  "name": "of_eq_true",
  "constType": "∀ {p : Prop}, p = True → p",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "HarderNarasimhan.ConvexI.convex",
   "Subtype",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.ConvexI",
   "And.right",
   "le_trans",
   "Preorder.toLT",
   "And",
   "HarderNarasimhan.ConvexI.mk",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "And.intro",
   "HarderNarasimhan.InIntvl",
   "Lattice",
   "LE.le",
   "Preorder.toLE",
   "CompleteLattice",
   "And.left",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.Convex_of_Convex_large",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] {S : Type u_2} [inst_1 : CompleteLattice S] (I₁ I₂ : { p // p.1 < p.2 }),\n  (↑I₁).1 ≤ (↑I₂).1 ∧ (↑I₂).2 ≤ (↑I₁).2 →\n    ∀ (μ : { p // p.1 < p.2 } → S), HarderNarasimhan.ConvexI I₁ μ → HarderNarasimhan.ConvexI I₂ μ",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Or.inr",
   "PartialOrder.toPreorder",
   "LinearOrder",
   "Preorder.toLT",
   "lt_of_le_of_ne",
   "LT.lt",
   "LinearOrder.toPartialOrder",
   "LinearOrder.toDecidableEq",
   "Or",
   "Or.inl",
   "LE.le",
   "Preorder.toLE",
   "dite",
   "Eq",
   "lt_of_not_ge"],
  "name": "eq_or_gt_of_not_lt",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, ¬a < b → a = b ∨ b < a",
  "constCategory": "Theorem"},
 {"references": ["SemilatticeSup.sup", "SemilatticeSup", "Max", "Max.mk"],
  "name": "SemilatticeSup.toMax",
  "constType": "{α : Type u} → [SemilatticeSup α] → Max α",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "BoundedOrder",
   "Prod.snd",
   "Nat.instPreorder",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "Antitone",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.JordanHolderFiltration",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.JordanHolderFiltration.antitone",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.JordanHolderFiltration μ),\n  Antitone self.filtration",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "Top.top",
   "Preorder.toLE",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._proof_3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] [inst_1 : BoundedOrder ℒ] (z : { p // p.1 < p.2 }),\n  (↑z).2 < ⊤ → ((↑z).1, ⊤).1 < ((↑z).1, ⊤).2",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Preorder.toLT",
   "IsRightCancelAdd.addRightStrictMono_of_addRightMono",
   "IsOrderedRing.toIsOrderedAddMonoid",
   "AddMonoidWithOne.toAddMonoid",
   "Semiring.toNonAssocSemiring",
   "IsCancelAdd.toIsRightCancelAdd",
   "PartialOrder",
   "Zero.toOfNat0",
   "add_lt_of_neg_of_le",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Preorder.toLE",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "IsStrictOrderedRing.toIsOrderedCancelAddMonoid",
   "Distrib.toAdd",
   "IsStrictOrderedRing",
   "NonUnitalNonAssocSemiring.toDistrib",
   "IsStrictOrderedRing.toIsOrderedRing",
   "instHAdd",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "IsOrderedAddMonoid.toAddLeftMono",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "IsOrderedCancelAddMonoid.toIsCancelAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "AddCommMonoid.toAddCommSemigroup",
   "MulZeroClass.toZero",
   "LE.le",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "covariant_swap_add_of_covariant_add",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Mathlib.Tactic.Linarith.add_lt_of_neg_of_le",
  "constType":
  "∀ {α : Type u} [inst : Semiring α] [inst_1 : PartialOrder α] [IsStrictOrderedRing α] {a b c : α},\n  a < 0 → b ≤ c → a + b < c",
  "constCategory": "Theorem"},
 {"references":
  ["associatedPrimes",
   "CommRing.toCommSemiring",
   "Module",
   "Set",
   "CommSemiring.toSemiring",
   "Membership.mem",
   "AddCommGroup",
   "CommRing",
   "HarderNarasimhan.Coprimary.mk",
   "Set.instMembership",
   "HarderNarasimhan.Coprimary.rec",
   "IsNoetherianRing",
   "HarderNarasimhan.Coprimary",
   "Ideal",
   "AddCommGroup.toAddCommMonoid",
   "ExistsUnique"],
  "name": "HarderNarasimhan.Coprimary.casesOn",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : AddCommGroup M] →\n          [inst_3 : _root_.Module R M] →\n            {motive : HarderNarasimhan.Coprimary R M → Sort u} →\n              (t : HarderNarasimhan.Coprimary R M) →\n                ((coprimary : ∃! p, p ∈ associatedPrimes R M) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["Preorder",
   "PartialOrder.toPreorder",
   "Real",
   "inferInstance",
   "Real.partialOrder"],
  "name": "Real.instPreorder",
  "constType": "Preorder ℝ",
  "constCategory": "Definition"},
 {"references": ["Mul", "NonUnitalNonAssocSemiring"],
  "name": "NonUnitalNonAssocSemiring.toMul",
  "constType": "{α : Type u} → [self : NonUnitalNonAssocSemiring α] → Mul α",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "SetLike.instMembership",
   "RingHomSurjective",
   "SemilinearMapClass",
   "Module",
   "Submodule.map",
   "Membership.mem",
   "DFunLike.coe",
   "Submodule",
   "AddCommMonoid",
   "SetLike.coe",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "Set.mem_image_of_mem",
   "Semiring"],
  "name": "Submodule.mem_map_of_mem",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} [inst_6 : RingHomSurjective σ₁₂] {F : Type u_9} [inst_7 : FunLike F M M₂]\n  [inst_8 : SemilinearMapClass F σ₁₂ M M₂] {f : F} {p : Submodule R M} {r : M}, r ∈ p → f r ∈ Submodule.map f p",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Max.max",
   "le_sup_right",
   "PartialOrder.toPreorder",
   "LT.lt.trans_le",
   "SemilatticeSup.toMax",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "SemilatticeSup"],
  "name": "lt_sup_of_lt_right",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b c : α}, c < b → c < a ⊔ b",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "LT.lt",
   "instLTNat",
   "Nat",
   "instHAdd",
   "Nat.add_comm",
   "Eq",
   "Eq.rec",
   "Nat.add_lt_add_left"],
  "name": "Nat.add_lt_add_right",
  "constType": "∀ {n m : ℕ}, n < m → ∀ (k : ℕ), n + k < m + k",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Submodule.instBot",
   "Nontrivial",
   "HarderNarasimhan.CoprimaryFiltration.mk",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Submodule",
   "Nat.instPreorder",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "HarderNarasimhan.CoprimaryFiltration",
   "instOfNatNat",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Submodule.instTop",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "HarderNarasimhan.CoprimaryFiltration.mk.noConfusion",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.mk.inj",
  "constType":
  "∀ {R : Type u_1} {inst : CommRing R} {inst_1 : IsNoetherianRing R} {M : Type u_2} {inst_2 : Nontrivial M}\n  {inst_3 : AddCommGroup M} {inst_4 : _root_.Module R M} {inst_5 : Module.Finite R M} {filtration : ℕ → Submodule R M}\n  {monotone : Monotone filtration} {first_eq_bot : filtration 0 = ⊥} {fin_len : ∃ n, filtration n = ⊤}\n  {strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j}\n  {piecewise_coprimary :\n    ∀ n < Nat.find fin_len,\n      HarderNarasimhan.Coprimary R (↥(filtration (n + 1)) ⧸ (filtration n).submoduleOf (filtration (n + 1)))}\n  {strict_mono_associated_prime :\n    ∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len),\n      { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }}\n  {filtration_1 : ℕ → Submodule R M} {monotone_1 : Monotone filtration_1} {first_eq_bot_1 : filtration_1 0 = ⊥}\n  {fin_len_1 : ∃ n, filtration_1 n = ⊤}\n  {strict_mono_1 : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len_1 → filtration_1 i < filtration_1 j}\n  {piecewise_coprimary_1 :\n    ∀ n < Nat.find fin_len_1,\n      HarderNarasimhan.Coprimary R (↥(filtration_1 (n + 1)) ⧸ (filtration_1 n).submoduleOf (filtration_1 (n + 1)))}\n  {strict_mono_associated_prime_1 :\n    ∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len_1),\n      { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }},\n  { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot, fin_len := fin_len,\n        strict_mono := strict_mono, piecewise_coprimary := piecewise_coprimary,\n        strict_mono_associated_prime := strict_mono_associated_prime } =\n      { filtration := filtration_1, monotone := monotone_1, first_eq_bot := first_eq_bot_1, fin_len := fin_len_1,\n        strict_mono := strict_mono_1, piecewise_coprimary := piecewise_coprimary_1,\n        strict_mono_associated_prime := strict_mono_associated_prime_1 } →\n    filtration = filtration_1",
  "constCategory": "Theorem"},
 {"references":
  ["not_lt._simp_1",
   "AddCommGroup.toAddGroup",
   "CanonicallyOrderedAdd",
   "eq_true",
   "MonoidWithZero.toMulZeroOneClass",
   "SMulZeroClass.toSMul",
   "or_true",
   "instZeroNNReal",
   "NNReal.instLinearOrder",
   "NNReal.instLinearOrderedCommGroupWithZero",
   "NNReal.instCanonicallyOrderedAdd",
   "Eq.symm",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "pos_iff_ne_zero",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "GroupWithZero.toNoZeroSMulDivisors",
   "BoundedOrder",
   "AddRightCancelMonoid.toAddRightCancelSemigroup",
   "DivisionSemiring.toSemiring",
   "HarderNarasimhan.impl.μQuotient_helper",
   "Right.inv_pos",
   "MulZeroOneClass.toMulZeroClass",
   "eq_false",
   "gt_iff_lt._simp_1",
   "Top.top",
   "NNReal.instInv",
   "Eq.mpr",
   "covariant_swap_add_of_covariant_add",
   "RelEmbedding.toEmbedding",
   "OmegaCompletePartialOrder.toPartialOrder",
   "AddCommMonoid.toAddMonoid",
   "Prod.fst",
   "add_lt_add_iff_left",
   "Or.inl",
   "Eq",
   "MulActionWithZero.toSMulWithZero",
   "PosSMulMono.toPosSMulReflectLT",
   "Set",
   "HarderNarasimhan.impl.prop4d8._simp_1_2",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "AddZero.toAdd",
   "Iff.symm",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toAddCommGroup",
   "eq_sub_of_add_eq",
   "eq_self",
   "Module.toDistribMulAction",
   "and_self",
   "dite_cond_eq_true",
   "Ne",
   "HarderNarasimhan.impl.prop4d8._simp_1_8",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instHSub",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toPosSMulStrictMono",
   "add_smul",
   "OrderTheory.DedekindMacNeilleCompletion",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Subtype.instLE",
   "Preorder.toLT",
   "GT.gt",
   "RelEmbedding.instFunLike",
   "Semiring.toNonAssocSemiring",
   "Or",
   "PartialOrder",
   "DistribMulAction.toMulAction",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "AddGroup.toSubNegMonoid",
   "Semifield.toDivisionSemiring",
   "Eq.rec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "DistribSMul.toSMulZeroClass",
   "Subtype.instLT",
   "Real",
   "And.right",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "AddZeroClass.toAddZero",
   "Exists.casesOn",
   "zero_add",
   "Real.instMonoid",
   "MulPosReflectLE.toMulPosReflectLT",
   "AddZero.toZero",
   "DivisionMonoid.toDivInvOneMonoid",
   "GroupWithZero.toDivisionMonoid",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "instDecidableAnd",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "HarderNarasimhan.impl.prop4d8._simp_1_9",
   "Eq.mp",
   "instSemiringNNReal",
   "DFunLike.coe",
   "smul_right_injective",
   "not_top_lt",
   "instDistribLatticeOfLinearOrder",
   "not_or",
   "GroupWithZero.toMonoidWithZero",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "dite_cond_eq_false",
   "smul_lt_smul_iff_of_pos_left",
   "NNReal.instPosSMulStrictMono",
   "Not",
   "not_and_or",
   "HarderNarasimhan.impl.prop4d8._simp_1_6",
   "Inv.inv",
   "le_top",
   "instHAdd",
   "NNReal.instSemifield",
   "not_lt_zero'",
   "NNReal.instDistribMulActionOfReal",
   "Real.semiring",
   "LT.lt",
   "lt_add_of_pos_left",
   "ne_of_lt",
   "of_eq_true",
   "False",
   "Subtype.mk",
   "OrderTop.toTop",
   "HarderNarasimhan.impl.prop4d8._simp_1_7",
   "HarderNarasimhan.SlopeLike",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Eq.trans",
   "AddCancelMonoid.toAddRightCancelMonoid",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "add_eq_zero",
   "False.elim",
   "HarderNarasimhan.impl.prop4d8._simp_1_10",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toLinearOrder",
   "SubNegMonoid.toSub",
   "sub_lt_iff_lt_add",
   "le_iff_eq_or_lt",
   "lt_add_of_pos_right",
   "lt_sub_iff_add_lt",
   "AddGroup.toAddCancelMonoid",
   "ClosureOperator.IsClosed",
   "NNReal",
   "OrderTheory.coe'",
   "Prod.snd",
   "DivisionSemiring.toGroupWithZero",
   "Prod",
   "LinearOrder.toDecidableLT",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Eq.refl",
   "AddCommGroup.toAddCommMonoid",
   "LinearOrderedCommGroupWithZero.toMulPosReflectLE",
   "AddMonoid.toAddZeroClass",
   "Or.inr",
   "Ne.symm",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "le_one_iff_eq_one._simp_4",
   "contravariant_lt_of_covariant_le",
   "congr",
   "AddCommMagma.toAdd",
   "Preorder.toLE",
   "propext",
   "lt_of_not_ge",
   "AddRightCancelSemigroup.toIsRightCancelAdd",
   "Distrib.toAdd",
   "HarderNarasimhan.instAddLeftMono_harderNarasimhan",
   "HarderNarasimhan.impl.prop4d6",
   "OrderEmbedding",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "LinearOrder.toDecidableEq",
   "AddCommGroup.toDivisionAddCommMonoid",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "eq_zero_or_pos",
   "dite",
   "instPartialOrderNNReal",
   "And.casesOn",
   "lt_trans",
   "Lattice.toSemilatticeSup",
   "AddCommGroup.toAddCancelCommMonoid",
   "Prod.mk",
   "Iff.mp",
   "Subtype.preorder",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "IsRightCancelAdd.addRightStrictMono_of_addRightMono",
   "AddMonoidWithOne.toAddMonoid",
   "And.intro",
   "HarderNarasimhan.impl.not_top_of_Nontrivial_TotallyOrderedRealVectorSpace",
   "NNReal.instModuleOfReal",
   "HSub.hSub",
   "lt_self_iff_false._simp_1",
   "Unique.instSubsingleton",
   "CanonicallyOrderedCommMonoid.toUniqueAddUnits",
   "InvOneClass.toInv",
   "NonUnitalNonAssocSemiring.toDistrib",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "LinearOrderedCommGroupWithZero.toLinearOrderedCommMonoidWithZero",
   "And",
   "DistribMulAction.toDistribSMul",
   "add_zero",
   "Iff.mpr",
   "Nontrivial",
   "HSMul.hSMul",
   "id",
   "NegZeroClass.toZero",
   "CompleteDistribLattice.toCoframe",
   "GeneralizedCoheytingAlgebra.toLattice",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "Function.Embedding.toFun",
   "Subtype.partialOrder",
   "SubNegZeroMonoid.toSubNegMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "PosSMulStrictMono.toPosSMulMono",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "HarderNarasimhan.impl.prop4d8._simp_1_3",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "RelEmbedding.instEmbeddingLike",
   "RelEmbedding",
   "Set.instLE",
   "AddUnits",
   "Lattice.toSemilatticeInf",
   "AddZeroClass",
   "True",
   "Semiring.toMonoidWithZero",
   "Module.toMulActionWithZero",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "HarderNarasimhan.μQuotient",
   "Or.casesOn",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toModule",
   "DivInvOneMonoid.toInvOneClass",
   "DistribLattice.toLattice",
   "AddCommMonoid.toAddCommSemigroup",
   "SubNegMonoid.toAddMonoid",
   "LE.le"],
  "name": "HarderNarasimhan.impl.prop4d8",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {V : Type u_2}\n  [inst_3 : HarderNarasimhan.TotallyOrderedRealVectorSpace V] [Nontrivial V] (r : { p // p.1 < p.2 } → NNReal)\n  (d : { p // p.1 < p.2 } → V),\n  (∀ (x y z : ℒ) (h : x < y ∧ y < z),\n      d ⟨(x, z), ⋯⟩ = d ⟨(x, y), ⋯⟩ + d ⟨(y, z), ⋯⟩ ∧ r ⟨(x, z), ⋯⟩ = r ⟨(x, y), ⋯⟩ + r ⟨(y, z), ⋯⟩) →\n    (∀ (x y : ℒ) (h : x < y), r ⟨(x, y), h⟩ = 0 → d ⟨(x, y), h⟩ > 0) →\n      HarderNarasimhan.SlopeLike (HarderNarasimhan.μQuotient r d)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "PartialOrder",
   "InfSet.sInf",
   "Preorder.toLE",
   "Eq",
   "Exists",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.μA.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.μA μ I =\n    sInf {x | ∃ a, ∃ (ha : HarderNarasimhan.InIntvl I a ∧ a ≠ (↑I).2), HarderNarasimhan.μmax μ ⟨(a, (↑I).2), ⋯⟩ = x}",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Membership.mem",
   "Preorder.toLT",
   "Submodule.subtype",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "Submodule.submoduleOf._proof_1",
   "Eq.symm",
   "Eq.rec",
   "SetLike.instMembership",
   "Submodule.addCommGroup",
   "LinearMap",
   "Ring.toSemiring",
   "not_lt_of_ge",
   "Iff.mpr",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Top.top",
   "lt_top_iff_ne_top",
   "Submodule.submoduleOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.hasQuotient",
   "Subtype",
   "HasQuotient.Quotient",
   "LinearMap.instFunLike",
   "Module",
   "Eq.mp",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Submodule.mem_top",
   "HarderNarasimhan.impl.quot_ntl._simp_1_1",
   "Submodule",
   "Preorder.toLE",
   "Eq",
   "Submodule.instOrderTop",
   "CommRing.toCommSemiring",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "CommRing",
   "LT.lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "Submodule.Quotient.nontrivial_of_lt_top",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Submodule.completeLattice",
   "Ne",
   "Subtype.mk",
   "Submodule.addCommMonoid",
   "OrderTop.toTop",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.quot_ntl",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] {N₁ N₂ : HarderNarasimhan.ℒ R M},\n  N₁ < N₂ → Nontrivial (↥N₂ ⧸ Submodule.submoduleOf N₁ N₂)",
  "constCategory": "Theorem"},
 {"references":
  ["SemilatticeSup.sup_le",
   "Max.max",
   "PartialOrder.toPreorder",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup.toPartialOrder",
   "SemilatticeSup",
   "Preorder.toLE"],
  "name": "sup_le",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b c : α}, a ≤ c → b ≤ c → a ⊔ b ≤ c",
  "constCategory": "Theorem"},
 {"references": ["Nat", "Nat.mod", "Mod", "Mod.mk"],
  "name": "Nat.instMod",
  "constType": "Mod ℕ",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Real.instPreorder",
   "PartialOrder.toPreorder",
   "Module",
   "AddCommGroup.toAddGroup",
   "MulAction.toSMul",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.noConfusion",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "Preorder.toLE",
   "AddSemigroup.toAdd",
   "PosSMulStrictMono",
   "Real",
   "AddCommGroup.add_comm",
   "instHAdd",
   "LinearOrder",
   "AddCommMonoid.mk",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "Real.semiring",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.mk",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "Real.instZero",
   "AddMonoid.toAddSemigroup",
   "LE.le",
   "HEq"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.mk.noConfusion",
  "constType":
  "{V : Type u_1} →\n  (P : Sort u) →\n    [toAddCommGroup : AddCommGroup V] →\n      [toModule : _root_.Module ℝ V] →\n        [toLinearOrder : LinearOrder V] →\n          [toPosSMulStrictMono : PosSMulStrictMono ℝ V] →\n            (elim_AddLeftMono : ∀ {y z : V} (x : V), y ≤ z → x + y ≤ x + z) →\n              (toAddCommGroup' : AddCommGroup V) →\n                (toModule' : _root_.Module ℝ V) →\n                  (toLinearOrder' : LinearOrder V) →\n                    (toPosSMulStrictMono' : PosSMulStrictMono ℝ V) →\n                      (elim_AddLeftMono' : ∀ {y z : V} (x : V), y ≤ z → x + y ≤ x + z) →\n                        { toAddCommGroup := toAddCommGroup, toModule := toModule, toLinearOrder := toLinearOrder,\n                              toPosSMulStrictMono := toPosSMulStrictMono, elim_AddLeftMono := elim_AddLeftMono } =\n                            { toAddCommGroup := toAddCommGroup', toModule := toModule', toLinearOrder := toLinearOrder',\n                              toPosSMulStrictMono := toPosSMulStrictMono', elim_AddLeftMono := elim_AddLeftMono' } →\n                          (toAddCommGroup = toAddCommGroup' →\n                              toModule ≍ toModule' → toLinearOrder = toLinearOrder' → P) →\n                            P",
  "constCategory": "Definition"},
 {"references": ["LE.le", "And", "LE"],
  "name": "Minimal",
  "constType": "{α : Type u_1} → [LE α] → (α → Prop) → α → Prop",
  "constCategory": "Definition"},
 {"references": ["True", "Iff", "eq_true", "Iff.rfl", "Eq"],
  "name": "iff_self",
  "constType": "∀ (p : Prop), (p ↔ p) = True",
  "constCategory": "Theorem"},
 {"references": ["and_imp", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₁._simp_1_11",
  "constType": "∀ {a b c : Prop}, (a ∧ b → c) = (a → b → c)",
  "constCategory": "Theorem"},
 {"references":
  ["Set.instHasSubset",
   "HasSubset.Subset",
   "Set",
   "Set.setOf_subset_setOf",
   "Eq",
   "propext",
   "setOf"],
  "name": "HarderNarasimhan.impl.prop2d6₀._simp_1_1",
  "constType":
  "∀ {α : Type u} {p q : α → Prop}, ({a | p a} ⊆ {a | q a}) = ∀ (a : α), p a → q a",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "instAddNat",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "Membership.mem.out",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_8",
   "Subtype.val",
   "False.elim",
   "Or",
   "PartialOrder",
   "forall_congr",
   "funext",
   "Eq.rec",
   "Eq.ndrec",
   "Exists",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_1",
   "Exists.choose_spec",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_2",
   "Or.resolve_left",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Exists.casesOn",
   "Prod",
   "Nat",
   "Iff.of_eq",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "Classical.byContradiction",
   "Top.top",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_9",
   "Exists.choose.congr_simp",
   "StrictMono",
   "setOf",
   "HarderNarasimhan.impl.prop4d1₁_seq._simp_4",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "HarderNarasimhan.impl.prop4d1₁_seq._simp_5",
   "Eq.mp",
   "le_trans",
   "OmegaCompletePartialOrder.toPartialOrder",
   "congrArg",
   "Nat.instPreorder",
   "Prod.fst",
   "not_lt_top_iff",
   "Subtype.prop",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "not_true_eq_false",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Not",
   "Set.Nonempty",
   "True",
   "instHAdd",
   "Set",
   "HarderNarasimhan.impl.prop4d1₁_seq",
   "Exists.choose",
   "OfNat.ofNat",
   "exists_prop_congr",
   "HAdd.hAdd",
   "LT.lt",
   "HarderNarasimhan.impl.prop4d1₁_seq._simp_3",
   "LE.le",
   "False",
   "Subtype.mk",
   "HarderNarasimhan.impl.prop4d1₁_seq._simp_6",
   "OrderTop.toTop",
   "CompleteLattice",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_3"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._proof_10",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  (h₁ : ∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩)\n  (h₂ :\n    ∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤), μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩)\n  (h₃ : {YA | ∃ (h : YA < ⊤), ∀ xA < ⊤, ∃ xB, ∃ (hAB : xA < xB), ¬μ ⟨(xA, xB), hAB⟩ ≤ μ ⟨(YA, ⊤), h⟩}.Nonempty) (k : ℕ),\n  ⋯.choose ∈ {YA | ∃ (h : YA < ⊤), ∀ xA < ⊤, ∃ xB, ∃ (hAB : xA < xB), ¬μ ⟨(xA, xB), hAB⟩ ≤ μ ⟨(YA, ⊤), h⟩}",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "Eq.mp",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "HarderNarasimhan.impl.prop2d6₁I",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "SemilatticeSup.toPartialOrder",
   "congrArg",
   "Prod.fst",
   "And.intro",
   "inf_top_eq",
   "BoundedOrder.toOrderTop",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice.toConditionallyCompleteLattice",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "CompleteLattice.toLattice",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Min.min",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.μA",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "ConditionallyCompleteLattice.toLattice",
   "Subtype.mk",
   "CompleteLattice.toBoundedOrder",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        ∀ (z : ℒ),\n          HarderNarasimhan.InIntvl I z →\n            ∀ (h : x < z),\n              HarderNarasimhan.μA μ ⟨(x, z), h⟩ = ⊤ →\n                ∀ (a : ℒ),\n                  HarderNarasimhan.InIntvl I a →\n                    ∀ (hax : a < x), HarderNarasimhan.μA μ ⟨(a, x), hax⟩ ≤ HarderNarasimhan.μA μ ⟨(a, z), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["not_le",
   "LT.lt",
   "Not",
   "LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Eq",
   "Preorder.toLE",
   "propext"],
  "name": "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_3",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, (¬a ≤ b) = (b < a)",
  "constCategory": "Theorem"},
 {"references":
  ["le_refl", "Preorder", "True", "LE.le", "eq_true", "Eq", "Preorder.toLE"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_18",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), (a ≤ a) = True",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "SizeOf",
  "constType": "Sort u → Sort (max 1 u)",
  "constCategory": "Other"},
 {"references": ["LE", "BoundedOrder", "OrderBot"],
  "name": "BoundedOrder.toOrderBot",
  "constType":
  "{α : Type u} → {inst : LE α} → [self : BoundedOrder α] → OrderBot α",
  "constCategory": "Definition"},
 {"references":
  ["Or.inr",
   "Or",
   "False",
   "Eq",
   "_private.Init.SimpLemmas.0.false_or.match_1_1",
   "propext",
   "Iff.intro"],
  "name": "false_or",
  "constType": "∀ (p : Prop), (False ∨ p) = p",
  "constCategory": "Theorem"},
 {"references": ["One", "AddMonoidWithOne"],
  "name": "AddMonoidWithOne.toOne",
  "constType": "{R : Type u_2} → [self : AddMonoidWithOne R] → One R",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "HarderNarasimhan.FiniteTotalPayoff.mk",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "CompleteLattice.toLattice",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toBoundedOrder",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.FiniteTotalPayoff.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.FiniteTotalPayoff μ → Sort u} →\n                ((fin_tot_payoff : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤) → motive ⋯) →\n                  (t : HarderNarasimhan.FiniteTotalPayoff μ) → motive t",
  "constCategory": "Other"},
 {"references":
  ["Nat.lt_of_lt_of_le",
   "instLTNat",
   "Nat.sub",
   "OfNat.ofNat",
   "Nat.pred_lt_of_lt",
   "LT.lt",
   "Nat",
   "instSubNat",
   "instOfNatNat",
   "LE.le",
   "HSub.hSub",
   "instHSub",
   "instLENat"],
  "name": "Nat.sub_one_lt_of_le",
  "constType": "∀ {a b : ℕ}, 0 < a → a ≤ b → a - 1 < b",
  "constCategory": "Theorem"},
 {"references": ["Top"],
  "name": "Top.mk",
  "constType": "{α : Type u_1} → α → Top α",
  "constCategory": "Other"},
 {"references":
  ["RingHom",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Module",
   "inferInstance",
   "LinearEquiv.instEquivLike",
   "LinearEquiv",
   "RingHomInvPair",
   "EquivLike",
   "Semiring"],
  "name": "DFinsupp.instEquivLikeLinearEquiv",
  "constType":
  "{R : Type u_7} →\n  {S : Type u_8} →\n    [inst : Semiring R] →\n      [inst_1 : Semiring S] →\n        (σ : R →+* S) →\n          {σ' : S →+* R} →\n            [inst_2 : RingHomInvPair σ σ'] →\n              [inst_3 : RingHomInvPair σ' σ] →\n                (M : Type u_9) →\n                  (M₂ : Type u_10) →\n                    [inst_4 : AddCommMonoid M] →\n                      [inst_5 : AddCommMonoid M₂] →\n                        [inst_6 : _root_.Module R M] → [inst_7 : _root_.Module S M₂] → EquivLike (M ≃ₛₗ[σ] M₂) M M₂",
  "constCategory": "Definition"},
 {"references": ["Not", "And", "id"],
  "name":
  "HarderNarasimhan.TotallyOrderedRealVectorSpace.lt._inherited_default",
  "constType": "{V : Type u_1} → (V → V → Prop) → V → V → Prop",
  "constCategory": "Definition"},
 {"references":
  ["Finset.univ",
   "Set",
   "Membership.mem",
   "Finset.toSet",
   "Fintype",
   "Finset.card_le_card_of_injOn",
   "Set.instMembership",
   "Fintype.card",
   "Nat",
   "LE.le",
   "Finset.mem_univ",
   "Eq",
   "instLENat",
   "Function.Injective"],
  "name": "Fintype.card_le_of_injective",
  "constType":
  "∀ {α : Type u_1} {β : Type u_2} [inst : Fintype α] [inst_1 : Fintype β] (f : α → β),\n  Function.Injective f → Fintype.card α ≤ Fintype.card β",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "GaloisConnection.lowerAdjoint",
   "OrderDual",
   "OrderDual.toDual",
   "Equiv.instEquivLike",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "LowerAdjoint.toFun",
   "Membership.mem",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "DFunLike.coe",
   "Equiv",
   "congrArg",
   "OrderDual.ofDual",
   "Iff.intro",
   "PartialOrder",
   "OrderTheory.DedekindMacNeilleConnection",
   "OrderTheory.coe'._simp_1",
   "forall_congr",
   "funext",
   "EquivLike.toFunLike",
   "Eq",
   "Preorder.toLE",
   "OrderTheory.coe'._simp_2",
   "True",
   "Set",
   "Set.Iic",
   "Set.instMembership",
   "implies_true",
   "OrderDual.instPreorder",
   "of_eq_true",
   "Set.instCompleteAtomicBooleanAlgebra",
   "upperBounds",
   "Eq.refl",
   "LE.le",
   "lowerBounds",
   "Set.ext",
   "setOf"],
  "name": "OrderTheory.coe'._proof_1",
  "constType":
  "∀ {α : Type u_1} [inst : PartialOrder α] (x : α),\n  lowerBounds (OrderDual.ofDual (⋯.lowerAdjoint.toFun (Set.Iic x))) = Set.Iic x",
  "constCategory": "Theorem"},
 {"references":
  ["CompletelyDistribLattice.mk",
   "CompleteLinearOrder.himp_bot",
   "CompleteLinearOrder.top_sdiff",
   "CompleteLinearOrder.toCompletelyDistribLattice._proof_1",
   "CompleteLinearOrder.toHNot",
   "CompleteLinearOrder.toHImp",
   "CompletelyDistribLattice",
   "CompleteLinearOrder.sdiff_le_iff",
   "CompleteLinearOrder.toCompleteLattice",
   "CompleteLinearOrder.toHasCompl",
   "CompleteLinearOrder",
   "CompleteLinearOrder.le_himp_iff",
   "CompleteLinearOrder.toSDiff"],
  "name": "CompleteLinearOrder.toCompletelyDistribLattice",
  "constType":
  "{α : Type u} → [CompleteLinearOrder α] → CompletelyDistribLattice α",
  "constCategory": "Definition"},
 {"references":
  ["not_le",
   "LT.lt",
   "Not",
   "LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Eq",
   "Preorder.toLE",
   "propext"],
  "name": "not_le._simp_1",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, (¬a ≤ b) = (b < a)",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.topEquiv._proof_4",
   "Subtype",
   "Module",
   "Submodule.module",
   "LinearMap.mk",
   "Membership.mem",
   "AddHom.mk",
   "LinearEquiv",
   "Subtype.val",
   "Submodule.mem_top",
   "Submodule",
   "Submodule.topEquiv._proof_1",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "LinearEquiv.mk",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "SetLike.instMembership",
   "Submodule.instTop",
   "Submodule.topEquiv._proof_2",
   "Submodule.topEquiv._proof_5",
   "AddCommMonoid.toAddCommSemigroup",
   "Submodule.setLike",
   "Top.top",
   "RingHomInvPair.ids",
   "Subtype.mk",
   "Submodule.addCommMonoid",
   "Semiring"],
  "name": "Submodule.topEquiv",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_3} → [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → ↥⊤ ≃ₗ[R] M",
  "constCategory": "Definition"},
 {"references":
  ["NatCast.mk",
   "Nat.instAddMonoidWithOne._proof_2",
   "Nat.instAddMonoid",
   "Nat",
   "Nat.instOne",
   "AddMonoidWithOne",
   "AddMonoidWithOne.mk",
   "Nat.instAddMonoidWithOne._proof_1"],
  "name": "Nat.instAddMonoidWithOne",
  "constType": "AddMonoidWithOne ℕ",
  "constCategory": "Definition"},
 {"references": ["le_refl", "Preorder", "LE.le", "Preorder.toLE"],
  "name": "le_rfl",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] {a : α}, a ≤ a",
  "constCategory": "Theorem"},
 {"references": ["Prod", "Prod.mk", "Prod.rec"],
  "name": "Prod.casesOn",
  "constType":
  "{α : Type u} →\n  {β : Type v} → {motive : α × β → Sort u_1} → (t : α × β) → ((fst : α) → (snd : β) → motive (fst, snd)) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "Antitone",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.JordanHolderFiltration.casesOn",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "HarderNarasimhan.JordanHolderFiltration.noConfusionType",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.noConfusion",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {P : Sort u} →\n                {x1 x2 : HarderNarasimhan.JordanHolderFiltration μ} →\n                  x1 = x2 → HarderNarasimhan.JordanHolderFiltration.noConfusionType P x1 x2",
  "constCategory": "Definition"},
 {"references":
  ["Not", "le_rfl", "not_le_of_gt", "LT.lt", "Preorder", "Preorder.toLT"],
  "name": "lt_irrefl",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), ¬a < a",
  "constCategory": "Theorem"},
 {"references": ["Int.add", "Add", "Add.mk", "Int"],
  "name": "Int.instAdd",
  "constType": "Add ℤ",
  "constCategory": "Definition"},
 {"references": ["InfSet", "Set"],
  "name": "InfSet.sInf",
  "constType": "{α : Type u_1} → [self : InfSet α] → Set α → α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "instOfNatNat",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.impl.prop3d4₀func",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "LT.lt",
   "Prod",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Lattice",
   "Nontrivial",
   "HarderNarasimhan.impl.prop3d4₀func._proof_1",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [h : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.impl.prop3d4₀func μ I 0 = ⟨(↑I).2, ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["AddCommMagma", "Add"],
  "name": "AddCommMagma.toAdd",
  "constType": "{G : Type u} → [self : AddCommMagma G] → Add G",
  "constCategory": "Definition"},
 {"references":
  ["le_top",
   "True",
   "LE.le",
   "Top.top",
   "LE",
   "eq_true",
   "OrderTop",
   "Eq",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.theorem3d10._simp_1_7",
  "constType":
  "∀ {α : Type u} [inst : LE α] [inst_1 : OrderTop α] {a : α}, (a ≤ ⊤) = True",
  "constCategory": "Theorem"},
 {"references": ["Preorder", "LE"],
  "name": "Preorder.toLE",
  "constType": "{α : Type u_2} → [self : Preorder α] → LE α",
  "constCategory": "Definition"},
 {"references": ["LE.le", "LE", "Bot", "Bot.bot", "OrderBot"],
  "name": "OrderBot.mk",
  "constType":
  "{α : Type u} → [inst : LE α] → [toBot : Bot α] → (∀ (a : α), ⊥ ≤ a) → OrderBot α",
  "constCategory": "Other"},
 {"references":
  ["Not",
   "OrderDual",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "SemilatticeInf",
   "LT.lt",
   "left_lt_sup",
   "OrderDual.instSemilatticeSup",
   "Min.min",
   "Iff",
   "LE.le",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "inf_lt_left",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeInf α] {a b : α}, a ⊓ b < a ↔ ¬a ≤ b",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Not",
   "PartialOrder.toPreorder",
   "eq_of_le_of_not_lt",
   "PartialOrder",
   "LE.le",
   "Eq.symm",
   "Preorder.toLT",
   "Eq",
   "Preorder.toLE"],
  "name": "eq_of_le_of_not_lt'",
  "constType":
  "∀ {α : Type u_2} [inst : PartialOrder α] {a b : α}, a ≤ b → ¬a < b → b = a",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "And.intro",
   "Or",
   "PartialOrder",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "Eq.ndrec",
   "Eq.rec",
   "And.left",
   "Exists",
   "And.right",
   "Or.resolve_left",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "Set.instMembership",
   "Exists.casesOn",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Iff.mpr",
   "HarderNarasimhan.μmax._proof_1",
   "Nontrivial",
   "id",
   "Top.top",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "lt_top_iff_ne_top",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Ne.symm",
   "Subtype",
   "Classical.not_not",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteLattice.toCompleteSemilatticeSup",
   "congrArg",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.impl.rmk4d10₀",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Not",
   "bot_lt_iff_ne_bot",
   "True",
   "Set",
   "LT.lt",
   "HarderNarasimhan.μA._proof_1",
   "of_eq_true",
   "LE.le",
   "le_sSup",
   "le_sInf",
   "Ne",
   "eq_of_le_of_ge",
   "Subtype.mk",
   "dite",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "HarderNarasimhan.impl.prop4d12._simp_1_1",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop4d12",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (∀ (x : ℒ) (hx : x ≠ ⊥ ∧ x ≠ ⊤),\n      ¬μ ⟨(⊥, x), ⋯⟩ ≤ μ HarderNarasimhan.TotIntvl ∨ μ HarderNarasimhan.TotIntvl ≤ μ ⟨(x, ⊤), ⋯⟩) →\n    HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl →\n      HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["MulAction.toSMul",
   "MulAction.mul_smul",
   "MulAction",
   "IsScalarTower",
   "Monoid",
   "Monoid.toMulAction",
   "IsScalarTower.mk"],
  "name": "IsScalarTower.left",
  "constType":
  "∀ (M : Type u_1) {α : Type u_5} [inst : Monoid M] [inst_1 : MulAction M α], IsScalarTower M M α",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.instTop._proof_1",
   "AddSubmonoid.instTop",
   "Set",
   "Module",
   "Top",
   "Membership.mem",
   "AddSubmonoid.mk",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "Set.instMembership",
   "Submodule",
   "Submodule.instTop._proof_2",
   "Set.univ",
   "AddSubsemigroup.mk",
   "AddCommMonoid",
   "AddSubmonoid",
   "Submodule.mk",
   "Top.top",
   "Top.mk",
   "trivial",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.instTop",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_3} → [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → Top (Submodule R M)",
  "constCategory": "Definition"},
 {"references":
  ["SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Min.min",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "inf_le_left",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.instLatticeInterval._proof_6",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (x x_1 : HarderNarasimhan.Interval z), ↑x ⊓ ↑x_1 ≤ ↑x",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype", "Subtype.instLE", "Iff", "LE.le", "LE", "Iff.rfl", "Subtype.val"],
  "name": "Subtype.coe_le_coe",
  "constType":
  "∀ {α : Type u_2} [inst : LE α] {p : α → Prop} {x y : Subtype p}, ↑x ≤ ↑y ↔ x ≤ y",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Lattice.toSemilatticeInf",
   "PartialOrder.toPreorder",
   "Subtype",
   "NNReal",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.μQuotient",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "instDistribLatticeOfLinearOrder",
   "DistribLattice.toLattice",
   "Eq.refl",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toLinearOrder",
   "PartialOrder",
   "Nontrivial",
   "Eq.rec",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "HarderNarasimhan.μQuotient.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {V : Type u_2}\n  [inst_3 : HarderNarasimhan.TotallyOrderedRealVectorSpace V] (r r_1 : { p // p.1 < p.2 } → NNReal),\n  r = r_1 →\n    ∀ (d d_1 : { p // p.1 < p.2 } → V),\n      d = d_1 →\n        ∀ (a a_1 : { p // p.1 < p.2 }),\n          a = a_1 → HarderNarasimhan.μQuotient r d a = HarderNarasimhan.μQuotient r_1 d_1 a_1",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "false_and",
   "Prod.mk",
   "Iff.mp",
   "Preorder.toLT",
   "or_assoc",
   "GT.gt",
   "And.intro",
   "Or",
   "PartialOrder",
   "Eq.symm",
   "lt_self_iff_false._simp_1",
   "gt_trans",
   "Eq.rec",
   "And.left",
   "And.right",
   "And",
   "Or.resolve_left",
   "BoundedOrder",
   "Prod.snd",
   "true_and",
   "Prod",
   "false_or",
   "Nontrivial",
   "gt_iff_lt._simp_1",
   "id",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Or.resolve_right",
   "and_true",
   "Prod.fst",
   "congrArg",
   "HarderNarasimhan.seesaw",
   "congr",
   "Eq",
   "Preorder.toLE",
   "propext",
   "not_lt_of_gt",
   "True",
   "LT.lt",
   "eq_self",
   "and_self",
   "of_eq_true",
   "and_false",
   "False",
   "Subtype.mk",
   "lt_self_iff_false",
   "CompleteLattice"],
  "name": "HarderNarasimhan.seesaw'",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.SlopeLike μ →\n    ∀ (x y z : ℒ) (h : x < y ∧ y < z),\n      ((μ ⟨(x, y), ⋯⟩ < μ ⟨(x, z), ⋯⟩ → μ ⟨(x, y), ⋯⟩ < μ ⟨(y, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ < μ ⟨(y, z), ⋯⟩) ∧\n          (μ ⟨(x, y), ⋯⟩ < μ ⟨(y, z), ⋯⟩ → μ ⟨(x, y), ⋯⟩ < μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ < μ ⟨(y, z), ⋯⟩) ∧\n            (μ ⟨(x, z), ⋯⟩ < μ ⟨(y, z), ⋯⟩ → μ ⟨(x, y), ⋯⟩ < μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, y), ⋯⟩ < μ ⟨(y, z), ⋯⟩)) ∧\n        ((μ ⟨(x, y), ⋯⟩ > μ ⟨(x, z), ⋯⟩ → μ ⟨(x, y), ⋯⟩ > μ ⟨(y, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ > μ ⟨(y, z), ⋯⟩) ∧\n            (μ ⟨(x, y), ⋯⟩ > μ ⟨(y, z), ⋯⟩ → μ ⟨(x, y), ⋯⟩ > μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ > μ ⟨(y, z), ⋯⟩) ∧\n              (μ ⟨(x, z), ⋯⟩ > μ ⟨(y, z), ⋯⟩ → μ ⟨(x, y), ⋯⟩ > μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, y), ⋯⟩ > μ ⟨(y, z), ⋯⟩)) ∧\n          (μ ⟨(x, y), ⋯⟩ = μ ⟨(x, z), ⋯⟩ → μ ⟨(x, y), ⋯⟩ = μ ⟨(y, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ = μ ⟨(y, z), ⋯⟩) ∧\n            (μ ⟨(x, y), ⋯⟩ = μ ⟨(y, z), ⋯⟩ → μ ⟨(x, y), ⋯⟩ = μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ = μ ⟨(y, z), ⋯⟩) ∧\n              (μ ⟨(x, z), ⋯⟩ = μ ⟨(y, z), ⋯⟩ → μ ⟨(x, y), ⋯⟩ = μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, y), ⋯⟩ = μ ⟨(y, z), ⋯⟩)",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.find",
   "Inhabited.mk",
   "Module",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration",
   "HarderNarasimhan.μ",
   "Classical.propDecidable",
   "Submodule",
   "Inhabited.default",
   "HarderNarasimhan.CoprimaryFiltration",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_5",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_4",
   "Eq",
   "HarderNarasimhan.S",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
   "CompleteLattice.toConditionallyCompleteLattice",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_2",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_12",
   "instLTNat",
   "CommRing.toCommSemiring",
   "Submodule.instTop",
   "CommSemiring.toSemiring",
   "HarderNarasimhan.impl.prop3d13₂",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "Inhabited",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_3",
   "HarderNarasimhan.impl.instμ_AdmissibleℒSμ",
   "HarderNarasimhan.impl.piecewise_coprimary",
   "HarderNarasimhan.impl.prop3d13₁",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "LT.lt",
   "Nat",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_6",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Nontrivial",
   "Top.top",
   "HarderNarasimhan.CoprimaryFiltration.mk",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "inferInstance",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.S₀",
   "CompleteLattice.toBoundedOrder",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] → Inhabited (HarderNarasimhan.CoprimaryFiltration R M)",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "And.intro",
   "HarderNarasimhan.μmin",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "HarderNarasimhan.WeakSlopeLike₁",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.impl.prop4d11₂",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.WeakSlopeLike₂",
   "HarderNarasimhan.impl.prop4d11₁",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_4_11",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl →\n      HarderNarasimhan.μBstar μ ≤ HarderNarasimhan.μAstar μ) ∧\n    (HarderNarasimhan.WeakAscendingChainCondition μ →\n      HarderNarasimhan.WeakSlopeLike₁ μ →\n        HarderNarasimhan.StrongDescendingChainCondition μ →\n          HarderNarasimhan.WeakSlopeLike₂ μ →\n            HarderNarasimhan.μBstar μ ≤ HarderNarasimhan.μAstar μ →\n              HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl)",
  "constCategory": "Theorem"},
 {"references": ["Nat.decEq", "Nat", "DecidableEq"],
  "name": "instDecidableEqNat",
  "constType": "DecidableEq ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.StI",
   "Preorder.toLT",
   "HarderNarasimhan.S₂I",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.S₁I",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "Exists",
   "Set",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Lattice",
   "Nontrivial",
   "Ne",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.StI.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.StI μ I =\n    {l |\n      ∃ (hlI : HarderNarasimhan.InIntvl I l) (hl : (↑I).1 ≠ l),\n        HarderNarasimhan.S₁I μ I l hlI hl ∧ HarderNarasimhan.S₂I μ I l hlI hl}",
  "constCategory": "Theorem"},
 {"references": ["Subtype.rec", "Subtype", "Subtype.mk"],
  "name": "Subtype.casesOn",
  "constType":
  "{α : Sort u} →\n  {p : α → Prop} →\n    {motive : Subtype p → Sort u_1} →\n      (t : Subtype p) → ((val : α) → (property : p val) → motive ⟨val, property⟩) → motive t",
  "constCategory": "Definition"},
 {"references": ["LE.le", "LE", "GE.ge"],
  "name": "LE.le.ge",
  "constType": "∀ {α : Type u_2} [inst : LE α] {a b : α}, a ≤ b → b ≥ a",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt", "Preorder", "le_of_lt", "Preorder.toLT", "lt_of_lt_of_le"],
  "name": "lt_trans",
  "constType":
  "∀ {α : Type u_1} [inst : Preorder α] {a b c : α}, a < b → b < c → a < c",
  "constCategory": "Theorem"},
 {"references":
  ["NonUnitalNonAssocSemiring.toDistrib",
   "True",
   "Eq.trans",
   "Distrib.toMul",
   "CommSemiring",
   "MulZeroClass.toMul",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "CommSemiring.toSemiring",
   "HMul.hMul",
   "MulZeroClass.zero_mul",
   "OfNat.ofNat",
   "congrArg",
   "eq_self",
   "Semiring.toNonAssocSemiring",
   "of_eq_true",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "instHMul",
   "Zero.toOfNat0",
   "Eq"],
  "name": "Mathlib.Tactic.Ring.zero_mul",
  "constType": "∀ {R : Type u_1} [inst : CommSemiring R] (b : R), 0 * b = 0",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "Nat",
   "instOfNatNat",
   "instHAdd",
   "RelSeries.length",
   "Fin",
   "RelSeries",
   "SetRel",
   "OfNat.ofNat"],
  "name": "RelSeries.toFun",
  "constType":
  "{α : Type u_1} → {r : SetRel α α} → (self : RelSeries r) → Fin (self.length + 1) → α",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat",
   "Nat.succ_lt_succ",
   "Nat.succ",
   "Iff",
   "Nat.lt_of_succ_lt_succ",
   "Iff.intro"],
  "name": "Nat.succ_lt_succ_iff",
  "constType": "∀ {a b : ℕ}, a.succ < b.succ ↔ a < b",
  "constCategory": "Theorem"},
 {"references":
  ["Finset",
   "Submodule.toAddSubmonoid",
   "Eq.trans",
   "Submodule.Quotient.module",
   "Singleton.singleton",
   "WithTop",
   "Exists.intro",
   "Set.diff_eq_empty",
   "Membership.mem.out",
   "Subtype.val",
   "Set.inter_compl_self",
   "Finset.min'",
   "RingHom.id",
   "Finset.inf'._proof_1",
   "Set.instInter",
   "Finset.min'_le",
   "Set.instSDiff",
   "LinearMap.ker",
   "Exists",
   "LocalizedModule",
   "Submodule.addCommGroup",
   "Prod.snd",
   "LinearMap",
   "Set.instMembership",
   "Set.instHasCompl",
   "Prod",
   "Submonoid",
   "SetLike.coe",
   "LocalizedModule.isModule'",
   "Eq.refl",
   "Iff",
   "Top.top",
   "Finset.instMembership",
   "AddCommGroup.toAddCommMonoid",
   "RingHomInvPair.ids",
   "Set.ext",
   "Eq.mpr",
   "AddSubmonoid.toAddSubsemigroup",
   "setOf",
   "AddMonoid.toAddZeroClass",
   "Submodule.hasQuotient",
   "HarderNarasimhan._μ._proof_1",
   "HasQuotient.Quotient",
   "LinearMap.instFunLike",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "LocalizedModule.instAddCommMonoid",
   "MulZeroOneClass.toMulOneClass",
   "AddCommMonoid.toAddMonoid",
   "HarderNarasimhan.impl.μ_nonempty",
   "EmptyCollection.emptyCollection",
   "LocalizedModule.mkLinearMap",
   "Prod.fst",
   "AddSubsemigroup.carrier",
   "HarderNarasimhan._μ",
   "Preorder.toLE",
   "Eq",
   "LinearExtension",
   "Set",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "toLinearExtension",
   "Set.toFinset",
   "AddCommGroup",
   "AddZero.toAdd",
   "PrimeSpectrum",
   "eq_self",
   "CommRing.toRing",
   "HarderNarasimhan.ℒ",
   "Submodule.completeLattice",
   "SDiff.sdiff",
   "Ne",
   "eq_of_le_of_ge",
   "Module.Finite",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Membership.mem",
   "Inter.inter",
   "Iff.mp",
   "Preorder.toLT",
   "PrimeSpectrum.isPrime",
   "Finset.inf",
   "LinearMap.semilinearMapClass",
   "And.intro",
   "Semiring.toNonAssocSemiring",
   "HarderNarasimhan.AdmittedResults.bourbaki_elements_math_alg_comm_chIV_sec1_no2_prop6",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "Eq.rec",
   "Semiring.toModule",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization",
   "NonAssocSemiring.toMulZeroOneClass",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.impl.associated_primes_quot_koqcl._simp_1_2",
   "SetLike.instMembership",
   "Submonoid.instSetLike",
   "PrimeSpectrum.mk",
   "And.right",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "And",
   "iff_true",
   "HarderNarasimhan.impl.CP.f1",
   "AddZeroClass.toAddZero",
   "Exists.casesOn",
   "HasSubset.Subset",
   "WithTop.semilatticeInf",
   "Nontrivial",
   "id",
   "Submodule.submoduleOf",
   "WithTop.untop.match_1",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Subtype",
   "Eq.mp",
   "Submodule.module",
   "WithTop.some",
   "Set.instEmptyCollection",
   "LinearEquiv",
   "Iff.intro",
   "Submodule",
   "congrArg",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "WithTop.orderTop",
   "WithTop.top",
   "Ideal",
   "HasCompl.compl",
   "HarderNarasimhan.impl.koqcl_iso",
   "Ideal.primeCompl",
   "OrderHom.monotone'",
   "PrimeSpectrum.asIdeal",
   "Finset.min'_mem",
   "LinearEquiv.AssociatedPrimes.eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "True",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "Function.comp",
   "IsAssociatedPrime",
   "HarderNarasimhan.impl.associated_primes_quot_koqcl._simp_1_1",
   "CommRing",
   "Set.instSingletonSet",
   "Set.instHasSubset",
   "LT.lt",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "of_eq_true",
   "Submodule.setLike",
   "LE.le",
   "Submodule.addCommMonoid"],
  "name": "HarderNarasimhan.impl.associated_primes_quot_koqcl",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  associatedPrimes R (↥(↑I).2 ⧸ Submodule.submoduleOf (HarderNarasimhan.impl.ker_of_quot_comp_localization I) (↑I).2) =\n    {((HarderNarasimhan._μ R M I).toFinset.min' ⋯).asIdeal}",
  "constCategory": "Theorem"},
 {"references":
  ["OrderBot.bot_le", "LE.le", "LE", "OrderBot.toBot", "Bot.bot", "OrderBot"],
  "name": "bot_le",
  "constType":
  "∀ {α : Type u} [inst : LE α] [inst_1 : OrderBot α] {a : α}, ⊥ ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.StI",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "Prod.fst",
   "IsGreatest",
   "HarderNarasimhan.impl.HNFil._proof_3",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "HarderNarasimhan.impl.HNFil.match_1",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.impl.HNFil._proof_4",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Exists.choose",
   "Bot.bot",
   "Unit",
   "LT.lt",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Subtype.mk",
   "dite",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil._sunfold",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        [inst_3 : WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [inst_4 : CompleteLattice S] →\n              (μ : { p // p.1 < p.2 } → S) →\n                [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] →\n                  [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ] →\n                    [h : HarderNarasimhan.μ_Admissible μ] → ℕ → ℒ",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Nat.cast",
   "instHAdd",
   "Mathlib.Meta.NormNum.IsNat.mk",
   "Mathlib.Meta.NormNum.isNat_add.match_1_1",
   "AddMonoidWithOne.toAddMonoid",
   "Nat.cast_add",
   "HAdd.hAdd",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "Nat.add",
   "AddMonoid.toAddSemigroup",
   "Eq.symm",
   "Eq",
   "AddMonoidWithOne",
   "Mathlib.Meta.NormNum.IsNat",
   "AddSemigroup.toAdd"],
  "name": "Mathlib.Meta.NormNum.isNat_add",
  "constType":
  "∀ {α : Type u_1} [inst : AddMonoidWithOne α] {f : α → α → α} {a b : α} {a' b' c : ℕ},\n  f = HAdd.hAdd →\n    Mathlib.Meta.NormNum.IsNat a a' →\n      Mathlib.Meta.NormNum.IsNat b b' → a'.add b' = c → Mathlib.Meta.NormNum.IsNat (f a b) c",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "HarderNarasimhan.Affine",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "SemilatticeSup.toMax",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Affine.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (a b : ℒ) (h : ¬a ≤ b), μ ⟨(a ⊓ b, a), ⋯⟩ = μ ⟨(b, a ⊔ b), ⋯⟩) → HarderNarasimhan.Affine μ",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "PartialOrder",
   "Preorder.le_refl",
   "LE.le",
   "Nontrivial",
   "HarderNarasimhan.Interval",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.instPartialOrderInterval._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (a : HarderNarasimhan.Interval z), ↑a ≤ ↑a",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "SupSet.sSup",
   "Set",
   "CompleteSemilatticeSup.sSup_le",
   "LE.le",
   "Membership.mem",
   "CompleteSemilatticeSup",
   "CompleteSemilatticeSup.toPartialOrder",
   "CompleteSemilatticeSup.toSupSet",
   "Preorder.toLE",
   "Set.instMembership"],
  "name": "sSup_le",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteSemilatticeSup α] {s : Set α} {a : α}, (∀ b ∈ s, b ≤ a) → sSup s ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Membership.mem",
   "Preorder.toLT",
   "Membership.mem.out",
   "GT.gt",
   "Subtype.val",
   "Prod.fst",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "And.left",
   "HarderNarasimhan.impl.ℒₛ._proof_1",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Set.Nonempty",
   "Exists",
   "Lattice.toSemilatticeInf",
   "Exists.choose_spec",
   "Set",
   "HarderNarasimhan.impl.ℒₛ",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.impl.prop3d4₀func._proof_3",
   "Prod.snd",
   "Exists.choose",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "Nat",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.InIntvl",
   "Nat.succ",
   "Lattice",
   "Nontrivial",
   "Nat.below",
   "Ne",
   "Subtype.mk",
   "HarderNarasimhan.impl.ℒₛ._proof_2",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func._proof_4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [h : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (n : ℕ)\n  (x : Nat.below n.succ) (hbot : ¬(↑I).1 = ↑x.1) (hne : (HarderNarasimhan.impl.ℒₛ μ I x.1 hbot).Nonempty),\n  HarderNarasimhan.InIntvl I ⋯.choose",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "CommRing.toCommSemiring",
   "IsNoetherianRing",
   "HarderNarasimhan.CoprimaryFiltration",
   "Module",
   "Nontrivial",
   "CommSemiring.toSemiring",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "CommRing",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.ctorIdx",
  "constType":
  "{R : Type u_1} →\n  {inst : CommRing R} →\n    {inst_1 : IsNoetherianRing R} →\n      {M : Type u_2} →\n        {inst_2 : Nontrivial M} →\n          {inst_3 : AddCommGroup M} →\n            {inst_4 : _root_.Module R M} → {inst_5 : Module.Finite R M} → HarderNarasimhan.CoprimaryFiltration R M → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Preorder",
   "Preorder.toLT",
   "False",
   "lt_self_iff_false",
   "Eq",
   "propext"],
  "name": "lt_self_iff_false._simp_1",
  "constType": "∀ {α : Type u_2} [inst : Preorder α] (x : α), (x < x) = False",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.cast",
   "True",
   "Eq.trans",
   "Mathlib.Meta.NormNum.IsNat.mk",
   "AddGroupWithOne.toAddMonoidWithOne",
   "Int.cast",
   "congrArg",
   "Int",
   "eq_self",
   "Nat",
   "Mathlib.Meta.NormNum.IsInt.to_isNat.match_1_1",
   "AddMonoidWithOne.toNatCast",
   "Ring.toAddGroupWithOne",
   "of_eq_true",
   "Mathlib.Meta.NormNum.IsInt",
   "AddGroupWithOne.toIntCast",
   "Int.cast_natCast",
   "Int.ofNat",
   "Eq",
   "Mathlib.Meta.NormNum.IsNat",
   "instNatCastInt",
   "Ring"],
  "name": "Mathlib.Meta.NormNum.IsInt.to_isNat",
  "constType":
  "∀ {α : Type u_1} [inst : Ring α] {a : α} {n : ℕ},\n  Mathlib.Meta.NormNum.IsInt a (Int.ofNat n) → Mathlib.Meta.NormNum.IsNat a n",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Submodule.instBot",
   "Nontrivial",
   "HarderNarasimhan.CoprimaryFiltration.mk",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "HarderNarasimhan.CoprimaryFiltration.casesOn",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Nat.instPreorder",
   "Submodule",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.ext.match_1",
  "constType":
  "∀ {R : Type u_1} {inst : CommRing R} {inst_1 : IsNoetherianRing R} {M : Type u_2} {inst_2 : Nontrivial M}\n  {inst_3 : AddCommGroup M} {inst_4 : _root_.Module R M} {inst_5 : Module.Finite R M}\n  (motive : HarderNarasimhan.CoprimaryFiltration R M → Prop) (h : HarderNarasimhan.CoprimaryFiltration R M),\n  (∀ (filtration : ℕ → Submodule R M) (monotone : Monotone filtration) (first_eq_bot : filtration 0 = ⊥)\n      (fin_len : ∃ n, filtration n = ⊤)\n      (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j)\n      (piecewise_coprimary :\n        ∀ n < Nat.find fin_len,\n          HarderNarasimhan.Coprimary R (↥(filtration (n + 1)) ⧸ (filtration n).submoduleOf (filtration (n + 1))))\n      (strict_mono_associated_prime :\n        ∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len),\n          { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }),\n      motive\n        { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot, fin_len := fin_len,\n          strict_mono := strict_mono, piecewise_coprimary := piecewise_coprimary,\n          strict_mono_associated_prime := strict_mono_associated_prime }) →\n    motive h",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition'",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["Nat",
   "CommRing.toCommSemiring",
   "IsNoetherianRing",
   "HarderNarasimhan.CoprimaryFiltration",
   "Module",
   "Nontrivial",
   "CommSemiring.toSemiring",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "CommRing",
   "Submodule",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.filtration",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] → HarderNarasimhan.CoprimaryFiltration R M → ℕ → Submodule R M",
  "constCategory": "Definition"},
 {"references":
  ["Int.instSub",
   "Eq.trans",
   "Classical.propDecidable",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "Exists.intro",
   "Subtype.val",
   "HarderNarasimhan.JordanHolderFiltration",
   "Eq.symm",
   "Int.add_one_le_of_lt",
   "Bool.true",
   "instLTNat",
   "BoundedOrder",
   "Prod.snd",
   "le_sup_left",
   "Lean.Omega.LinearCombo.coordinate",
   "Prod",
   "BoundedOrder.toOrderBot",
   "instOfNat",
   "Eq.refl",
   "Lattice",
   "Top.top",
   "Lean.Omega.Constraint.addEquality_sat",
   "Lean.Omega.Int.sub_congr",
   "Or.elim",
   "Nat.find",
   "Bool",
   "Lean.Omega.LinearCombo.coordinate_eval_2",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Option.some",
   "Prod.fst",
   "Lean.Omega.LinearCombo.mk",
   "Lean.Omega.LinearCombo.instSub",
   "instOfNatNat",
   "Lean.Omega.Int.ofNat_sub_dichotomy",
   "Int.instAdd",
   "Eq",
   "Preorder.toLE",
   "instNatCastInt",
   "HarderNarasimhan.instBoundedOrderInterval",
   "OfNat.ofNat",
   "Int",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "Max.max",
   "Lean.Omega.LinearCombo.coordinate_eval_6",
   "Lean.Omega.Int.ofNat_lt_of_lt",
   "Option.none",
   "Nat.sub_le",
   "instHSub",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "le_of_le_of_eq",
   "Preorder.toLT",
   "Lean.Omega.Int.ofNat_le_of_le",
   "And.intro",
   "Int.instLEInt",
   "HSub.hSub",
   "CompleteLinearOrder",
   "Eq.rec",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.JordanHolderFiltration.strict_anti",
   "Neg.neg",
   "And.right",
   "And",
   "Lean.Omega.Constraint.addInequality_sat",
   "Bot.bot",
   "Int.instNegInt",
   "instDecidableEqBool",
   "Nat",
   "Nontrivial",
   "id",
   "Subtype",
   "Nat.cast",
   "Lean.Omega.Constraint.combine_sat'",
   "Int.sub_eq_zero_of_eq",
   "Decidable.decide",
   "Lean.Omega.Coeffs.ofList",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Lean.Omega.Constraint.not_sat'_of_isImpossible",
   "HarderNarasimhan.JordanHolderFiltration.first_eq_top",
   "of_decide_eq_true",
   "Not",
   "List.nil",
   "Lattice.toSemilatticeInf",
   "le_top",
   "instHAdd",
   "Lean.Omega.LinearCombo",
   "Lean.Omega.Constraint.isImpossible",
   "Int.sub_nonneg_of_le",
   "LT.lt",
   "Nat.le_of_not_lt",
   "Lean.Omega.LinearCombo.sub_eval",
   "instSubNat",
   "SemilatticeSup.toMax",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "False",
   "Lean.Omega.Constraint.mk",
   "Lean.Omega.LinearCombo.eval",
   "Subtype.mk",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "OrderTop.toTop",
   "instLENat"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_17",
  "constType":
  "∀ (n : ℕ) (ℒ : Type u_1) (ntl : Nontrivial ℒ) (l : Lattice ℒ) (bo : BoundedOrder ℒ) (S : Type u_2)\n  (clo : CompleteLinearOrder S) (μ : { p // p.1 < p.2 } → S) (JHy JHx : HarderNarasimhan.JordanHolderFiltration μ)\n  (this : 0 < Nat.find ⋯ - 1),\n  (fun n ↦ ⟨JHx.filtration (Nat.find ⋯ - 1) ⊔ JHy.filtration n, ⋯⟩) (Nat.find ⋯) = ⊥ →\n    ∀ (j j : ℕ), ¬Nat.find ⋯ - 1 < Nat.find ⋯ → False",
  "constCategory": "Theorem"},
 {"references": ["semiOutParam", "Coe"],
  "name": "Coe.mk",
  "constType": "{α : semiOutParam (Sort u)} → {β : Sort v} → (α → β) → Coe α β",
  "constCategory": "Other"},
 {"references": [],
  "name": "And",
  "constType": "Prop → Prop → Prop",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "PartialOrder",
   "LE.le",
   "OrderBot.toBot",
   "le_bot_iff",
   "Eq",
   "Preorder.toLE",
   "Bot.bot",
   "propext",
   "OrderBot"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_30",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderBot α] {a : α}, (a ≤ ⊥) = (a = ⊥)",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "associatedPrimes",
   "Module",
   "Set",
   "CommSemiring.toSemiring",
   "Membership.mem",
   "AddCommGroup",
   "CommRing",
   "Set.instMembership",
   "IsNoetherianRing",
   "HarderNarasimhan.Coprimary",
   "Ideal",
   "AddCommGroup.toAddCommMonoid",
   "ExistsUnique"],
  "name": "HarderNarasimhan.Coprimary.mk",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : AddCommGroup M]\n  [inst_3 : _root_.Module R M], (∃! p, p ∈ associatedPrimes R M) → HarderNarasimhan.Coprimary R M",
  "constCategory": "Other"},
 {"references": ["NonUnitalNonAssocCommSemiring", "NonUnitalNonAssocSemiring"],
  "name": "NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring",
  "constType":
  "{α : Type u} → [self : NonUnitalNonAssocCommSemiring α] → NonUnitalNonAssocSemiring α",
  "constCategory": "Definition"},
 {"references": ["Or", "Iff", "Or.comm"],
  "name": "or_comm",
  "constType": "∀ {a b : Prop}, a ∨ b ↔ b ∨ a",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "CompleteLattice.toLattice",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toBoundedOrder",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.FiniteTotalPayoff.fin_tot_payoff",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.FiniteTotalPayoff μ],\n  μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["List.nil",
   "instAddNat",
   "instHAdd",
   "List.brecOn",
   "List",
   "List.length.match_1",
   "OfNat.ofNat",
   "Unit",
   "HAdd.hAdd",
   "List.below",
   "Nat",
   "instOfNatNat",
   "List.cons"],
  "name": "List.length",
  "constType": "{α : Type u_1} → List α → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Quotient",
   "Submodule.Quotient.mk",
   "Submodule.hasQuotient",
   "HasQuotient.Quotient",
   "IsScalarTower",
   "Module",
   "AddCommGroup.toAddGroup",
   "SMulZeroClass.toSMul",
   "IsScalarTower.mk",
   "Submodule",
   "SMul",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "DistribSMul.toSMulZeroClass",
   "congr_arg",
   "Submodule.quotientRel",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "Submodule.Quotient.instSMul'",
   "AddCommGroup",
   "AddZeroClass.toAddZero",
   "Ring.toSemiring",
   "Module.toDistribMulAction",
   "Quotient.ind'",
   "SubNegMonoid.toAddMonoid",
   "HSMul.hSMul",
   "AddCommGroup.toAddCommMonoid",
   "smul_assoc",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Ring"],
  "name": "Submodule.Quotient.isScalarTower",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M] {S : Type u_3}\n  [inst_3 : SMul S R] [inst_4 : SMul S M] [inst_5 : IsScalarTower S R M] (P : Submodule R M) (T : Type u_4)\n  [inst_6 : SMul T R] [inst_7 : SMul T M] [inst_8 : IsScalarTower T R M] [inst_9 : SMul S T] [IsScalarTower S T M],\n  IsScalarTower S T (M ⧸ P)",
  "constCategory": "Theorem"},
 {"references": ["LinearOrder", "LinearOrderedCommMonoidWithZero"],
  "name": "LinearOrderedCommMonoidWithZero.toLinearOrder",
  "constType":
  "{α : Type u_3} → [self : LinearOrderedCommMonoidWithZero α] → LinearOrder α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "SetLike.instMembership",
   "Module",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "Subtype.val",
   "OfNat.ofNat",
   "Submodule",
   "AddCommMonoid",
   "Submodule.setLike",
   "SetLike.coe_eq_coe",
   "Iff",
   "Zero.toOfNat0",
   "Submodule.zero",
   "Eq",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "Submodule.coe_eq_zero",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] {module_M : _root_.Module R M}\n  {p : Submodule R M} {x : ↥p}, ↑x = 0 ↔ x = 0",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "Set.toFinset_congr",
   "Submodule.ext",
   "HarderNarasimhan.impl.rmk4d14₂._simp_1_7",
   "AddCommGroup.toAddGroup",
   "Submodule.Quotient.module",
   "Submodule.Quotient.instSMul",
   "HarderNarasimhan.impl.prop3d12",
   "SMulZeroClass.toSMul",
   "HarderNarasimhan.impl.rmk4d14₁",
   "Finset.min'",
   "RingHom.id",
   "Eq.symm",
   "HarderNarasimhan.S",
   "Finset.min'_le",
   "Exists",
   "LinearMap.ker",
   "LinearMap",
   "Ring.toSemiring",
   "Iff",
   "SMulMemClass.smul_mem",
   "Submodule.instBot",
   "Top.top",
   "Eq.mpr",
   "Quotient.out",
   "HarderNarasimhan.Semistable",
   "RelEmbedding.toEmbedding",
   "HasQuotient.Quotient",
   "HarderNarasimhan._μ._proof_1",
   "LinearMap.instFunLike",
   "Module",
   "CommSemiring",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Submodule.Quotient.instZeroQuotient",
   "AddCommMonoid.toAddMonoid",
   "HarderNarasimhan.impl.prop3d11._simp_3",
   "Prod.fst",
   "Submodule.span_singleton_eq_bot",
   "Or.inl",
   "Eq",
   "Finset.min'_singleton",
   "smul_eq_mul",
   "LinearExtension",
   "Set",
   "Ideal.IsPrime.ne_top",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Set.toFinset",
   "lt_of_lt_of_le",
   "eq_self",
   "LinearEquiv.trans",
   "Module.toDistribMulAction",
   "HarderNarasimhan.instPartialOrderS₀",
   "Ne",
   "OrderTheory.DedekindMacNeilleCompletion",
   "Submodule.Quotient.mk",
   "PartialOrder.toPreorder",
   "SemilinearMapClass",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Subtype.instLE",
   "HarderNarasimhan.μ",
   "Membership.mem",
   "Mul.toSMul",
   "Preorder.toLT",
   "Submodule.span",
   "HarderNarasimhan.impl.prop3d11._simp_2",
   "Algebra.id",
   "RelEmbedding.instFunLike",
   "Submodule.subtype",
   "Semiring.toNonAssocSemiring",
   "Or",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "eq_of_heq",
   "DistribMulAction.toMulAction",
   "PrimeSpectrum.instPartialOrder",
   "AddGroup.toSubNegMonoid",
   "Semiring.toModule",
   "Eq.rec",
   "Finset.Nonempty",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "DistribSMul.toSMulZeroClass",
   "outParam",
   "PrimeSpectrum.mk",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "And.right",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Exists.casesOn",
   "Finset.instSingleton",
   "HasSubset.Subset",
   "Iff.of_eq",
   "CommRing.mul_comm",
   "AddZero.toZero",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "LinearMap.toSpanSingleton",
   "associatedPrimes",
   "Submodule.instNontrivial",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Eq.mp",
   "Submodule.module",
   "Submodule.smulMemClass",
   "DFunLike.coe",
   "instDistribLatticeOfLinearOrder",
   "Algebra.toSMul",
   "PrimeSpectrum.asIdeal",
   "Set.toFinset_singleton",
   "Not",
   "LinearEquiv.AssociatedPrimes.eq",
   "le_top",
   "Distrib.toMul",
   "Submodule.quotientRel",
   "IsAssociatedPrime._proof_1",
   "IsAssociatedPrime",
   "Set.instSingletonSet",
   "LinearEquiv.symm",
   "LT.lt",
   "of_eq_true",
   "HarderNarasimhan.impl.rmk4d14₂._simp_1_6",
   "NonUnitalSemiring.toNonUnitalNonAssocSemiring",
   "False",
   "ExistsUnique.unique",
   "Subtype.mk",
   "OrderTop.toTop",
   "Ideal.IsPrime.mul_mem_iff_mem_or_mem",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Finset",
   "NonUnitalNonAssocSemiring.toMul",
   "Eq.trans",
   "Singleton.singleton",
   "Exists.intro",
   "Membership.mem.out",
   "Membership",
   "Subtype.val",
   "Quotient.out_eq",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "False.elim",
   "AddSubmonoidClass.toZeroMemClass",
   "Submodule.mem_span_singleton",
   "Eq.ndrec",
   "Submodule.addSubmonoidClass",
   "HarderNarasimhan.impl.rmk4d14₂._simp_1_5",
   "rfl",
   "LinearMap.instZero",
   "ClosureOperator.IsClosed",
   "Submodule.smul_mem",
   "Submodule.addCommGroup",
   "OrderTheory.coe'",
   "Prod.snd",
   "Set.instMembership",
   "HarderNarasimhan.impl.rmk4d14₂._simp_1_2",
   "Prod",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Eq.refl",
   "Classical.byContradiction",
   "Finset.instMembership",
   "AddCommGroup.toAddCommMonoid",
   "HEq",
   "RingHomInvPair.ids",
   "Set.ext",
   "CompleteLattice.toBoundedOrder",
   "Set.fintypeSingleton",
   "AddMonoid.toAddZeroClass",
   "setOf",
   "Quotient",
   "Or.inr",
   "Submodule.hasQuotient",
   "HarderNarasimhan.impl.prop3d13₂._simp_5",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "Submodule.mem_span_singleton_self",
   "and_true",
   "HarderNarasimhan.impl.μ_nonempty",
   "Submodule.topEquiv",
   "MulActionWithZero.smul_zero",
   "congr",
   "LinearMap.ker.congr_simp",
   "not_true_eq_false",
   "HarderNarasimhan._μ",
   "Preorder.toLE",
   "propext",
   "CompleteLattice.toConditionallyCompleteLattice",
   "Submodule.instOrderTop",
   "ZeroMemClass.coe_eq_zero",
   "IsScalarTower.left",
   "Submodule.instTop",
   "AddCommGroup",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "CommRing.toRing",
   "AddCommGroup.toDivisionAddCommMonoid",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.μA",
   "Submodule.completeLattice",
   "ExistsUnique",
   "Submodule.smul",
   "HarderNarasimhan.S₀",
   "bot_lt_top",
   "Module.Finite",
   "HarderNarasimhan.impl.rmk4d14₂._simp_1_4",
   "Prod.mk",
   "RingHomCompTriple.ids",
   "Ideal.IsPrime",
   "Iff.mp",
   "Quotient.mk",
   "HMul.hMul",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "And.intro",
   "Ideal.instIsTwoSided_1",
   "IsAssociatedPrime.isPrime",
   "Semiring.toNonUnitalSemiring",
   "SetLike.instMembership",
   "NonUnitalNonAssocSemiring.toDistrib",
   "And",
   "HarderNarasimhan.impl.rmk4d14₂._simp_1_1",
   "DistribMulAction.toDistribSMul",
   "Submodule.Quotient.mk_eq_zero",
   "HarderNarasimhan.impl._μ_mono_right",
   "Iff.mpr",
   "Nontrivial",
   "HSMul.hSMul",
   "NegZeroClass.toZero",
   "id",
   "instHMul",
   "ZeroMemClass.zero",
   "Submodule.quotEquivOfEqBot",
   "ConditionallyCompleteLattice.toLattice",
   "Submodule.submoduleOf",
   "Submodule.ker_subtype",
   "Subtype",
   "Submodule.coe_eq_zero",
   "Function.Embedding.toFun",
   "LinearEquiv",
   "SubNegZeroMonoid.toNegZeroClass",
   "LinearMap.toSpanSingleton_zero",
   "Submodule",
   "Iff.intro",
   "congrArg",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "RelEmbedding.instEmbeddingLike",
   "Zero.toOfNat0",
   "Finset.min'.congr_simp",
   "OrderBot.toBot",
   "RelEmbedding",
   "Submodule.instOrderBot",
   "Finset.min'_mem",
   "Set.instLE",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "True",
   "CommSemiring.toSemiring",
   "Semiring.toMonoidWithZero",
   "Module.toMulActionWithZero",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "Eq.casesOn",
   "LinearMap.ker_zero",
   "exists_prop_congr",
   "Set.instHasSubset",
   "HarderNarasimhan.impl.rmk4d14₂._simp_1_3",
   "Or.casesOn",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "SubNegMonoid.toAddMonoid",
   "Submodule.setLike",
   "LE.le",
   "smul_assoc",
   "Submodule.zero",
   "Submodule.addCommMonoid"],
  "name": "HarderNarasimhan.impl.rmk4d14₂",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  HarderNarasimhan.Semistable (HarderNarasimhan.μ R M) ↔ ∃! p, p ∈ associatedPrimes R M",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "not_lt._simp_1",
   "HarderNarasimhan.impl.subseq_prop5",
   "Classical.propDecidable",
   "eq_true",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "MonoidWithZero.toMulZeroOneClass",
   "List.instGetElem?NatLtLength",
   "Subtype.coe_inj",
   "HarderNarasimhan.impl.subseq_prop4",
   "GetElem?.getElem?",
   "sup_assoc",
   "zero_le",
   "CompleteSemilatticeInf.toPartialOrder",
   "HarderNarasimhan.JordanHolderFiltration",
   "Nat.sub_one_add_one",
   "Eq.symm",
   "sup_eq_right",
   "LinearOrderedCommMonoidWithZero.toCommMonoidWithZero",
   "sup_of_le_right",
   "HarderNarasimhan.impl.subseq_prop1",
   "instLTNat",
   "Exists",
   "inf_eq_right",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "HarderNarasimhan.impl.μ_bot_JH_eq_μ_tot",
   "true_and",
   "le_sup_left",
   "lt_iff_not_ge",
   "MulZeroOneClass.toMulZeroClass",
   "HarderNarasimhan.InIntvl",
   "Nat.le_of_lt_succ",
   "eq_false",
   "Antitone",
   "HarderNarasimhan.μmax._proof_1",
   "Top.top",
   "HarderNarasimhan.instWellFoundedGTInterval",
   "Eq.mpr",
   "covariant_swap_add_of_covariant_add",
   "HarderNarasimhan.Semistable",
   "Nat.find",
   "instDecidableTrue",
   "Nat.le_add_left",
   "HarderNarasimhan.impl.thm4d21",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.instSlopeLikeIntervalResμ",
   "List",
   "Nat.one_le_iff_ne_zero",
   "HarderNarasimhan.Resμ",
   "HarderNarasimhan.instStrongDescendingChainConditionOfStrongDescendingChainCondition'",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Nat.le_sub_one_iff_lt",
   "Nat.instSemiring",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Eq",
   "Set",
   "HarderNarasimhan.proposition_2_8",
   "right_eq_sup",
   "AddZero.toAdd",
   "lt_of_lt_of_le",
   "CompletelyDistribLattice.toCompleteLattice",
   "Nat.instLinearOrderedCommMonoidWithZero",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_9",
   "eq_self",
   "HarderNarasimhan.μA._proof_1",
   "dite_cond_eq_true",
   "HarderNarasimhan.impl.JH_pos_len",
   "Ne",
   "eq_of_le_of_ge",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_10",
   "sup_comm",
   "instHSub",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "CompleteLattice.toCompleteSemilatticeInf",
   "Nat.find_min'",
   "PartialOrder.toPreorder",
   "CommMonoidWithZero.toMonoidWithZero",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Subtype.instLE",
   "Membership.mem",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "GT.gt",
   "GE.ge",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.μmax",
   "HarderNarasimhan.impl.subseq",
   "Nat.findGreatest_is_greatest",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_21",
   "dif_pos",
   "Or",
   "Ne.bot_lt'",
   "eq_of_heq",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_5",
   "List.TFAE",
   "HarderNarasimhan.Convex",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Eq.rec",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "sup_le_sup_left",
   "HarderNarasimhan.JordanHolderFiltration.strict_anti",
   "HarderNarasimhan.instStrongDescendingChainCondition'IntervalResμ",
   "Nat.instPartialOrder",
   "lt_of_le_of_lt",
   "And.right",
   "HarderNarasimhan.IsAttained",
   "HarderNarasimhan.JordanHolderFiltration.step_cond₂",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Exists.casesOn",
   "Nat.instCanonicallyOrderedAdd",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_3",
   "lt_iff_le_and_ne",
   "Nat",
   "sup_of_le_left",
   "Iff.of_eq",
   "Option",
   "Nat.lt_of_lt_pred",
   "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder",
   "le_bot_iff",
   "AddZero.toZero",
   "HarderNarasimhan.lt_lt",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "GE.ge.le",
   "SemilatticeInf.toMin",
   "Eq.mp",
   "le_trans",
   "DecidablePred",
   "lt_of_le_of_ne",
   "IsModularLattice.sup_inf_le_assoc_of_le",
   "Nat.instAddCancelCommMonoid",
   "dite_congr",
   "zero_lt_iff",
   "instDistribLatticeOfLinearOrder",
   "Nat.find_le",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "dite_cond_eq_false",
   "HarderNarasimhan.JordanHolderFiltration.first_eq_top",
   "Not",
   "List.nil",
   "HarderNarasimhan.impl.μA_eq_μmin",
   "Nat.findGreatest_le",
   "le_top",
   "Nat.add_le_of_le_sub",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "Eq.mpr_prop",
   "sInf_le",
   "LT.lt",
   "lt_add_one",
   "One.toOfNat1",
   "instSubNat",
   "of_eq_true",
   "Nat.succ",
   "le_of_lt",
   "SemilatticeSup.toMax",
   "HarderNarasimhan.instPartialOrderInterval",
   "le_sInf",
   "IsModularLattice",
   "False",
   "lt_self_iff_false",
   "Subtype.mk",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "OrderTop.toTop",
   "HarderNarasimhan.JordanHolderFiltration.antitone",
   "instAddNat",
   "HarderNarasimhan.SlopeLike",
   "Eq.trans",
   "LE",
   "Nat.instAddCommSemigroup",
   "Exists.intro",
   "Nat.findGreatest",
   "sup_le",
   "Subtype.val",
   "le_sup_right",
   "False.elim",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_20",
   "Eq.ndrec",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_19",
   "HarderNarasimhan.instAffineIntervalResμ",
   "rfl",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_18",
   "Nat.recAux",
   "Nat.findGreatest_spec",
   "Prod.snd",
   "HarderNarasimhan.IsComparable",
   "HarderNarasimhan.impl.subseq_prop3",
   "Set.instMembership",
   "Prod",
   "Nat.find_spec",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Eq.refl",
   "Classical.byContradiction",
   "Lattice",
   "HEq",
   "min_self",
   "HarderNarasimhan.in_TotIntvl",
   "CompleteLattice.toBoundedOrder",
   "HarderNarasimhan.JordanHolderFiltration.step_cond₁",
   "AddMonoid.toAddZeroClass",
   "setOf",
   "sup_le_sup_right",
   "Ne.symm",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_16",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_8",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "and_true",
   "Nat.instPreorder",
   "le_rfl",
   "le_inf",
   "lt_irrefl",
   "instOfNatNat",
   "congr",
   "InfSet.sInf",
   "ConditionallyCompleteLinearOrder.toLinearOrder",
   "WellFoundedGT",
   "sup_le_iff",
   "Preorder.toLE",
   "CompleteLattice.toConditionallyCompleteLattice",
   "propext",
   "Nat.le_add_of_sub_le",
   "lt_of_not_ge",
   "inf_lt_left",
   "Nat.lt_of_lt_of_le",
   "HarderNarasimhan.Affine.affine",
   "Nat.instAddMonoid",
   "lt_iff_le_not_ge",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "Subtype.coe_le_coe",
   "HarderNarasimhan.instBoundedOrderInterval",
   "HarderNarasimhan.seesaw'",
   "eq_bot_iff",
   "OfNat.ofNat",
   "not_le_of_gt",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "Max.max",
   "Nat.not_succ_le_zero",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_4",
   "MulZeroClass.toZero",
   "LinearOrder.toDecidableLE",
   "HarderNarasimhan.μA",
   "left_eq_sup",
   "instDecidableEqNat",
   "inferInstance",
   "HarderNarasimhan.impl.instIsModularLatticeInterval",
   "right_lt_sup",
   "Nat.sub_le",
   "dite",
   "bot_lt_top",
   "Nat.find_min",
   "lt_trans",
   "Lattice.toSemilatticeSup",
   "Prod.mk",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Nat.sub_one_lt",
   "Iff.mp",
   "bot_le",
   "add_le_add_right",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration.match_1_6",
   "And.intro",
   "HarderNarasimhan.instConvexOfAffine",
   "funext",
   "HSub.hSub",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_28",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.impl.semistable_resμ_of_jordanHolderFiltration",
   "Nat.instLinearOrder",
   "forall_prop_domain_congr",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_17",
   "CompleteLattice.toLattice",
   "Nat.instStarRing",
   "And",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_30",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_29",
   "Nat.decLt",
   "HarderNarasimhan.instWeakAscendingChainConditionOfWellFoundedGT",
   "Decidable.byContradiction",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.FiniteTotalPayoff.fin_tot_payoff",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_11",
   "List.length",
   "Eq.substr",
   "HarderNarasimhan.impl.subseq_prop2",
   "Subtype",
   "LinearOrderedCommMonoidWithZero.toLinearOrder",
   "SemilatticeSup.toPartialOrder",
   "CompleteLattice.toCompleteSemilatticeSup",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "HarderNarasimhan.impl.subseq_prop6",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_32",
   "Nat.instOne",
   "HarderNarasimhan.FiniteTotalPayoff.mk",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_31",
   "HarderNarasimhan.Interval",
   "Zero.toOfNat0",
   "HarderNarasimhan.Affine",
   "OrderBot.toBot",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "List.TFAE.out",
   "eq_of_le_of_not_lt",
   "True",
   "HEq.refl",
   "Nat.decLe",
   "Eq.casesOn",
   "exists_prop_congr",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.instNontrivialInterval",
   "DistribLattice.toLattice",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_27",
   "Min.min",
   "HarderNarasimhan.μA.congr_simp",
   "LE.le",
   "le_sSup",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_26",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration.match_1_1",
   "Nat.le_add_right",
   "instLENat",
   "lt_sup_of_lt_left"],
  "name": "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration",
  "constType":
  "∀ (n : ℕ) (ℒ : Type u_1) (x : Nontrivial ℒ) (x_1 : Lattice ℒ) (x_2 : BoundedOrder ℒ),\n  WellFoundedGT ℒ →\n    IsModularLattice ℒ →\n      ∀ (S : Type u_2) (x_5 : CompleteLinearOrder S) (μ : { p // p.1 < p.2 } → S),\n        HarderNarasimhan.FiniteTotalPayoff μ →\n          HarderNarasimhan.SlopeLike μ →\n            HarderNarasimhan.Semistable μ →\n              HarderNarasimhan.StrongDescendingChainCondition' μ →\n                HarderNarasimhan.Affine μ →\n                  (∃ JH, Nat.find ⋯ ≤ n) → ∀ (JH' : HarderNarasimhan.JordanHolderFiltration μ), Nat.find ⋯ ≤ n",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "Module",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "Submodule",
   "AddCommMonoid",
   "ZeroMemClass.zero_mem",
   "Submodule.setLike",
   "AddSubmonoidClass.toZeroMemClass",
   "Zero.toOfNat0",
   "AddZero.toZero",
   "Submodule.addSubmonoidClass",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.zero_mem",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] {module_M : _root_.Module R M}\n  (p : Submodule R M), 0 ∈ p",
  "constCategory": "Theorem"},
 {"references":
  ["Module",
   "AddCommMonoid.toAddMonoid",
   "MulAction.toSMul",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "instHSMul",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "Zero.toOfNat0",
   "Eq",
   "DistribMulAction",
   "Distrib.toAdd",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Semiring.toMonoidWithZero",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "AddCommMonoid.toAddCommSemigroup",
   "MulZeroClass.toZero",
   "HSMul.hSMul",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "Module.mk",
  "constType":
  "{R : Type u} →\n  {M : Type v} →\n    [inst : Semiring R] →\n      [inst_1 : AddCommMonoid M] →\n        [toDistribMulAction : DistribMulAction R M] →\n          (∀ (r s : R) (x : M), (r + s) • x = r • x + s • x) → (∀ (x : M), 0 • x = 0) → _root_.Module R M",
  "constCategory": "Other"},
 {"references":
  ["MulOneClass.toMulOne",
   "Nat",
   "MulOne.toOne",
   "Nat.instMulOneClass",
   "One",
   "inferInstance"],
  "name": "Nat.instOne",
  "constType": "One ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Real", "_private.Mathlib.Data.Real.Basic.0.Real.lt", "LT.mk", "LT"],
  "name": "Real.instLT",
  "constType": "LT ℝ",
  "constCategory": "Definition"},
 {"references": ["Monoid", "MonoidWithZero"],
  "name": "MonoidWithZero.toMonoid",
  "constType": "{M₀ : Type u} → [self : MonoidWithZero M₀] → Monoid M₀",
  "constCategory": "Definition"},
 {"references":
  ["Finset",
   "Finset.min'",
   "Eq.refl",
   "LinearOrder",
   "Eq.ndrec",
   "Eq.rec",
   "Eq",
   "Finset.Nonempty"],
  "name": "Finset.min'.congr_simp",
  "constType":
  "∀ {α : Type u_2} [inst : LinearOrder α] (s s_1 : Finset α) (e_s : s = s_1) (H : s.Nonempty), s.min' H = s_1.min' ⋯",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instPartialOrder",
   "AddCommMonoid",
   "PartialOrder.toPreorder",
   "Submodule.setLike",
   "Module",
   "Submodule.instBot",
   "Submodule.instOrderBot._proof_1",
   "Preorder.toLE",
   "OrderBot.mk",
   "OrderBot",
   "Submodule",
   "Semiring"],
  "name": "Submodule.instOrderBot",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_3} →\n    [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → OrderBot (Submodule R M)",
  "constCategory": "Definition"},
 {"references": ["HAdd.hAdd", "AddSemigroup", "instHAdd", "Add", "Eq"],
  "name": "AddSemigroup.mk",
  "constType":
  "{G : Type u} → [toAdd : Add G] → (∀ (a b c : G), a + b + c = a + (b + c)) → AddSemigroup G",
  "constCategory": "Other"},
 {"references": ["Set.Subset", "Set", "LE.mk", "LE"],
  "name": "Set.instLE",
  "constType": "{α : Type u} → LE (Set α)",
  "constCategory": "Definition"},
 {"references":
  ["SemilatticeInf",
   "Lattice.toSemilatticeSup",
   "Lattice.inf_le_right",
   "Lattice.inf_le_left",
   "Lattice",
   "SemilatticeSup.toPartialOrder",
   "Lattice.inf",
   "SemilatticeInf.mk",
   "Lattice.le_inf"],
  "name": "Lattice.toSemilatticeInf",
  "constType": "{α : Type u} → [self : Lattice α] → SemilatticeInf α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "HarderNarasimhan.JordanHolderFiltration.mk.noConfusion",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.mk.inj",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} {filtration : ℕ → ℒ} {antitone : Antitone filtration}\n  {fin_len : ∃ N, filtration N = ⊥}\n  {strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i}\n  {first_eq_top : filtration 0 = ⊤}\n  {step_cond₁ : ∀ (k : ℕ) (hk : k < Nat.find fin_len), μ ⟨(filtration (k + 1), filtration k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩}\n  {step_cond₂ :\n    ∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n      z < filtration i → μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩}\n  {filtration_1 : ℕ → ℒ} {antitone_1 : Antitone filtration_1} {fin_len_1 : ∃ N, filtration_1 N = ⊥}\n  {strict_anti_1 : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len_1 → filtration_1 j < filtration_1 i}\n  {first_eq_top_1 : filtration_1 0 = ⊤}\n  {step_cond₁_1 :\n    ∀ (k : ℕ) (hk : k < Nat.find fin_len_1), μ ⟨(filtration_1 (k + 1), filtration_1 k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩}\n  {step_cond₂_1 :\n    ∀ (i : ℕ) (hi : i < Nat.find fin_len_1) (z : ℒ) (h' : filtration_1 (i + 1) < z),\n      z < filtration_1 i → μ ⟨(filtration_1 (i + 1), z), h'⟩ < μ ⟨(filtration_1 (i + 1), filtration_1 i), ⋯⟩},\n  { filtration := filtration, antitone := antitone, fin_len := fin_len, strict_anti := strict_anti,\n        first_eq_top := first_eq_top, step_cond₁ := step_cond₁, step_cond₂ := step_cond₂ } =\n      { filtration := filtration_1, antitone := antitone_1, fin_len := fin_len_1, strict_anti := strict_anti_1,\n        first_eq_top := first_eq_top_1, step_cond₁ := step_cond₁_1, step_cond₂ := step_cond₂_1 } →\n    filtration = filtration_1",
  "constCategory": "Theorem"},
 {"references": ["HEq"],
  "name": "HEq.refl",
  "constType": "∀ {α : Sort u} (a : α), a ≍ a",
  "constCategory": "Other"},
 {"references":
  ["LE.le.eq_or_lt",
   "LT.lt",
   "Not",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "LE.le",
   "Or.resolve_right",
   "Preorder.toLT",
   "Eq",
   "Preorder.toLE"],
  "name": "eq_of_le_of_not_lt",
  "constType":
  "∀ {α : Type u_2} [inst : PartialOrder α] {a b : α}, a ≤ b → ¬a < b → a = b",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "SetLike.instMembership",
   "Add",
   "Module",
   "instHAdd",
   "Membership.mem",
   "Subtype.val",
   "Submodule",
   "HAdd.hAdd",
   "AddCommMonoid",
   "AddCommMonoid.toAddCommSemigroup",
   "Submodule.add._proof_1",
   "Submodule.setLike",
   "Add.mk",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Subtype.mk",
   "Semiring"],
  "name": "Submodule.add",
  "constType":
  "{R : Type u} →\n  {M : Type v} →\n    [inst : Semiring R] → [inst_1 : AddCommMonoid M] → {module_M : _root_.Module R M} → (p : Submodule R M) → Add ↥p",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "HasSSubset",
   "HasSSubset.SSubset",
   "HasSubset.Subset",
   "HasSubset",
   "And",
   "Iff.mp",
   "ssubset_iff_subset_not_subset",
   "IsNonstrictStrictOrder",
   "And.left"],
  "name": "subset_of_ssubset",
  "constType":
  "∀ {α : Type u} [inst : HasSubset α] [inst_1 : HasSSubset α]\n  [IsNonstrictStrictOrder α (fun x1 x2 ↦ x1 ⊆ x2) fun x1 x2 ↦ x1 ⊂ x2] {a b : α}, a ⊂ b → a ⊆ b",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "GT.gt",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.impl.prop3d4₀func.match_1",
   "instOfNatNat",
   "HarderNarasimhan.impl.prop3d4₀func._proof_4",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.impl.prop3d4₀func._proof_2",
   "Set.Nonempty",
   "Exists",
   "Lattice.toSemilatticeInf",
   "Set",
   "HarderNarasimhan.impl.ℒₛ",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.impl.prop3d4₀func._proof_3",
   "Prod.snd",
   "Nat.brecOn",
   "Exists.choose",
   "OfNat.ofNat",
   "Set.instMembership",
   "Unit",
   "LT.lt",
   "Prod",
   "Nat",
   "Nat.succ",
   "HarderNarasimhan.InIntvl",
   "Lattice",
   "Nontrivial",
   "Nat.below",
   "HarderNarasimhan.impl.prop3d4₀func._proof_1",
   "Subtype.mk",
   "dite",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] →\n      [BoundedOrder ℒ] →\n        [h : WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [CompleteLattice S] →\n              ({ p // p.1 < p.2 } → S) → (I : { p // p.1 < p.2 }) → ℕ → { p // HarderNarasimhan.InIntvl I p }",
  "constCategory": "Definition"},
 {"references":
  ["Not", "Decidable.not_forall", "Exists", "Iff", "Classical.propDecidable"],
  "name": "Classical.not_forall",
  "constType": "∀ {α : Sort u_1} {p : α → Prop}, (¬∀ (x : α), p x) ↔ ∃ x, ¬p x",
  "constCategory": "Theorem"},
 {"references": ["Iff", "Iff.refl"],
  "name": "Iff.rfl",
  "constType": "∀ {a : Prop}, a ↔ a",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "CommRing",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_4",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Not",
   "instLTNat",
   "Nat",
   "LE.le",
   "Nat.ge_of_not_lt",
   "instLENat"],
  "name": "Nat.le_of_not_lt",
  "constType": "∀ {a b : ℕ}, ¬a < b → b ≤ a",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_strict_decreasing._simp_1_5",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references": ["Min"],
  "name": "Min.min",
  "constType": "{α : Type u} → [self : Min α] → α → α → α",
  "constCategory": "Definition"},
 {"references": ["LE"],
  "name": "LE.mk",
  "constType": "{α : Type u} → (α → α → Prop) → LE α",
  "constCategory": "Other"},
 {"references":
  ["Distrib.toAdd",
   "add_left_comm",
   "True",
   "Eq.trans",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "CommSemiring.toSemiring",
   "congrArg",
   "HAdd.hAdd",
   "eq_self",
   "Semiring.toNonAssocSemiring",
   "AddCommMonoid.toAddCommSemigroup",
   "of_eq_true",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "Eq",
   "Eq.ndrec"],
  "name": "Mathlib.Tactic.Ring.add_pf_add_gt",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {a b₂ c : R} (b₁ : R), a + b₂ = c → a + (b₁ + b₂) = b₁ + c",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.ConvexI.mk",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "HarderNarasimhan.InIntvl",
   "Min.min",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "Lattice",
   "LE.le",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.ConvexI.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Lattice ℒ] →\n    {S : Type u_2} →\n      [inst_1 : CompleteLattice S] →\n        {I : { p // p.1 < p.2 }} →\n          {μ : { p // p.1 < p.2 } → S} →\n            {motive : HarderNarasimhan.ConvexI I μ → Sort u} →\n              ((convex :\n                    ∀ (x y : ℒ),\n                      HarderNarasimhan.InIntvl I x →\n                        HarderNarasimhan.InIntvl I y → ∀ (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩) →\n                  motive ⋯) →\n                (t : HarderNarasimhan.ConvexI I μ) → motive t",
  "constCategory": "Other"},
 {"references":
  ["AddCommMonoid",
   "SetLike.instMembership",
   "Subtype",
   "Submodule.toAddSubmonoid",
   "Submodule.setLike",
   "Module",
   "Membership.mem",
   "AddSubmonoid.toAddCommMonoid",
   "Submodule",
   "Semiring"],
  "name": "Submodule.addCommMonoid",
  "constType":
  "{R : Type u} →\n  {M : Type v} →\n    [inst : Semiring R] →\n      [inst_1 : AddCommMonoid M] → {module_M : _root_.Module R M} → (p : Submodule R M) → AddCommMonoid ↥p",
  "constCategory": "Definition"},
 {"references":
  ["HasSSubset",
   "LT.lt",
   "DistribLattice.toLattice",
   "Lattice.toSemilatticeInf",
   "PartialOrder.toPreorder",
   "HasSSubset.mk",
   "Set",
   "Preorder.toLT",
   "Set.instDistribLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "Set.instHasSSubset",
  "constType": "{α : Type u} → HasSSubset (Set α)",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "Exists",
   "SetLike.instMembership",
   "RingHomSurjective",
   "SemilinearMapClass",
   "Module",
   "Submodule.map",
   "Membership.mem",
   "And",
   "DFunLike.coe",
   "Submodule",
   "Submodule.mem_map",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.lift_quot_not_bot._simp_1_1",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} [inst_6 : RingHomSurjective σ₁₂] {F : Type u_9} [inst_7 : FunLike F M M₂]\n  [inst_8 : SemilinearMapClass F σ₁₂ M M₂] {f : F} {p : Submodule R M} {x : M₂},\n  (x ∈ Submodule.map f p) = ∃ y ∈ p, f y = x",
  "constCategory": "Theorem"},
 {"references":
  ["Set.instHasSubset",
   "HasSSubset.SSubset",
   "IsNonstrictStrictOrder.mk",
   "HasSubset.Subset",
   "Set",
   "Iff.rfl",
   "IsNonstrictStrictOrder",
   "Set.instHasSSubset"],
  "name": "Set.instIsNonstrictStrictOrderSubsetSSubset",
  "constType":
  "∀ {α : Type u}, IsNonstrictStrictOrder (Set α) (fun x1 x2 ↦ x1 ⊆ x2) fun x1 x2 ↦ x1 ⊂ x2",
  "constCategory": "Theorem"},
 {"references": ["Not", "Exists", "not_exists", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.JHFil_fin_len._simp_1_1",
  "constType": "∀ {α : Sort u_1} {p : α → Prop}, (¬∃ x, p x) = ∀ (x : α), ¬p x",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Subtype.mk.injEq",
   "Eq.trans",
   "Nat.add_lt_add_right",
   "Fin.decLt",
   "HarderNarasimhan.impl.subseq_prop5",
   "Nat.lt_succ_of_le",
   "Classical.propDecidable",
   "Exists.intro",
   "Membership.mem.out",
   "Subtype.val",
   "Set.Elem",
   "Finite.of_fintype",
   "one_ne_zero._simp_1",
   "False.elim",
   "le_of_not_gt",
   "Eq.symm",
   "rfl",
   "HarderNarasimhan.impl.subseq_prop1",
   "instLTNat",
   "Nat.left_eq_add._simp_1",
   "Nat.lt_add_right",
   "Exists",
   "Exists.choose_spec",
   "Function.not_injective_iff",
   "BoundedOrder",
   "Set.instMembership",
   "Fintype.card_lt_of_surjective_not_injective",
   "Nat.find_spec",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Classical.byContradiction",
   "Lattice",
   "Top.top",
   "setOf",
   "SetCoe.ext",
   "Set.Finite.fintype",
   "Nat.find",
   "Fintype.card_le_of_injective",
   "instLTFin",
   "Fin.fintype",
   "Nat.instPreorder",
   "Nat.instNeZeroSucc",
   "le_rfl",
   "Fintype.card",
   "instOfNatNat",
   "Fin.mk",
   "Eq",
   "Preorder.toLE",
   "Set",
   "Function.Surjective",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "Fin.instLinearOrder",
   "LinearOrder.toPartialOrder",
   "MulZeroClass.toZero",
   "Finite.of_surjective",
   "Ne",
   "dite",
   "And.casesOn",
   "Function.Injective",
   "PartialOrder.toPreorder",
   "Nat.succ_lt_succ_iff",
   "Membership.mem",
   "Iff.mp",
   "HarderNarasimhan.impl.subseq_prop0'",
   "Preorder.toLT",
   "Fin",
   "Fin.le_antisymm",
   "GE.ge",
   "HarderNarasimhan.impl.subseq",
   "And.intro",
   "not_false_eq_true",
   "Fin.val",
   "Nat.instMulZeroClass",
   "Eq.rec",
   "Nat.instLinearOrder",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "lt_of_le_of_lt",
   "And.right",
   "And",
   "Fintype",
   "Bot.bot",
   "Exists.casesOn",
   "Nat",
   "Fin.mk.injEq",
   "Iff.mpr",
   "Nontrivial",
   "le_bot_iff",
   "instDecidableAnd",
   "Eq.mp",
   "congrArg",
   "Set.mem_setOf",
   "Fintype.card_fin",
   "Nat.instOne",
   "Fin.is_le",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Not",
   "not_le",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "Nat.decLe",
   "Exists.choose",
   "LT.lt",
   "ne_of_lt",
   "of_eq_true",
   "Nat.succ",
   "le_of_lt",
   "LE.le",
   "False",
   "Subtype.mk",
   "lt_self_iff_false",
   "OrderTop.toTop",
   "instLENat"],
  "name": "HarderNarasimhan.impl.subseq_prop4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f : ℕ → ℒ) (hf0 : f 0 = ⊤)\n  (atf : ∃ k, f k = ⊥) (hfat : Antitone f) (k : ℕ), f k = ⊥ → (∃ N, N + 1 ≤ k ∧ f N = f (N + 1)) → Nat.find ⋯ ≠ k",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Iff",
   "PartialOrder",
   "LE.le",
   "top_le_iff",
   "Top.top",
   "OrderTop",
   "Eq",
   "Preorder.toLE",
   "OrderTop.toTop",
   "Iff.symm"],
  "name": "eq_top_iff",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderTop α] {a : α}, a = ⊤ ↔ ⊤ ≤ a",
  "constCategory": "Theorem"},
 {"references": ["Exists", "And", "Eq", "propext", "exists_eq_right"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_8",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {a' : α}, (∃ a, p a ∧ a = a') = p a'",
  "constCategory": "Theorem"},
 {"references":
  ["Lean.Omega.Constraint",
   "Bool",
   "Eq.trans",
   "Prod.mk",
   "Lean.Omega.normalize_sat",
   "Lean.Omega.normalizeCoeffs",
   "Lean.Omega.Coeffs",
   "Option.some",
   "Lean.Omega.tidyCoeffs",
   "congrArg",
   "Prod.fst",
   "Lean.Omega.positivize?_eq_some",
   "Lean.Omega.positivizeConstraint",
   "Lean.Omega.positivizeCoeffs",
   "Eq.symm",
   "Eq",
   "Eq.ndrec",
   "Bool.true",
   "Lean.Omega.normalizeConstraint",
   "Lean.Omega.normalize",
   "Lean.Omega.positivize?",
   "Lean.Omega.normalize?",
   "Lean.Omega.positivize_sat",
   "Lean.Omega.tidy?.match_1",
   "True",
   "_private.Init.Omega.Constraint.0.Lean.Omega.tidy?.match_1.splitter",
   "And",
   "Option.getD",
   "Lean.Omega.tidyConstraint",
   "Prod.snd",
   "Unit",
   "Prod",
   "eq_self",
   "Option.none",
   "of_eq_true",
   "Lean.Omega.normalize?_eq_some",
   "Eq.refl",
   "Option",
   "id",
   "And.casesOn",
   "Lean.Omega.Constraint.sat'"],
  "name": "Lean.Omega.tidy_sat",
  "constType":
  "∀ {s : Omega.Constraint} {x v : Omega.Coeffs},\n  s.sat' x v = true → (Omega.tidyConstraint s x).sat' (Omega.tidyCoeffs s x) v = true",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "le_refl",
   "PartialOrder.toPreorder",
   "sup_eq_left",
   "Eq.trans",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.impl.rmk2d5₂._simp_1_1",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "And.intro",
   "sSup_le",
   "forall_congr",
   "Eq.symm",
   "Eq.ndrec",
   "Eq.rec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "inf_eq_right",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "HarderNarasimhan.μmax.congr_simp",
   "HarderNarasimhan.impl.lem2d4₂I",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.μmax._proof_1",
   "id",
   "Eq.mpr",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "Subtype",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "SemilatticeSup.toPartialOrder",
   "lt_of_le_of_ne",
   "CompleteLattice.toCompleteSemilatticeSup",
   "congrArg",
   "Prod.fst",
   "le_rfl",
   "Subtype.prop",
   "Preorder.toLE",
   "Eq",
   "lt_of_le_of_lt'",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Set",
   "not_le_of_gt",
   "LT.lt",
   "Max.max",
   "ne_of_lt",
   "Min.min",
   "le_of_lt",
   "SemilatticeSup.toMax",
   "LE.le",
   "le_sSup",
   "CompleteSemilatticeSup.toPartialOrder",
   "eq_of_le_of_ge",
   "Ne",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.rmk2d5₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ → HarderNarasimhan.μmax μ I = HarderNarasimhan.μmax (HarderNarasimhan.μmax μ) I",
  "constCategory": "Theorem"},
 {"references":
  ["Iff.trans",
   "PartialOrder.toPreorder",
   "True",
   "Eq.trans",
   "And",
   "SemilatticeSup.toPartialOrder",
   "and_true",
   "sup_le_iff._simp_1",
   "congrArg",
   "Max.max",
   "le_antisymm_iff",
   "iff_self",
   "of_eq_true",
   "congr",
   "Iff",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup",
   "le_sup_right._simp_1",
   "Eq",
   "Preorder.toLE",
   "le_refl._simp_1"],
  "name": "sup_eq_right",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, a ⊔ b = b ↔ a ≤ b",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "rfl",
   "Lattice.toSemilatticeInf",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "HarderNarasimhan.instPartialOrderInterval",
   "Subtype.mk"],
  "name": "HarderNarasimhan.strip_bot",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {a b : ℒ} (h : a < b), ↑⊥ = a",
  "constCategory": "Theorem"},
 {"references":
  ["ne_comm",
   "Iff.trans",
   "PartialOrder.toPreorder",
   "AddZeroClass",
   "LE.le.lt_iff_ne",
   "Preorder.toLT",
   "CanonicallyOrderedAdd",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "LT.lt",
   "zero_le",
   "Iff",
   "PartialOrder",
   "Ne",
   "Zero.toOfNat0",
   "Preorder.toLE",
   "AddZero.toZero"],
  "name": "pos_iff_ne_zero",
  "constType":
  "∀ {α : Type u} [inst : AddZeroClass α] [inst_1 : PartialOrder α] [CanonicallyOrderedAdd α] {a : α}, 0 < a ↔ a ≠ 0",
  "constCategory": "Theorem"},
 {"references":
  ["Membership.mem",
   "Submonoid.smul",
   "Exists.intro",
   "SMulZeroClass.toSMul",
   "LocalizedModule.mk",
   "LocalizedModule.instZero",
   "MulAction.toSMul",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "DistribMulAction.toMulAction",
   "NonAssocSemiring.toMulZeroOneClass",
   "DistribSMul.toSMulZeroClass",
   "LocalizedModule.mk_eq",
   "Exists",
   "SetLike.instMembership",
   "LocalizedModule",
   "MulOne.toOne",
   "Submonoid.instSetLike",
   "DistribMulAction.toDistribSMul",
   "Submonoid.mulAction",
   "AddZeroClass.toAddZero",
   "Submonoid",
   "Eq.refl",
   "Iff.mpr",
   "HSMul.hSMul",
   "one_smul",
   "id",
   "Eq.mpr",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "MulOneClass.toMulOne",
   "smul_zero",
   "Subtype",
   "Module",
   "CommSemiring",
   "MulZeroOneClass.toMulOneClass",
   "AddCommMonoid.toAddMonoid",
   "congrArg",
   "Submonoid.distribMulAction",
   "MonoidWithZero.toMonoid",
   "Monoid.toMulOneClass",
   "instHSMul",
   "Zero.toOfNat0",
   "Eq",
   "Submonoid.toMonoid",
   "CommSemiring.toSemiring",
   "Semiring.toMonoidWithZero",
   "Submonoid.one",
   "OfNat.ofNat",
   "Module.toDistribMulAction",
   "One.toOfNat1"],
  "name": "LocalizedModule.zero_mk",
  "constType":
  "∀ {R : Type u} [inst : CommSemiring R] {S : Submonoid R} {M : Type v} [inst_1 : AddCommMonoid M]\n  [inst_2 : _root_.Module R M] (s : ↥S), LocalizedModule.mk 0 s = 0",
  "constCategory": "Theorem"},
 {"references": ["Exists", "exists_and_right", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.instWellFoundedGTInterval._simp_3",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {b : Prop}, (∃ x, p x ∧ b) = ((∃ x, p x) ∧ b)",
  "constCategory": "Theorem"},
 {"references": ["Nat.lt", "Nat", "LT.mk", "LT"],
  "name": "instLTNat",
  "constType": "LT ℕ",
  "constCategory": "Definition"},
 {"references":
  ["rfl",
   "HEq.refl",
   "Eq.refl",
   "eq_of_heq",
   "Eq.symm",
   "HEq",
   "heq_of_eq",
   "Eq.ndrec",
   "Eq",
   "HEq.casesOn"],
  "name": "_private.Mathlib.Tactic.CongrExclamation.0.heq_imp_of_eq_imp",
  "constType":
  "∀ {α : Sort u_1} {x y : α} {p : x ≍ y → Prop}, (∀ (he : x = y), p ⋯) → ∀ (he : x ≍ y), p he",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "Classical.propDecidable",
   "Subtype.val",
   "Prod.fst",
   "Subtype.prop",
   "Eq.symm",
   "WellFoundedGT",
   "HarderNarasimhan.impl.prop3d4₀func_len",
   "Preorder.toLE",
   "Eq",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Not.decidable_imp_symm",
   "Not",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "eq_of_le_of_not_lt",
   "HarderNarasimhan.impl.prop3d4₀func",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.impl.prop3d4₀func_fin_len",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "Nat.find_min",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_defprop3₀",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 })\n  (hμDCC : HarderNarasimhan.μA_DescendingChainCondition μ),\n  ∀ i < HarderNarasimhan.impl.prop3d4₀func_len μ I hμDCC, (↑I).1 < ↑(HarderNarasimhan.impl.prop3d4₀func μ I i)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "Nat",
   "instHAdd",
   "instOfNatNat",
   "Fin",
   "Fin.castAdd",
   "OfNat.ofNat"],
  "name": "Fin.castSucc",
  "constType": "{n : ℕ} → Fin n → Fin (n + 1)",
  "constCategory": "Definition"},
 {"references":
  ["FunLike",
   "RingHom",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.comap",
   "SemilinearMapClass",
   "Module",
   "Submodule.instBot",
   "Bot.bot",
   "Submodule",
   "Semiring"],
  "name": "LinearMap.ker",
  "constType":
  "{R : Type u_1} →\n  {R₂ : Type u_2} →\n    {M : Type u_5} →\n      {M₂ : Type u_7} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring R₂] →\n            [inst_2 : AddCommMonoid M] →\n              [inst_3 : AddCommMonoid M₂] →\n                [inst_4 : _root_.Module R M] →\n                  [inst_5 : _root_.Module R₂ M₂] →\n                    {τ₁₂ : R →+* R₂} →\n                      {F : Type u_11} → [inst_6 : FunLike F M M₂] → [SemilinearMapClass F τ₁₂ M M₂] → F → Submodule R M",
  "constCategory": "Definition"},
 {"references":
  ["OrderDual.toDual",
   "OrderDual",
   "Equiv.instEquivLike",
   "Exists",
   "EquivLike.toFunLike",
   "OrderDual.exists",
   "Eq",
   "DFunLike.coe",
   "Equiv",
   "propext"],
  "name": "HarderNarasimhan.impl.prop4d3₁._simp_1_1",
  "constType":
  "∀ {α : Type u_1} {p : αᵒᵈ → Prop}, (∃ a, p a) = ∃ a, p (OrderDual.toDual a)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "WellFounded.has_min",
   "Prod.mk",
   "Membership.mem",
   "Eq.mpr_not",
   "Preorder.toLT",
   "Classical.propDecidable",
   "eq_true",
   "Membership.mem.out",
   "GT.gt",
   "Subtype.val",
   "False.elim",
   "Eq.rec",
   "Eq.ndrec",
   "HarderNarasimhan.impl.ℒₛ._proof_1",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "of_eq_false",
   "Exists",
   "Exists.choose_spec",
   "HarderNarasimhan.impl.ℒₛ",
   "And",
   "HarderNarasimhan.impl.prop3d4₀func._proof_6",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.impl.prop3d4₀func_helper",
   "Set.instMembership",
   "Prod",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "eq_false",
   "Classical.byContradiction",
   "Nontrivial",
   "Lattice",
   "id",
   "Eq.mpr",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "instDecidableTrue",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "dite_congr",
   "congrArg",
   "Prod.fst",
   "Subtype.prop",
   "instOfNatNat",
   "IsWellFounded.wf",
   "not_true_eq_false",
   "WellFoundedGT",
   "instDecidableFalse",
   "dite_cond_eq_false",
   "Preorder.toLE",
   "Eq",
   "Not",
   "HarderNarasimhan.impl.prop3d4₀func._proof_2",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "True",
   "Set",
   "instHAdd",
   "HarderNarasimhan.impl.prop3d4₀func",
   "Exists.choose",
   "OfNat.ofNat",
   "Eq.mpr_prop",
   "HAdd.hAdd",
   "LT.lt",
   "eq_self",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.μA.congr_simp",
   "HarderNarasimhan.impl.prop3d4₀func._proof_5",
   "LE.le",
   "False",
   "Ne",
   "Subtype.mk",
   "dite",
   "HarderNarasimhan.impl.ℒₛ._proof_2",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_defprop1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (i : ℕ)\n  (hi : (↑I).1 ≠ ↑(HarderNarasimhan.impl.prop3d4₀func μ I (i + 1))),\n  HarderNarasimhan.μA μ ⟨((↑I).1, ↑(HarderNarasimhan.impl.prop3d4₀func μ I (i + 1))), ⋯⟩ >\n    HarderNarasimhan.μA μ ⟨((↑I).1, ↑(HarderNarasimhan.impl.prop3d4₀func μ I i)), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "Exists",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.μA_DescendingChainCondition.mk",
   "StrictAnti",
   "Nat",
   "HarderNarasimhan.μA",
   "Lattice",
   "Nontrivial",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μA_DescendingChainCondition.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.μA_DescendingChainCondition μ → Sort u} →\n                ((μ_dcc :\n                      ∀ (a : ℒ) (f : ℕ → ℒ) (h₁ : ∀ (n : ℕ), f n > a),\n                        StrictAnti f →\n                          ∃ N, ¬HarderNarasimhan.μA μ ⟨(a, f N), ⋯⟩ < HarderNarasimhan.μA μ ⟨(a, f (N + 1)), ⋯⟩) →\n                    motive ⋯) →\n                  (t : HarderNarasimhan.μA_DescendingChainCondition μ) → motive t",
  "constCategory": "Other"},
 {"references":
  ["Not",
   "absurd",
   "LT.lt",
   "Preorder",
   "lt_irrefl",
   "Preorder.toLT",
   "False",
   "Ne",
   "Eq.rec",
   "Eq"],
  "name": "ne_of_gt",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] {a b : α}, b < a → a ≠ b",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "instAddNat",
   "HarderNarasimhan.SlopeLike",
   "Ne.lt_top'",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Eq.trans",
   "Prod.mk",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "Classical.propDecidable",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "GT.gt",
   "Nat.instAddCommMonoid",
   "And.intro",
   "HarderNarasimhan.JordanHolderFiltration",
   "Eq.symm",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Nat.instIsOrderedAddMonoid",
   "Eq.rec",
   "Eq.ndrec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.JordanHolderFiltration.strict_anti",
   "Nat.instPartialOrder",
   "And.right",
   "Nat.instStarRing",
   "Nat.zero_lt_succ",
   "And",
   "Nat.recAux",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "Nat.find_spec",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "id",
   "Top.top",
   "Eq.mpr",
   "HarderNarasimhan.JordanHolderFiltration.step_cond₁",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Nat.instAddCancelCommMonoid",
   "Prod.fst",
   "congrArg",
   "Nat.instPreorder",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "le_rfl",
   "Nat.instSemiring",
   "Nat.instOne",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "WellFoundedGT",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.JordanHolderFiltration.first_eq_top",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "AddZero.toAdd",
   "HarderNarasimhan.seesaw'",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "LT.lt",
   "Nat.lt_of_succ_lt",
   "eq_self",
   "lt_add_one",
   "of_eq_true",
   "le_of_lt",
   "Nat.le_of_succ_le",
   "Subtype.mk",
   "dite",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "OrderTop.toTop",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.μ_bot_JH_eq_μ_tot",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S} [hsl : HarderNarasimhan.SlopeLike μ]\n  (JH : HarderNarasimhan.JordanHolderFiltration μ) (i : ℕ) (hi : i < Nat.find ⋯),\n  μ ⟨(⊥, JH.filtration i), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.μ_Admissible",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "IsTotal",
   "Or",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "WellFoundedGT",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.μ_Admissible.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  ((IsTotal S fun x1 x2 ↦ x1 ≤ x2) ∨ ∀ (I : { p // p.1 < p.2 }), HarderNarasimhan.IsAttained μ I) →\n    HarderNarasimhan.μ_Admissible μ",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "Nat.instPreorder",
   "HarderNarasimhan.WeakAscendingChainCondition.mk",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "PartialOrder",
   "Preorder.toLE",
   "le_top",
   "Exists",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "StrictMono"],
  "name": "HarderNarasimhan.WeakAscendingChainCondition.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.WeakAscendingChainCondition μ → Sort u} →\n                ((wacc : ∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩) →\n                    motive ⋯) →\n                  (t : HarderNarasimhan.WeakAscendingChainCondition μ) → motive t",
  "constCategory": "Other"},
 {"references":
  ["And.intro",
   "True",
   "And.right",
   "And",
   "Eq",
   "trivial",
   "propext",
   "Iff.intro"],
  "name": "true_and",
  "constType": "∀ (p : Prop), (True ∧ p) = p",
  "constCategory": "Theorem"},
 {"references":
  ["not_le_of_gt",
   "Not",
   "LT.lt",
   "Preorder",
   "imp_not_comm",
   "LE.le",
   "Preorder.toLT",
   "Iff.mp",
   "Preorder.toLE"],
  "name": "not_lt_of_ge",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] {a b : α}, a ≤ b → ¬b < a",
  "constCategory": "Theorem"},
 {"references": ["Nat", "Nat.succ", "Nat.rec", "Nat.zero"],
  "name": "Nat.casesOn",
  "constType":
  "{motive : ℕ → Sort u} → (t : ℕ) → motive Nat.zero → ((n : ℕ) → motive n.succ) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["Function.Injective.eq_iff",
   "Finset.singleton_injective",
   "Finset.instSingleton",
   "Finset",
   "Iff",
   "Singleton.singleton",
   "Eq"],
  "name": "Finset.singleton_inj",
  "constType": "∀ {α : Type u_1} {a b : α}, {a} = {b} ↔ a = b",
  "constCategory": "Theorem"},
 {"references": ["Top"],
  "name": "Top.top",
  "constType": "{α : Type u_1} → [self : Top α] → α",
  "constCategory": "Definition"},
 {"references": ["Eq.symm", "Eq.rec", "Eq"],
  "name": "Eq.mpr",
  "constType": "{α β : Sort u} → α = β → β → α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "HarderNarasimhan.CoprimaryFiltration.rec",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Submodule.instBot",
   "Nontrivial",
   "HarderNarasimhan.CoprimaryFiltration.mk",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Nat.instPreorder",
   "Submodule",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.casesOn",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] →\n                {motive : HarderNarasimhan.CoprimaryFiltration R M → Sort u} →\n                  (t : HarderNarasimhan.CoprimaryFiltration R M) →\n                    ((filtration : ℕ → Submodule R M) →\n                        (monotone : Monotone filtration) →\n                          (first_eq_bot : filtration 0 = ⊥) →\n                            (fin_len : ∃ n, filtration n = ⊤) →\n                              (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                                (piecewise_coprimary :\n                                    ∀ n < Nat.find fin_len,\n                                      HarderNarasimhan.Coprimary R\n                                        (↥(filtration (n + 1)) ⧸ (filtration n).submoduleOf (filtration (n + 1)))) →\n                                  (strict_mono_associated_prime :\n                                      ∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len),\n                                        { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }) →\n                                    motive\n                                      { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot,\n                                        fin_len := fin_len, strict_mono := strict_mono,\n                                        piecewise_coprimary := piecewise_coprimary,\n                                        strict_mono_associated_prime := strict_mono_associated_prime }) →\n                      motive t",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "Preorder", "Preorder.toLT"],
  "name": "StrictMono",
  "constType":
  "{α : Type u} → {β : Type v} → [Preorder α] → [Preorder β] → (α → β) → Prop",
  "constCategory": "Definition"},
 {"references": ["Equiv.refl", "OrderDual", "Equiv"],
  "name": "OrderDual.toDual",
  "constType": "{α : Type u_1} → α ≃ αᵒᵈ",
  "constCategory": "Definition"},
 {"references": ["AddCommMonoid", "Semiring"],
  "name": "Module",
  "constType":
  "(R : Type u) → (M : Type v) → [Semiring R] → [AddCommMonoid M] → Type (max u v)",
  "constCategory": "Other"},
 {"references": ["PartialOrder", "OmegaCompletePartialOrder"],
  "name": "OmegaCompletePartialOrder.toPartialOrder",
  "constType":
  "{α : Type u_6} → [self : OmegaCompletePartialOrder α] → PartialOrder α",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.WeakSlopeLike₂.rec",
   "Or",
   "Subtype.prop",
   "PartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.WeakSlopeLike₂.mk",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.WeakSlopeLike₂",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₂.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.WeakSlopeLike₂ μ → Sort u} →\n                (t : HarderNarasimhan.WeakSlopeLike₂ μ) →\n                  ((wsl₂ :\n                        ∀ (z : { p // p.1 < p.2 }) (hz : ⊥ < (↑z).1),\n                          μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ z ∨ μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ ⟨(⊥, (↑z).1), hz⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Nat.cast",
   "RelSeries.toFun",
   "Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "Fin",
   "RelSeries",
   "eq_true",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Fin.NatCast.instNatCast",
   "instOfNatNat",
   "RelSeries.length",
   "HarderNarasimhan.IntervalSemistableRel",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "BoundedOrder",
   "HarderNarasimhan.impl.balabala1",
   "Prod.snd",
   "instNeZeroNatHAdd_1",
   "OfNat.ofNat",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Lattice",
   "Nontrivial",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.balabala1._simp_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (s : RelSeries (HarderNarasimhan.IntervalSemistableRel μ))\n  {i : ℕ}, i + 1 < s.length → (s.toFun ↑i < s.toFun ↑(i + 1)) = True",
  "constCategory": "Theorem"},
 {"references": ["Option"],
  "name": "Option.some",
  "constType": "{α : Type u} → α → Option α",
  "constCategory": "Other"},
 {"references": ["AddCommMonoid", "AddMonoid"],
  "name": "AddCommMonoid.toAddMonoid",
  "constType": "{M : Type u} → [self : AddCommMonoid M] → AddMonoid M",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "instLTNat", "Nat", "Fin.val", "Fin", "LT.mk", "LT"],
  "name": "instLTFin",
  "constType": "{n : ℕ} → LT (Fin n)",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "LinearMap.instFunLike",
   "Module",
   "Submodule.module",
   "Submodule.map",
   "Membership.mem",
   "Submodule.map_subtype_top",
   "congrArg",
   "Submodule",
   "Submodule.subtype",
   "LinearMap.semilinearMapClass",
   "eq_top_iff",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq",
   "Preorder.toLE",
   "Submodule.map_le_iff_le_comap",
   "Submodule.instOrderTop",
   "Iff.trans",
   "SetLike.instMembership",
   "Submodule.instTop",
   "Iff.rfl",
   "LinearMap",
   "Iff.symm",
   "RingHomSurjective.ids",
   "Submodule.comap",
   "Submodule.setLike",
   "Iff",
   "LE.le",
   "id",
   "Submodule.completeLattice",
   "Top.top",
   "Eq.mpr",
   "Submodule.addCommMonoid",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "Semiring"],
  "name": "Submodule.comap_subtype_eq_top",
  "constType":
  "∀ {R : Type u_1} {M : Type u_5} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  {p p' : Submodule R M}, Submodule.comap p.subtype p' = ⊤ ↔ p ≤ p'",
  "constCategory": "Theorem"},
 {"references": ["Mul", "MulOne"],
  "name": "MulOne.toMul",
  "constType": "{M : Type u_2} → [self : MulOne M] → Mul M",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "PartialOrder.mk",
   "DecidableLE",
   "DecidableEq",
   "Iff",
   "LE.mk",
   "id",
   "And",
   "LT.mk",
   "Preorder.mk",
   "decidableEqOfDecidableLE",
   "Eq"],
  "name":
  "HarderNarasimhan.TotallyOrderedRealVectorSpace.toDecidableEq._inherited_default",
  "constType":
  "{V : Type u_1} →\n  (le lt : V → V → Prop) →\n    (∀ (a : V), le a a) →\n      (∀ (a b c : V), le a b → le b c → le a c) →\n        (∀ (a b : V), lt a b ↔ le a b ∧ ¬le b a) →\n          (∀ (a b : V), le a b → le b a → a = b) → DecidableLE V → DecidableEq V",
  "constCategory": "Definition"},
 {"references":
  ["Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "SemilinearMapClass",
   "Module",
   "Submodule.module",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Submodule",
   "LinearMap.semilinearMapClass",
   "Submodule.Quotient.addCommGroup",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "CommRing.toCommSemiring",
   "SetLike.instMembership",
   "CommSemiring.toSemiring",
   "Submodule.addCommGroup",
   "AddCommGroup",
   "CommRing",
   "LinearMap",
   "Ring.toSemiring",
   "CommRing.toRing",
   "Submodule.setLike",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf"],
  "name": "HarderNarasimhan.impl.lift_quot._proof_3",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] {M : Type u_1} [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (N₁ N₂ : Submodule R M),\n  SemilinearMapClass (↥N₂ →ₗ[R] ↥N₂ ⧸ N₁.submoduleOf N₂) (RingHom.id R) (↥N₂) (↥N₂ ⧸ N₁.submoduleOf N₂)",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "HarderNarasimhan.impl.prop4d18₁",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "HarderNarasimhan.impl.prop4d18₂",
   "Prod.fst",
   "And.intro",
   "HarderNarasimhan.NashEquilibrium",
   "Or",
   "HarderNarasimhan.μBstar",
   "HarderNarasimhan.WeakSlopeLike₁",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "CompleteLinearOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.WeakSlopeLike₂",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.proposition_4_18",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Semistable μ →\n    HarderNarasimhan.μBstar μ ≤ HarderNarasimhan.μAstar μ ∧\n      (HarderNarasimhan.WeakAscendingChainCondition μ ∧ HarderNarasimhan.WeakSlopeLike₁ μ ∨\n          HarderNarasimhan.StrongDescendingChainCondition μ ∧ HarderNarasimhan.WeakSlopeLike₂ μ →\n        HarderNarasimhan.NashEquilibrium μ)",
  "constCategory": "Theorem"},
 {"references":
  ["Classical.propDecidable",
   "HarderNarasimhan.S₂I",
   "HarderNarasimhan.S₁I",
   "HarderNarasimhan.S₁I._proof_1",
   "le_of_not_gt",
   "Eq.symm",
   "Nat.sub_one_add_one",
   "instLTNat",
   "Nat.le_sub_one_of_lt",
   "Exists",
   "ne_of_gt",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "HarderNarasimhan.impl.HNFil_of_fin_len",
   "not_lt_of_ge",
   "HarderNarasimhan.InIntvl",
   "Nat.le_of_lt_succ",
   "Top.top",
   "HarderNarasimhan.semistableI.congr_simp",
   "Eq.mpr",
   "lt_top_iff_ne_top",
   "HarderNarasimhan.Semistable",
   "Nat.find",
   "HarderNarasimhan.impl.instμ_Admissible",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.add_one_pos",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "Or.inl",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
   "Eq",
   "not_ne_iff",
   "Set",
   "AddZero.toAdd",
   "lt_of_lt_of_le",
   "CompletelyDistribLattice.toCompleteLattice",
   "eq_self",
   "HarderNarasimhan.impl.HNFil_is_strict_mono",
   "Ne",
   "eq_of_le_of_ge",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instHSub",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "HarderNarasimhan.ConvexI",
   "le_of_le_of_eq",
   "Membership.mem",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "HarderNarasimhan.impl.theorem3d10._proof_1_9",
   "GT.gt",
   "Nat.instAddCommMonoid",
   "GE.ge",
   "Nat.lt_add_one_iff",
   "Or",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Nat.instPartialOrder",
   "lt_of_le_of_lt",
   "And.right",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.impl.semistableI_iff",
   "Nat",
   "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "instDecidableAnd",
   "HarderNarasimhan.StI",
   "Eq.mp",
   "le_trans",
   "DecidablePred",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.impl.theorem3d10._simp_1_6",
   "BoundedOrder.toOrderTop",
   "Nat.zero_lt_of_lt",
   "Not",
   "not_and_or",
   "le_top",
   "instHAdd",
   "Nat.sub_le_sub_right",
   "LT.lt",
   "lt_add_one",
   "of_eq_true",
   "One.toOfNat1",
   "instSubNat",
   "ne_of_lt",
   "le_of_lt",
   "Nat.succ",
   "SemilatticeSup.toMax",
   "False",
   "Nat.lt_sub_of_add_lt",
   "Subtype.mk",
   "OrderTop.toTop",
   "HarderNarasimhan.impl.lem2d4₃I",
   "instAddNat",
   "Eq.trans",
   "HarderNarasimhan.semistableI",
   "Exists.intro",
   "Membership.mem.out",
   "Subtype.val",
   "False.elim",
   "le_sup_right",
   "Nat.le_of_lt_add_one",
   "Eq.ndrec",
   "le_iff_eq_or_lt",
   "rfl",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists.choose_spec",
   "eq_comm",
   "Nat.recAux",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Nat.find_spec",
   "BoundedOrder.toOrderBot",
   "Iff.not",
   "Nat.instStarOrderedRing",
   "Eq.refl",
   "Lattice",
   "Nat.sub_one_lt_of_le",
   "HarderNarasimhan.in_TotIntvl",
   "AddMonoid.toAddZeroClass",
   "Nat.le_of_pred_lt",
   "Or.inr",
   "HarderNarasimhan.impl.theorem3d10._simp_1_5",
   "Nat.sub_one_lt_of_lt",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "HarderNarasimhan.impl.HNlen",
   "not_le._simp_1",
   "Nat.instPreorder",
   "le_inf",
   "instOfNatNat",
   "congr",
   "WellFoundedGT",
   "not_true_eq_false",
   "ConditionallyCompleteLinearOrder.toLinearOrder",
   "HarderNarasimhan.impl.theorem3d10._simp_1_7",
   "Preorder.toLE",
   "sup_le_iff",
   "propext",
   "inf_lt_left",
   "eq_of_le_of_not_lt'",
   "Nat.instAddMonoid",
   "HarderNarasimhan.instBoundedOrderInterval",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "not_le_of_gt",
   "LinearOrder.toPartialOrder",
   "Max.max",
   "HarderNarasimhan.μA",
   "Nat.le_of_succ_le",
   "dite",
   "right_lt_sup",
   "Nat.find_min",
   "le_refl",
   "Lattice.toSemilatticeSup",
   "Prod.mk",
   "Iff.mp",
   "Nat.sub_one_lt",
   "HarderNarasimhan.impl.HNFil_prop_of_def",
   "And.intro",
   "Nat.sub_add_cancel",
   "funext",
   "HSub.hSub",
   "Nat.find.congr_simp",
   "Nat.instIsOrderedAddMonoid",
   "Nat.instLinearOrder",
   "Nat.add_one_le_iff",
   "And",
   "Nat.instStarRing",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "HarderNarasimhan.impl.HNFil_ne_top_iff_lt_len",
   "Nat.gt_of_not_le",
   "Decidable.byContradiction",
   "upperBounds",
   "Iff.mpr",
   "Nontrivial",
   "HarderNarasimhan.impl.theorem3d10._simp_1_11",
   "id",
   "HarderNarasimhan.impl.theorem3d10._simp_1_8",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "HarderNarasimhan.impl.HNFil",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Lattice.toSemilatticeInf",
   "eq_of_le_of_not_lt",
   "True",
   "Nat.decLe",
   "Exists.choose",
   "Or.casesOn",
   "HarderNarasimhan.instNontrivialInterval",
   "Min.min",
   "HarderNarasimhan.μA.congr_simp",
   "LE.le",
   "HarderNarasimhan.impl.theorem3d10._proof_1",
   "instLENat"],
  "name": "HarderNarasimhan.impl.theorem3d10",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S)\n  (hμ : HarderNarasimhan.μA_DescendingChainCondition μ) (hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ)\n  (f : ℕ → ℒ),\n  f 0 = ⊥ →\n    ∀ (hffin : ∃ n, f n = ⊤) (hfsi : ∀ (i j : ℕ), i < j → j ≤ Nat.find hffin → f i < f j),\n      (∀ i ≥ Nat.find hffin, f i = ⊤) →\n        (∀ (j : ℕ) (hj : j < Nat.find hffin),\n            HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(f j, f (j + 1)), ⋯⟩ μ)) →\n          (∀ (i j : ℕ) (hij : i < j) (hj : j < Nat.find hffin),\n              HarderNarasimhan.μA μ ⟨(f i, f (i + 1)), ⋯⟩ > HarderNarasimhan.μA μ ⟨(f j, f (j + 1)), ⋯⟩) →\n            f = HarderNarasimhan.impl.HNFil μ",
  "constCategory": "Theorem"},
 {"references":
  ["Lean.mkAtom",
   "Lean.Name.mkStr4",
   "Lean.Syntax.node",
   "Lean.Name.mkStr1",
   "Array.push",
   "Lean.Syntax",
   "Array.empty",
   "Lean.SourceInfo.none"],
  "name": "LinearOrder.compare_eq_compareOfLessAndEq._autoParam",
  "constType": "Syntax",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.prop4d8._simp_1_2",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references": ["SubNegMonoid", "Neg"],
  "name": "SubNegMonoid.toNeg",
  "constType": "{G : Type u} → [self : SubNegMonoid G] → Neg G",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "Equiv",
   "And.intro",
   "HarderNarasimhan.impl.dualμBstar_eq_μAstar._simp_1_3",
   "SupSet.sSup",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "funext",
   "Eq.symm",
   "Eq.rec",
   "And.left",
   "rfl",
   "ConditionallyCompleteLattice.toInfSet",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Set.instMembership",
   "Exists.casesOn",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "HarderNarasimhan.μmax._proof_1",
   "id",
   "Top.top",
   "Set.ext",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "OrderDual.instBoundedOrder",
   "setOf",
   "HarderNarasimhan.μAstar",
   "OrderDual",
   "OrderDual.toDual",
   "Ne.symm",
   "Equiv.instEquivLike",
   "Subtype",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "DFunLike.coe",
   "Iff.intro",
   "congrArg",
   "OrderDual.ofDual",
   "Prod.fst",
   "OrderDual.instNontrivial",
   "Subtype.prop",
   "HarderNarasimhan.μmin",
   "OrderDual.instLT",
   "BoundedOrder.toOrderTop",
   "congr",
   "OrderDual.instCompleteLattice",
   "EquivLike.toFunLike",
   "InfSet.sInf",
   "OrderDual.instPartialOrder",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice.toConditionallyCompleteLattice",
   "propext",
   "Not",
   "Set",
   "exists_prop_congr",
   "LT.lt",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.μA._proof_1",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.dualμBstar_eq_μAstar",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  OrderDual.ofDual\n    ((HarderNarasimhan.μBstar fun p ↦ OrderDual.toDual (μ ⟨((↑p).2, (↑p).1), ⋯⟩)) = HarderNarasimhan.μAstar μ)",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "Subtype",
   "SetLike.instMembership",
   "LinearMap.instFunLike",
   "SemilinearMapClass",
   "Module",
   "Submodule.module",
   "CommSemiring.toSemiring",
   "Membership.mem",
   "AddCommGroup",
   "LinearMap",
   "CommRing",
   "Submodule",
   "LinearMap.semilinearMapClass",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "Submodule.setLike",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.addCommMonoid"],
  "name": "HarderNarasimhan.impl.lift_quot._proof_2",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] {M : Type u_1} [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (N₂ : Submodule R M), SemilinearMapClass (↥N₂ →ₗ[R] M) (RingHom.id R) (↥N₂) M",
  "constCategory": "Theorem"},
 {"references": ["Iff", "LE.le", "LE", "Iff.rfl", "GE.ge"],
  "name": "ge_iff_le",
  "constType": "∀ {α : Type u_1} [inst : LE α] {x y : α}, x ≥ y ↔ y ≤ x",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "DecidableLE",
   "PartialOrder.toPreorder",
   "Decidable",
   "Decidable.isFalse",
   "DecidableEq",
   "decidableEqOfDecidableLE._proof_2",
   "decidableEqOfDecidableLE._proof_1",
   "PartialOrder",
   "LE.le",
   "Preorder.toLE",
   "decidableEqOfDecidableLE.match_1",
   "Eq",
   "dite",
   "le_antisymm",
   "Decidable.isTrue"],
  "name": "decidableEqOfDecidableLE",
  "constType":
  "{α : Type u_1} → [inst : PartialOrder α] → [DecidableLE α] → DecidableEq α",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.SlopeLike",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.impl.rmk4d13",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "List.tfae_of_cycle",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "HarderNarasimhan.impl.rmk4d10₀",
   "PartialOrder",
   "Eq.symm",
   "List.TFAE",
   "Eq.rec",
   "Preorder.toLE",
   "Eq",
   "List.cons",
   "List.IsChain.cons_cons",
   "And.left",
   "List.nil",
   "HarderNarasimhan.impl.prop4d12",
   "HarderNarasimhan.impl.prop4d14",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "List.IsChain.singleton",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.impl.rmk4d15",
   "Nontrivial",
   "LE.le",
   "eq_of_le_of_ge",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop4d16₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.SlopeLike μ →\n    [HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl,\n        HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl,\n        HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl].TFAE",
  "constCategory": "Theorem"},
 {"references":
  ["Function.Injective.linearOrder",
   "instDecidableEqFin",
   "Fin.coe_max",
   "Fin.coe_min",
   "Fin.decLt",
   "LinearOrder",
   "Fin.compare_eq_compare_val",
   "Fin",
   "instLTFin",
   "Fin.instMin_mathlib",
   "instOrdFin",
   "Fin.instMax_mathlib",
   "Nat",
   "Fin.val",
   "Fin.val_injective",
   "instLEFin",
   "Fin.lt_iff_val_lt_val",
   "Fin.le_iff_val_le_val",
   "Nat.instLinearOrder",
   "Fin.decLe"],
  "name": "Fin.instLinearOrder",
  "constType": "{n : ℕ} → LinearOrder (Fin n)",
  "constCategory": "Definition"},
 {"references":
  ["Nat.find",
   "PartialOrder.toPreorder",
   "Submodule.instNontrivial",
   "Module",
   "HarderNarasimhan.μ",
   "Preorder.toLT",
   "Classical.propDecidable",
   "HarderNarasimhan.HarderNarasimhanFiltration.strict_mono",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_5",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.S",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
   "CompleteLattice.toConditionallyCompleteLattice",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "LT.lt",
   "IsNoetherianRing",
   "Nat",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "LE.le",
   "Nontrivial",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.S₀",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice.toBoundedOrder",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_6",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_1} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (HNFil : HarderNarasimhan.HarderNarasimhanFiltration (HarderNarasimhan.μ R M)) (i j : ℕ),\n  i < j → j ≤ Nat.find ⋯ → HNFil.filtration i < HNFil.filtration j",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.impl.ℒₛ",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "WellFoundedGT",
   "Ne",
   "Eq.ndrec",
   "Eq.rec",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.ℒₛ.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S),\n  μ = μ_1 →\n    ∀ (I : { p // p.1 < p.2 }) (x x_1 : { p // HarderNarasimhan.InIntvl I p }) (e_x : x = x_1) (hx : (↑I).1 ≠ ↑x)\n      (a a_1 : ℒ), a = a_1 → HarderNarasimhan.impl.ℒₛ μ I x hx a = HarderNarasimhan.impl.ℒₛ μ_1 I x_1 ⋯ a_1",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.trans",
   "True",
   "SemilatticeSup.toPartialOrder",
   "And",
   "le_sup_left._simp_1",
   "congrArg",
   "sup_le_iff._simp_1",
   "and_self",
   "Max.max",
   "of_eq_true",
   "congr",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup",
   "le_sup_right._simp_1",
   "Eq",
   "Preorder.toLE",
   "le_antisymm"],
  "name": "sup_comm",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] (a b : α), a ⊔ b = b ⊔ a",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "CompleteLattice",
  "constType": "Type u_8 → Type u_8",
  "constCategory": "Other"},
 {"references":
  ["instLTNat",
   "Nat.le_of_not_gt",
   "Nat.find",
   "Nat",
   "Exists",
   "LE.le",
   "DecidablePred",
   "GT.gt",
   "instLENat",
   "Nat.find_min"],
  "name": "Nat.find_min'",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (H : ∃ n, p n) {m : ℕ}, p m → Nat.find H ≤ m",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Semiring",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references": ["Not", "Exists", "Classical.not_forall", "Eq", "propext"],
  "name": "Mathlib.Tactic.Push.not_forall_eq",
  "constType": "∀ {α : Sort u_1} (s : α → Prop), (¬∀ (x : α), s x) = ∃ x, ¬s x",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Eq.symm",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Eq.ndrec",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "HEq",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Eq.propIntro",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "AddZero.toAdd",
   "Eq.casesOn",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "HarderNarasimhan.JordanHolderFiltration.mk.noConfusion",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.mk.injEq",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (filtration : ℕ → ℒ) (antitone : Antitone filtration)\n  (fin_len : ∃ N, filtration N = ⊥)\n  (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i)\n  (first_eq_top : filtration 0 = ⊤)\n  (step_cond₁ : ∀ (k : ℕ) (hk : k < Nat.find fin_len), μ ⟨(filtration (k + 1), filtration k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩)\n  (step_cond₂ :\n    ∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n      z < filtration i → μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩)\n  (filtration_1 : ℕ → ℒ) (antitone_1 : Antitone filtration_1) (fin_len_1 : ∃ N, filtration_1 N = ⊥)\n  (strict_anti_1 : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len_1 → filtration_1 j < filtration_1 i)\n  (first_eq_top_1 : filtration_1 0 = ⊤)\n  (step_cond₁_1 :\n    ∀ (k : ℕ) (hk : k < Nat.find fin_len_1), μ ⟨(filtration_1 (k + 1), filtration_1 k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩)\n  (step_cond₂_1 :\n    ∀ (i : ℕ) (hi : i < Nat.find fin_len_1) (z : ℒ) (h' : filtration_1 (i + 1) < z),\n      z < filtration_1 i → μ ⟨(filtration_1 (i + 1), z), h'⟩ < μ ⟨(filtration_1 (i + 1), filtration_1 i), ⋯⟩),\n  ({ filtration := filtration, antitone := antitone, fin_len := fin_len, strict_anti := strict_anti,\n        first_eq_top := first_eq_top, step_cond₁ := step_cond₁, step_cond₂ := step_cond₂ } =\n      { filtration := filtration_1, antitone := antitone_1, fin_len := fin_len_1, strict_anti := strict_anti_1,\n        first_eq_top := first_eq_top_1, step_cond₁ := step_cond₁_1, step_cond₂ := step_cond₂_1 }) =\n    (filtration = filtration_1)",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "And.intro",
   "Or.inl",
   "Or",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "And.left",
   "Not",
   "bot_lt_iff_ne_bot",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Bot.bot",
   "not_le_of_gt",
   "Or.casesOn",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Iff.mpr",
   "LE.le",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "lt_top_iff_ne_top",
   "OrderTop.toTop",
   "HarderNarasimhan.SlopeLike.slopelike",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.rmk4d13",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.SlopeLike μ →\n    ∀ (x : ℒ) (hx : x ≠ ⊥ ∧ x ≠ ⊤),\n      ¬μ ⟨(⊥, x), ⋯⟩ ≤ μ HarderNarasimhan.TotIntvl ∨ μ HarderNarasimhan.TotIntvl ≤ μ ⟨(x, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Exists", "Subtype", "Subtype.exists", "Subtype.mk", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.koqcl_iso._simp_1_2",
  "constType":
  "∀ {α : Sort u} {p : α → Prop} {q : { a // p a } → Prop}, (∃ x, q x) = ∃ a, ∃ (b : p a), q ⟨a, b⟩",
  "constCategory": "Theorem"},
 {"references": ["LE.le", "LE", "Eq.rec", "Eq"],
  "name": "le_of_le_of_eq",
  "constType":
  "∀ {α : Type u_1} {a b c : α} [inst : LE α], a ≤ b → b = c → a ≤ c",
  "constCategory": "Theorem"},
 {"references": ["Inter"],
  "name": "Inter.inter",
  "constType": "{α : Type u} → [self : Inter α] → α → α → α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "Subtype.val",
   "Prod.fst",
   "SupSet.sSup",
   "PartialOrder",
   "Preorder.toLE",
   "Eq",
   "Exists",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "Nontrivial",
   "HarderNarasimhan.μmax._proof_1",
   "Ne",
   "Subtype.mk",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.μmax",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] →\n      [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → { p // p.1 < p.2 } → S",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "HarderNarasimhan.HarderNarasimhanFiltration.casesOn",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Nat.lt_add_one",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.ext.match_1",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S}\n  (motive : HarderNarasimhan.HarderNarasimhanFiltration μ → Prop) (h : HarderNarasimhan.HarderNarasimhanFiltration μ),\n  (∀ (filtration : ℕ → ℒ) (monotone : Monotone filtration) (first_eq_bot : filtration 0 = ⊥)\n      (fin_len : ∃ n, filtration n = ⊤)\n      (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j)\n      (piecewise_semistable :\n        ∀ (i : ℕ) (h : i < Nat.find fin_len),\n          HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(filtration i, filtration (i + 1)), ⋯⟩ μ))\n      (μA_pseudo_strict_anti :\n        ∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len),\n          ¬HarderNarasimhan.μA μ ⟨(filtration i, filtration (i + 1)), ⋯⟩ ≤\n              HarderNarasimhan.μA μ ⟨(filtration (i + 1), filtration (i + 2)), ⋯⟩),\n      motive\n        { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot, fin_len := fin_len,\n          strict_mono := strict_mono, piecewise_semistable := piecewise_semistable,\n          μA_pseudo_strict_anti := μA_pseudo_strict_anti }) →\n    motive h",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.ConvexI.mk",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "HarderNarasimhan.InIntvl",
   "Min.min",
   "Iff.mpr",
   "Lattice",
   "LE.le",
   "SemilatticeSup.toMax",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.ConvexI.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] {S : Type u_2} [inst_1 : CompleteLattice S] {I : { p // p.1 < p.2 }}\n  {μ : { p // p.1 < p.2 } → S},\n  (∀ (x y : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        HarderNarasimhan.InIntvl I y → ∀ (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩) →\n    HarderNarasimhan.ConvexI I μ",
  "constCategory": "Definition"},
 {"references":
  ["add_left_comm",
   "Eq.trans",
   "CommSemiring",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "Semiring.toNonAssocSemiring",
   "congr",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq.ndrec",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "AddSemigroup.toAdd",
   "Distrib.toAdd",
   "NonUnitalNonAssocSemiring.toDistrib",
   "True",
   "instHAdd",
   "CommSemiring.toSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "HAdd.hAdd",
   "eq_self",
   "of_eq_true",
   "AddCommMonoid.toAddCommSemigroup",
   "add_assoc",
   "AddMonoid.toAddSemigroup"],
  "name": "Mathlib.Tactic.Ring.add_pf_add_overlap",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {a₁ a₂ b₁ b₂ c₁ c₂ : R},\n  a₁ + b₁ = c₁ → a₂ + b₂ = c₂ → a₁ + a₂ + (b₁ + b₂) = c₁ + c₂",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.impl.stable_of_step_cond₂",
   "instLTNat",
   "Exists",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Iff",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "HarderNarasimhan.Stable",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Iff.intro",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "WellFoundedGT",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "CompletelyDistribLattice.toCompleteLattice",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "HarderNarasimhan.impl.step_cond₂_of_stable",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat"],
  "name": "HarderNarasimhan.piecewise_stable_iff",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) [HarderNarasimhan.SlopeLike μ]\n  [sdc : HarderNarasimhan.StrongDescendingChainCondition' μ] (filtration : ℕ → ℒ) (fin_len : ∃ N, filtration N = ⊥)\n  (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i),\n  (∀ (i : ℕ) (hi : i < Nat.find fin_len),\n      HarderNarasimhan.Stable (HarderNarasimhan.Resμ ⟨(filtration (i + 1), filtration i), ⋯⟩ μ)) ↔\n    ∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n      z < filtration i → μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["Exists", "And", "Eq", "propext", "exists_eq_right"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_10",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {a' : α}, (∃ a, p a ∧ a = a') = p a'",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.instAddMonoid",
   "Nat",
   "MulZeroClass",
   "instMulNat",
   "MulZeroClass.mk",
   "Nat.zero_mul",
   "AddZeroClass.toAddZero",
   "AddZero.toZero",
   "Nat.mul_zero",
   "AddMonoid.toAddZeroClass"],
  "name": "Nat.instMulZeroClass",
  "constType": "MulZeroClass ℕ",
  "constCategory": "Definition"},
 {"references": ["Nat", "Int"],
  "name": "Int.ofNat",
  "constType": "ℕ → ℤ",
  "constCategory": "Other"},
 {"references":
  ["Bool",
   "True",
   "Eq.trans",
   "BEq",
   "congrArg",
   "beq_iff_eq._simp_1",
   "iff_self",
   "Bool.eq_iff_iff",
   "of_eq_true",
   "LawfulBEq",
   "congr",
   "Iff",
   "id",
   "Eq.mpr",
   "Eq",
   "BEq.beq",
   "Bool.true",
   "propext"],
  "name": "beq_eq_beq",
  "constType":
  "∀ {α : Type u_1} {β : Type u_2} [inst : BEq α] [LawfulBEq α] [inst_2 : BEq β] [LawfulBEq β] {a₁ a₂ : α} {b₁ b₂ : β},\n  (a₁ == a₂) = (b₁ == b₂) ↔ (a₁ = a₂ ↔ b₁ = b₂)",
  "constCategory": "Theorem"},
 {"references": ["Exists", "Finset", "Membership.mem", "Finset.instMembership"],
  "name": "Finset.Nonempty",
  "constType": "{α : Type u_1} → Finset α → Prop",
  "constCategory": "Definition"},
 {"references": ["SemilatticeInf", "PartialOrder"],
  "name": "SemilatticeInf.toPartialOrder",
  "constType": "{α : Type u} → [self : SemilatticeInf α] → PartialOrder α",
  "constCategory": "Definition"},
 {"references": ["And"],
  "name": "And.left",
  "constType": "∀ {a b : Prop}, a ∧ b → a",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "WellFounded",
  "constType": "{α : Sort u} → (α → α → Prop) → Prop",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "instHAdd",
   "Preorder.toLT",
   "OfNat.ofNat",
   "Nat.lt_add_one",
   "Nat.instPreorder",
   "HAdd.hAdd",
   "LT.lt",
   "Nat",
   "instOfNatNat",
   "PartialOrder",
   "StrictMono"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] (x : ℕ → ℒ), StrictMono x → ∀ (N : ℕ), x N < x (N + 1)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "le_top",
   "PartialOrder.toPreorder",
   "instHAdd",
   "Prod.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "Nat.instPreorder",
   "lt_of_lt_of_le",
   "Prod.fst",
   "LT.lt",
   "HAdd.hAdd",
   "Nat",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "Top.top",
   "Preorder.toLE",
   "OrderTop.toTop",
   "StrictMono"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._proof_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] [inst_1 : BoundedOrder ℒ] (x : ℕ → ℒ),\n  StrictMono x → ∀ (N : ℕ), (x N, ⊤).1 < (x N, ⊤).2",
  "constCategory": "Theorem"},
 {"references":
  ["True", "Iff.mpr", "Iff", "Eq", "trivial", "propext", "Iff.intro"],
  "name": "iff_true",
  "constType": "∀ (p : Prop), (p ↔ True) = p",
  "constCategory": "Theorem"},
 {"references":
  ["rfl",
   "Subtype",
   "Subtype.mk",
   "Eq",
   "_private.Init.Data.Subtype.Basic.0.Subtype.ext.match_1_1",
   "Subtype.val"],
  "name": "Subtype.ext",
  "constType":
  "∀ {α : Sort u} {p : α → Prop} {a1 a2 : { x // p x }}, ↑a1 = ↑a2 → a1 = a2",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.StI",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Membership.mem",
   "Preorder.toLT",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "HarderNarasimhan.S₂I",
   "Subtype.val",
   "HarderNarasimhan.S₁I",
   "Prod.fst",
   "le_of_not_gt",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
   "HarderNarasimhan.S₁I._proof_1",
   "Eq.symm",
   "ConditionallyCompleteLinearOrder.toLinearOrder",
   "WellFoundedGT",
   "CompleteLinearOrder",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "Exists",
   "Set",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "Exists.casesOn",
   "LinearOrder.toPartialOrder",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.InIntvl",
   "Lattice",
   "Nontrivial",
   "eq_of_le_of_ge",
   "Ne",
   "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder",
   "Subtype.mk",
   "And.casesOn"],
  "name": "HarderNarasimhan.impl.rmk3d5",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  ∀ x ∈ HarderNarasimhan.StI μ I, ∀ y ∈ HarderNarasimhan.StI μ I, x = y",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "GT.gt",
   "Subtype.val",
   "And.intro",
   "Or",
   "CompleteLinearOrder",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "Bot.bot",
   "HarderNarasimhan.IsComparable",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Classical.byContradiction",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "le_total",
   "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "le_rfl",
   "Or.inl",
   "BoundedOrder.toOrderTop",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
   "HarderNarasimhan.impl.prop2d6₃I",
   "ConditionallyCompleteLinearOrder.toLinearOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "Not",
   "Lattice.toSemilatticeInf",
   "le_top",
   "not_le_of_gt",
   "Or.casesOn",
   "CompletelyDistribLattice.toCompleteLattice",
   "LT.lt",
   "HarderNarasimhan.μA",
   "le_of_lt",
   "LE.le",
   "Subtype.mk",
   "OrderTop.toTop",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.rmk2d7",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_3}\n  [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI ⟨(⊥, ⊤), ⋯⟩ μ →\n    ∀ (x : ℒ) (h : ⊥ < x ∧ x < ⊤),\n      HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ > HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩ →\n        HarderNarasimhan.μA μ ⟨(x, ⊤), ⋯⟩ = HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["OrderDual",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "LE",
   "OrderDual.instOrderBot",
   "OrderTop",
   "BoundedOrder",
   "inferInstanceAs",
   "OrderDual.instLE",
   "BoundedOrder.mk",
   "OrderBot",
   "OrderDual.instOrderTop"],
  "name": "OrderDual.instBoundedOrder",
  "constType":
  "(α : Type u) → [inst : LE α] → [BoundedOrder α] → BoundedOrder αᵒᵈ",
  "constCategory": "Definition"},
 {"references":
  ["DivisionMonoid.toDivInvMonoid",
   "DivInvMonoid",
   "DivisionMonoid",
   "DivInvOneMonoid",
   "DivisionMonoid.toDivInvOneMonoid._proof_1",
   "DivInvOneMonoid.mk"],
  "name": "DivisionMonoid.toDivInvOneMonoid",
  "constType": "{α : Type u_1} → [DivisionMonoid α] → DivInvOneMonoid α",
  "constCategory": "Definition"},
 {"references": [],
  "name": "OrderDual",
  "constType": "Type u_5 → Type u_5",
  "constCategory": "Definition"},
 {"references": ["RingHom", "Semiring.toNonAssocSemiring", "Semiring"],
  "name": "RingHomSurjective",
  "constType":
  "{R₁ : Type u_1} → {R₂ : Type u_2} → [inst : Semiring R₁] → [inst_1 : Semiring R₂] → (R₁ →+* R₂) → Prop",
  "constCategory": "Other"},
 {"references":
  ["LT.lt",
   "Not",
   "LinearOrder.toPartialOrder",
   "not_lt",
   "PartialOrder.toPreorder",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Eq",
   "Preorder.toLE",
   "propext"],
  "name": "HarderNarasimhan.impl.prop4d8._simp_1_9",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, (¬a < b) = (b ≤ a)",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "Module",
   "Membership.mem",
   "Submodule.module._proof_1",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "SMulZeroClass.toSMul",
   "instDistribSMul",
   "AddZeroClass.toAddZero",
   "AddMonoidWithOne.toAddMonoid",
   "Submodule",
   "Submodule.module'",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Submodule.addCommMonoid",
   "AddZero.toZero",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "DistribSMul.toSMulZeroClass",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.module",
  "constType":
  "{R : Type u} →\n  {M : Type v} →\n    [inst : Semiring R] →\n      [inst_1 : AddCommMonoid M] → {module_M : _root_.Module R M} → (p : Submodule R M) → _root_.Module R ↥p",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "Nat.instPartialOrder",
   "CompleteLattice.toLattice",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Prod",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.StrongDescendingChainCondition'.mk",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.StrongDescendingChainCondition'.rec",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition'.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.StrongDescendingChainCondition' μ → Sort u} →\n                (t : HarderNarasimhan.StrongDescendingChainCondition' μ) →\n                  ((wdcc' : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "PartialOrder.toPreorder",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Submodule",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "instLTNat",
   "CommRing.toCommSemiring",
   "HarderNarasimhan.CoprimaryFiltration.filtration",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "AddCommGroup",
   "CommRing",
   "LT.lt",
   "Nat",
   "IsNoetherianRing",
   "Nontrivial",
   "LE.le",
   "Submodule.completeLattice",
   "AddCommGroup.toAddCommMonoid",
   "Top.top",
   "HarderNarasimhan.CoprimaryFiltration.fin_len",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.strict_mono",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (self : HarderNarasimhan.CoprimaryFiltration R M) (i j : ℕ),\n  i < j → j ≤ Nat.find ⋯ → self.filtration i < self.filtration j",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "Ring.toNonAssocRing",
   "Decidable",
   "Bool.false",
   "Classical.propDecidable",
   "eq_true",
   "AddGroupWithOne.toAddMonoidWithOne",
   "ite_cond_eq_true",
   "Int.instCommSemiring",
   "NatCast.natCast",
   "le_of_not_gt",
   "RelSeries.length",
   "Int.instLTInt",
   "Eq.symm",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "instLatticeInt",
   "instLTNat",
   "Fin.castSucc",
   "Exists",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "Fin.castLE._proof_1",
   "Ring.toSemiring",
   "instOfNat",
   "eq_false",
   "AddMonoid.toAddSemigroup",
   "Mathlib.Meta.NormNum.isNat_lt_true",
   "Int.negOfNat",
   "Top.top",
   "Int.instCharZero",
   "Eq.mpr",
   "monotone_nat_of_le_succ",
   "Fin.succ",
   "HarderNarasimhan.Semistable",
   "Nat.find",
   "instDecidableTrue",
   "Mathlib.Tactic.Ring.add_mul",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Mathlib.Tactic.Linarith.lt_irrefl",
   "HarderNarasimhan.Resμ",
   "HarderNarasimhan.IntervalSemistableRel._proof_1",
   "Fin.val_cast_of_lt",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "Int.instIsStrictOrderedRing",
   "Mathlib.Tactic.Ring.neg_one_mul",
   "Eq",
   "instNatCastInt",
   "Mathlib.Tactic.Ring.neg_zero",
   "Int.instIsOrderedAddMonoid",
   "instOfNatAtLeastTwo",
   "AddZero.toAdd",
   "HPow.hPow",
   "Iff.symm",
   "lt_of_lt_of_le",
   "Mathlib.Tactic.Ring.mul_congr",
   "Nat.lt.step",
   "Nat.cast_add",
   "CompletelyDistribLattice.toCompleteLattice",
   "eq_self",
   "Monoid.toNatPow",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instHSub",
   "CompleteLattice",
   "Nat.find_min'",
   "Nat.instAtLeastTwoHAddOfNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Mathlib.Meta.NormNum.IsNat.of_raw",
   "Mathlib.Tactic.Ring.add_pf_zero_add",
   "Mathlib.Meta.NormNum.IsInt.of_raw",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "Fin",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "Nat.instAddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Mathlib.Tactic.Ring.add_pf_add_overlap",
   "PartialOrder",
   "eq_of_heq",
   "forall_congr",
   "Int.instLEInt",
   "HarderNarasimhan.IntervalSemistableRel",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "AddGroup.toSubNegMonoid",
   "Int.ofNat",
   "Eq.rec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Nat.instPartialOrder",
   "And.right",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Mathlib.Tactic.Ring.mul_zero",
   "AddZeroClass.toAddZero",
   "SetRel",
   "Bot.bot",
   "Nat.lt_add_one",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "ite_cond_eq_false",
   "Nat.instCanonicallyOrderedAdd",
   "Mathlib.Tactic.Linarith.mul_neg",
   "RelSeries.last",
   "Nat",
   "Mathlib.Tactic.Ring.atom_pf",
   "AddMonoidWithOne.toNatCast",
   "NonUnitalNormedCommRing.toNonUnitalCommRing",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.cast",
   "Eq.mp",
   "Nat.instAddCancelCommMonoid",
   "BoundedOrder.toOrderTop",
   "Mathlib.Tactic.Ring.add_pf_add_lt",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "HarderNarasimhan.impl.balabala2",
   "Not",
   "instHAdd",
   "Distrib.toMul",
   "Mathlib.Tactic.Ring.cast_pos",
   "Mathlib.Tactic.Ring.add_congr",
   "LT.lt",
   "lt_add_one",
   "Mathlib.Tactic.Ring.add_pf_add_zero",
   "Mathlib.Tactic.Ring.neg_add",
   "of_eq_true",
   "One.toOfNat1",
   "Mathlib.Tactic.Ring.neg_congr",
   "le_of_lt",
   "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_10",
   "Mathlib.Tactic.Linarith.sub_nonpos_of_le",
   "HarderNarasimhan.instPartialOrderInterval",
   "False",
   "Subtype.mk",
   "LT",
   "OrderTop.toTop",
   "NormedCommRing.toNonUnitalNormedCommRing",
   "instAddNat",
   "Mathlib.Tactic.Linarith.add_lt_of_neg_of_le",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Fin.last",
   "Eq.trans",
   "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_8",
   "Nat.add_lt_add_right",
   "LE",
   "Exists.intro",
   "Mathlib.Meta.NormNum.IsInt.to_raw_eq",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "False.elim",
   "NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring",
   "SubNegMonoid.toSub",
   "Mathlib.Tactic.Ring.add_overlap_pf_zero",
   "Mathlib.Tactic.Ring.sub_pf",
   "Eq.ndrec",
   "HEq.casesOn",
   "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_7",
   "Nat.lt_add_right",
   "Exists.choose_spec",
   "NonUnitalCommRing.toNonUnitalNonAssocCommRing",
   "Prod.snd",
   "instNeZeroNatHAdd_1",
   "Prod",
   "Nat.find_spec",
   "BoundedOrder.toOrderBot",
   "RelSeries.head",
   "Nat.instStarOrderedRing",
   "Eq.refl",
   "Lattice",
   "AddMonoidWithOne.toOne",
   "HEq",
   "Nat.rawCast",
   "AddMonoid.toAddZeroClass",
   "Mathlib.Meta.NormNum.IsNat.to_isInt",
   "Bool",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "Int.add_one_le_iff",
   "Int.instRing",
   "Nat.instPreorder",
   "le_rfl",
   "Mathlib.Tactic.Ring.add_pf_add_overlap_zero",
   "Int.instAddCommGroup",
   "instOfNatNat",
   "congr",
   "Fin.mk",
   "Int.instAdd",
   "WellFoundedGT",
   "Mathlib.Tactic.Ring.mul_add",
   "Preorder.toLE",
   "propext",
   "lt_of_not_ge",
   "Nat.le_induction",
   "Nat.instAddMonoid",
   "Distrib.toAdd",
   "IsStrictOrderedRing.toIsOrderedRing",
   "ite",
   "HarderNarasimhan.instBoundedOrderInterval",
   "Mathlib.Tactic.Zify.natCast_lt._simp_1",
   "OfNat.ofNat",
   "ite_congr",
   "Int",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "AddGroupWithOne.toAddGroup",
   "AddCommGroup.toDivisionAddCommMonoid",
   "HarderNarasimhan.μA",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "Nat.le_of_succ_le",
   "Int.instNormedCommRing",
   "neg_neg_of_pos",
   "dite",
   "Fin.isLt",
   "if_pos",
   "Nat.cast_one",
   "Mathlib.Tactic.Ring.zero_mul",
   "lt_trans",
   "Mathlib.Meta.NormNum.IsNat.to_raw_eq",
   "RelSeries.toFun",
   "Prod.mk",
   "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_9",
   "Int.rawCast",
   "HMul.hMul",
   "AddMonoidWithOne.toAddMonoid",
   "And.intro",
   "Mathlib.Meta.NormNum.isNat_add",
   "Fin.val",
   "Ring.toAddGroupWithOne",
   "HSub.hSub",
   "Mathlib.Meta.NormNum.IsInt.to_isNat",
   "Nat.instIsOrderedAddMonoid",
   "Mathlib.Tactic.Linarith.zero_lt_one",
   "Nat.instLinearOrder",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "AddSemigroup.toAdd",
   "instHPow",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Neg.neg",
   "Nat.add_one_le_iff",
   "Nat.instStarRing",
   "And",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.impl.balabala1",
   "NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring",
   "Decidable.byContradiction",
   "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_4",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "instHMul",
   "Mathlib.Meta.NormNum.isNat_ofNat",
   "Subtype",
   "Fin.eq_mk_iff_val_eq",
   "Mathlib.Meta.NormNum.isInt_add",
   "Mathlib.Tactic.Ring.neg_mul",
   "RelSeries",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Mathlib.Tactic.Ring.instCommSemiringNat",
   "Fin.NatCast.instNatCast",
   "MonoidWithZero.toMonoid",
   "Mathlib.Tactic.Ring.sub_congr",
   "HarderNarasimhan.Interval",
   "Zero.toOfNat0",
   "OrderBot.toBot",
   "Mathlib.Tactic.Ring.cast_zero",
   "le_antisymm",
   "Mathlib.Meta.NormNum.isInt_mul",
   "Mathlib.Tactic.Ring.of_eq",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "True",
   "CommSemiring.toSemiring",
   "Nat.decLe",
   "Mathlib.Tactic.Zify.natCast_le._simp_1",
   "Semiring.toMonoidWithZero",
   "RelSeries.step",
   "Exists.choose",
   "Eq.casesOn",
   "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_1",
   "HarderNarasimhan.instNontrivialInterval",
   "NegZeroClass.toNeg",
   "Nat.succ_lt_succ",
   "Int.instSemiring",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "LE.le",
   "Mathlib.Tactic.Ring.add_pf_add_gt",
   "Fin.natCast_eq_last",
   "instLENat",
   "Nat.le_add_right",
   "Int.instAddMonoid"],
  "name": "HarderNarasimhan.impl.hHFil_of_hNSeries",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S)\n  (F1 : RelSeries (HarderNarasimhan.IntervalSemistableRel μ)),\n  (F1.head = ⊥ ∧\n      F1.last = ⊤ ∧\n        ∀ (i : ℕ) (hi : i + 1 < F1.length),\n          ¬HarderNarasimhan.μA μ ⟨(F1.toFun ↑i, F1.toFun ↑(i + 1)), ⋯⟩ ≤\n              HarderNarasimhan.μA μ ⟨(F1.toFun ↑(i + 1), F1.toFun ↑(i + 2)), ⋯⟩) →\n    ∃ HN1, (HN1.filtration = fun n ↦ if n ≤ F1.length then F1.toFun ↑n else ⊤) ∧ Nat.find ⋯ = F1.length",
  "constCategory": "Theorem"},
 {"references":
  ["Int.instSub",
   "instOfNat",
   "Eq.refl",
   "Int.sub_self",
   "id",
   "HSub.hSub",
   "Eq.mpr",
   "instHSub",
   "Eq",
   "OfNat.ofNat",
   "congrArg",
   "Int"],
  "name": "Int.sub_eq_zero_of_eq",
  "constType": "∀ {a b : ℤ}, a = b → a - b = 0",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "HarderNarasimhan.IsAttained._proof_1",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.impl.prop2d8₁I",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "sup_le",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "And.intro",
   "Or",
   "Eq.symm",
   "Eq.rec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.IsComparable",
   "Exists.casesOn",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "ConditionallyCompleteLattice.toLattice",
   "inf_comm",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "Or.inr",
   "Subtype",
   "Eq.mp",
   "le_trans",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "Prod.fst",
   "congrArg",
   "Or.inl",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.impl.prop2d8₀I",
   "CompleteLattice.toConditionallyCompleteLattice",
   "Lattice.toSemilatticeInf",
   "inf_eq_left",
   "LT.lt",
   "Or.casesOn",
   "Max.max",
   "HarderNarasimhan.μA",
   "Min.min",
   "SemilatticeSup.toMax",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "CompleteLattice",
   "lt_sup_of_lt_left"],
  "name": "HarderNarasimhan.impl.prop2d8₂I",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        ∀ (y : ℒ),\n          HarderNarasimhan.InIntvl I y →\n            ∀ (u : ℒ),\n              HarderNarasimhan.InIntvl I u →\n                ∀ (h : u < x ∧ u < y),\n                  HarderNarasimhan.IsComparable (HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩)\n                        (HarderNarasimhan.μA μ ⟨(u, y), ⋯⟩) ∨\n                      HarderNarasimhan.IsAttained μ ⟨(u, x ⊔ y), ⋯⟩ →\n                    HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(u, x ⊔ y), ⋯⟩ ∨\n                      HarderNarasimhan.μA μ ⟨(u, y), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(u, x ⊔ y), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "bot_le",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "PartialOrder",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "OrderBot.toBot",
   "HarderNarasimhan.StrongDescendingChainCondition.mk",
   "Preorder.toLE",
   "Exists",
   "instHAdd",
   "lt_of_le_of_lt",
   "BoundedOrder",
   "HarderNarasimhan.StrongDescendingChainCondition.rec",
   "Prod.snd",
   "Bot.bot",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "StrictAnti",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.StrongDescendingChainCondition μ → Sort u} →\n                (t : HarderNarasimhan.StrongDescendingChainCondition μ) →\n                  ((wdcc : ∀ (x : ℕ → ℒ) (saf : StrictAnti x), ∃ N, μ ⟨(⊥, x N), ⋯⟩ ≤ μ ⟨(x (N + 1), x N), ⋯⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["implies_congr",
   "Eq.trans",
   "Decidable",
   "eq_true",
   "congrArg",
   "iff_self",
   "congr",
   "false_implies",
   "Eq",
   "Not",
   "True",
   "ite",
   "Decidable.casesOn",
   "eq_self",
   "forall_const._simp_1",
   "of_eq_true",
   "if_neg",
   "instNonemptyOfInhabited",
   "Iff",
   "eq_false",
   "Eq.refl",
   "id",
   "False",
   "Eq.mpr",
   "instInhabitedTrue",
   "if_pos"],
  "name": "ite_eq_right_iff",
  "constType":
  "∀ {α : Sort u_1} {p : Prop} [inst : Decidable p] {x y : α}, (if p then x else y) = y ↔ p → x = y",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "Prod.fst",
   "SupSet.sSup",
   "PartialOrder",
   "Preorder.toLE",
   "Eq",
   "Exists",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "HarderNarasimhan.μmax._proof_1",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.μmax.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.μmax μ I = sSup {x | ∃ u, ∃ (h : HarderNarasimhan.InIntvl I u ∧ (↑I).1 ≠ u), μ ⟨((↑I).1, u), ⋯⟩ = x}",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Not",
   "isMax_top",
   "Preorder",
   "Preorder.toLT",
   "Top.top",
   "OrderTop",
   "IsMax.not_lt",
   "Preorder.toLE",
   "OrderTop.toTop"],
  "name": "not_top_lt",
  "constType":
  "∀ {α : Type u} [inst : Preorder α] [inst_1 : OrderTop α] {a : α}, ¬⊤ < a",
  "constCategory": "Theorem"},
 {"references":
  ["zero_le'",
   "Ne.symm",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "CommMonoidWithZero.toMonoidWithZero",
   "LinearOrderedCommMonoidWithZero.toLinearOrder",
   "ne_of_gt",
   "Preorder.toLT",
   "MonoidWithZero.toMulZeroOneClass",
   "lt_of_le_of_ne",
   "LinearOrderedCommMonoidWithZero",
   "OfNat.ofNat",
   "Iff.intro",
   "LT.lt",
   "instDistribLatticeOfLinearOrder",
   "DistribLattice.toLattice",
   "MulZeroOneClass.toMulZeroClass",
   "MulZeroClass.toZero",
   "Iff",
   "Ne",
   "Zero.toOfNat0",
   "LinearOrderedCommMonoidWithZero.toCommMonoidWithZero",
   "SemilatticeInf.toPartialOrder"],
  "name": "zero_lt_iff",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrderedCommMonoidWithZero α] {a : α}, 0 < a ↔ a ≠ 0",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_3",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.impl.instConvexITotIntvl",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "HarderNarasimhan.Convex",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Prod",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "Nat.find",
   "Subtype",
   "HarderNarasimhan.impl.HNFil",
   "Nat.instAddCancelCommMonoid",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "instHAdd",
   "HarderNarasimhan.impl.HNFil_is_strict_mono'",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_5",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ],\n  ∀ i < Nat.find ⋯, HarderNarasimhan.impl.HNFil μ i < HarderNarasimhan.impl.HNFil μ (i + 1)",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Not",
   "not_lt_of_ge",
   "Preorder",
   "LE.le",
   "Preorder.toLT",
   "Preorder.toLE"],
  "name": "LE.le.not_gt",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] {a b : α}, a ≤ b → ¬b < a",
  "constCategory": "Theorem"},
 {"references":
  ["Set.instHasSubset",
   "Set.subset_toFinset",
   "Finset",
   "HasSubset.Subset",
   "Set",
   "Set.toFinset",
   "Finset.toSet",
   "Finset.instHasSubset",
   "Eq",
   "Fintype",
   "propext",
   "Set.Elem"],
  "name": "HarderNarasimhan.impl.prop3d12p2._simp_1_2",
  "constType":
  "∀ {α : Type u_1} {t : Set α} {s : Finset α} [inst : Fintype ↑t], (s ⊆ t.toFinset) = (↑s ⊆ t)",
  "constCategory": "Theorem"},
 {"references": ["GroupWithZero", "MonoidWithZero"],
  "name": "GroupWithZero.toMonoidWithZero",
  "constType": "{G₀ : Type u} → [self : GroupWithZero G₀] → MonoidWithZero G₀",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.JordanHolderFiltration",
   "Eq",
   "Preorder.toLE",
   "OrderTop.toTop",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.JordanHolderFiltration.first_eq_top",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.JordanHolderFiltration μ),\n  self.filtration 0 = ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["not_le",
   "LT.lt",
   "Not",
   "LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Eq",
   "Preorder.toLE",
   "propext"],
  "name": "HarderNarasimhan.impl.prop3d13₂._simp_4",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, (¬a ≤ b) = (b < a)",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Prod.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.fst",
   "LT.lt",
   "Nat",
   "BoundedOrder.toOrderTop",
   "Nat.succ",
   "Iff.mpr",
   "Lattice",
   "Nat.below",
   "Top.top",
   "Ne",
   "lt_top_iff_ne_top",
   "Preorder.toLE",
   "Eq",
   "OrderTop.toTop",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.HNFil._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] [inst_1 : BoundedOrder ℒ] (n : ℕ) (x : Nat.below n.succ), ¬x.1 = ⊤ → (x.1, ⊤).1 < ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["rfl",
   "Prod",
   "Prod.mk",
   "Prod.mk.eta.match_1_1",
   "Prod.snd",
   "Eq",
   "Prod.fst"],
  "name": "Prod.mk.eta",
  "constType": "∀ {α : Type u_1} {β : Type u_2} {p : α × β}, (p.1, p.2) = p",
  "constCategory": "Theorem"},
 {"references": ["Add.add", "HAdd.mk", "HAdd", "Add"],
  "name": "instHAdd",
  "constType": "{α : Type u_1} → [Add α] → HAdd α α α",
  "constCategory": "Definition"},
 {"references": ["WellFounded", "IsWellFounded"],
  "name": "IsWellFounded.mk",
  "constType":
  "∀ {α : Type u} {r : α → α → Prop}, WellFounded r → IsWellFounded α r",
  "constCategory": "Other"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "Submodule.neg_mem",
   "Module",
   "AddCommGroup.toAddGroup",
   "Membership.mem",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "Submodule",
   "sub_eq_add_neg",
   "SubNegMonoid.toSub",
   "HSub.hSub",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "propext",
   "SetLike.instMembership",
   "instHAdd",
   "Neg.neg",
   "SubNegMonoid.toNeg",
   "AddCommGroup",
   "Iff.rfl",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "Ring.toSemiring",
   "HAdd.hAdd",
   "NegZeroClass.toNeg",
   "AddCommGroup.toDivisionAddCommMonoid",
   "AddCommMonoid.toAddCommSemigroup",
   "SubNegMonoid.toAddMonoid",
   "Submodule.setLike",
   "Iff",
   "Submodule.add_mem_iff_left",
   "AddCommGroup.toAddCommMonoid",
   "id",
   "Eq.mpr",
   "instHSub",
   "Ring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.sub_mem_iff_left",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Ring R] [inst_1 : AddCommGroup M] {module_M : _root_.Module R M} (p : Submodule R M)\n  {x y : M}, y ∈ p → (x - y ∈ p ↔ x ∈ p)",
  "constCategory": "Theorem"},
 {"references": ["Unique", "Inhabited"],
  "name": "Unique.toInhabited",
  "constType": "{α : Sort u} → Unique α → Inhabited α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Semistable.rec",
   "HarderNarasimhan.Semistable.mk",
   "CompleteSemilatticeInf.toPartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.Semistable.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.Semistable μ → Sort u} →\n                (t : HarderNarasimhan.Semistable μ) →\n                  ((semistable :\n                        ∀ (x : ℒ) (hx : x ≠ ⊥),\n                          ¬HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ > HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["CompleteSemilatticeInf.toInfSet",
   "PartialOrder.toPreorder",
   "Set",
   "InfSet.sInf",
   "CompleteSemilatticeInf.toPartialOrder",
   "LE.le",
   "Membership.mem",
   "CompleteSemilatticeInf.le_sInf",
   "Preorder.toLE",
   "Set.instMembership",
   "CompleteSemilatticeInf"],
  "name": "le_sInf",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteSemilatticeInf α] {s : Set α} {a : α}, (∀ b ∈ s, a ≤ b) → a ≤ sInf s",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Nat.le_sub_of_add_le",
   "instLTNat",
   "Nat.succ_add",
   "instHAdd",
   "OfNat.ofNat",
   "congrArg",
   "LT.lt",
   "HAdd.hAdd",
   "Nat",
   "instSubNat",
   "Nat.succ",
   "instOfNatNat",
   "LE.le",
   "HSub.hSub",
   "id",
   "Eq.mpr",
   "instHSub",
   "Eq",
   "instLENat"],
  "name": "Nat.lt_sub_of_add_lt",
  "constType": "∀ {a b c : ℕ}, a + b < c → a < c - b",
  "constCategory": "Theorem"},
 {"references":
  ["HAdd.hAdd",
   "instHAdd",
   "Lean.Omega.LinearCombo.coeffs",
   "Lean.Omega.LinearCombo",
   "Int.instAdd",
   "Lean.Omega.Coeffs",
   "Lean.Omega.LinearCombo.const",
   "Lean.Omega.Coeffs.dot",
   "Int"],
  "name": "Lean.Omega.LinearCombo.eval",
  "constType": "Omega.LinearCombo → Omega.Coeffs → ℤ",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "HarderNarasimhan.HarderNarasimhanFiltration.noConfusionType",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "HarderNarasimhan.HarderNarasimhanFiltration.casesOn",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Nat.lt_add_one",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "Nat.instOne",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.noConfusion",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {P : Sort u} →\n                {x1 x2 : HarderNarasimhan.HarderNarasimhanFiltration μ} →\n                  x1 = x2 → HarderNarasimhan.HarderNarasimhanFiltration.noConfusionType P x1 x2",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.μB",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "SupSet.sSup",
   "PartialOrder",
   "Preorder.toLE",
   "Eq",
   "Exists",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "HarderNarasimhan.μmax._proof_1",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.μB.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.μB μ I =\n    sSup {x | ∃ a, ∃ (ha : HarderNarasimhan.InIntvl I a ∧ (↑I).1 ≠ a), HarderNarasimhan.μmin μ ⟨((↑I).1, a), ⋯⟩ = x}",
  "constCategory": "Theorem"},
 {"references": ["Sub.mk", "Sub", "Int.sub", "Int"],
  "name": "Int.instSub",
  "constType": "Sub ℤ",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Finset",
  "constType": "Type u_4 → Type u_4",
  "constCategory": "Other"},
 {"references":
  ["Not",
   "OrderDual.instPreorder",
   "OrderDual",
   "Nat",
   "Preorder",
   "Preorder.toLT",
   "WellFoundedGT",
   "not_strictAnti_of_wellFoundedLT",
   "instWellFoundedLTOrderDualOfWellFoundedGT",
   "Nat.instPreorder",
   "StrictMono"],
  "name": "not_strictMono_of_wellFoundedGT",
  "constType":
  "∀ {α : Type u_1} [inst : Preorder α] [WellFoundedGT α] (f : ℕ → α), ¬StrictMono f",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "LT.lt",
   "instLTNat",
   "Nat",
   "True",
   "instOfNatNat",
   "instHAdd",
   "eq_true",
   "Eq",
   "Nat.lt_add_one",
   "OfNat.ofNat"],
  "name": "Nat.lt_add_one._simp_1",
  "constType": "∀ (n : ℕ), (n < n + 1) = True",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.StI",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Set",
   "Membership.mem",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Set.instMembership",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.semistableI",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] →\n      [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → { p // p.1 < p.2 } → Prop",
  "constCategory": "Definition"},
 {"references": ["Option"],
  "name": "WithTop",
  "constType": "Type u_2 → Type u_2",
  "constCategory": "Definition"},
 {"references":
  ["Nat",
   "AddCommMonoid.toAddCommSemigroup",
   "inferInstance",
   "AddCommSemigroup",
   "Nat.instAddCommMonoid"],
  "name": "Nat.instAddCommSemigroup",
  "constType": "AddCommSemigroup ℕ",
  "constCategory": "Definition"},
 {"references": ["exists_prop", "Exists", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.stable_of_step_cond₂._simp_1_1",
  "constType": "∀ {b a : Prop}, (∃ (_ : a), b) = (a ∧ b)",
  "constCategory": "Theorem"},
 {"references":
  ["le_rfl",
   "SemilatticeInf",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "inf_le_inf",
   "Min.min",
   "LE.le",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "inf_le_inf_left",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeInf α] (a : α) {b c : α}, b ≤ c → a ⊓ b ≤ a ⊓ c",
  "constCategory": "Theorem"},
 {"references":
  ["DistribSMul.mk",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "AddCommMonoid.toAddMonoid",
   "MulZeroClass.toSMulWithZero",
   "AddZeroClass.toAddZero",
   "SMulWithZero.toSMulZeroClass",
   "DistribSMul",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "instDistribSMul._proof_1",
   "AddZero.toZero",
   "NonUnitalNonAssocSemiring",
   "AddMonoid.toAddZeroClass"],
  "name": "instDistribSMul",
  "constType":
  "{R : Type u_1} → [inst : NonUnitalNonAssocSemiring R] → DistribSMul R R",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "SetLike.instMembership",
   "SemilinearMapClass",
   "Submodule.mem_comap",
   "Module",
   "Membership.mem",
   "DFunLike.coe",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.comap",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.lift_quot_not_bot._simp_1_2",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} {x : M} {F : Type u_9} [inst_6 : FunLike F M M₂] [inst_7 : SemilinearMapClass F σ₁₂ M M₂] {f : F}\n  {p : Submodule R₂ M₂}, (x ∈ Submodule.comap f p) = (f x ∈ p)",
  "constCategory": "Theorem"},
 {"references": ["Finite", "Fintype", "Fintype.finite"],
  "name": "Finite.of_fintype",
  "constType": "∀ (α : Type u_4) [Fintype α], Finite α",
  "constCategory": "Theorem"},
 {"references": ["Subtype", "Set", "Membership.mem", "Set.instMembership"],
  "name": "Set.Elem",
  "constType": "{α : Type u} → Set α → Type u",
  "constCategory": "Definition"},
 {"references": ["Inhabited"],
  "name": "Inhabited.default",
  "constType": "{α : Sort u} → [self : Inhabited α] → α",
  "constCategory": "Definition"},
 {"references": [],
  "name": "CompleteSemilatticeInf",
  "constType": "Type u_8 → Type u_8",
  "constCategory": "Other"},
 {"references":
  ["upperBounds", "Set", "Membership.mem", "And", "LE", "Set.instMembership"],
  "name": "IsGreatest",
  "constType": "{α : Type u_1} → [LE α] → Set α → α → Prop",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "instIsTransLt",
   "instHAdd",
   "Preorder.toLT",
   "OfNat.ofNat",
   "Nat.instPreorder",
   "LT.lt",
   "HAdd.hAdd",
   "Preorder",
   "Nat",
   "instOfNatNat",
   "Nat.rel_of_forall_rel_succ_of_lt",
   "StrictMono"],
  "name": "strictMono_nat_of_lt_succ",
  "constType":
  "∀ {α : Type u} [inst : Preorder α] {f : ℕ → α}, (∀ (n : ℕ), f n < f (n + 1)) → StrictMono f",
  "constCategory": "Theorem"},
 {"references":
  ["le_top",
   "True",
   "LE.le",
   "Top.top",
   "LE",
   "eq_true",
   "OrderTop",
   "Eq",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.semistable_iff._simp_1_6",
  "constType":
  "∀ {α : Type u} [inst : LE α] [inst_1 : OrderTop α] {a : α}, (a ≤ ⊤) = True",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "associatedPrimes",
   "Module",
   "Set",
   "CommSemiring.toSemiring",
   "Membership.mem",
   "AddCommGroup",
   "CommRing",
   "HarderNarasimhan.Coprimary.mk",
   "Set.instMembership",
   "IsNoetherianRing",
   "HarderNarasimhan.Coprimary",
   "Ideal",
   "AddCommGroup.toAddCommMonoid",
   "ExistsUnique"],
  "name": "HarderNarasimhan.Coprimary.mk._flat_ctor",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : AddCommGroup M]\n  [inst_3 : _root_.Module R M], (∃! p, p ∈ associatedPrimes R M) → HarderNarasimhan.Coprimary R M",
  "constCategory": "Definition"},
 {"references": ["False", "False.rec"],
  "name": "False.elim",
  "constType": "{C : Sort u} → False → C",
  "constCategory": "Definition"},
 {"references":
  ["Eq.trans",
   "Singleton.singleton",
   "Membership.mem",
   "HMul.hMul",
   "Exists.intro",
   "SMulZeroClass.toSMul",
   "Submodule.span",
   "Submodule.span_induction",
   "MulAction.toSMul",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Eq.symm",
   "DistribMulAction.toMulAction",
   "Eq.ndrec",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "DistribSMul.toSMulZeroClass",
   "SetLike.instMembership",
   "Exists",
   "NonUnitalNonAssocSemiring.toDistrib",
   "MulOne.toOne",
   "Submodule.smul_mem",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "DistribMulAction.toDistribSMul",
   "AddZeroClass.toAddZero",
   "SMulWithZero.toSMulZeroClass",
   "Set.instMembership",
   "Exists.casesOn",
   "Iff",
   "Eq.refl",
   "HSMul.hSMul",
   "AddMonoidWithOne.toOne",
   "one_smul",
   "HEq",
   "instHMul",
   "zero_smul",
   "AddZero.toZero",
   "Submodule.subset_span",
   "AddMonoid.toAddZeroClass",
   "MulOneClass.toMulOne",
   "Module",
   "AddCommMonoid.toAddMonoid",
   "Iff.intro",
   "Submodule",
   "congrArg",
   "MulOne.toMul",
   "MonoidWithZero.toMonoid",
   "Monoid.toMulOneClass",
   "instHSMul",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "MulActionWithZero.toSMulWithZero",
   "Distrib.toAdd",
   "HEq.refl",
   "True",
   "instHAdd",
   "Set",
   "Distrib.toMul",
   "Semiring.toMonoidWithZero",
   "Module.toMulActionWithZero",
   "Set.instSingletonSet",
   "Eq.casesOn",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "eq_self",
   "Module.toDistribMulAction",
   "AddCommMonoid.toAddCommSemigroup",
   "One.toOfNat1",
   "of_eq_true",
   "MulZeroClass.toZero",
   "Submodule.setLike",
   "smul_smul",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "Set.mem_singleton_iff._simp_1",
   "add_smul",
   "Semiring"],
  "name": "Submodule.mem_span_singleton",
  "constType":
  "∀ {R : Type u_1} {M : Type u_4} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M] {x y : M},\n  x ∈ Submodule.span R {y} ↔ ∃ a, a • y = x",
  "constCategory": "Theorem"},
 {"references": ["PUnit.unit", "Unit"],
  "name": "Unit.unit",
  "constType": "Unit",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "Nat.lt_of_lt_of_le",
   "LT.lt",
   "instLTNat",
   "Nat",
   "instHAdd",
   "Nat.le_add_right"],
  "name": "Nat.lt_add_right",
  "constType": "∀ {a b : ℕ} (c : ℕ), a < b → a < b + c",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "Nat",
   "instHAdd",
   "instOfNatNat",
   "Nat.rec",
   "OfNat.ofNat"],
  "name": "Nat.recAux",
  "constType":
  "{motive : ℕ → Sort u} → motive 0 → ((n : ℕ) → motive n → motive (n + 1)) → (t : ℕ) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["CommRing.toCommSemiring",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "RingHomCompTriple.ids",
   "CommSemiring.toSemiring",
   "CommRing",
   "RingHomCompTriple"],
  "name": "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_4",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R], RingHomCompTriple (RingHom.id R) (RingHom.id R) (RingHom.id R)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "WellFounded.has_min",
   "Membership.mem",
   "Preorder.toLT",
   "GT.gt",
   "Subtype.val",
   "Prod.fst",
   "IsWellFounded.wf",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Set.Nonempty",
   "Exists",
   "Lattice.toSemilatticeInf",
   "Set",
   "HarderNarasimhan.impl.ℒₛ",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "Nat.succ",
   "Lattice",
   "Nontrivial",
   "Nat.below",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func._proof_3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [h : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (n : ℕ)\n  (x : Nat.below n.succ) (hbot : ¬(↑I).1 = ↑x.1),\n  (HarderNarasimhan.impl.ℒₛ μ I x.1 hbot).Nonempty →\n    ∃ a ∈ HarderNarasimhan.impl.ℒₛ μ I x.1 hbot, ∀ x_1 ∈ HarderNarasimhan.impl.ℒₛ μ I x.1 hbot, ¬x_1 > a",
  "constCategory": "Theorem"},
 {"references":
  ["PUnit.unit",
   "PUnit",
   "Nat",
   "Nat.succ",
   "Nat.rec",
   "Nat.below",
   "PProd",
   "Nat.zero",
   "PProd.mk"],
  "name": "Nat.brecOn",
  "constType":
  "{motive : ℕ → Sort u} → (t : ℕ) → ((t : ℕ) → Nat.below t → motive t) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "LT.lt",
   "instLTNat",
   "Nat.find",
   "Nat",
   "Exists",
   "Subtype.property",
   "And",
   "Nat.findX",
   "DecidablePred",
   "Subtype.val",
   "And.left"],
  "name": "Nat.find_spec",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (H : ∃ n, p n), p (Nat.find H)",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "HEq",
  "constType": "{α : Sort u} → α → {β : Sort u} → β → Prop",
  "constCategory": "Other"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "Iff.intro",
   "congrArg",
   "Prod.fst",
   "And.intro",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "InfSet.sInf",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice.toConditionallyCompleteLattice",
   "ConditionallyCompleteLattice.toInfSet",
   "Exists",
   "Set",
   "And.right",
   "ne_top_of_lt",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Set.instMembership",
   "Exists.casesOn",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "Nontrivial",
   "Top.top",
   "Set.ext",
   "Ne",
   "HarderNarasimhan.in_TotIntvl",
   "Subtype.mk",
   "lt_top_iff_ne_top",
   "OrderTop.toTop",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.impl.prop4d1_helper",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  sInf {x | ∃ x_1, ∃ (hx : x_1 < ⊤), μ ⟨(x_1, ⊤), hx⟩ = x} = HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Classical.propDecidable",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.JordanHolderFiltration.strict_anti",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "Nat.find",
   "Subtype",
   "Nat.instAddCancelCommMonoid",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "Subtype.mk",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.step_cond₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.JordanHolderFiltration μ) (k : ℕ)\n  (hk : k < Nat.find ⋯), μ ⟨(self.filtration (k + 1), self.filtration k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["Set"],
  "name": "setOf",
  "constType": "{α : Type u} → (α → Prop) → Set α",
  "constCategory": "Definition"},
 {"references":
  ["le_rfl",
   "Max.max",
   "PartialOrder.toPreorder",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup.toPartialOrder",
   "sup_le_sup",
   "SemilatticeSup",
   "Preorder.toLE"],
  "name": "sup_le_sup_right",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, a ≤ b → ∀ (c : α), a ⊔ c ≤ b ⊔ c",
  "constCategory": "Theorem"},
 {"references": ["Eq.symm", "Ne", "Eq"],
  "name": "Ne.symm",
  "constType": "∀ {α : Sort u} {a b : α}, a ≠ b → b ≠ a",
  "constCategory": "Theorem"},
 {"references":
  ["Int.instSub",
   "Eq.trans",
   "Classical.propDecidable",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "Exists.intro",
   "Subtype.val",
   "HarderNarasimhan.JordanHolderFiltration",
   "Eq.symm",
   "Int.add_one_le_of_lt",
   "Bool.true",
   "instLTNat",
   "BoundedOrder",
   "Prod.snd",
   "le_sup_left",
   "Lean.Omega.LinearCombo.coordinate",
   "Prod",
   "BoundedOrder.toOrderBot",
   "instOfNat",
   "Eq.refl",
   "Lattice",
   "Top.top",
   "Lean.Omega.Constraint.addEquality_sat",
   "Lean.Omega.Int.sub_congr",
   "Or.elim",
   "Nat.find",
   "Bool",
   "Lean.Omega.LinearCombo.coordinate_eval_2",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Option.some",
   "Prod.fst",
   "Lean.Omega.LinearCombo.mk",
   "Lean.Omega.LinearCombo.instSub",
   "instOfNatNat",
   "Lean.Omega.Int.ofNat_sub_dichotomy",
   "Int.instAdd",
   "Eq",
   "Preorder.toLE",
   "instNatCastInt",
   "HarderNarasimhan.instBoundedOrderInterval",
   "OfNat.ofNat",
   "Int",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "Max.max",
   "Lean.Omega.Int.ofNat_lt_of_lt",
   "Option.none",
   "Nat.sub_le",
   "instHSub",
   "Lean.Omega.LinearCombo.coordinate_eval_5",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "le_of_le_of_eq",
   "Preorder.toLT",
   "Lean.Omega.Int.ofNat_le_of_le",
   "And.intro",
   "Int.instLEInt",
   "HSub.hSub",
   "CompleteLinearOrder",
   "Eq.rec",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.JordanHolderFiltration.strict_anti",
   "Neg.neg",
   "And.right",
   "And",
   "Lean.Omega.Constraint.addInequality_sat",
   "Bot.bot",
   "Int.instNegInt",
   "instDecidableEqBool",
   "Nat",
   "Nontrivial",
   "id",
   "Subtype",
   "Nat.cast",
   "Lean.Omega.Constraint.combine_sat'",
   "Int.sub_eq_zero_of_eq",
   "Decidable.decide",
   "Lean.Omega.Coeffs.ofList",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Lean.Omega.Constraint.not_sat'_of_isImpossible",
   "HarderNarasimhan.JordanHolderFiltration.first_eq_top",
   "of_decide_eq_true",
   "Not",
   "List.nil",
   "Lattice.toSemilatticeInf",
   "le_top",
   "instHAdd",
   "Lean.Omega.LinearCombo",
   "Lean.Omega.Constraint.isImpossible",
   "Int.sub_nonneg_of_le",
   "LT.lt",
   "Nat.le_of_not_lt",
   "Lean.Omega.LinearCombo.sub_eval",
   "instSubNat",
   "SemilatticeSup.toMax",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "False",
   "Lean.Omega.Constraint.mk",
   "Lean.Omega.LinearCombo.eval",
   "Subtype.mk",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "OrderTop.toTop",
   "instLENat"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_16",
  "constType":
  "∀ (n : ℕ) (ℒ : Type u_1) (ntl : Nontrivial ℒ) (l : Lattice ℒ) (bo : BoundedOrder ℒ) (S : Type u_2)\n  (clo : CompleteLinearOrder S) (μ : { p // p.1 < p.2 } → S) (JHy JHx : HarderNarasimhan.JordanHolderFiltration μ)\n  (this : 0 < Nat.find ⋯ - 1),\n  (fun n ↦ ⟨JHx.filtration (Nat.find ⋯ - 1) ⊔ JHy.filtration n, ⋯⟩) (Nat.find ⋯) = ⊥ →\n    ∀ (j : ℕ), ¬Nat.find ⋯ - 1 < Nat.find ⋯ → False",
  "constCategory": "Theorem"},
 {"references":
  ["Finset",
   "Set.mem_toFinset",
   "Set",
   "Membership.mem",
   "Finset.instMembership",
   "Set.toFinset",
   "Eq",
   "Fintype",
   "propext",
   "Set.Elem",
   "Set.instMembership"],
  "name": "HarderNarasimhan.impl.prop3d13₂._simp_5",
  "constType":
  "∀ {α : Type u_1} {s : Set α} [inst : Fintype ↑s] {a : α}, (a ∈ s.toFinset) = (a ∈ s)",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat",
   "instSubNat",
   "instOfNatNat",
   "HSub.hSub",
   "Nat.sub_one_lt",
   "instHSub",
   "Nat.ne_zero_of_lt",
   "OfNat.ofNat"],
  "name": "Nat.sub_one_lt_of_lt",
  "constType": "∀ {n m : ℕ}, m < n → n - 1 < n",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "implies_congr",
   "Eq.trans",
   "Eq.mpr_not",
   "Classical.propDecidable",
   "eq_true",
   "Exists.intro",
   "Membership.mem.out",
   "Subtype.val",
   "False.elim",
   "Eq.ndrec",
   "HarderNarasimhan.impl.ℒₛ._proof_1",
   "Exists",
   "Exists.choose_spec",
   "BoundedOrder",
   "HarderNarasimhan.impl.prop3d4₀func_helper",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "eq_false",
   "Eq.refl",
   "Lattice",
   "Classical.byContradiction",
   "Eq.mpr",
   "Exists.choose.congr_simp",
   "HarderNarasimhan.impl.prop3d4₀func_defprop2._simp_1_8",
   "instDecidableTrue",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "instOfNatNat",
   "congr",
   "WellFoundedGT",
   "not_true_eq_false",
   "Eq",
   "Preorder.toLE",
   "lt_of_le_of_lt'",
   "HarderNarasimhan.impl.prop3d4₀func._proof_2",
   "Set",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "eq_self",
   "dite_cond_eq_true",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.impl.prop3d4₀func._proof_5",
   "Ne",
   "dite",
   "HarderNarasimhan.impl.ℒₛ._proof_2",
   "LE.le.ge",
   "CompleteLattice",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "WellFounded.has_min",
   "Membership.mem",
   "Preorder.toLT",
   "GT.gt",
   "GE.ge",
   "And.intro",
   "funext",
   "forall_congr",
   "Eq.rec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "of_eq_false",
   "HarderNarasimhan.impl.ℒₛ",
   "lt_of_le_of_lt",
   "And.right",
   "And",
   "HarderNarasimhan.impl.prop3d4₀func._proof_6",
   "Nat",
   "Nontrivial",
   "id",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "le_trans",
   "lt_of_le_of_ne",
   "congrArg",
   "dite_congr",
   "Subtype.prop",
   "IsWellFounded.wf",
   "HarderNarasimhan.impl.prop3d4₀func_defprop2._simp_1_7",
   "instDecidableFalse",
   "dite_cond_eq_false",
   "Not",
   "Set.Nonempty",
   "LT.lt.not_ge",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "HarderNarasimhan.impl.prop3d4₀func",
   "Exists.choose",
   "Eq.mpr_prop",
   "LT.lt",
   "ne_of_lt",
   "of_eq_true",
   "le_of_lt",
   "HarderNarasimhan.μA.congr_simp",
   "LE.le",
   "False",
   "Subtype.mk"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_defprop2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (i : ℕ)\n  (hi : (↑I).1 ≠ ↑(HarderNarasimhan.impl.prop3d4₀func μ I (i + 1))) (z : ℒ)\n  (hz : ↑(HarderNarasimhan.impl.prop3d4₀func μ I (i + 1)) < z ∧ z ≤ ↑(HarderNarasimhan.impl.prop3d4₀func μ I i)),\n  ¬HarderNarasimhan.μA μ ⟨((↑I).1, z), ⋯⟩ ≥\n      HarderNarasimhan.μA μ ⟨((↑I).1, ↑(HarderNarasimhan.impl.prop3d4₀func μ I (i + 1))), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Module",
   "Membership.mem",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Semiring.toNonAssocSemiring",
   "Ideal",
   "Module.annihilator",
   "PrimeSpectrum.asIdeal",
   "Eq",
   "Preorder.toLE",
   "Semiring.toModule",
   "propext",
   "CommRing.toCommSemiring",
   "Module.mem_support_iff_of_finite",
   "Set",
   "Module.support",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "AddCommGroup",
   "CommRing",
   "Set.instMembership",
   "PrimeSpectrum",
   "LE.le",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.exists_minimal_prime_contained_supp._simp_1_1",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  {p : PrimeSpectrum R} [Module.Finite R M], (p ∈ Module.support R M) = (Module.annihilator R M ≤ p.asIdeal)",
  "constCategory": "Theorem"},
 {"references":
  ["neg_eq_zero",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "SubtractionMonoid",
   "NegZeroClass.toNeg",
   "Neg.neg",
   "NegZeroClass.toZero",
   "Zero.toOfNat0",
   "Eq",
   "SubNegZeroMonoid.toNegZeroClass",
   "OfNat.ofNat",
   "propext"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_19",
  "constType":
  "∀ {α : Type u_1} [inst : SubtractionMonoid α] {a : α}, (-a = 0) = (a = 0)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "le_refl",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Eq.mpr_not",
   "Preorder.toLT",
   "Classical.propDecidable",
   "IsGreatest",
   "HarderNarasimhan.impl.HNFil._proof_3",
   "HarderNarasimhan.impl.instConvexITotIntvl",
   "Eq.symm",
   "HarderNarasimhan.Convex",
   "Eq.rec",
   "Eq.ndrec",
   "Nat.instLinearOrder",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists",
   "Nat.instPartialOrder",
   "BoundedOrder",
   "Prod.snd",
   "Prod",
   "HarderNarasimhan.impl.HNFil_of_fin_len",
   "Nat",
   "Nat.find_spec",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "id",
   "Top.top",
   "Eq.mpr",
   "Exists.choose.congr_simp",
   "Subtype",
   "HarderNarasimhan.StI",
   "instDecidableTrue",
   "lt_of_le_of_ne",
   "HarderNarasimhan.impl.HNFil",
   "HarderNarasimhan.impl.HNlen",
   "Nat.instPreorder",
   "dite_congr",
   "congrArg",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "lt_of_not_ge",
   "Not",
   "HarderNarasimhan.impl.HNFil._proof_4",
   "Nat.le_induction",
   "le_top",
   "Lattice.toSemilatticeInf",
   "True",
   "HarderNarasimhan.μ_Admissible",
   "instHAdd",
   "Nat.decLe",
   "HarderNarasimhan.impl.HNFil_is_strict_mono'",
   "Exists.choose",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "eq_self",
   "dite_cond_eq_true",
   "of_eq_true",
   "le_of_lt",
   "LE.le",
   "instDecidableEqNat",
   "Subtype.mk",
   "dite",
   "instLENat",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (i j : ℕ),\n  i ≤ j → HarderNarasimhan.impl.HNFil μ i ≤ HarderNarasimhan.impl.HNFil μ j",
  "constCategory": "Theorem"},
 {"references":
  ["Exists",
   "Exists.intro",
   "ExistsUnique",
   "Eq",
   "ExistsUnique.exists.match_1_1"],
  "name": "ExistsUnique.exists",
  "constType": "∀ {α : Sort u_1} {p : α → Prop}, (∃! x, p x) → ∃ x, p x",
  "constCategory": "Theorem"},
 {"references":
  ["Int.instSub",
   "AddGroup.mk",
   "Nat.cast",
   "Zero.ofOfNat0",
   "Int.zero_add",
   "HMul.hMul",
   "Int.add_zero",
   "Int.instMul",
   "Int.zero_mul",
   "AddCommGroup.mk",
   "Int.instAdd",
   "Int.sub_eq_add_neg",
   "SubNegMonoid.mk",
   "Int.instAddCommGroup._proof_1",
   "AddSemigroup.mk",
   "instNatCastInt",
   "Int.add_assoc",
   "AddCommGroup",
   "Int.instNegInt",
   "AddMonoid.mk",
   "Int",
   "Nat",
   "instOfNat",
   "Int.add_left_neg",
   "Int.add_comm",
   "instHMul",
   "Int.instAddCommGroup._proof_2"],
  "name": "Int.instAddCommGroup",
  "constType": "AddCommGroup ℤ",
  "constCategory": "Definition"},
 {"references":
  ["SemilatticeInf",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Min.min",
   "SemilatticeInf.le_inf",
   "LE.le",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "le_inf",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeInf α] {a b c : α}, a ≤ b → a ≤ c → a ≤ b ⊓ c",
  "constCategory": "Theorem"},
 {"references":
  ["ContravariantClass.mk",
   "PartialOrder.toPreorder",
   "LinearOrder",
   "Preorder.toLT",
   "Iff.mp",
   "Contravariant",
   "CovariantClass",
   "CovariantClass.elim",
   "covariant_le_iff_contravariant_lt",
   "ContravariantClass",
   "LT.lt",
   "LinearOrder.toPartialOrder",
   "LE.le",
   "Covariant",
   "Preorder.toLE"],
  "name": "contravariant_lt_of_covariant_le",
  "constType":
  "∀ (N : Type u_2) (mu : N → N → N) [inst : LinearOrder N] [CovariantClass N N mu fun x1 x2 ↦ x1 ≤ x2],\n  ContravariantClass N N mu fun x1 x2 ↦ x1 < x2",
  "constCategory": "Theorem"},
 {"references":
  ["Quotient.mk''",
   "Quotient",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Subtype",
   "add_neg_cancel_left",
   "HasQuotient.Quotient",
   "Membership.mem",
   "Iff.mp",
   "QuotientAddGroup.leftRel",
   "Exists.intro",
   "Subtype.val",
   "SubNegZeroMonoid.toNegZeroClass",
   "AddGroup.toSubtractionMonoid",
   "congrArg",
   "Quotient.out_eq'",
   "Eq.symm",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "Exists",
   "SetLike.instMembership",
   "instHAdd",
   "Neg.neg",
   "SubNegMonoid.toNeg",
   "AddSubgroup.instSetLike",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "HAdd.hAdd",
   "AddSubgroup",
   "NegZeroClass.toNeg",
   "SubNegMonoid.toAddMonoid",
   "QuotientAddGroup.instHasQuotientAddSubgroup",
   "Eq.refl",
   "id",
   "QuotientAddGroup.mk",
   "AddGroup",
   "Eq.mpr",
   "QuotientAddGroup.eq",
   "Subtype.mk",
   "Quotient.out",
   "AddMonoid.toAddZeroClass"],
  "name": "QuotientAddGroup.mk_out_eq_mul",
  "constType":
  "∀ {α : Type u_1} [inst : AddGroup α] (s : AddSubgroup α) (g : α), ∃ h, Quotient.out ↑g = g + ↑h",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "CompleteLattice.le_sInf",
   "Set.Nonempty",
   "CompleteLattice.le_sSup",
   "PartialOrder.toPreorder",
   "CompleteLattice.toInfSet",
   "Set",
   "CompleteLattice.toLattice",
   "Membership.mem",
   "CompleteLattice.toSupSet",
   "SemilatticeSup.toPartialOrder",
   "BddBelow",
   "BddAbove",
   "Set.instMembership",
   "upperBounds",
   "ConditionallyCompleteLattice",
   "lowerBounds",
   "CompleteLattice.sSup_le",
   "Preorder.toLE",
   "CompleteLattice",
   "ConditionallyCompleteLattice.mk",
   "CompleteLattice.sInf_le"],
  "name": "CompleteLattice.toConditionallyCompleteLattice",
  "constType":
  "{α : Type u_1} → [CompleteLattice α] → ConditionallyCompleteLattice α",
  "constCategory": "Definition"},
 {"references": ["Not", "LT.lt", "Preorder", "lt_asymm", "Preorder.toLT"],
  "name": "not_lt_of_gt",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] {a b : α}, a < b → ¬b < a",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat.le_trans",
   "Nat",
   "Nat.succ",
   "LE.le",
   "instLENat"],
  "name": "Nat.lt_of_lt_of_le",
  "constType": "∀ {n m k : ℕ}, n < m → m ≤ k → n < k",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.trans",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "HarderNarasimhan.impl.prop2d6₁I",
   "Membership.mem",
   "Preorder.toLT",
   "GT.gt",
   "Membership.mem.out",
   "Subtype.val",
   "HarderNarasimhan.S₂I",
   "HarderNarasimhan.S₁I",
   "And.intro",
   "HarderNarasimhan.S₁I._proof_1",
   "funext",
   "Classical.not_not._simp_3",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Exists",
   "Exists.choose_spec",
   "lt_of_le_of_lt",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Exists.casesOn",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "Eq.refl",
   "Classical.byContradiction",
   "Nontrivial",
   "Lattice",
   "ConditionallyCompleteLattice.toLattice",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "HarderNarasimhan.StI",
   "Subtype",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "Prod.fst",
   "congrArg",
   "le_rfl",
   "Subtype.prop",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice.toConditionallyCompleteLattice",
   "propext",
   "eq_of_le_of_not_lt'",
   "Not",
   "Classical.not_imp._simp_2",
   "Lattice.toSemilatticeInf",
   "Set",
   "Exists.choose",
   "inf_eq_left",
   "exists_prop_congr",
   "not_le_of_gt",
   "LT.lt",
   "ne_of_lt",
   "le_of_lt",
   "Min.min",
   "HarderNarasimhan.μA",
   "LE.le",
   "False",
   "Ne",
   "Subtype.mk",
   "CompleteLattice",
   "And.casesOn",
   "Mathlib.Tactic.Push.not_forall_eq"],
  "name": "HarderNarasimhan.impl.prop3d7₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ) (hxSt : x ∈ HarderNarasimhan.StI μ I) (y : ℒ),\n      HarderNarasimhan.InIntvl I y →\n        ∀ (hy : y > x), ¬HarderNarasimhan.μA μ ⟨((↑I).1, x), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(x, y), hy⟩",
  "constCategory": "Theorem"},
 {"references":
  ["AddLeftMono",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Lattice.toSemilatticeInf",
   "PartialOrder.toPreorder",
   "instHAdd",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toAddCommGroup",
   "HAdd.hAdd",
   "instDistribLatticeOfLinearOrder",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.elim_AddLeftMono",
   "DistribLattice.toLattice",
   "AddCommMonoid.toAddCommSemigroup",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toLinearOrder",
   "LE.le",
   "AddCommGroup.toAddCommMonoid",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "CovariantClass.mk",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.instAddLeftMono_harderNarasimhan",
  "constType":
  "∀ {V : Type u_1} [inst : HarderNarasimhan.TotallyOrderedRealVectorSpace V], AddLeftMono V",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Set",
   "Membership.mem",
   "isGLB_sInf",
   "CompleteSemilatticeInf",
   "Set.instMembership",
   "CompleteSemilatticeInf.toInfSet",
   "Iff",
   "CompleteSemilatticeInf.toPartialOrder",
   "InfSet.sInf",
   "LE.le",
   "le_isGLB_iff",
   "Preorder.toLE"],
  "name": "le_sInf_iff",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteSemilatticeInf α] {s : Set α} {a : α}, a ≤ sInf s ↔ ∀ b ∈ s, a ≤ b",
  "constCategory": "Theorem"},
 {"references": ["Not", "Exists", "Iff", "False", "exists_imp"],
  "name": "not_exists",
  "constType": "∀ {α : Sort u_1} {p : α → Prop}, (¬∃ x, p x) ↔ ∀ (x : α), ¬p x",
  "constCategory": "Theorem"},
 {"references":
  ["IsStrictOrderedRing.toPosMulStrictMono",
   "PartialOrder.toPreorder",
   "IsStrictOrderedRing",
   "NonUnitalNonAssocSemiring.toDistrib",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Distrib.toMul",
   "mul_le_mul_of_nonneg_left",
   "IsOrderedRing.mk",
   "MulPosStrictMono.toMulPosMono",
   "IsOrderedRing",
   "Semiring.toNonAssocSemiring",
   "mul_le_mul_of_nonneg_right",
   "MulZeroClass.toZero",
   "PartialOrder",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "IsOrderedCancelAddMonoid.toIsOrderedAddMonoid",
   "PosMulStrictMono.toPosMulMono",
   "IsStrictOrderedRing.toMulPosStrictMono",
   "Semiring",
   "IsStrictOrderedRing.toIsOrderedCancelAddMonoid",
   "IsStrictOrderedRing.toZeroLEOneClass"],
  "name": "IsStrictOrderedRing.toIsOrderedRing",
  "constType":
  "∀ {R : Type u} [inst : Semiring R] [inst_1 : PartialOrder R] [IsStrictOrderedRing R], IsOrderedRing R",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "Nat.instPartialOrder",
   "CompleteLattice.toLattice",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Prod",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.StrongDescendingChainCondition'.mk",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition'.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.StrongDescendingChainCondition' μ → Sort u} →\n                ((wdcc' : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) → motive ⋯) →\n                  (t : HarderNarasimhan.StrongDescendingChainCondition' μ) → motive t",
  "constCategory": "Other"},
 {"references":
  ["Ring.toNonAssocRing",
   "instInfiniteNat",
   "Submodule.Quotient.module",
   "AddGroupWithOne.toAddMonoidWithOne",
   "HarderNarasimhan.impl.prop3d12",
   "SMulZeroClass.toSMul",
   "Set.instIsNonstrictStrictOrderSubsetSSubset",
   "Finset.min'",
   "RingHom.id",
   "congrFun",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "Module.IsNoetherian.finite",
   "HarderNarasimhan.S",
   "Exists",
   "LinearMap.ker",
   "Submodule.coe_mem",
   "LinearMap",
   "SetLike.coe",
   "PrimeSpectrum.ext",
   "Eq.mpr",
   "Quotient.out",
   "RelEmbedding.toEmbedding",
   "HasQuotient.Quotient",
   "HarderNarasimhan._μ._proof_1",
   "LinearMap.instFunLike",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "Or.inl",
   "Ideal.ext",
   "Eq",
   "LinearExtension",
   "Set",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Set.toFinset",
   "Eq.to_iff",
   "HarderNarasimhan.instPartialOrderS₀",
   "Ne",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTheory.DedekindMacNeilleCompletion",
   "HarderNarasimhan.impl.prop3d13₂._simp_1",
   "PartialOrder.toPreorder",
   "Subtype.instLE",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Membership.mem",
   "HarderNarasimhan.μ",
   "Preorder.toLT",
   "GT.gt",
   "RelEmbedding.instFunLike",
   "HarderNarasimhan.impl.prop3d13₂._simp_2",
   "Semiring.toNonAssocSemiring",
   "Or",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "forall_congr",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "DistribSMul.toSMulZeroClass",
   "PrimeSpectrum.mk",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "And.right",
   "AddZeroClass.toAddZero",
   "Exists.casesOn",
   "isNoetherian_submodule'",
   "Nat",
   "Finset.instSingleton",
   "HasSubset.Subset",
   "AddZero.toZero",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "LinearMap.toSpanSingleton",
   "associatedPrimes",
   "Submodule.instNontrivial",
   "Set.infinite_of_injective_forall_mem",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Eq.mp",
   "Submodule.module",
   "DFunLike.coe",
   "instDistribLatticeOfLinearOrder",
   "HarderNarasimhan.instLinearOrderS₀",
   "isNoetherian_of_isNoetherianRing_of_finite",
   "PrimeSpectrum.asIdeal",
   "HarderNarasimhan.impl.prop3d13₂._simp_4",
   "Not",
   "instHAdd",
   "Submodule.quotientRel",
   "IsAssociatedPrime._proof_1",
   "IsAssociatedPrime",
   "LT.lt",
   "HarderNarasimhan.μA_DescendingChainCondition.mk",
   "False",
   "Subtype.mk",
   "lt_self_iff_false",
   "instAddNat",
   "Finset",
   "Eq.trans",
   "Singleton.singleton",
   "instDistribSMul",
   "Subtype.val",
   "strictMono_nat_of_lt_succ",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "associatedPrimes.finite",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "ne_iff_lt_or_gt",
   "ClosureOperator.IsClosed",
   "Submodule.addCommGroup",
   "OrderTheory.coe'",
   "Set.Infinite",
   "HarderNarasimhan.S₀_order'",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Eq.refl",
   "Classical.byContradiction",
   "AddCommGroup.toAddCommMonoid",
   "Finset.instMembership",
   "CompleteLattice.toBoundedOrder",
   "setOf",
   "AddMonoid.toAddZeroClass",
   "Submodule.hasQuotient",
   "Or.inr",
   "HarderNarasimhan.impl.prop3d13₂._simp_5",
   "HarderNarasimhan.impl.μ_nonempty",
   "Nat.instPreorder",
   "HarderNarasimhan.impl.prop3d13₂._simp_3",
   "instOfNatNat",
   "congr",
   "HarderNarasimhan.impl.annihilator_lift",
   "LT.lt.ssubset",
   "HarderNarasimhan._μ",
   "Preorder.toLE",
   "CompleteLattice.toConditionallyCompleteLattice",
   "AddCommGroup",
   "OrderEmbedding",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "PrimeSpectrum",
   "LinearOrder.toPartialOrder",
   "CommRing.toRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.μA",
   "Submodule.completeLattice",
   "instDecidableEqNat",
   "HarderNarasimhan.S₀",
   "dite",
   "Module.Finite",
   "Prod.mk",
   "Ideal.IsPrime",
   "Subtype.preorder",
   "Iff.mp",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "AddMonoidWithOne.toAddMonoid",
   "And.intro",
   "Ring.toAddGroupWithOne",
   "Nat.zero_lt_of_ne_zero",
   "Nat.instLinearOrder",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "SetLike.instMembership",
   "Decidable.byContradiction",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "ConditionallyCompleteLattice.toLattice",
   "Submodule.submoduleOf",
   "Subtype",
   "Module.Finite.quotient",
   "Submodule.Quotient.instSMul._proof_1",
   "Function.Embedding.toFun",
   "congrArg",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "RelEmbedding",
   "Finset.min'_mem",
   "Set.instLE",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "subset_of_ssubset",
   "CommSemiring.toSemiring",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "Set.instHasSubset",
   "Or.casesOn",
   "StrictAnti",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.addCommMonoid",
   "Set.instHasSSubset"],
  "name": "HarderNarasimhan.impl.prop3d13₂",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  HarderNarasimhan.μA_DescendingChainCondition (HarderNarasimhan.μ R M)",
  "constCategory": "Theorem"},
 {"references": ["LE.le", "LE", "RelEmbedding"],
  "name": "OrderEmbedding",
  "constType":
  "(α : Type u_6) → (β : Type u_7) → [LE α] → [LE β] → Type (max u_6 u_7)",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Inhabited",
  "constType": "Sort u → Sort (max 1 u)",
  "constCategory": "Other"},
 {"references": ["Exists", "Eq"],
  "name": "Function.Surjective",
  "constType": "{α : Sort u_1} → {β : Sort u_2} → (α → β) → Prop",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "LT.lt",
   "Preorder",
   "lt_iff_le_not_ge",
   "LE.le",
   "And.right",
   "And",
   "Iff.mp",
   "Preorder.toLT",
   "Preorder.toLE"],
  "name": "not_le_of_gt",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] {a b : α}, a < b → ¬b ≤ a",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Preorder",
  "constType": "Type u_2 → Type u_2",
  "constCategory": "Other"},
 {"references": ["Max"],
  "name": "Max.max",
  "constType": "{α : Type u} → [self : Max α] → α → α → α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "PartialOrder",
   "InfSet.sInf",
   "Preorder.toLE",
   "Eq",
   "Exists",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.InIntvl",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.μA",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] →\n      [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → { p // p.1 < p.2 } → S",
  "constCategory": "Definition"},
 {"references": ["MulZeroClass", "Zero"],
  "name": "MulZeroClass.toZero",
  "constType": "{M₀ : Type u} → [self : MulZeroClass M₀] → Zero M₀",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "HarderNarasimhan.SlopeLike",
   "Classical.propDecidable",
   "eq_true",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "Exists.choose_spec",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "BoundedOrder.toOrderBot",
   "eq_false",
   "Nat.instStarOrderedRing",
   "Eq.refl",
   "Lattice",
   "Top.top",
   "Eq.mpr",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "setOf",
   "instDecidableTrue",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "instOfNatNat",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Set",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "HarderNarasimhan.impl.JHFil",
   "Ne",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "dite",
   "bot_lt_top",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "WellFounded.has_min",
   "Membership.mem",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "GT.gt",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "And",
   "IsOrderedAddMonoid.toAddLeftMono",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Nat",
   "Nontrivial",
   "id",
   "HarderNarasimhan.impl.JHFil._proof_4",
   "CompleteDistribLattice.toCoframe",
   "GeneralizedCoheytingAlgebra.toLattice",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "congrArg",
   "dite_congr",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Nat.instOne",
   "BoundedOrder.toOrderTop",
   "IsWellFounded.wf",
   "instDecidableFalse",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.JHFil._proof_1",
   "Not",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "Exists.choose",
   "Eq.mpr_prop",
   "LT.lt",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "False",
   "Subtype.mk",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.JHFil_anti_mono",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [hacc : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) (hμ : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤)\n  (hμsl : HarderNarasimhan.SlopeLike μ) (hst : HarderNarasimhan.Semistable μ)\n  (hdc : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) (k : ℕ),\n  HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc k > ⊥ →\n    HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc k > HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc (k + 1)",
  "constCategory": "Theorem"},
 {"references": ["rfl", "Exists", "Eq", "exists_prop_eq", "propext"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_3",
  "constType":
  "∀ {α : Sort u_1} {a' : α} {p : (a : α) → a = a' → Prop}, (∃ a, ∃ (h : a = a'), p a h) = p a' ⋯",
  "constCategory": "Theorem"},
 {"references":
  ["Iff.trans",
   "Not",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "SemilatticeSup.toPartialOrder",
   "LE.le.lt_iff_ne",
   "right_eq_sup",
   "LT.lt",
   "Max.max",
   "le_sup_right",
   "Iff",
   "not_congr",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup",
   "Ne",
   "Eq",
   "Preorder.toLE"],
  "name": "right_lt_sup",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, b < a ⊔ b ↔ ¬a ≤ b",
  "constCategory": "Theorem"},
 {"references":
  ["Real.instZero",
   "Real",
   "PartialOrder",
   "NNReal",
   "LE.le",
   "Subtype.partialOrder",
   "Zero.toOfNat0",
   "OfNat.ofNat",
   "Real.partialOrder",
   "Real.instLE"],
  "name": "instPartialOrderNNReal",
  "constType": "PartialOrder NNReal",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Submodule.instBot",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Top.top",
   "HarderNarasimhan.CoprimaryFiltration.casesOn",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Nat.instPreorder",
   "Submodule",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.noConfusionType",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] →\n                Sort u → HarderNarasimhan.CoprimaryFiltration R M → HarderNarasimhan.CoprimaryFiltration R M → Sort u",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.impl.rmk2d5₃",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "bot_le",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "congrArg",
   "And.intro",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "BoundedOrder.toOrderTop",
   "Eq.symm",
   "HarderNarasimhan.impl.rmk2d5₂",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "Eq",
   "propext",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.impl.rmk2d5₁",
   "le_top",
   "Lattice.toSemilatticeInf",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.Convex_of_Convex_large",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "id",
   "Eq.mpr",
   "CompleteLattice"],
  "name": "HarderNarasimhan.remark_2_5",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Convex μ →\n    HarderNarasimhan.Convex (HarderNarasimhan.μmax μ) ∧\n      ∀ (I : { p // p.1 < p.2 }),\n        HarderNarasimhan.μmax μ I = HarderNarasimhan.μmax (HarderNarasimhan.μmax μ) I ∧\n          HarderNarasimhan.μA μ I = HarderNarasimhan.μA (HarderNarasimhan.μmax μ) I",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "AddMonoidWithOne.toNatCast",
   "Nat.cast",
   "Nat.rawCast",
   "Eq",
   "Mathlib.Meta.NormNum.IsNat.to_raw_eq.match_1_1",
   "AddMonoidWithOne",
   "Mathlib.Meta.NormNum.IsNat"],
  "name": "Mathlib.Meta.NormNum.IsNat.to_raw_eq",
  "constType":
  "∀ {α : Type u} {a : α} {n : ℕ} [inst : AddMonoidWithOne α], Mathlib.Meta.NormNum.IsNat a n → a = n.rawCast",
  "constCategory": "Theorem"},
 {"references":
  ["Preorder.le_trans",
   "PartialOrder.toPreorder",
   "Subtype",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "PartialOrder",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.Interval",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.instPartialOrderInterval._proof_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (a b c : HarderNarasimhan.Interval z), ↑a ≤ ↑b → ↑b ≤ ↑c → ↑a ≤ ↑c",
  "constCategory": "Theorem"},
 {"references":
  ["AddMonoid.toZero",
   "instHAdd",
   "Neg.neg",
   "SubNegMonoid.toNeg",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "SubNegMonoid.toAddMonoid",
   "SubNegMonoid",
   "AddMonoid.toAddSemigroup",
   "AddGroup",
   "Zero.toOfNat0",
   "Eq",
   "AddSemigroup.toAdd"],
  "name": "AddGroup.mk",
  "constType":
  "{A : Type u} → [toSubNegMonoid : SubNegMonoid A] → (∀ (a : A), -a + a = 0) → AddGroup A",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "HarderNarasimhan.HarderNarasimhanFiltration.casesOn",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Nat.lt_add_one",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.noConfusionType",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              Sort u →\n                HarderNarasimhan.HarderNarasimhanFiltration μ → HarderNarasimhan.HarderNarasimhanFiltration μ → Sort u",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.trans",
   "Preorder.toLT",
   "eq_true",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "Semiring.toNonAssocSemiring",
   "PartialOrder",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "Distrib.toAdd",
   "NonUnitalNonAssocSemiring.toDistrib",
   "True",
   "instHAdd",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "add_zero",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "of_eq_true",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Mathlib.Tactic.Linarith.lt_of_lt_of_eq",
  "constType":
  "∀ {α : Type u} [inst : Semiring α] [inst_1 : PartialOrder α] {a b : α}, a < 0 → b = 0 → a + b < 0",
  "constCategory": "Theorem"},
 {"references": ["CompleteBooleanAlgebra", "CompleteLattice"],
  "name": "CompleteBooleanAlgebra.toCompleteLattice",
  "constType":
  "{α : Type u_1} → [self : CompleteBooleanAlgebra α] → CompleteLattice α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Membership.mem",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Membership.mem.out",
   "Subtype.val",
   "Prod.fst",
   "Nat.instPreorder",
   "Subtype.prop",
   "Or",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "PartialOrder",
   "Preorder.toLE",
   "Not",
   "Set.Nonempty",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_1",
   "Exists",
   "Set",
   "instHAdd",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_2",
   "BoundedOrder",
   "HarderNarasimhan.impl.prop4d1₁_seq",
   "Prod.snd",
   "Exists.choose",
   "OfNat.ofNat",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_3",
   "CompleteLattice",
   "setOf",
   "StrictMono"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._proof_8",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  (h₁ : ∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩)\n  (h₂ :\n    ∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤), μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩)\n  (h₃ : {YA | ∃ (h : YA < ⊤), ∀ xA < ⊤, ∃ xB, ∃ (hAB : xA < xB), ¬μ ⟨(xA, xB), hAB⟩ ≤ μ ⟨(YA, ⊤), h⟩}.Nonempty) (k : ℕ),\n  ↑(HarderNarasimhan.impl.prop4d1₁_seq μ h₁ h₂ h₃ k) < ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Subtype.instLE",
   "Singleton.singleton",
   "HarderNarasimhan.μ",
   "Preorder.toLT",
   "HarderNarasimhan.impl.prop3d12",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "Finset.min'",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "HarderNarasimhan.S",
   "ClosureOperator.IsClosed",
   "OrderTheory.coe'",
   "Prod.snd",
   "Prod",
   "HarderNarasimhan.μ_nonempty",
   "Finset.instSingleton",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "CompleteLattice.toBoundedOrder",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.instNontrivial",
   "Subtype",
   "RelEmbedding.toEmbedding",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Function.Embedding.toFun",
   "Prod.fst",
   "HarderNarasimhan._μ",
   "Eq",
   "Preorder.toLE",
   "Set.instLE",
   "CommRing.toCommSemiring",
   "LinearExtension",
   "Set",
   "CommSemiring.toSemiring",
   "Set.toFinset",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "LT.lt",
   "PrimeSpectrum",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.instPartialOrderS₀",
   "LE.le",
   "Submodule.completeLattice",
   "HarderNarasimhan.S₀",
   "Module.Finite",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "HarderNarasimhan.proposition_3_12",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  HarderNarasimhan.μA (HarderNarasimhan.μ R M) I = OrderTheory.coe'.toFun {(HarderNarasimhan._μ R M I).toFinset.min' ⋯}",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "HarderNarasimhan.impl.prop2d6₁I",
   "Preorder.toLT",
   "GE.ge",
   "HarderNarasimhan.impl.prop2d6₀",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "And.intro",
   "Or",
   "Eq.symm",
   "HarderNarasimhan.Convex",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "HarderNarasimhan.IsComparable",
   "Prod",
   "Nontrivial",
   "Lattice",
   "id",
   "Eq.mpr",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.in_TotIntvl",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "Subtype",
   "HarderNarasimhan.impl.prop2d6₂I₂",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "congrArg",
   "HarderNarasimhan.impl.prop2d6₃I",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice.toConditionallyCompleteLattice",
   "propext",
   "Lattice.toSemilatticeInf",
   "LT.lt",
   "HarderNarasimhan.μA",
   "Min.min",
   "HarderNarasimhan.impl.prop2d6₂I₁",
   "LE.le",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_2_6",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (x y z : ℒ) (h : x < y ∧ y < z),\n  HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩ ∧\n    (HarderNarasimhan.Convex μ →\n      HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ ≥ HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩ ⊓ HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩ ∧\n        ((HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩ ≥ HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩ →\n              HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩ = HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩) ∧\n            (HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩ < HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩ →\n              HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ ∧\n                HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩)) ∧\n          (HarderNarasimhan.IsComparable (HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩) (HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩) ∨\n              HarderNarasimhan.IsAttained μ ⟨(x, z), ⋯⟩ →\n            HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩ = HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ ∨\n              HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ ∧\n                HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ < HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩))",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "Nat.casesOn",
   "Nat.succ",
   "instOfNatNat",
   "Unit.unit",
   "OfNat.ofNat",
   "Unit"],
  "name": "HarderNarasimhan.impl.prop3d4₀func.match_1",
  "constType":
  "(motive : ℕ → Sort u_1) → (k : ℕ) → (Unit → motive 0) → ((n : ℕ) → motive n.succ) → motive k",
  "constCategory": "Definition"},
 {"references":
  ["CommRing.toCommSemiring",
   "Ideal",
   "CommSemiring.toSemiring",
   "inferInstance",
   "Ideal.instIsTwoSided",
   "CommRing",
   "Ideal.IsTwoSided"],
  "name": "Ideal.instIsTwoSided_1",
  "constType":
  "∀ {α : Type u_1} [inst : CommRing α] (I : Ideal α), I.IsTwoSided",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "instHAdd",
   "Nat.add_sub_of_le",
   "Nat.add_comm",
   "congrArg",
   "HAdd.hAdd",
   "Nat",
   "instSubNat",
   "Eq.refl",
   "LE.le",
   "HSub.hSub",
   "id",
   "Eq.mpr",
   "Eq",
   "instHSub",
   "instLENat"],
  "name": "Nat.sub_add_cancel",
  "constType": "∀ {n m : ℕ}, m ≤ n → n - m + m = n",
  "constCategory": "Theorem"},
 {"references":
  ["Quot.sound", "id", "Quot.liftOn", "Eq", "Quot.mk", "Quot", "congrArg"],
  "name": "funext",
  "constType":
  "∀ {α : Sort u} {β : α → Sort v} {f g : (x : α) → β x}, (∀ (x : α), f x = g x) → f = g",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Nat.lt_add_one",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.HarderNarasimhanFiltration.rec",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.HarderNarasimhanFiltration μ → Sort u} →\n                (t : HarderNarasimhan.HarderNarasimhanFiltration μ) →\n                  ((filtration : ℕ → ℒ) →\n                      (monotone : Monotone filtration) →\n                        (first_eq_bot : filtration 0 = ⊥) →\n                          (fin_len : ∃ n, filtration n = ⊤) →\n                            (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                              (piecewise_semistable :\n                                  ∀ (i : ℕ) (h : i < Nat.find fin_len),\n                                    HarderNarasimhan.Semistable\n                                      (HarderNarasimhan.Resμ ⟨(filtration i, filtration (i + 1)), ⋯⟩ μ)) →\n                                (μA_pseudo_strict_anti :\n                                    ∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len),\n                                      ¬HarderNarasimhan.μA μ ⟨(filtration i, filtration (i + 1)), ⋯⟩ ≤\n                                          HarderNarasimhan.μA μ ⟨(filtration (i + 1), filtration (i + 2)), ⋯⟩) →\n                                  motive\n                                    { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot,\n                                      fin_len := fin_len, strict_mono := strict_mono,\n                                      piecewise_semistable := piecewise_semistable,\n                                      μA_pseudo_strict_anti := μA_pseudo_strict_anti }) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Eq.mpr_not",
   "Classical.propDecidable",
   "Iff.mp",
   "Preorder.toLT",
   "Exists.intro",
   "GT.gt",
   "HarderNarasimhan.impl.subseq",
   "le_of_not_gt",
   "Eq.symm",
   "Eq.rec",
   "Nat.instLinearOrder",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "of_eq_false",
   "Exists",
   "Nat.instPartialOrder",
   "lt_of_le_of_lt",
   "Nat.recAux",
   "BoundedOrder",
   "Bot.bot",
   "Nat.decLt",
   "Exists.casesOn",
   "Nat.find_spec",
   "Decidable.byContradiction",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.le_succ",
   "Antitone",
   "eq_false",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "id",
   "Eq.mpr",
   "le_bot_iff",
   "Nat.find",
   "Ne.symm",
   "Eq.mp",
   "lt_of_le_of_ne",
   "not_le._simp_1",
   "Nat.instPreorder",
   "congrArg",
   "dite_congr",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "instDecidableFalse",
   "dite_cond_eq_false",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "Not",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "Nat.decLe",
   "HarderNarasimhan.impl.subseq._proof_2",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "LinearOrder.toPartialOrder",
   "LE.le",
   "False",
   "eq_of_le_of_ge",
   "lt_self_iff_false",
   "dite",
   "OrderTop.toTop",
   "Nat.find_min"],
  "name": "HarderNarasimhan.impl.subseq_prop0",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f : ℕ → ℒ) (atf : ∃ k, f k = ⊥),\n  Antitone f → f 0 = ⊤ → ∀ (i : ℕ), ∃ j, f i = HarderNarasimhan.impl.subseq f atf j",
  "constCategory": "Theorem"},
 {"references": ["Exists", "exists_and_left", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₂._simp_1_5",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {b : Prop}, (∃ x, b ∧ p x) = (b ∧ ∃ x, p x)",
  "constCategory": "Theorem"},
 {"references": ["NonUnitalNonAssocRing", "NonAssocRing"],
  "name": "NonAssocRing.toNonUnitalNonAssocRing",
  "constType":
  "{α : Type u_1} → [self : NonAssocRing α] → NonUnitalNonAssocRing α",
  "constCategory": "Definition"},
 {"references": ["outParam", "HMod"],
  "name": "HMod.hMod",
  "constType":
  "{α : Type u} → {β : Type v} → {γ : outParam (Type w)} → [self : HMod α β γ] → α → β → γ",
  "constCategory": "Definition"},
 {"references": ["One", "MulOne"],
  "name": "MulOne.toOne",
  "constType": "{M : Type u_2} → [self : MulOne M] → One M",
  "constCategory": "Definition"},
 {"references":
  ["Nat",
   "StarRing",
   "starRingOfComm",
   "Nat.instCommSemiring",
   "Nat.instNonUnitalNonAssocSemiring"],
  "name": "Nat.instStarRing",
  "constType": "StarRing ℕ",
  "constCategory": "Definition"},
 {"references":
  ["AddLeftMono",
   "PartialOrder.toPreorder",
   "instHAdd",
   "AddCommMonoid.toAddMonoid",
   "IsOrderedAddMonoid.add_le_add_left",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "HAdd.hAdd",
   "AddCommMonoid",
   "PartialOrder",
   "IsOrderedAddMonoid",
   "LE.le",
   "CovariantClass.mk",
   "Preorder.toLE",
   "AddMonoid.toAddZeroClass"],
  "name": "IsOrderedAddMonoid.toAddLeftMono",
  "constType":
  "∀ {α : Type u_1} [inst : AddCommMonoid α] [inst_1 : PartialOrder α] [IsOrderedAddMonoid α], AddLeftMono α",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.find",
   "Nat",
   "Exists",
   "Nat.find_le_iff",
   "LE.le",
   "And",
   "DecidablePred",
   "Eq",
   "instLENat",
   "propext"],
  "name": "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_5",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (h : ∃ n, p n) (n : ℕ), (Nat.find h ≤ n) = ∃ m ≤ n, p m",
  "constCategory": "Theorem"},
 {"references":
  ["_private.Init.PropLemmas.0.exists_prop.match_1_3",
   "And.intro",
   "Exists",
   "Iff",
   "_private.Init.PropLemmas.0.exists_prop.match_1_1",
   "And",
   "Exists.intro",
   "Iff.intro"],
  "name": "exists_prop",
  "constType": "∀ {b a : Prop}, (∃ (_ : a), b) ↔ a ∧ b",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "PartialOrder.toPreorder",
   "instHAdd",
   "AddCommGroup.toAddGroup",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toAddCommGroup",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "SubNegMonoid.toAddMonoid",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toLinearOrder",
   "AddMonoid.toAddSemigroup",
   "LE.le",
   "AddGroup.toSubNegMonoid",
   "Preorder.toLE",
   "AddSemigroup.toAdd"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.elim_AddLeftMono",
  "constType":
  "∀ {V : Type u_1} [self : HarderNarasimhan.TotallyOrderedRealVectorSpace V] {y z : V} (x : V), y ≤ z → x + y ≤ x + z",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Submodule.instBot",
   "Nontrivial",
   "HarderNarasimhan.CoprimaryFiltration.mk",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Submodule",
   "Nat.instPreorder",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "HarderNarasimhan.CoprimaryFiltration",
   "instOfNatNat",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Submodule.instTop",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.mk._flat_ctor",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] →\n                (filtration : ℕ → Submodule R M) →\n                  Monotone filtration →\n                    filtration 0 = ⊥ →\n                      (fin_len : ∃ n, filtration n = ⊤) →\n                        (∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                          (piecewise_coprimary :\n                              ∀ n < Nat.find fin_len,\n                                HarderNarasimhan.Coprimary R\n                                  (↥(filtration (n + 1)) ⧸ (filtration n).submoduleOf (filtration (n + 1)))) →\n                            (∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len),\n                                { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }) →\n                              HarderNarasimhan.CoprimaryFiltration R M",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.SlopeLike",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.impl.rmk4d13",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "Or",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "And.left",
   "Not",
   "bot_lt_iff_ne_bot",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Iff.mpr",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "lt_top_iff_ne_top",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.remark_4_13",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.SlopeLike μ →\n    ∀ (x : ℒ) (hx : x ≠ ⊥ ∧ x ≠ ⊤),\n      ¬μ ⟨(⊥, x), ⋯⟩ ≤ μ HarderNarasimhan.TotIntvl ∨ μ HarderNarasimhan.TotIntvl ≤ μ ⟨(x, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["WithTop.partialOrder",
   "SemilatticeInf.toMin",
   "WithTop",
   "WithTop.some",
   "WithTop.semilatticeInf._proof_2",
   "Unit",
   "WithTop.semilatticeInf._proof_3",
   "SemilatticeInf",
   "WithTop.top",
   "Min.min",
   "Top.top",
   "WithTop.semilatticeInf.match_1",
   "SemilatticeInf.mk",
   "WithTop.semilatticeInf._proof_1",
   "SemilatticeInf.toPartialOrder"],
  "name": "WithTop.semilatticeInf",
  "constType":
  "{α : Type u_1} → [SemilatticeInf α] → SemilatticeInf (WithTop α)",
  "constCategory": "Definition"},
 {"references": ["Iff"],
  "name": "Iff.mpr",
  "constType": "∀ {a b : Prop}, (a ↔ b) → b → a",
  "constCategory": "Theorem"},
 {"references":
  ["Exists", "Exists.intro", "Eq", "forall_exists_index", "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₂._simp_1_8",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {q : (∃ x, p x) → Prop}, (∀ (h : ∃ x, p x), q h) = ∀ (x : α) (h : p x), q ⋯",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.quotEquivOfEqBot._proof_2",
   "Submodule.hasQuotient",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.Quotient.module",
   "Submodule.liftQ",
   "LinearEquiv",
   "LinearMap.id",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "Eq",
   "Submodule.mkQ",
   "AddCommGroup",
   "Submodule.quotEquivOfEqBot._proof_5",
   "Bot.bot",
   "Ring.toSemiring",
   "Submodule.quotEquivOfEqBot._proof_4",
   "LinearEquiv.ofLinear",
   "Submodule.instBot",
   "AddCommGroup.toAddCommMonoid",
   "RingHomInvPair.ids",
   "Submodule.Quotient.restrictScalarsEquiv._proof_2",
   "Ring"],
  "name": "Submodule.quotEquivOfEqBot",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Ring R] →\n      [inst_1 : AddCommGroup M] → [inst_2 : _root_.Module R M] → (p : Submodule R M) → p = ⊥ → (M ⧸ p) ≃ₗ[R] M",
  "constCategory": "Definition"},
 {"references":
  ["Nat",
   "AddMonoidWithOne.toNatCast",
   "Nat.cast",
   "Mathlib.Meta.NormNum.IsNat.mk",
   "Eq.symm",
   "Eq",
   "AddMonoidWithOne",
   "Mathlib.Meta.NormNum.IsNat"],
  "name": "Mathlib.Meta.NormNum.isNat_ofNat",
  "constType":
  "∀ (α : Type u) [inst : AddMonoidWithOne α] {a : α} {n : ℕ}, ↑n = a → Mathlib.Meta.NormNum.IsNat a n",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "instLTNat", "Nat", "Fin.val", "Fin", "Fin.isLt"],
  "name": "Fin.prop",
  "constType": "∀ {n : ℕ} (a : Fin n), ↑a < n",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.ext",
   "HarderNarasimhan.μ",
   "Membership.mem",
   "Inhabited.default",
   "HarderNarasimhan.impl.instConvexOfConvexITotIntvl",
   "funext",
   "Eq.symm",
   "HarderNarasimhan.S",
   "SetLike.instMembership",
   "HarderNarasimhan.CoprimaryFiltration.filtration",
   "HarderNarasimhan.impl.instμ_AdmissibleℒSμ",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat",
   "Iff",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "id",
   "Eq.mpr",
   "ConditionallyCompleteLattice.toLattice",
   "CompleteLattice.toBoundedOrder",
   "Submodule.instNontrivial",
   "Module",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration",
   "Eq.mp",
   "Submodule",
   "congrArg",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "HarderNarasimhan.impl.prop3d11",
   "CompleteLattice.toConditionallyCompleteLattice",
   "CommRing.toCommSemiring",
   "HarderNarasimhan.impl.CoprimaryFiltration.filtration_eq_harderNarasimhan_filtration",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "HarderNarasimhan.impl.prop3d13₂",
   "Iff.rfl",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "Inhabited",
   "CommRing",
   "HarderNarasimhan.impl.prop3d13₁",
   "HarderNarasimhan.CoprimaryFiltration.ext",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration",
   "HarderNarasimhan.instPartialOrderS₀",
   "Submodule.setLike",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Submodule.completeLattice",
   "inferInstance",
   "HarderNarasimhan.S₀",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instUniqueCoprimaryFiltration._proof_1",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (a : HarderNarasimhan.CoprimaryFiltration R M), a = default",
  "constCategory": "Theorem"},
 {"references": ["Lattice", "GeneralizedCoheytingAlgebra"],
  "name": "GeneralizedCoheytingAlgebra.toLattice",
  "constType":
  "{α : Type u_4} → [self : GeneralizedCoheytingAlgebra α] → Lattice α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Nat.lt_add_one._simp_1",
   "Iff.mp",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "Nat.one_lt_ofNat._simp_1",
   "eq_true",
   "List.tfae_of_cycle",
   "AddMonoidWithOne.toAddMonoid",
   "List.instGetElem?NatLtLength",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.μmax",
   "Mathlib.Meta.NormNum.IsNat.to_eq",
   "And.intro",
   "GetElem?.getElem?",
   "Mathlib.Meta.NormNum.isNat_add",
   "HarderNarasimhan.NashEquilibrium",
   "Nat.instCharZero",
   "PartialOrder",
   "List.TFAE",
   "Nat.instIsOrderedAddMonoid",
   "List.cons",
   "List.IsChain.cons_cons",
   "AddSemigroup.toAdd",
   "Nat.ofNat_pos._simp_1",
   "instLTNat",
   "getElem?_pos",
   "Nat.instPartialOrder",
   "And",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Nat.instNontrivial",
   "True.intro",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "List.IsChain.singleton",
   "Prod",
   "zero_add",
   "Nat",
   "Iff.mpr",
   "Nat.instStarOrderedRing",
   "Eq.refl",
   "AddMonoid.toAddSemigroup",
   "Iff",
   "Option",
   "Nontrivial",
   "Mathlib.Meta.NormNum.isNat_ofNat",
   "AddZero.toZero",
   "List.length",
   "AddMonoid.toAddZeroClass",
   "HarderNarasimhan.impl.prop4d16₂",
   "Subtype",
   "List",
   "GetElem.getElem",
   "Option.some",
   "Nat.instAddMonoidWithOne",
   "congrArg",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "HarderNarasimhan.μmin",
   "instOfNatNat",
   "Zero.toOfNat0",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Eq",
   "Preorder.toLE",
   "List.nil",
   "Nat.instAddMonoid",
   "List.TFAE.out",
   "IsStrictOrderedRing.toIsOrderedRing",
   "True",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "instHAdd",
   "AddZero.toAdd",
   "List.instLawfulGetElemNatLtLength",
   "OfNat.ofNat",
   "HarderNarasimhan.impl.prop4d16₁",
   "LT.lt",
   "HAdd.hAdd",
   "eq_self",
   "of_eq_true",
   "GetElem?.toGetElem",
   "Nat.instIsStrictOrderedRing",
   "Nat.instAtLeastTwoHAddOfNat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_4_16",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.SlopeLike μ →\n    [HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl,\n          HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl,\n          HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl].TFAE ∧\n      (HarderNarasimhan.WeakAscendingChainCondition μ →\n        HarderNarasimhan.StrongDescendingChainCondition μ →\n          [HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl,\n              HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl,\n              HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl,\n              HarderNarasimhan.NashEquilibrium μ].TFAE)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "Exists",
   "Nat.instPartialOrder",
   "CompleteLattice.toLattice",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Prod",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.StrongDescendingChainCondition'.mk",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition'.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) →\n    HarderNarasimhan.StrongDescendingChainCondition' μ",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "Exists",
   "SetLike.instMembership",
   "RingHomSurjective",
   "SemilinearMapClass",
   "Module",
   "Submodule.map",
   "Membership.mem",
   "And",
   "DFunLike.coe",
   "Submodule",
   "Submodule.mem_map",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_5",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} [inst_6 : RingHomSurjective σ₁₂] {F : Type u_9} [inst_7 : FunLike F M M₂]\n  [inst_8 : SemilinearMapClass F σ₁₂ M M₂] {f : F} {p : Submodule R M} {x : M₂},\n  (x ∈ Submodule.map f p) = ∃ y ∈ p, f y = x",
  "constCategory": "Theorem"},
 {"references": ["PartialOrder", "SemilatticeSup"],
  "name": "SemilatticeSup.toPartialOrder",
  "constType": "{α : Type u} → [self : SemilatticeSup α] → PartialOrder α",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Exists",
   "BoundedOrder",
   "Bot.bot",
   "HarderNarasimhan.impl.subseq",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "OrderBot.toBot",
   "Eq.ndrec",
   "Preorder.toLE",
   "Eq",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.subseq.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f f_1 : ℕ → ℒ) (e_f : f = f_1)\n  (atf : ∃ k, f k = ⊥) (a a_1 : ℕ),\n  a = a_1 → HarderNarasimhan.impl.subseq f atf a = HarderNarasimhan.impl.subseq f_1 ⋯ a_1",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "CompleteLattice.le_sSup",
   "CompleteLattice.toLattice",
   "CompleteSemilatticeSup",
   "CompleteLattice.sSup_le",
   "CompleteLattice.toSupSet",
   "SemilatticeSup.toPartialOrder",
   "CompleteSemilatticeSup.mk",
   "CompleteLattice"],
  "name": "CompleteLattice.toCompleteSemilatticeSup",
  "constType":
  "{α : Type u_8} → [self : CompleteLattice α] → CompleteSemilatticeSup α",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "SetLike.instMembership",
   "SemilinearMapClass",
   "Submodule.mem_comap",
   "Module",
   "Membership.mem",
   "DFunLike.coe",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.comap",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.quot_ntl._simp_1_1",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} {x : M} {F : Type u_9} [inst_6 : FunLike F M M₂] [inst_7 : SemilinearMapClass F σ₁₂ M M₂] {f : F}\n  {p : Submodule R₂ M₂}, (x ∈ Submodule.comap f p) = (f x ∈ p)",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Real.instPreorder",
   "PartialOrder.toPreorder",
   "Module",
   "AddCommGroup.toAddGroup",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.rec",
   "MulAction.toSMul",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "AddGroup.toSubNegMonoid",
   "Preorder.toLE",
   "AddSemigroup.toAdd",
   "PosSMulStrictMono",
   "Real",
   "AddCommGroup.add_comm",
   "instHAdd",
   "LinearOrder",
   "AddCommMonoid.mk",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "Real.semiring",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.mk",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "Real.instZero",
   "AddMonoid.toAddSemigroup",
   "LE.le"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.recOn",
  "constType":
  "{V : Type u_1} →\n  {motive : HarderNarasimhan.TotallyOrderedRealVectorSpace V → Sort u} →\n    (t : HarderNarasimhan.TotallyOrderedRealVectorSpace V) →\n      ([toAddCommGroup : AddCommGroup V] →\n          [toModule : _root_.Module ℝ V] →\n            [toLinearOrder : LinearOrder V] →\n              [toPosSMulStrictMono : PosSMulStrictMono ℝ V] →\n                (elim_AddLeftMono : ∀ {y z : V} (x : V), y ≤ z → x + y ≤ x + z) →\n                  motive\n                    { toAddCommGroup := toAddCommGroup, toModule := toModule, toLinearOrder := toLinearOrder,\n                      toPosSMulStrictMono := toPosSMulStrictMono, elim_AddLeftMono := elim_AddLeftMono }) →\n        motive t",
  "constCategory": "Definition"},
 {"references": ["AddCommMonoid", "Module", "Semiring"],
  "name": "Submodule",
  "constType":
  "(R : Type u) → (M : Type v) → [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [_root_.Module R M] → Type v",
  "constCategory": "Other"},
 {"references":
  ["Submodule.hasQuotient",
   "HasQuotient.Quotient",
   "QuotientAddGroup.Quotient.addCommGroup",
   "Module",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "Submodule.toAddSubgroup",
   "Submodule",
   "Ring.toSemiring",
   "Ring"],
  "name": "Submodule.Quotient.addCommGroup",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Ring R] →\n      [inst_1 : AddCommGroup M] → [inst_2 : _root_.Module R M] → (p : Submodule R M) → AddCommGroup (M ⧸ p)",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "OrderDual", "LT.mk", "LT"],
  "name": "OrderDual.instLT",
  "constType": "(α : Type u_5) → [LT α] → LT αᵒᵈ",
  "constCategory": "Definition"},
 {"references":
  ["NatCast.mk",
   "NeZero",
   "Nat",
   "Zero.ofOfNat0",
   "instOfNatNat",
   "NatCast",
   "Fin",
   "Fin.ofNat"],
  "name": "Fin.NatCast.instNatCast",
  "constType": "(n : ℕ) → [NeZero n] → NatCast (Fin n)",
  "constCategory": "Definition"},
 {"references":
  ["Nat.find",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Classical.propDecidable",
   "HarderNarasimhan.impl.prop3d4₀func",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.impl.prop3d4₀func_fin_len",
   "Nontrivial",
   "Lattice",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_len",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        [WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [inst_4 : CompleteLattice S] →\n              (μ : { p // p.1 < p.2 } → S) → { p // p.1 < p.2 } → HarderNarasimhan.μA_DescendingChainCondition μ → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "Exists",
   "SetLike.instMembership",
   "RingHomSurjective",
   "SemilinearMapClass",
   "Module",
   "Submodule.map",
   "Membership.mem",
   "And",
   "DFunLike.coe",
   "Submodule",
   "Submodule.mem_map",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.lift_quot_middle._simp_1_1",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} [inst_6 : RingHomSurjective σ₁₂] {F : Type u_9} [inst_7 : FunLike F M M₂]\n  [inst_8 : SemilinearMapClass F σ₁₂ M M₂] {f : F} {p : Submodule R M} {x : M₂},\n  (x ∈ Submodule.map f p) = ∃ y ∈ p, f y = x",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.Quotient.mk",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Submodule.map",
   "Exists.intro",
   "HarderNarasimhan.impl.lift_quot_middle._simp_1_4",
   "HarderNarasimhan.impl.lift_quot_middle._simp_1_5",
   "Membership",
   "Subtype.val",
   "Submodule.subtype",
   "And.intro",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "eq_of_heq",
   "funext",
   "Eq.symm",
   "HarderNarasimhan.impl.lift_quot_middle._simp_1_3",
   "Eq.ndrec",
   "HarderNarasimhan.impl.lift_quot_middle._simp_1_2",
   "SetLike.instMembership",
   "Exists",
   "outParam",
   "Submodule.addCommGroup",
   "And",
   "AddZeroClass.toAddZero",
   "LinearMap",
   "Ring.toSemiring",
   "Iff.of_eq",
   "Submodule.comap",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "HEq",
   "AddCommGroup.toAddCommMonoid",
   "id",
   "Eq.mpr",
   "HarderNarasimhan.impl.lift_quot._proof_1",
   "AddZero.toZero",
   "HarderNarasimhan.impl.lift_quot_middle._simp_1_6",
   "AddMonoid.toAddZeroClass",
   "Submodule.submoduleOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.hasQuotient",
   "Subtype",
   "HasQuotient.Quotient",
   "LinearMap.instFunLike",
   "Eq.mp",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "AddCommMonoid.toAddMonoid",
   "DFunLike.coe",
   "Submodule.zero_mem",
   "congrArg",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "HarderNarasimhan.impl.lift_quot_middle._simp_1_1",
   "Zero.toOfNat0",
   "HarderNarasimhan.impl.lift_quot._proof_3",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Submodule.mkQ",
   "CommRing.toCommSemiring",
   "HEq.refl",
   "CommSemiring.toSemiring",
   "HarderNarasimhan.impl.lift_quot._proof_2",
   "AddCommGroup",
   "Exists.choose",
   "CommRing",
   "Eq.casesOn",
   "OfNat.ofNat",
   "exists_prop_congr",
   "CommRing.toRing",
   "IsNoetherianRing",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "HarderNarasimhan.impl.lift_quot",
   "Subtype.mk",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.lift_quot_middle",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (N₁ N₂ : Submodule R M),\n  N₁ ≤ N₂ →\n    ∀ (x : Submodule R (↥N₂ ⧸ N₁.submoduleOf N₂)),\n      N₁ ≤ HarderNarasimhan.impl.lift_quot N₁ N₂ x ∧ HarderNarasimhan.impl.lift_quot N₁ N₂ x ≤ N₂",
  "constCategory": "Theorem"},
 {"references":
  ["rfl",
   "And.intro",
   "Set.image",
   "Set",
   "Membership.mem",
   "And",
   "Exists.intro",
   "Eq",
   "Set.instMembership"],
  "name": "Set.mem_image_of_mem",
  "constType":
  "∀ {α : Type u} {β : Type v} (f : α → β) {x : α} {a : Set α}, x ∈ a → f x ∈ f '' a",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.mk",
   "OrderDual.instPreorder",
   "OrderDual",
   "Preorder",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "LE.le",
   "inferInstanceAs",
   "Preorder.toLE",
   "le_antisymm"],
  "name": "OrderDual.instPartialOrder",
  "constType": "(α : Type u_5) → [PartialOrder α] → PartialOrder αᵒᵈ",
  "constCategory": "Definition"},
 {"references": [],
  "name": "RelEmbedding",
  "constType":
  "{α : Type u_5} → {β : Type u_6} → (α → α → Prop) → (β → β → Prop) → Type (max u_5 u_6)",
  "constCategory": "Other"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "OrderTheory.instLinearOrderDedekindMacNeilleCompletion._proof_1",
   "compareOfLessAndEq",
   "instDistribLatticeOfLinearOrder",
   "decidableLTOfDecidableLE",
   "Ord.mk",
   "Classical.decRel",
   "Preorder.toLE",
   "CompleteLattice.toConditionallyCompleteLattice",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "CompleteLattice.toLattice",
   "LinearOrder",
   "OrderTheory.instLinearOrderDedekindMacNeilleCompletion._proof_2",
   "LinearOrder.mk",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "decidableEqOfDecidableLE",
   "DistribLattice.toLattice",
   "SemilatticeSup.toMax",
   "LE.le",
   "ConditionallyCompleteLattice.toLattice",
   "OrderTheory.instLinearOrderDedekindMacNeilleCompletion._proof_3",
   "OrderTheory.instLinearOrderDedekindMacNeilleCompletion._proof_8",
   "CompleteLattice",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "OrderTheory.instLinearOrderDedekindMacNeilleCompletion",
  "constType":
  "{α : Type u_1} → [inst : LinearOrder α] → LinearOrder (OrderTheory.DedekindMacNeilleCompletion α)",
  "constCategory": "Definition"},
 {"references":
  ["Ring.toNonAssocRing",
   "Int.mul",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Mathlib.Meta.NormNum.IsInt.mk",
   "Distrib.toMul",
   "HMul.hMul",
   "Int.cast",
   "Mathlib.Meta.NormNum.isInt_mul.match_1_1",
   "Int.instMul",
   "Int",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "AddCommGroupWithOne.toAddGroupWithOne",
   "Ring.toAddGroupWithOne",
   "Int.cast_mul",
   "NonAssocRing.toAddCommGroupWithOne",
   "Mathlib.Meta.NormNum.IsInt",
   "Eq.symm",
   "AddGroupWithOne.toIntCast",
   "instHMul",
   "Eq",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "Ring"],
  "name": "Mathlib.Meta.NormNum.isInt_mul",
  "constType":
  "∀ {α : Type u_1} [inst : Ring α] {f : α → α → α} {a b : α} {a' b' c : ℤ},\n  f = HMul.hMul →\n    Mathlib.Meta.NormNum.IsInt a a' →\n      Mathlib.Meta.NormNum.IsInt b b' → a'.mul b' = c → Mathlib.Meta.NormNum.IsInt (a * b) c",
  "constCategory": "Theorem"},
 {"references":
  ["FunLike",
   "EmbeddingLike.apply_eq_iff_eq",
   "EmbeddingLike",
   "Eq",
   "DFunLike.coe",
   "propext"],
  "name": "HarderNarasimhan.impl.rmk4d14₁._simp_1_1",
  "constType":
  "∀ {F : Sort u_1} {α : Sort u_2} {β : Sort u_3} [inst : FunLike F α β] [i : EmbeddingLike F α β] (f : F) {x y : α},\n  (f x = f y) = (x = y)",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "AddZeroClass",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references":
  ["Set",
   "Iff",
   "Singleton.singleton",
   "Membership.mem",
   "Iff.rfl",
   "Eq",
   "Set.instSingletonSet",
   "Set.instMembership"],
  "name": "Set.mem_singleton_iff",
  "constType": "∀ {α : Type u} {a b : α}, a ∈ {b} ↔ a = b",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "Nat.cast",
   "LE.le",
   "Int.instLEInt",
   "Eq",
   "instLENat",
   "propext",
   "Mathlib.Tactic.Zify.natCast_le",
   "instNatCastInt",
   "Int"],
  "name": "Mathlib.Tactic.Zify.natCast_le._simp_1",
  "constType": "∀ (a b : ℕ), (a ≤ b) = (↑a ≤ ↑b)",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.semistable_iff._simp_1_4",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "Int.NonNeg.mk",
   "Nat",
   "Nat.cast",
   "instOfNat",
   "instHAdd",
   "LE.le",
   "Int.instLEInt",
   "OfNat.ofNat",
   "instNatCastInt",
   "Int"],
  "name": "Int.ofNat_nonneg",
  "constType": "∀ (n : ℕ), 0 ≤ ↑n",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat",
   "Decidable",
   "LawfulGetElem.mk",
   "List.instLawfulGetElemNatLtLength._proof_2",
   "List.instLawfulGetElemNatLtLength._proof_1",
   "List",
   "Inhabited",
   "List.instGetElem?NatLtLength",
   "LawfulGetElem",
   "List.length"],
  "name": "List.instLawfulGetElemNatLtLength",
  "constType":
  "∀ {α : Type u_1}, LawfulGetElem (List α) ℕ α fun as i ↦ i < as.length",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "Eq.symm",
   "PrimeSpectrum.instPartialOrder",
   "HarderNarasimhan.CoprimaryFiltration.ext.match_1",
   "Eq.ndrec",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "HarderNarasimhan.CoprimaryFiltration.filtration",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Eq.refl",
   "Submodule.instBot",
   "Nontrivial",
   "HEq",
   "HarderNarasimhan.CoprimaryFiltration.mk",
   "AddCommGroup.toAddCommMonoid",
   "Top.top",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Nat.instPreorder",
   "Submodule",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "Eq.casesOn",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.ext",
  "constType":
  "∀ {R : Type u_1} {inst : CommRing R} {inst_1 : IsNoetherianRing R} {M : Type u_2} {inst_2 : Nontrivial M}\n  {inst_3 : AddCommGroup M} {inst_4 : _root_.Module R M} {inst_5 : Module.Finite R M}\n  {x y : HarderNarasimhan.CoprimaryFiltration R M}, x.filtration = y.filtration → x = y",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μA_DescendingChainCondition",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration",
   "HarderNarasimhan.μ_Admissible",
   "Preorder.toLT",
   "BoundedOrder",
   "Nonempty",
   "Prod.snd",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "instNonemptyOfInhabited",
   "Nontrivial",
   "Lattice",
   "inferInstance",
   "WellFoundedGT",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.instNonemptyHarderNarasimhanFiltration",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ], Nonempty (HarderNarasimhan.HarderNarasimhanFiltration μ)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "SetLike.instMembership",
   "Submodule.zero._proof_1",
   "Module",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "Submodule",
   "AddCommMonoid",
   "Zero.mk",
   "Submodule.setLike",
   "Zero.toOfNat0",
   "Zero",
   "Subtype.mk",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "Submodule.zero",
  "constType":
  "{R : Type u} →\n  {M : Type v} →\n    [inst : Semiring R] → [inst_1 : AddCommMonoid M] → {module_M : _root_.Module R M} → (p : Submodule R M) → Zero ↥p",
  "constCategory": "Definition"},
 {"references": ["Bool", "BEq"],
  "name": "BEq.beq",
  "constType": "{α : Type u} → [self : BEq α] → α → α → Bool",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "instHAdd",
   "_private.Init.Data.Nat.Basic.0.Nat.le_add_right.match_1_1",
   "Nat.brecOn",
   "Nat.le_refl",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "Nat",
   "Nat.add",
   "Nat.le_succ_of_le",
   "instOfNatNat",
   "Nat.succ",
   "LE.le",
   "Nat.below",
   "instLENat"],
  "name": "Nat.le_add_right",
  "constType": "∀ (n k : ℕ), n ≤ n + k",
  "constCategory": "Theorem"},
 {"references":
  ["Inhabited.mk", "True", "Inhabited", "instInhabitedTrue.default"],
  "name": "instInhabitedTrue",
  "constType": "Inhabited True",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Ring",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references":
  ["Set.Nonempty",
   "Set",
   "Set.toFinset_nonempty",
   "Set.toFinset",
   "Eq",
   "Fintype",
   "Finset.Nonempty",
   "propext",
   "Set.Elem"],
  "name": "HarderNarasimhan.impl.μ_nonempty._simp_1_1",
  "constType":
  "∀ {α : Type u_1} {s : Set α} [inst : Fintype ↑s], s.toFinset.Nonempty = s.Nonempty",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.hasQuotient",
   "Submodule.Quotient.mk",
   "SetLike.instMembership",
   "HasQuotient.Quotient",
   "Module",
   "Membership.mem",
   "Submodule.Quotient.instZeroQuotient",
   "AddCommGroup",
   "Submodule.Quotient.mk_eq_zero",
   "OfNat.ofNat",
   "Ring.toSemiring",
   "Submodule",
   "Submodule.setLike",
   "AddCommGroup.toAddCommMonoid",
   "Zero.toOfNat0",
   "Eq",
   "propext",
   "Ring"],
  "name": "HarderNarasimhan.impl.rmk4d14₂._simp_1_7",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} {x : M} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M), (Submodule.Quotient.mk x = 0) = (x ∈ p)",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.ConvexI.mk",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "HarderNarasimhan.InIntvl",
   "Min.min",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "Lattice",
   "LE.le",
   "HarderNarasimhan.ConvexI.rec",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.ConvexI.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Lattice ℒ] →\n    {S : Type u_2} →\n      [inst_1 : CompleteLattice S] →\n        {I : { p // p.1 < p.2 }} →\n          {μ : { p // p.1 < p.2 } → S} →\n            {motive : HarderNarasimhan.ConvexI I μ → Sort u} →\n              (t : HarderNarasimhan.ConvexI I μ) →\n                ((convex :\n                      ∀ (x y : ℒ),\n                        HarderNarasimhan.InIntvl I x →\n                          HarderNarasimhan.InIntvl I y → ∀ (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩) →\n                    motive ⋯) →\n                  motive t",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "eq_self",
   "instDecidableTrue",
   "Eq.trans",
   "of_eq_true",
   "True",
   "Decidable",
   "ite",
   "Eq.refl",
   "Eq",
   "ite_congr",
   "congrArg"],
  "name": "ite_cond_eq_true",
  "constType":
  "∀ {α : Sort u} {c : Prop} {x : Decidable c} (a b : α), c = True → (if c then a else b) = a",
  "constCategory": "Theorem"},
 {"references": ["and_imp", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₂._simp_1_7",
  "constType": "∀ {a b c : Prop}, (a ∧ b → c) = (a → b → c)",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid",
   "AddGroup.toSubtractionMonoid._proof_1",
   "SubtractionMonoid.mk",
   "AddGroup.toSubtractionMonoid._proof_2",
   "AddGroup",
   "_private.Mathlib.Algebra.Group.Defs.0.neg_eq_of_add",
   "AddGroup.toSubNegMonoid"],
  "name": "AddGroup.toSubtractionMonoid",
  "constType": "{G : Type u_1} → [AddGroup G] → SubtractionMonoid G",
  "constCategory": "Definition"},
 {"references":
  ["Int.instCommRing",
   "CommRing.toCommSemiring",
   "CommSemiring",
   "inferInstance",
   "Int"],
  "name": "Int.instCommSemiring",
  "constType": "CommSemiring ℤ",
  "constCategory": "Definition"},
 {"references":
  ["NeZero",
   "One.toOfNat1",
   "eq_false",
   "One",
   "False",
   "one_ne_zero",
   "Zero.toOfNat0",
   "Zero",
   "Eq",
   "OfNat.ofNat"],
  "name": "one_ne_zero._simp_1",
  "constType":
  "∀ {α : Type u_2} [inst : Zero α] [inst_1 : One α] [NeZero 1], (1 = 0) = False",
  "constCategory": "Theorem"},
 {"references":
  ["rfl",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "PartialOrder",
   "LE.le",
   "Nontrivial",
   "HarderNarasimhan.instPartialOrderInterval",
   "HarderNarasimhan.Interval",
   "Subtype.mk",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "HarderNarasimhan.lt_lt"],
  "name": "HarderNarasimhan.μ_res_intvl",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {I : { p // p.1 < p.2 }}\n  {S : Type u_2} [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} {J : { p // p.1 < p.2 }},\n  HarderNarasimhan.Resμ I μ J = μ ⟨(↑(↑J).1, ↑(↑J).2), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "Module",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "OfNat.ofNat",
   "Submodule",
   "AddCommMonoid",
   "Submodule.setLike",
   "Submodule.instBot",
   "Submodule.mem_bot",
   "Zero.toOfNat0",
   "Eq",
   "AddZero.toZero",
   "propext",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_11",
  "constType":
  "∀ (R : Type u_1) {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M] {x : M},\n  (x ∈ ⊥) = (x = 0)",
  "constCategory": "Theorem"},
 {"references": ["Int.lt", "LT.mk", "LT", "Int"],
  "name": "Int.instLTInt",
  "constType": "LT ℤ",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat",
   "instOfNatNat",
   "Eq",
   "OfNat.ofNat",
   "propext",
   "Nat.lt_one_iff"],
  "name": "HarderNarasimhan.impl.subseq_prop6._simp_1_5",
  "constType": "∀ {n : ℕ}, (n < 1) = (n = 0)",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "IsNoetherianRing",
   "HarderNarasimhan.instPartialOrderS₀",
   "CommSemiring.toSemiring",
   "HarderNarasimhan.S₀",
   "CommRing",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "HarderNarasimhan.S",
  "constType":
  "(R : Type u_1) → [inst : CommRing R] → [IsNoetherianRing R] → Type u_1",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Finset",
   "Membership.mem",
   "LinearOrder",
   "Exists.intro",
   "WithTop",
   "WithTop.some",
   "instDistribLatticeOfLinearOrder",
   "DistribLattice.toLattice",
   "Finset.min'",
   "WithTop.coe_untop",
   "LE.le",
   "Finset.inf'._proof_1",
   "id",
   "Finset.instMembership",
   "Eq.symm",
   "Finset.min",
   "Preorder.toLE",
   "Finset.min_le_of_eq",
   "WithTop.untop",
   "SemilatticeInf.toPartialOrder"],
  "name": "Finset.min'_le",
  "constType":
  "∀ {α : Type u_2} [inst : LinearOrder α] (s : Finset α) (x : α) (H2 : x ∈ s), s.min' ⋯ ≤ x",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Exists.intro",
   "HarderNarasimhan.impl.subseq",
   "Nat.instPreorder",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.subseq_prop0",
   "Eq.rec",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "Lattice.toSemilatticeInf",
   "Exists.choose_spec",
   "BoundedOrder",
   "Exists.choose",
   "Bot.bot",
   "OfNat.ofNat",
   "Exists.casesOn",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.subseq_prop1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f : ℕ → ℒ) (atf : ∃ k, f k = ⊥),\n  Antitone f → f 0 = ⊤ → ∃ N, HarderNarasimhan.impl.subseq f atf N = ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "FunLike",
   "SemilinearMapClass",
   "Module",
   "outParam",
   "MulActionSemiHomClass",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "RingHom.instFunLike",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "DFunLike.coe",
   "Module.toDistribMulAction",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "MonoidWithZero.toMonoid",
   "AddZero.toZero",
   "DistribSMul.toSMulZeroClass",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "SemilinearMapClass.toMulActionSemiHomClass",
  "constType":
  "∀ {F : Type u_14} {R : outParam (Type u_15)} {S : outParam (Type u_16)} {inst : Semiring R} {inst_1 : Semiring S}\n  {σ : outParam (R →+* S)} {M : outParam (Type u_17)} {M₂ : outParam (Type u_18)} {inst_2 : AddCommMonoid M}\n  {inst_3 : AddCommMonoid M₂} {inst_4 : _root_.Module R M} {inst_5 : _root_.Module S M₂} {inst_6 : FunLike F M M₂}\n  [self : SemilinearMapClass F σ M M₂], MulActionSemiHomClass F (⇑σ) M M₂",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "Subtype.instLE",
   "LE.le",
   "LE",
   "Subtype.coe_le_coe",
   "Eq",
   "Subtype.val",
   "propext"],
  "name": "Subtype.coe_le_coe._simp_1",
  "constType":
  "∀ {α : Type u_2} [inst : LE α] {p : α → Prop} {x y : Subtype p}, (↑x ≤ ↑y) = (x ≤ y)",
  "constCategory": "Theorem"},
 {"references":
  ["Set.image",
   "Exists",
   "Set",
   "Iff",
   "Membership.mem",
   "And",
   "Iff.rfl",
   "Eq",
   "Set.instMembership"],
  "name": "Set.mem_image",
  "constType":
  "∀ {α : Type u} {β : Type v} (f : α → β) (s : Set α) (y : β), y ∈ f '' s ↔ ∃ x ∈ s, f x = y",
  "constCategory": "Theorem"},
 {"references":
  ["List.nil",
   "Nat",
   "instOfNat",
   "Lean.Omega.LinearCombo",
   "Lean.Omega.Coeffs.set",
   "OfNat.ofNat",
   "Int",
   "Lean.Omega.LinearCombo.mk"],
  "name": "Lean.Omega.LinearCombo.coordinate",
  "constType": "ℕ → Omega.LinearCombo",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Submodule.Quotient.module",
   "HarderNarasimhan.μ",
   "Membership.mem",
   "Classical.propDecidable",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_5",
   "HarderNarasimhan.S",
   "HarderNarasimhan.Coprimary.coprimary",
   "instLTNat",
   "SetLike.instMembership",
   "Submodule.addCommGroup",
   "HarderNarasimhan.impl.piecewise_coprimary",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Set.instMembership",
   "Nat",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Top.top",
   "ConditionallyCompleteLattice.toLattice",
   "CompleteLattice.toBoundedOrder",
   "Submodule.submoduleOf",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "Submodule.instNontrivial",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "Eq",
   "CompleteLattice.toConditionallyCompleteLattice",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
   "CommRing.toCommSemiring",
   "Set",
   "instHAdd",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Submodule.setLike",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Submodule.completeLattice",
   "ExistsUnique",
   "HarderNarasimhan.S₀",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_7",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (HNFil : HarderNarasimhan.HarderNarasimhanFiltration (HarderNarasimhan.μ R M)) (n : ℕ),\n  n + 1 < Nat.find ⋯ →\n    ∃! p,\n      p ∈\n        associatedPrimes R\n          (↥(HNFil.filtration (n + 1 + 1)) ⧸\n            Submodule.submoduleOf (HNFil.filtration (n + 1)) (HNFil.filtration (n + 1 + 1)))",
  "constCategory": "Theorem"},
 {"references":
  ["Localization",
   "LocalizedModule.isModule",
   "LocalizedModule",
   "OreLocalization.oreSetComm",
   "Module",
   "CommSemiring",
   "CommSemiring.toSemiring",
   "LocalizedModule.instAddCommMonoid",
   "MulZeroOneClass.toMulOneClass",
   "Algebra.id",
   "CommSemiring.toCommMonoid",
   "Submonoid",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "OreLocalization.instAlgebra",
   "OreLocalization.instSemiring",
   "OreLocalization.instCommSemiring",
   "Localization.isLocalization",
   "NonAssocSemiring.toMulZeroOneClass",
   "algebraMap",
   "Module.compHom"],
  "name": "LocalizedModule.isModule'",
  "constType":
  "{R : Type u} →\n  [inst : CommSemiring R] →\n    {S : Submonoid R} →\n      {M : Type v} → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → _root_.Module R (LocalizedModule S M)",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Lean.Name.anonymous",
   "sorryAx",
   "PartialOrder.toPreorder",
   "Lean.Name",
   "Module",
   "Lean.Name.str",
   "Bool.false",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Membership.mem",
   "Minimal",
   "Semiring.toNonAssocSemiring",
   "Ideal",
   "instOfNatNat",
   "PrimeSpectrum.instPartialOrder",
   "PrimeSpectrum.asIdeal",
   "Preorder.toLE",
   "Semiring.toModule",
   "CommRing.toCommSemiring",
   "Set",
   "Module.support",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "AddCommGroup",
   "CommRing",
   "OfNat.ofNat",
   "Set.instMembership",
   "PrimeSpectrum",
   "Nat",
   "IsNoetherianRing",
   "Iff",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "Lean.Name.num",
   "Module.Finite"],
  "name": "HarderNarasimhan.AdmittedResults.min_associated_prime_iff_min_supp",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [IsNoetherianRing R] {M : Type u_2} [inst_2 : AddCommGroup M]\n  [inst_3 : _root_.Module R M] [Module.Finite R M] {I : PrimeSpectrum R},\n  Minimal (fun J ↦ J ∈ associatedPrimes R M) I.asIdeal ↔ Minimal (fun J ↦ J ∈ Module.support R M) I",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "PartialOrder.toPreorder",
   "Subtype",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Iff.rfl",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Iff",
   "PartialOrder",
   "LE.le",
   "Nontrivial",
   "HarderNarasimhan.Interval",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.instPartialOrderInterval._proof_3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (a b : HarderNarasimhan.Interval z), ↑a ≤ ↑b ∧ ¬↑b ≤ ↑a ↔ ↑a ≤ ↑b ∧ ¬↑b ≤ ↑a",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₁._simp_1_8",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references": ["HasQuotient.quotient'", "outParam", "HasQuotient"],
  "name": "HasQuotient.Quotient",
  "constType":
  "(A : outParam (Type u)) → {B : Type v} → [HasQuotient A B] → B → Type (max u v)",
  "constCategory": "Definition"},
 {"references":
  ["FunLike",
   "RingHom",
   "Module",
   "LinearMap.toAddHom",
   "LinearMap",
   "AddCommMonoid",
   "DFunLike.mk",
   "Semiring.toNonAssocSemiring",
   "AddCommMonoid.toAddCommSemigroup",
   "AddHom.toFun",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "LinearMap.instFunLike._proof_1",
   "Semiring"],
  "name": "LinearMap.instFunLike",
  "constType":
  "{R : Type u_1} →\n  {S : Type u_5} →\n    {M : Type u_8} →\n      {M₃ : Type u_11} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring S] →\n            [inst_2 : AddCommMonoid M] →\n              [inst_3 : AddCommMonoid M₃] →\n                [inst_4 : _root_.Module R M] →\n                  [inst_5 : _root_.Module S M₃] → {σ : R →+* S} → FunLike (M →ₛₗ[σ] M₃) M M₃",
  "constCategory": "Definition"},
 {"references":
  ["Exists", "Exists.intro", "Eq", "forall_exists_index", "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₁._simp_1_12",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {q : (∃ x, p x) → Prop}, (∀ (h : ∃ x, p x), q h) = ∀ (x : α) (h : p x), q ⋯",
  "constCategory": "Theorem"},
 {"references":
  ["Distrib.toAdd",
   "True",
   "Eq.trans",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "CommSemiring",
   "Distrib.toMul",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "CommSemiring.toSemiring",
   "HMul.hMul",
   "add_mul",
   "congrArg",
   "Distrib.rightDistribClass",
   "HAdd.hAdd",
   "eq_self",
   "Semiring.toNonAssocSemiring",
   "of_eq_true",
   "instHMul",
   "Eq",
   "Eq.ndrec"],
  "name": "Mathlib.Tactic.Ring.add_mul",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {a₁ a₂ b c₁ c₂ d : R},\n  a₁ * b = c₁ → a₂ * b = c₂ → c₁ + c₂ = d → (a₁ + a₂) * b = d",
  "constCategory": "Theorem"},
 {"references": ["IsWellOrder", "IsWellFounded"],
  "name": "IsWellOrder.toIsWellFounded",
  "constType":
  "∀ {α : Type u} {r : α → α → Prop} [self : IsWellOrder α r], IsWellFounded α r",
  "constCategory": "Theorem"},
 {"references":
  ["Quotient.mk''",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Submodule.hasQuotient",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.quotientRel",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "AddCommGroup",
   "SubNegZeroMonoid.toNegZeroClass",
   "OfNat.ofNat",
   "Ring.toSemiring",
   "Submodule",
   "AddCommGroup.toDivisionAddCommMonoid",
   "Zero.mk",
   "NegZeroClass.toZero",
   "AddCommGroup.toAddCommMonoid",
   "Zero.toOfNat0",
   "Zero",
   "Ring"],
  "name": "Submodule.Quotient.instZeroQuotient",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Ring R] → [inst_1 : AddCommGroup M] → [inst_2 : _root_.Module R M] → (p : Submodule R M) → Zero (M ⧸ p)",
  "constCategory": "Definition"},
 {"references": ["MulOneClass", "MulZeroOneClass"],
  "name": "MulZeroOneClass.toMulOneClass",
  "constType": "{M₀ : Type u} → [self : MulZeroOneClass M₀] → MulOneClass M₀",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "NeZero",
   "instLTNat",
   "Nat",
   "Nat.cast",
   "Fin.val",
   "Zero.ofOfNat0",
   "Fin.NatCast.instNatCast",
   "instOfNatNat",
   "Nat.mod_eq_of_lt",
   "Fin",
   "Eq"],
  "name": "Fin.val_cast_of_lt",
  "constType": "∀ {n : ℕ} [inst : NeZero n] {a : ℕ}, a < n → ↑↑a = a",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "forall_eq._simp_1",
   "Eq.trans",
   "Module",
   "Singleton.singleton",
   "Membership.mem",
   "Submodule.span",
   "AddCommMonoid.toAddMonoid",
   "Submodule",
   "congrArg",
   "AddCommMonoid",
   "iff_self",
   "forall_congr",
   "Zero.toOfNat0",
   "Eq",
   "True",
   "Set",
   "Set.instSingletonSet",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "OfNat.ofNat",
   "Set.instMembership",
   "of_eq_true",
   "Eq.refl",
   "Iff",
   "Submodule.instBot",
   "Set.mem_singleton_iff._simp_1",
   "AddZero.toZero",
   "Semiring",
   "AddMonoid.toAddZeroClass",
   "Submodule.span_eq_bot._simp_1"],
  "name": "Submodule.span_singleton_eq_bot",
  "constType":
  "∀ {R : Type u_1} {M : Type u_4} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M] {x : M},\n  Submodule.span R {x} = ⊥ ↔ x = 0",
  "constCategory": "Theorem"},
 {"references":
  ["NonAssocSemiring.toNatCast",
   "NonAssocSemiring.natCast_zero",
   "Semiring.mk",
   "Nat.instNonUnitalSemiring",
   "Nat.instMonoidWithZero",
   "Nat.instSemiring._proof_2",
   "Nat.instSemiring._proof_1",
   "MonoidWithZero",
   "NonAssocSemiring.one_mul",
   "Nat",
   "NonAssocSemiring.mul_one",
   "Nat.instNonAssocSemiring",
   "NonAssocSemiring.toOne",
   "MonoidWithZero.toMonoid",
   "NonAssocSemiring",
   "NonUnitalSemiring",
   "Monoid.npow",
   "Semiring",
   "NonAssocSemiring.natCast_succ"],
  "name": "Nat.instSemiring",
  "constType": "Semiring ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Exists", "True", "exists_true_left", "True.intro", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.semistable_iff._simp_1_8",
  "constType": "∀ {p : True → Prop}, Exists p = p True.intro",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Eq",
  "constType": "{α : Sort u_1} → α → α → Prop",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "Nat.find",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_3",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "HarderNarasimhan.impl.instConvexITotIntvl",
   "WellFoundedGT",
   "HarderNarasimhan.Convex",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "HarderNarasimhan.impl.HNFil_of_fin_len",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "Nat",
   "HarderNarasimhan.impl.HNFil_is_strict_mono",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "OrderTop.toTop",
   "Nat.find_min",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_8",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (i : ℕ),\n  i + 1 < Nat.find ⋯ → HarderNarasimhan.impl.HNFil μ i < HarderNarasimhan.impl.HNFil μ (i + 1)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Nat.lt_add_one",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.HarderNarasimhanFiltration.rec",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.HarderNarasimhanFiltration μ → Sort u} →\n                (t : HarderNarasimhan.HarderNarasimhanFiltration μ) →\n                  ((filtration : ℕ → ℒ) →\n                      (monotone : Monotone filtration) →\n                        (first_eq_bot : filtration 0 = ⊥) →\n                          (fin_len : ∃ n, filtration n = ⊤) →\n                            (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                              (piecewise_semistable :\n                                  ∀ (i : ℕ) (h : i < Nat.find fin_len),\n                                    HarderNarasimhan.Semistable\n                                      (HarderNarasimhan.Resμ ⟨(filtration i, filtration (i + 1)), ⋯⟩ μ)) →\n                                (μA_pseudo_strict_anti :\n                                    ∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len),\n                                      ¬HarderNarasimhan.μA μ ⟨(filtration i, filtration (i + 1)), ⋯⟩ ≤\n                                          HarderNarasimhan.μA μ ⟨(filtration (i + 1), filtration (i + 2)), ⋯⟩) →\n                                  motive\n                                    { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot,\n                                      fin_len := fin_len, strict_mono := strict_mono,\n                                      piecewise_semistable := piecewise_semistable,\n                                      μA_pseudo_strict_anti := μA_pseudo_strict_anti }) →\n                    motive t",
  "constCategory": "Definition"},
 {"references": ["LE"],
  "name": "OrderTop",
  "constType": "(α : Type u) → [LE α] → Type u",
  "constCategory": "Other"},
 {"references": ["LT.lt", "Eq.symm", "Eq.rec", "Eq", "LT"],
  "name": "lt_of_eq_of_lt",
  "constType":
  "∀ {α : Type u_1} {a b c : α} [inst : LT α], a = b → b < c → a < c",
  "constCategory": "Theorem"},
 {"references": ["Add", "AddZero"],
  "name": "AddZero.toAdd",
  "constType": "{M : Type u_2} → [self : AddZero M] → Add M",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "instLTNat", "Nat", "Nat.le_step", "Nat.succ"],
  "name": "Nat.lt.step",
  "constType": "∀ {n m : ℕ}, n < m → n < m.succ",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Eq.trans",
   "True",
   "instHAdd",
   "List",
   "Lean.Omega.IntList.get",
   "Lean.Omega.LinearCombo.coordinate",
   "OfNat.ofNat",
   "congrArg",
   "Int",
   "HAdd.hAdd",
   "eq_self",
   "Lean.Omega.LinearCombo.coordinate_eval",
   "Nat",
   "Lean.Omega.IntList.get_cons_succ",
   "of_eq_true",
   "Lean.Omega.Coeffs.ofList",
   "Lean.Omega.Coeffs.get",
   "instOfNatNat",
   "Lean.Omega.LinearCombo.eval",
   "Lean.Omega.IntList.get_cons_zero",
   "Eq",
   "List.cons"],
  "name": "Lean.Omega.LinearCombo.coordinate_eval_1",
  "constType":
  "∀ {a0 a1 : ℤ} {t : List ℤ}, (Omega.LinearCombo.coordinate 1).eval (Omega.Coeffs.ofList (a0 :: a1 :: t)) = a1",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.instLinearOrderedCommMonoidWithZero._proof_1",
   "Nat.instCommMonoidWithZero",
   "PartialOrder.toPreorder",
   "Bot.mk",
   "Nat.zero_le",
   "LinearOrderedCommMonoidWithZero",
   "OfNat.ofNat",
   "LinearOrder.toPartialOrder",
   "LinearOrderedCommMonoidWithZero.mk",
   "Nat",
   "instOfNatNat",
   "Preorder.toLE",
   "Nat.instLinearOrder",
   "OrderBot.mk",
   "Nat.instLinearOrderedCommMonoidWithZero._proof_2"],
  "name": "Nat.instLinearOrderedCommMonoidWithZero",
  "constType": "LinearOrderedCommMonoidWithZero ℕ",
  "constCategory": "Definition"},
 {"references":
  ["AddCommMonoid",
   "Module",
   "MonoidWithZero.toMonoid",
   "Semiring.toMonoidWithZero",
   "AddCommMonoid.toAddMonoid",
   "DistribMulAction",
   "Semiring"],
  "name": "Module.toDistribMulAction",
  "constType":
  "{R : Type u} →\n  {M : Type v} → {inst : Semiring R} → {inst_1 : AddCommMonoid M} → [self : _root_.Module R M] → DistribMulAction R M",
  "constCategory": "Definition"},
 {"references": ["And.intro", "And", "Eq", "propext", "And.left", "Iff.intro"],
  "name": "and_self",
  "constType": "∀ (p : Prop), (p ∧ p) = p",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.SlopeLike.rec",
   "Prod.fst",
   "Or",
   "PartialOrder",
   "Preorder.toLE",
   "And.left",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "HarderNarasimhan.SlopeLike.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.SlopeLike.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.SlopeLike μ → Sort u} →\n                (t : HarderNarasimhan.SlopeLike μ) →\n                  ((slopelike :\n                        ∀ (x y z : ℒ) (h : x < y ∧ y < z),\n                          (μ ⟨(x, y), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ < μ ⟨(x, z), ⋯⟩) ∧\n                            (μ ⟨(x, y), ⋯⟩ < μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩) ∧\n                              (μ ⟨(x, z), ⋯⟩ < μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(y, z), ⋯⟩) ∧\n                                (μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ < μ ⟨(y, z), ⋯⟩)) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "rfl",
   "Lattice.toSemilatticeInf",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "LT.lt",
   "Prod",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "HarderNarasimhan.instPartialOrderInterval",
   "Subtype.mk",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.strip_top",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {a b : ℒ} (h : a < b), ↑⊤ = b",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.find",
   "Subtype",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Eq.mp",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "congrArg",
   "Prod.fst",
   "False.elim",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "HarderNarasimhan.JordanHolderFiltration",
   "WellFoundedGT",
   "CompleteLinearOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.JordanHolderFiltration.first_eq_top",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.impl.JH_pos_len._simp_1_1",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "OfNat.ofNat",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "False",
   "Ne",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "HarderNarasimhan.impl.JH_pos_len._simp_1_2",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.JH_pos_len",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S} (JH : HarderNarasimhan.JordanHolderFiltration μ),\n  Nat.find ⋯ ≠ 0",
  "constCategory": "Theorem"},
 {"references":
  ["le_top",
   "True",
   "LE.le",
   "Top.top",
   "LE",
   "eq_true",
   "OrderTop",
   "Eq",
   "OrderTop.toTop"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_10",
  "constType":
  "∀ {α : Type u} [inst : LE α] [inst_1 : OrderTop α] {a : α}, (a ≤ ⊤) = True",
  "constCategory": "Theorem"},
 {"references":
  ["AddLeftMono",
   "PartialOrder.toPreorder",
   "Add",
   "instHAdd",
   "AddLeftStrictMono",
   "LE.le.lt_of_ne",
   "Preorder.toLT",
   "CovariantClass.elim",
   "HAdd.hAdd",
   "LT.lt",
   "IsLeftCancelAdd",
   "Iff.mpr",
   "PartialOrder",
   "LT.lt.ne",
   "LE.le",
   "add_ne_add_right",
   "Ne",
   "Preorder.toLE",
   "CovariantClass.mk",
   "LT.lt.le"],
  "name": "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
  "constType":
  "∀ (N : Type u_2) [inst : Add N] [IsLeftCancelAdd N] [inst_2 : PartialOrder N] [AddLeftMono N], AddLeftStrictMono N",
  "constCategory": "Theorem"},
 {"references":
  ["rfl",
   "Exists",
   "Iff",
   "Eq.refl",
   "Exists.intro",
   "Eq.rec",
   "Eq",
   "_private.Init.PropLemmas.0.exists_prop_eq.match_1_1",
   "Iff.intro"],
  "name": "exists_prop_eq",
  "constType":
  "∀ {α : Sort u_1} {a' : α} {p : (a : α) → a = a' → Prop}, (∃ a, ∃ (h : a = a'), p a h) ↔ p a' ⋯",
  "constCategory": "Theorem"},
 {"references": ["Eq"],
  "name": "Function.Injective",
  "constType": "{α : Sort u_1} → {β : Sort u_2} → (α → β) → Prop",
  "constCategory": "Definition"},
 {"references":
  ["ContravariantClass.mk",
   "instHAdd",
   "Contravariant",
   "AddCommSemigroup",
   "ContravariantClass.elim",
   "Function.swap",
   "AddCommMagma.to_isCommutative",
   "ContravariantClass",
   "flip",
   "HAdd.hAdd",
   "Iff.mpr",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "contravariant_flip_iff"],
  "name": "contravariant_swap_add_of_contravariant_add",
  "constType":
  "∀ (N : Type u_2) (r : N → N → Prop) [inst : AddCommSemigroup N] [ContravariantClass N N (fun x1 x2 ↦ x1 + x2) r],\n  ContravariantClass N N (Function.swap fun x1 x2 ↦ x1 + x2) r",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "Nat.instAddCommMonoid",
   "Eq.symm",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Eq.ndrec",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "HEq",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.JordanHolderFiltration.ext.match_1",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "AddZero.toAdd",
   "Eq.casesOn",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.ext",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} {x y : HarderNarasimhan.JordanHolderFiltration μ},\n  x.filtration = y.filtration → x = y",
  "constCategory": "Theorem"},
 {"references":
  ["instLinearOrderLinearExtensionOfPartialOrder._proof_4",
   "instLinearOrderLinearExtensionOfPartialOrder._proof_9",
   "PartialOrder.toPreorder",
   "Pi.hasLe",
   "instLinearOrderLinearExtensionOfPartialOrder._proof_7",
   "compareOfLessAndEq",
   "Min.mk",
   "PartialOrder.mk",
   "decidableLTOfDecidableLE",
   "IsLinearOrder",
   "Ord.mk",
   "PartialOrder",
   "Prop.le",
   "Classical.decRel",
   "LT.mk",
   "Preorder.toLE",
   "instLinearOrderLinearExtensionOfPartialOrder._proof_1",
   "Not",
   "LinearExtension",
   "instLinearOrderLinearExtensionOfPartialOrder._proof_8",
   "ite",
   "LinearOrder",
   "And",
   "decidableEqOfDecidableLE",
   "LinearOrder.mk",
   "Exists.choose",
   "Max.mk",
   "instLinearOrderLinearExtensionOfPartialOrder._proof_3",
   "instLinearOrderLinearExtensionOfPartialOrder._proof_5",
   "instLinearOrderLinearExtensionOfPartialOrder._proof_2",
   "LE.le",
   "LE.mk",
   "instLinearOrderLinearExtensionOfPartialOrder._proof_6",
   "Preorder.mk"],
  "name": "instLinearOrderLinearExtensionOfPartialOrder",
  "constType":
  "{α : Type u} → [PartialOrder α] → LinearOrder (LinearExtension α)",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "RelEmbedding.toEmbedding",
   "Subtype",
   "PartialOrder.toPreorder",
   "Finset",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Subtype.instLE",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Function.Embedding.toFun",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "Prod.fst",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "HarderNarasimhan._μ",
   "HarderNarasimhan.S",
   "Preorder.toLE",
   "Set.instLE",
   "CommRing.toCommSemiring",
   "LinearExtension",
   "Set",
   "ClosureOperator.IsClosed",
   "CommSemiring.toSemiring",
   "OrderTheory.coe'",
   "Set.toFinset",
   "AddCommGroup",
   "Prod.snd",
   "CommRing",
   "LT.lt",
   "Prod",
   "PrimeSpectrum",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Set.instCompleteAtomicBooleanAlgebra",
   "HarderNarasimhan.instPartialOrderS₀",
   "LE.le",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "Module.Finite",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "HarderNarasimhan.μ",
  "constType":
  "(R : Type u_1) →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      (M : Type u_2) →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] → [inst_5 : Module.Finite R M] → { z // z.1 < z.2 } → HarderNarasimhan.S R",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "OfNat.ofNat",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "BoundedOrder.toOrderBot",
   "instOfNatNat",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Nontrivial",
   "Lattice",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.first_eq_bot",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.HarderNarasimhanFiltration μ),\n  self.filtration 0 = ⊥",
  "constCategory": "Theorem"},
 {"references": ["exists_prop", "Exists", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.prop3d11._simp_2",
  "constType": "∀ {b a : Prop}, (∃ (_ : a), b) = (a ∧ b)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Eq.ndrec",
   "Nat.instIsOrderedAddMonoid",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "Nat.instPartialOrder",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteDistribLattice.toCoframe",
   "AddMonoid.toAddZeroClass",
   "HarderNarasimhan.Semistable",
   "Subtype",
   "GeneralizedCoheytingAlgebra.toLattice",
   "SemilatticeSup.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Nat.instAddCancelCommMonoid",
   "Prod.fst",
   "Nat.instPreorder",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Nat.instSemiring",
   "Nat.instOne",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "CompletelyDistribLattice.toCompleteLattice",
   "HAdd.hAdd",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "HarderNarasimhan.impl.JHFil",
   "Ne",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.JHFil.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [hacc : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLinearOrder S] (μ μ_1 : { p // p.1 < p.2 } → S) (e_μ : μ = μ_1)\n  (hμ : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤) (hμsl : HarderNarasimhan.SlopeLike μ) (hst : HarderNarasimhan.Semistable μ)\n  (hdc : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) (k k_1 : ℕ),\n  k = k_1 → HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc k = HarderNarasimhan.impl.JHFil μ_1 ⋯ ⋯ ⋯ ⋯ k_1",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "AddCommMonoid",
   "inferInstance",
   "Nat.instAddCancelCommMonoid",
   "AddCancelCommMonoid.toAddCommMonoid"],
  "name": "Nat.instAddCommMonoid",
  "constType": "AddCommMonoid ℕ",
  "constCategory": "Definition"},
 {"references":
  ["FunLike",
   "DistribMulActionSemiHomClass",
   "outParam",
   "Monoid",
   "AddMonoid",
   "AddZeroClass.toAddZero",
   "AddMonoidHomClass",
   "DistribMulAction",
   "AddMonoid.toAddZeroClass"],
  "name": "DistribMulActionSemiHomClass.toAddMonoidHomClass",
  "constType":
  "∀ {F : Type u_10} {M : outParam (Type u_11)} {N : outParam (Type u_12)} {φ : outParam (M → N)}\n  {A : outParam (Type u_13)} {B : outParam (Type u_14)} {inst : Monoid M} {inst_1 : Monoid N} {inst_2 : AddMonoid A}\n  {inst_3 : AddMonoid B} {inst_4 : DistribMulAction M A} {inst_5 : DistribMulAction N B} {inst_6 : FunLike F A B}\n  [self : DistribMulActionSemiHomClass F φ A B], AddMonoidHomClass F A B",
  "constCategory": "Theorem"},
 {"references": ["SMul", "MulAction", "Monoid"],
  "name": "MulAction.toSMul",
  "constType":
  "{α : Type u_9} → {β : Type u_10} → {inst : Monoid α} → [self : MulAction α β] → SMul α β",
  "constCategory": "Definition"},
 {"references": [],
  "name": "SMul",
  "constType": "Type u → Type v → Type (max u v)",
  "constCategory": "Other"},
 {"references":
  ["absurd",
   "rfl",
   "Not",
   "Decidable.isFalse",
   "Decidable",
   "_private.Init.Core.0.dif_pos.match_1_1",
   "dite",
   "Eq",
   "Decidable.isTrue"],
  "name": "dif_pos",
  "constType":
  "∀ {c : Prop} {h : Decidable c} (hc : c) {α : Sort u} {t : c → α} {e : ¬c → α}, dite c t e = t hc",
  "constCategory": "Theorem"},
 {"references": ["Not", "False.elim", "True", "False", "eq_true", "Eq"],
  "name": "not_false_eq_true",
  "constType": "(¬False) = True",
  "constCategory": "Theorem"},
 {"references": ["Preorder", "LE.le", "Preorder.toLE"],
  "name": "Monotone",
  "constType":
  "{α : Type u} → {β : Type v} → [Preorder α] → [Preorder β] → (α → β) → Prop",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "id",
   "inferInstance",
   "Eq.mpr",
   "HarderNarasimhan.Convex",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex._simp_1",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.instConvexITotIntvl",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} [HarderNarasimhan.Convex μ],\n  HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ",
  "constCategory": "Theorem"},
 {"references": ["MulAction", "Monoid", "AddMonoid", "DistribMulAction"],
  "name": "DistribMulAction.toMulAction",
  "constType":
  "{M : Type u_12} →\n  {A : Type u_13} → {inst : Monoid M} → {inst_1 : AddMonoid A} → [self : DistribMulAction M A] → MulAction M A",
  "constCategory": "Definition"},
 {"references": ["Iff", "Membership.mem", "List.instMembership", "List"],
  "name": "List.TFAE",
  "constType": "List Prop → Prop",
  "constCategory": "Definition"},
 {"references": ["outParam"],
  "name": "SetLike",
  "constType": "Type u_1 → outParam (Type u_2) → Type (max u_1 u_2)",
  "constCategory": "Other"},
 {"references": [],
  "name": "Zero",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references":
  ["Ne.symm",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "Iff.intro",
   "congrArg",
   "Prod.fst",
   "And.intro",
   "SupSet.sSup",
   "PartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice.toConditionallyCompleteLattice",
   "bot_lt_iff_ne_bot",
   "Exists",
   "Set",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "Set.instMembership",
   "Exists.casesOn",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "ne_of_lt",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "HarderNarasimhan.μmax._proof_1",
   "Nontrivial",
   "Set.ext",
   "Ne",
   "HarderNarasimhan.in_TotIntvl",
   "Subtype.mk",
   "ConditionallyCompleteLattice.toSupSet",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.impl.prop4d3_helper",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  sSup {x | ∃ y, ∃ (hy : ⊥ < y), μ ⟨(⊥, y), hy⟩ = x} = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["not_le_of_gt",
   "LT.lt",
   "Preorder",
   "le_of_lt",
   "le_trans",
   "LE.le",
   "Preorder.toLT",
   "Preorder.toLE",
   "lt_of_le_not_ge"],
  "name": "lt_of_le_of_lt",
  "constType":
  "∀ {α : Type u_1} [inst : Preorder α] {a b c : α}, a ≤ b → b < c → a < c",
  "constCategory": "Theorem"},
 {"references": ["And"],
  "name": "And.right",
  "constType": "∀ {a b : Prop}, a ∧ b → b",
  "constCategory": "Theorem"},
 {"references":
  ["Ring.toNonAssocRing",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "Set.Finite.dependent_image",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Preorder.toLT",
   "AddGroupWithOne.toAddMonoidWithOne",
   "SMulZeroClass.toSMul",
   "Membership.mem.out",
   "AddMonoidWithOne.toAddMonoid",
   "instDistribSMul",
   "Subtype.val",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "Semiring.toNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "RingHom.id",
   "Module.IsNoetherian.finite",
   "associatedPrimes.finite",
   "Semiring.toModule",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "And.left",
   "DistribSMul.toSMulZeroClass",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "Prod.snd",
   "LinearMap",
   "AddZeroClass.toAddZero",
   "Set.instMembership",
   "Prod",
   "isNoetherian_submodule'",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Set.Finite",
   "AddZero.toZero",
   "setOf",
   "Submodule.submoduleOf",
   "AddMonoid.toAddZeroClass",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Submodule.hasQuotient",
   "Subtype",
   "HarderNarasimhan._μ._proof_1",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Submodule.Quotient.instSMul._proof_1",
   "Module",
   "Module.Finite.quotient",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "isNoetherian_of_isNoetherianRing_of_finite",
   "Eq",
   "CommRing.toCommSemiring",
   "Set",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "CommRing",
   "PrimeSpectrum",
   "LT.lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name":
  "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ._proof_1",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] {I : { z // z.1 < z.2 }},\n  {y |\n      ∃ x,\n        ∃ (hx : x ∈ associatedPrimes R (↥(↑I).2 ⧸ Submodule.submoduleOf (↑I).1 (↑I).2)),\n          { asIdeal := x, isPrime := ⋯ } = y}.Finite",
  "constCategory": "Theorem"},
 {"references":
  ["Exists",
   "iff_self",
   "_private.Init.PropLemmas.0.exists_and_right._simp_1_1",
   "True",
   "Eq.trans",
   "of_eq_true",
   "exists_and_left._simp_1",
   "congr",
   "Iff",
   "funext",
   "And",
   "congrArg"],
  "name": "exists_and_right",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {b : Prop}, (∃ x, p x ∧ b) ↔ (∃ x, p x) ∧ b",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.JordanHolderFiltration._sizeOf_1",
   "SizeOf",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.JordanHolderFiltration",
   "Preorder.toLE",
   "SizeOf.mk",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.JordanHolderFiltration._sizeOf_inst",
  "constType":
  "{ℒ : Type u_1} →\n  {inst : Nontrivial ℒ} →\n    {inst_1 : Lattice ℒ} →\n      {inst_2 : BoundedOrder ℒ} →\n        {S : Type u_2} →\n          {inst_3 : CompleteLattice S} →\n            (μ : { p // p.1 < p.2 } → S) → [SizeOf ℒ] → [SizeOf S] → SizeOf (HarderNarasimhan.JordanHolderFiltration μ)",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "lt_trans",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "bot_le",
   "Exists.intro",
   "Subtype.val",
   "And.intro",
   "Or",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "HarderNarasimhan.impl.prop4d1₁",
   "Exists",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "Nat.lt_add_one",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "HarderNarasimhan.μmax._proof_1",
   "Nontrivial",
   "Top.top",
   "id",
   "Eq.mpr",
   "StrictMono",
   "setOf",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteLattice.toCompleteSemilatticeSup",
   "Nat.instPreorder",
   "Prod.fst",
   "congrArg",
   "le_rfl",
   "Subtype.prop",
   "HarderNarasimhan.μmin",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "le_top",
   "instHAdd",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "HAdd.hAdd",
   "LT.lt",
   "ne_of_lt",
   "LE.le",
   "le_sSup",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop4d1₂",
  "constType":
  "∀ (ℒ : Type u_1) [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] (S : Type u_2)\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩) →\n    (∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤),\n        μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩) →\n      HarderNarasimhan.μAstar μ ≤ HarderNarasimhan.μBstar μ",
  "constCategory": "Theorem"},
 {"references":
  ["OrderDual",
   "Top",
   "OrderDual.instTop",
   "LE",
   "OrderTop",
   "bot_le",
   "OrderDual.instLE",
   "OrderBot.toBot",
   "inferInstanceAs",
   "OrderBot",
   "OrderTop.mk"],
  "name": "OrderDual.instOrderTop",
  "constType": "(α : Type u) → [inst : LE α] → [OrderBot α] → OrderTop αᵒᵈ",
  "constCategory": "Definition"},
 {"references": ["PUnit"],
  "name": "Unit",
  "constType": "Type",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "IsSuccArchimedean.mk",
   "PartialOrder.toPreorder",
   "Exists.intro",
   "Nat.instAddCommSemigroup",
   "Nat.instSuccOrder",
   "IsSuccArchimedean",
   "Nat.instAddCommMonoid",
   "Nat.instPreorder",
   "congrArg",
   "Nat.instOrderedSub",
   "HSub.hSub",
   "add_tsub_cancel_of_le",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "Nat.instIsOrderedAddMonoid",
   "Eq",
   "Preorder.toLE",
   "Order.succ",
   "Nat.succ_eq_succ",
   "Nat.instPartialOrder",
   "instHAdd",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Nat.succ_iterate",
   "Nat.instCanonicallyOrderedAdd",
   "HAdd.hAdd",
   "Nat",
   "Nat.iterate",
   "instSubNat",
   "CanonicallyOrderedAdd.toExistsAddOfLE",
   "Nat.succ",
   "Eq.refl",
   "LE.le",
   "id",
   "Eq.mpr",
   "instHSub"],
  "name": "Nat.instIsSuccArchimedean",
  "constType": "IsSuccArchimedean ℕ",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.cast_one",
   "Nat.cast",
   "Eq.trans",
   "CommSemiring",
   "HMul.hMul",
   "MulZeroOneClass.toMulOneClass",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "Nat.instAddMonoidWithOne",
   "pow_one",
   "Semiring.toNonAssocSemiring",
   "instOfNatNat",
   "congr",
   "MonoidWithZero.toMonoid",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "NonAssocSemiring.toMulZeroOneClass",
   "instHPow",
   "Distrib.toAdd",
   "True",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "Distrib.toMul",
   "CommSemiring.toSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Semiring.toMonoidWithZero",
   "mul_one",
   "add_zero",
   "HPow.hPow",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "eq_self",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "One.toOfNat1",
   "of_eq_true",
   "Monoid.toNatPow",
   "MulZeroClass.toZero",
   "AddMonoidWithOne.toOne",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "instHMul",
   "Nat.rawCast",
   "AddMonoid.toAddZeroClass"],
  "name": "Mathlib.Tactic.Ring.atom_pf",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] (a : R), a = a ^ Nat.rawCast 1 * Nat.rawCast 1 + 0",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Eq.trans",
   "True",
   "instHAdd",
   "List",
   "Lean.Omega.IntList.get",
   "Lean.Omega.LinearCombo.coordinate",
   "OfNat.ofNat",
   "congrArg",
   "Int",
   "HAdd.hAdd",
   "eq_self",
   "Lean.Omega.LinearCombo.coordinate_eval",
   "Nat",
   "Lean.Omega.IntList.get_cons_succ",
   "of_eq_true",
   "Lean.Omega.Coeffs.ofList",
   "Lean.Omega.Coeffs.get",
   "instOfNatNat",
   "Lean.Omega.LinearCombo.eval",
   "Lean.Omega.IntList.get_cons_zero",
   "Eq",
   "List.cons"],
  "name": "Lean.Omega.LinearCombo.coordinate_eval_7",
  "constType":
  "∀ {a0 a1 a2 a3 a4 a5 a6 a7 : ℤ} {t : List ℤ},\n  (Omega.LinearCombo.coordinate 7).eval (Omega.Coeffs.ofList (a0 :: a1 :: a2 :: a3 :: a4 :: a5 :: a6 :: a7 :: t)) = a7",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "AddCommGroup.toAddGroup",
   "Iff.mp",
   "SMulZeroClass.toSMul",
   "MonoidWithZero.toMulZeroOneClass",
   "AddMonoidWithOne.toAddMonoid",
   "NoZeroSMulDivisors",
   "AddGroup.toSubtractionMonoid",
   "Semiring.toNonAssocSemiring",
   "Or",
   "AddMonoidHom",
   "injective_iff_map_eq_zero",
   "AddMonoidHom.instFunLike",
   "AddGroup.toSubNegMonoid",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "DistribSMul.toSMulZeroClass",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "DistribMulAction.toDistribSMul",
   "Or.resolve_left",
   "AddZeroClass.toAddZero",
   "SMulWithZero.toSMulZeroClass",
   "MulZeroOneClass.toMulZeroClass",
   "Iff.mpr",
   "HSMul.hSMul",
   "AddCommGroup.toAddCommMonoid",
   "NegZeroClass.toZero",
   "AddMonoidHom.instAddCommMonoid",
   "AddZero.toZero",
   "smul_eq_zero",
   "AddMonoid.toAddZeroClass",
   "smulAddHom",
   "Module",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "AddCommMonoid.toAddMonoid",
   "AddMonoidHom.instAddMonoidHomClass",
   "SubNegZeroMonoid.toNegZeroClass",
   "DFunLike.coe",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "MulActionWithZero.toSMulWithZero",
   "Semiring.toMonoidWithZero",
   "Module.toMulActionWithZero",
   "AddCommGroup",
   "OfNat.ofNat",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "AddCommGroup.toDivisionAddCommMonoid",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "Ne",
   "Semiring",
   "Function.Injective"],
  "name": "smul_right_injective",
  "constType":
  "∀ {R : Type u_1} (M : Type u_2) [inst : Semiring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  [NoZeroSMulDivisors R M] {c : R}, c ≠ 0 → Function.Injective fun x ↦ c • x",
  "constCategory": "Theorem"},
 {"references":
  ["WithTop.orderTop._proof_1",
   "WithTop.top",
   "LE",
   "OrderTop",
   "WithTop",
   "WithTop.le",
   "OrderTop.mk"],
  "name": "WithTop.orderTop",
  "constType": "{α : Type u_1} → [inst : LE α] → OrderTop (WithTop α)",
  "constCategory": "Definition"},
 {"references": ["HasCompl"],
  "name": "HasCompl.compl",
  "constType": "{α : Type u_1} → [self : HasCompl α] → α → α",
  "constCategory": "Definition"},
 {"references": ["LE", "OrderTop", "BoundedOrder"],
  "name": "BoundedOrder.toOrderTop",
  "constType":
  "{α : Type u} → {inst : LE α} → [self : BoundedOrder α] → OrderTop α",
  "constCategory": "Definition"},
 {"references":
  ["OrderDual",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "Coe",
   "Coe.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "OrderDual.instLT",
   "PartialOrder",
   "Nontrivial",
   "Subtype.mk",
   "Preorder.toLE",
   "HarderNarasimhan.impl.instCoeSubtypeProdOrderDualLtFstSndOfNontrivialOfBoundedOrder_harderNarasimhan._proof_1"],
  "name":
  "HarderNarasimhan.impl.instCoeSubtypeProdOrderDualLtFstSndOfNontrivialOfBoundedOrder_harderNarasimhan",
  "constType":
  "{ℒ : Type u_1} → [Nontrivial ℒ] → [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → Coe { p // p.1 < p.2 } { p // p.1 < p.2 }",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Not",
   "PartialOrder.toPreorder",
   "not_bot_lt_iff",
   "PartialOrder",
   "Preorder.toLT",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Bot.bot",
   "propext",
   "OrderBot"],
  "name":
  "HarderNarasimhan.impl.semistable_resμ_of_jordanHolderFiltration._simp_1_1",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderBot α] {a : α}, (¬⊥ < a) = (a = ⊥)",
  "constCategory": "Theorem"},
 {"references": ["Preorder", "OrderHom.toFun", "Monotone", "OrderHom"],
  "name": "OrderHom.monotone'",
  "constType":
  "∀ {α : Type u_6} {β : Type u_7} [inst : Preorder α] [inst_1 : Preorder β] (self : α →o β), Monotone self.toFun",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "of_eq_false",
   "Decidable",
   "Eq.trans",
   "True",
   "Eq.mpr_not",
   "dite_congr",
   "Eq.mpr_prop",
   "congrArg",
   "eq_self",
   "of_eq_true",
   "Eq.refl",
   "False",
   "instDecidableFalse",
   "Eq",
   "dite",
   "not_false"],
  "name": "dite_cond_eq_false",
  "constType":
  "∀ {α : Sort u} {c : Prop} {x : Decidable c} {t : c → α} {e : ¬c → α} (h : c = False), dite c t e = e ⋯",
  "constCategory": "Theorem"},
 {"references": ["Exists", "exists_and_left", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₁._simp_1_10",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {b : Prop}, (∃ x, b ∧ p x) = (b ∧ ∃ x, p x)",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "instAddNat",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_4",
   "Membership.mem",
   "Preorder.toLT",
   "Subtype.val",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_8",
   "Set.Elem",
   "Or",
   "PartialOrder",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_10",
   "HarderNarasimhan.impl.prop4d1₁_seq.match_1",
   "Exists",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_1",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_2",
   "BoundedOrder",
   "Prod.snd",
   "Nat.lt_add_one",
   "Unit",
   "Set.instMembership",
   "Prod",
   "Nat",
   "Nontrivial",
   "Top.top",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_9",
   "StrictMono",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instPreorder",
   "Prod.fst",
   "Subtype.prop",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "Preorder.toLE",
   "Not",
   "Set.Nonempty",
   "le_top",
   "instHAdd",
   "Set",
   "HarderNarasimhan.impl.prop4d1₁_seq",
   "Exists.choose",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "HAdd.hAdd",
   "LT.lt",
   "LE.le",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_3"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._sunfold",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] →\n      [inst_1 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_2 : CompleteLattice S] →\n            (μ : { p // p.1 < p.2 } → S) →\n              (∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩) →\n                (∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤),\n                    μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩) →\n                  {YA |\n                        ∃ (h : YA < ⊤),\n                          ∀ xA < ⊤, ∃ xB, ∃ (hAB : xA < xB), ¬μ ⟨(xA, xB), hAB⟩ ≤ μ ⟨(YA, ⊤), h⟩}.Nonempty →\n                    ℕ → ↑{YA | ∃ (h : YA < ⊤), ∀ xA < ⊤, ∃ xB, ∃ (hAB : xA < xB), ¬μ ⟨(xA, xB), hAB⟩ ≤ μ ⟨(YA, ⊤), h⟩}",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Preorder",
   "LE.le",
   "Preorder.toLT",
   "OrderEmbedding.lt_iff_lt",
   "Eq",
   "Preorder.toLE",
   "OrderEmbedding",
   "DFunLike.coe",
   "RelEmbedding.instFunLike",
   "propext"],
  "name": "HarderNarasimhan.impl.prop4d8._simp_1_6",
  "constType":
  "∀ {α : Type u_2} {β : Type u_3} [inst : Preorder α] [inst_1 : Preorder β] (f : α ↪o β) {a b : α}, (f a < f b) = (a < b)",
  "constCategory": "Theorem"},
 {"references":
  ["Finset",
   "Decidable",
   "Eq.trans",
   "List.instLinearOrder._proof_2",
   "Singleton.singleton",
   "Exists.intro",
   "_private.HarderNarasimhan.OrderTheory.Lex'Order.0.Lex'Order.Lex'LinearOrder._proof_7",
   "Min.mk",
   "linearOrderOfSTO",
   "decidableLTOfDecidableLE",
   "_private.HarderNarasimhan.OrderTheory.Lex'Order.0.Lex'Order.Lex'LinearOrder._simp_1",
   "Lex'Order.instDecidableLeFinset_harderNarasimhan",
   "Eq.ndrec",
   "instLTNat",
   "_private.HarderNarasimhan.OrderTheory.Lex'Order.0.Lex'Order.Lex'LinearOrder._proof_4",
   "Exists",
   "List.LE'",
   "LinearOrder",
   "true_and",
   "LinearOrder.toDecidableLT",
   "false_or",
   "Iff",
   "Eq.refl",
   "Eq.mpr",
   "Preorder.mk",
   "Finset.ssubset_iff_subset_ne",
   "Or.inr",
   "Lex'Order.LexLE",
   "List",
   "and_true",
   "List.instLinearOrder",
   "Nat.instPreorder",
   "PartialOrder.mk",
   "Or.inl",
   "instOfNatNat",
   "Ord.mk",
   "congr",
   "Eq",
   "Preorder.toLE",
   "Lex'Order.Lex'Order_prop._simp_1_5",
   "HasSSubset.SSubset",
   "ite",
   "LinearOrder.mk",
   "decidableEqOfDecidableLE",
   "OfNat.ofNat",
   "Finset.decidableEq",
   "Lex'Order.Lex'Order_prop._simp_1_4",
   "LinearOrder.toPartialOrder",
   "eq_self",
   "Finset.sort_singleton",
   "LinearOrder.toDecidableEq",
   "LinearOrder.toDecidableLE",
   "List.lt",
   "inferInstance",
   "instDecidableEqNat",
   "Ne",
   "_private.HarderNarasimhan.OrderTheory.Lex'Order.0.Lex'Order.le_antisymm",
   "dite",
   "le_refl",
   "PartialOrder.toPreorder",
   "_private.HarderNarasimhan.OrderTheory.Lex'Order.0.Lex'Order.Lex'LinearOrder._proof_2",
   "DecidableRel",
   "_private.HarderNarasimhan.OrderTheory.Lex'Order.0.Lex'Order.Lex'LinearOrder._proof_1",
   "Preorder.toLT",
   "And.intro",
   "Or",
   "funext",
   "_private.HarderNarasimhan.OrderTheory.Lex'Order.0.Lex'Order.Lex'LinearOrder",
   "LT.mk",
   "_private.HarderNarasimhan.OrderTheory.Lex'Order.0.Lex'Order.Lex'LinearOrder._proof_6",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "Lex'Order.LexLE._proof_2",
   "Finset.instHasSSubset",
   "And",
   "Max.mk",
   "Nat.decLt",
   "Nat",
   "Finset.instSingleton",
   "HasSubset.Subset",
   "Iff.mpr",
   "id",
   "instDecidableAnd",
   "Eq.mp",
   "lt_of_le_of_ne",
   "List.instLinearOrder._proof_1",
   "compareOfLessAndEq",
   "IsAntisymm",
   "Iff.intro",
   "_private.HarderNarasimhan.OrderTheory.Lex'Order.0.Lex'Order.Lex'LinearOrder._proof_5",
   "congrArg",
   "IsStrictTotalOrder",
   "Lex'Order.LexLE._proof_1",
   "Finset.card_lt_card",
   "instDistribLatticeOfLinearOrder",
   "Finset.sort",
   "le_of_eq",
   "LE.isTotal",
   "List.instLT",
   "_private.HarderNarasimhan.OrderTheory.Lex'Order.0.Lex'Order.Lex'LinearOrder._proof_3",
   "instDecidableOr",
   "Not",
   "List.nil",
   "DecidableLE",
   "Lattice.toSemilatticeInf",
   "True",
   "Finset.card",
   "Finset.instHasSubset",
   "Or.casesOn",
   "LT.lt",
   "IsTotal",
   "DistribLattice.toLattice",
   "le_of_lt",
   "List.cons.injEq",
   "LE.mk",
   "LE.le",
   "List.Lex",
   "List.Lex.decidableRel",
   "False",
   "Lex'Order.LexLT",
   "IsTrans",
   "Finset.card_singleton"],
  "name": "Lex'Order.Lex'Order_prop",
  "constType":
  "∀ (α : Type u_1) [lo : LinearOrder α], ∃ lo_1, (∀ (A B : Finset α), A ⊆ B → A ≤ B) ∧ ∀ (a b : α), a ≤ b ↔ {a} ≤ {b}",
  "constCategory": "Theorem"},
 {"references":
  ["Classical.choose_spec",
   "implies_congr",
   "Finset",
   "Eq.trans",
   "Module.mem_support_iff_of_finite._simp_1_2",
   "Module.annihilator_le_of_mem_support",
   "AddCommGroup.toAddGroup",
   "Singleton.singleton",
   "Exists.intro",
   "SMulZeroClass.toSMul",
   "Classical.choose",
   "Subtype.val",
   "Set.Elem",
   "NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring",
   "mul_comm",
   "Eq.symm",
   "Monoid.toSemigroup",
   "Submodule.annihilator",
   "Exists",
   "Dvd.dvd",
   "NonUnitalCommRing.toNonUnitalNonAssocCommRing",
   "Submodule.FG",
   "Set.instMembership",
   "Finset.dvd_prod_of_mem",
   "Iff",
   "Eq.refl",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Finset.instMembership",
   "Submodule.mem_annihilator_span",
   "Eq.mpr",
   "Mathlib.Tactic.Push.not_and_eq",
   "AddMonoid.toAddZeroClass",
   "MulOneClass.toMulOne",
   "NonUnitalNonAssocCommSemiring.toCommMagma",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "AddCommMonoid.toAddMonoid",
   "Semigroup.toMul",
   "Module.mem_support_iff_of_finite._simp_1_1",
   "MulOne.toMul",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Set",
   "Submodule.instTop",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "AddCommGroup",
   "OfNat.ofNat",
   "CommRing.toCommMonoid",
   "PrimeSpectrum",
   "Module.toDistribMulAction",
   "Submodule.completeLattice",
   "Module.Finite.casesOn",
   "Module.Finite",
   "Mathlib.Tactic.Push.not_forall_eq",
   "semigroupDvd",
   "PartialOrder.toPreorder",
   "Membership.mem",
   "Iff.mp",
   "HMul.hMul",
   "Finset.toSet",
   "Submodule.span",
   "PrimeSpectrum.isPrime",
   "MulAction.toSMul",
   "And.intro",
   "Semiring.toNonAssocSemiring",
   "Subtype.forall'",
   "funext",
   "forall_congr",
   "DistribMulAction.toMulAction",
   "Module.annihilator",
   "AddGroup.toSubNegMonoid",
   "Semiring.toModule",
   "And.left",
   "DistribSMul.toSMulZeroClass",
   "binderNameHint",
   "SetLike.instMembership",
   "CommMagma.toMul",
   "And.right",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "And",
   "DistribMulAction.toDistribSMul",
   "AddZeroClass.toAddZero",
   "Exists.casesOn",
   "Iff.mpr",
   "HSMul.hSMul",
   "id",
   "instHMul",
   "AddZero.toZero",
   "smul_zero",
   "SetLike.instPartialOrder",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "MulAction.mul_smul",
   "Subtype",
   "CommMonoid.toMonoid",
   "Eq.mp",
   "CommRing.toNonUnitalCommRing",
   "Finset.mem_attach",
   "Iff.intro",
   "Submodule",
   "congrArg",
   "Mathlib.Tactic.Push.not_exists._simp_1",
   "Ideal",
   "Monoid.toMulOneClass",
   "MonoidWithZero.toMonoid",
   "Module.mem_support_iff_of_span_eq_top",
   "Ideal.primeCompl",
   "instHSMul",
   "PrimeSpectrum.asIdeal",
   "Zero.toOfNat0",
   "Submonoid.prod_mem",
   "Submodule.annihilator_top",
   "Not",
   "CommRing.toCommSemiring",
   "Classical.not_imp._simp_2",
   "Module.support",
   "CommSemiring.toSemiring",
   "Semiring.toMonoidWithZero",
   "Set.instSingletonSet",
   "CommRing",
   "Mathlib.Tactic.Contrapose.mtr",
   "Finset.prod",
   "SubNegMonoid.toAddMonoid",
   "Submodule.setLike",
   "LE.le",
   "Finset.attach"],
  "name": "Module.mem_support_iff_of_finite",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  {p : PrimeSpectrum R} [Module.Finite R M], p ∈ Module.support R M ↔ Module.annihilator R M ≤ p.asIdeal",
  "constCategory": "Theorem"},
 {"references":
  ["NNReal.instSemifield._proof_9",
   "NNReal.instSemifield._proof_15",
   "NNReal.instSemifield._proof_10",
   "NNReal.instSemifield._proof_5",
   "instZeroNNReal",
   "AddMonoidWithOne.toAddMonoid",
   "instCommSemiringNNReal",
   "NNReal.instSemifield._proof_16",
   "NNReal.instSemifield._proof_19",
   "Semiring.toNonAssocSemiring",
   "NNReal.instSemifield._proof_11",
   "Function.Injective.commGroupWithZero",
   "Semifield.toDivisionSemiring",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "NNReal.instSemifield._proof_13",
   "NNReal.instSemifield._proof_22",
   "NNReal.instDiv",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Real",
   "NNReal.instSemifield._proof_18",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NNReal",
   "Function.Injective.divisionSemiring",
   "NNReal.instSemifield._proof_1",
   "DivisionSemiring.nnqsmul",
   "AddMonoidWithOne.toNatCast",
   "NNReal.instInv",
   "Semifield",
   "NNReal.instSemifield._proof_2",
   "AddMonoid.toNatSMul",
   "NNReal.instSemifield._proof_20",
   "instOneNNReal",
   "NNReal.toReal",
   "instSemiringNNReal",
   "NNReal.zpow",
   "NNReal.instSemifield._proof_4",
   "NNReal.instSemifield._proof_12",
   "NNReal.instSemifield._proof_14",
   "NNReal.instSemifield._proof_17",
   "Real.instField",
   "NNReal.instSemifield._proof_3",
   "MonoidWithZero.toMonoid",
   "Semifield.mk",
   "NNReal.instSemifield._proof_21",
   "NNReal.instSMulNNRat",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "NNReal.instNNRatCast",
   "NNReal.instSemifield._proof_7",
   "Distrib.toAdd",
   "NNReal.instSemifield._proof_8",
   "Distrib.toMul",
   "Semiring.toMonoidWithZero",
   "NNReal.instSemifield._proof_6",
   "CommGroupWithZero.zpow",
   "Monoid.toNatPow",
   "Field.toSemifield",
   "Semifield.toCommGroupWithZero"],
  "name": "NNReal.instSemifield",
  "constType": "Semifield NNReal",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Function.comp",
  "constType":
  "{α : Sort u} → {β : Sort v} → {δ : Sort w} → (β → δ) → (α → β) → α → δ",
  "constCategory": "Definition"},
 {"references":
  ["instTransEq",
   "Trans.trans",
   "AddZeroClass",
   "AddRightStrictMono",
   "instHAdd",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "add_lt_add_right",
   "LT.lt",
   "HAdd.hAdd",
   "zero_add",
   "Eq.symm",
   "Zero.toOfNat0",
   "Eq",
   "LT",
   "AddZero.toZero"],
  "name": "lt_add_of_pos_left",
  "constType":
  "∀ {α : Type u_1} [inst : AddZeroClass α] [inst_1 : LT α] [AddRightStrictMono α] (a : α) {b : α}, 0 < b → a < b + a",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.StI",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Set",
   "HarderNarasimhan.semistableI",
   "Membership.mem",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Set.instMembership",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.semistableI.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.semistableI μ I = ((↑I).2 ∈ HarderNarasimhan.StI μ I)",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "Ring.toNonAssocRing",
   "Eq.trans",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Eq.ndrec",
   "Eq",
   "add_comm",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "Distrib.toAdd",
   "True",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "Neg.neg",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "SubNegMonoid.toNeg",
   "neg_add_rev",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "HAdd.hAdd",
   "Ring.toAddCommGroup",
   "eq_self",
   "NegZeroClass.toNeg",
   "AddCommMonoid.toAddCommSemigroup",
   "AddCommGroup.toDivisionAddCommMonoid",
   "of_eq_true",
   "SubNegMonoid.toAddMonoid",
   "SubtractionMonoid.toSubNegMonoid",
   "Ring",
   "AddMonoid.toAddZeroClass"],
  "name": "Mathlib.Tactic.Ring.neg_add",
  "constType":
  "∀ {R : Type u_2} [inst : Ring R] {a₁ a₂ b₁ b₂ : R}, -a₁ = b₁ → -a₂ = b₂ → -(a₁ + a₂) = b₁ + b₂",
  "constCategory": "Theorem"},
 {"references":
  ["Eq.trans",
   "CommSemiring",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "Semiring.toNonAssocSemiring",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "Distrib.toAdd",
   "True",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "CommSemiring.toSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "add_zero",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "eq_self",
   "of_eq_true",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass"],
  "name": "Mathlib.Tactic.Ring.add_pf_add_zero",
  "constType": "∀ {R : Type u_1} [inst : CommSemiring R] (a : R), a + 0 = a",
  "constCategory": "Theorem"},
 {"references":
  ["le_refl", "Preorder", "True", "LE.le", "eq_true", "Eq", "Preorder.toLE"],
  "name": "HarderNarasimhan.impl.semistable_of_step_cond₂._simp_1_4",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), (a ≤ a) = True",
  "constCategory": "Theorem"},
 {"references": ["Nat"],
  "name": "Nat.succ",
  "constType": "ℕ → ℕ",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "HarderNarasimhan.semistableI",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "bot_le",
   "Membership.mem.out",
   "GT.gt",
   "Subtype.val",
   "HarderNarasimhan.S₂I",
   "HarderNarasimhan.S₁I",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "And.intro",
   "Eq.symm",
   "HarderNarasimhan.Convex",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "Exists.choose_spec",
   "And",
   "HarderNarasimhan.St",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "Set.instMembership",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.in_TotIntvl",
   "HarderNarasimhan.Semistable",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "HarderNarasimhan.StI",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "HarderNarasimhan.Resμ",
   "congrArg",
   "Prod.fst",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Preorder.toLE",
   "propext",
   "Not",
   "HarderNarasimhan.impl.prop3d7₂",
   "Lattice.toSemilatticeInf",
   "Set",
   "HarderNarasimhan.semistableI_iff",
   "HarderNarasimhan.instBoundedOrderInterval",
   "Exists.choose",
   "LT.lt",
   "HarderNarasimhan.instNontrivialInterval",
   "HarderNarasimhan.μA",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "HarderNarasimhan.impl.prop3d7₁",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_3_7",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Convex μ →\n    ∀ (x : ℒ) (hxSt : x ∈ HarderNarasimhan.St μ),\n      HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(⊥, x), ⋯⟩ μ) ∧\n        ∀ (y : ℒ) (hy : y > x), ¬HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(x, y), hy⟩",
  "constCategory": "Theorem"},
 {"references": ["NonUnitalSemiring", "NonUnitalNonAssocSemiring"],
  "name": "NonUnitalSemiring.toNonUnitalNonAssocSemiring",
  "constType":
  "{α : Type u} → [self : NonUnitalSemiring α] → NonUnitalNonAssocSemiring α",
  "constCategory": "Definition"},
 {"references": ["default.sizeOf", "SizeOf", "SizeOf.mk"],
  "name": "instSizeOfDefault",
  "constType": "(α : Sort u) → SizeOf α",
  "constCategory": "Definition"},
 {"references": ["eq_false", "And.right", "And", "False", "Eq"],
  "name": "and_false",
  "constType": "∀ (p : Prop), (p ∧ False) = False",
  "constCategory": "Theorem"},
 {"references":
  ["Eq.trans",
   "Eq.symm",
   "ExistsUnique",
   "Eq",
   "ExistsUnique.unique.match_1_1"],
  "name": "ExistsUnique.unique",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop}, (∃! x, p x) → ∀ {y₁ y₂ : α}, p y₁ → p y₂ → y₁ = y₂",
  "constCategory": "Theorem"},
 {"references":
  ["le_refl", "Preorder", "True", "LE.le", "eq_true", "Eq", "Preorder.toLE"],
  "name": "HarderNarasimhan.impl.prop4d12._simp_1_1",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), (a ≤ a) = True",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Prod",
   "Subtype",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "Nontrivial",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Preorder.toLE",
   "CompleteLattice",
   "Prod.fst"],
  "name": "HarderNarasimhan.SlopeLike",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["SubtractionMonoid",
   "SubtractionMonoid.toSubNegMonoid",
   "SubNegZeroMonoid.mk",
   "SubNegMonoid",
   "SubtractionMonoid.toSubNegZeroMonoid._proof_1",
   "SubNegZeroMonoid"],
  "name": "SubtractionMonoid.toSubNegZeroMonoid",
  "constType": "{α : Type u_1} → [SubtractionMonoid α] → SubNegZeroMonoid α",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "HarderNarasimhan.InIntvl",
   "Min.min",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "Lattice",
   "LE.le",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.ConvexI.convex",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Lattice ℒ} {S : Type u_2} {inst_1 : CompleteLattice S} {I : { p // p.1 < p.2 }}\n  {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.ConvexI I μ] (x y : ℒ),\n  HarderNarasimhan.InIntvl I x → HarderNarasimhan.InIntvl I y → ∀ (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["outParam", "Singleton"],
  "name": "Singleton.singleton",
  "constType":
  "{α : outParam (Type u)} → {β : Type v} → [self : Singleton α β] → α → β",
  "constCategory": "Definition"},
 {"references": ["Not", "Eq.symm", "Eq.rec", "Eq"],
  "name": "Eq.mpr_not",
  "constType": "∀ {p q : Prop}, p = q → ¬q → ¬p",
  "constCategory": "Theorem"},
 {"references": ["Exists"],
  "name": "Exists.intro",
  "constType": "∀ {α : Sort u} {p : α → Prop} (w : α), p w → Exists p",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.μmin",
   "Eq.refl",
   "PartialOrder",
   "Nontrivial",
   "Eq.rec",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μmin.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S),\n  μ = μ_1 → ∀ (I I_1 : { p // p.1 < p.2 }), I = I_1 → HarderNarasimhan.μmin μ I = HarderNarasimhan.μmin μ_1 I_1",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Preorder",
   "Preorder.toLT",
   "False",
   "lt_self_iff_false",
   "Eq",
   "propext"],
  "name": "HarderNarasimhan.impl.subseq_prop5._simp_1_5",
  "constType": "∀ {α : Type u_2} [inst : Preorder α] (x : α), (x < x) = False",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.ext.match_1",
   "Monotone",
   "Eq.symm",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Eq.ndrec",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Nat.lt_add_one",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "HEq",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "Eq.casesOn",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.ext",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} {x y : HarderNarasimhan.HarderNarasimhanFiltration μ},\n  x.filtration = y.filtration → x = y",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Prod",
   "Subtype",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "Nontrivial",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Preorder.toLE",
   "CompleteLattice",
   "Prod.fst"],
  "name": "HarderNarasimhan.NashEquilibrium",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references": ["exists_prop", "Exists", "And", "Eq", "propext"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_20",
  "constType": "∀ {b a : Prop}, (∃ (_ : a), b) = (a ∧ b)",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace", "LinearOrder"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.toLinearOrder",
  "constType":
  "{V : Type u_1} → [self : HarderNarasimhan.TotallyOrderedRealVectorSpace V] → LinearOrder V",
  "constCategory": "Definition"},
 {"references":
  ["NonUnitalNonAssocRing.toAddCommGroup",
   "NonUnitalNonAssocSemiring.mk",
   "AddCommGroup.add_comm",
   "AddCommGroup.toAddGroup",
   "AddCommMonoid.mk",
   "NonUnitalNonAssocRing.toMul",
   "NonUnitalNonAssocRing.right_distrib",
   "NonUnitalNonAssocRing.mul_zero",
   "NonUnitalNonAssocCommRing",
   "NonUnitalNonAssocCommRing.mul_comm",
   "NonUnitalNonAssocCommSemiring",
   "NonUnitalNonAssocCommSemiring.mk",
   "SubNegMonoid.toAddMonoid",
   "NonUnitalNonAssocCommRing.toNonUnitalNonAssocRing",
   "NonUnitalNonAssocRing.zero_mul",
   "AddGroup.toSubNegMonoid",
   "NonUnitalNonAssocRing.left_distrib"],
  "name": "NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring",
  "constType":
  "{α : Type u} → [self : NonUnitalNonAssocCommRing α] → NonUnitalNonAssocCommSemiring α",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Submodule.instNontrivial",
   "Module",
   "HarderNarasimhan.μ",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "BoundedOrder.toOrderTop",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.S",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
   "CompleteLattice.toConditionallyCompleteLattice",
   "SemilatticeInf.toPartialOrder",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "Exists",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "IsNoetherianRing",
   "Nat",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Nontrivial",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.S₀",
   "OrderTop.toTop",
   "CompleteLattice.toBoundedOrder",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_5",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_1} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (HNFil : HarderNarasimhan.HarderNarasimhanFiltration (HarderNarasimhan.μ R M)), ∃ n, HNFil.filtration n = ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "Nat.instAddCancelCommMonoid",
   "Nat.instAddCommMonoid",
   "Nat.instPreorder",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "IsOrderedAddMonoid.toAddLeftMono",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "StrictAnti",
   "Nat",
   "lt_add_one",
   "One.toOfNat1",
   "Nat.instStarOrderedRing",
   "Lattice",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "AddMonoid.toAddZeroClass"],
  "name": "HarderNarasimhan.impl.JHFil._proof_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] (x : ℕ → ℒ), StrictAnti x → ∀ (N : ℕ), x (N + 1) < x N",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "OmegaCompletePartialOrder.toPartialOrder",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "And.intro",
   "HarderNarasimhan.impl.lem2d4₁",
   "Preorder.toLE",
   "lt_of_le_of_lt'",
   "inf_lt_left",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Lattice.toSemilatticeInf",
   "lt_of_le_of_lt",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "HarderNarasimhan.impl.lem2d4₂I",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.InIntvl",
   "Min.min",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "SemilatticeSup.toMax",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice",
   "HarderNarasimhan.impl.lem2d4₃I"],
  "name": "HarderNarasimhan.impl.lem2d4I",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        ∀ (w : ℒ),\n          HarderNarasimhan.InIntvl I w →\n            ∀ (hxw : ¬x ≤ w) (u t : ℒ) (huxw : u ≤ x ⊓ w) (hxwt : x ⊔ w ≤ t),\n              HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩ ≤ HarderNarasimhan.μmax μ ⟨(x ⊓ w, x), ⋯⟩ ∧\n                HarderNarasimhan.μmax μ ⟨(x ⊓ w, x), ⋯⟩ ≤ HarderNarasimhan.μmax μ ⟨(w, t), ⋯⟩ ∧\n                  HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(w, x ⊔ w), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "instLTNat",
   "Nat.decreasingInduction._proof_1",
   "instHAdd",
   "Nat.leRec",
   "Nat.leRec._proof_5",
   "Nat.le_refl",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "Nat",
   "Nat.le_succ_of_le",
   "instOfNatNat",
   "LE.le",
   "Nat.le_of_succ_le",
   "Nat.lt_succ_self",
   "instLENat",
   "Nat.decreasingInduction._proof_2"],
  "name": "Nat.decreasingInduction",
  "constType":
  "{n : ℕ} →\n  {motive : (m : ℕ) → m ≤ n → Sort u_1} →\n    ((k : ℕ) → (h : k < n) → motive (k + 1) h → motive k ⋯) → motive n ⋯ → {m : ℕ} → (mn : m ≤ n) → motive m mn",
  "constCategory": "Definition"},
 {"references":
  ["Set",
   "eq_comm",
   "Singleton.singleton",
   "Set.ext",
   "Set.instSingletonSet",
   "Eq",
   "setOf"],
  "name": "Set.setOf_eq_eq_singleton'",
  "constType": "∀ {α : Type u} {a : α}, {x | a = x} = {a}",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.toAddSubmonoid",
   "Module",
   "AddSubsemigroup.add_mem'",
   "AddCommMonoid.toAddMonoid",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "Submodule",
   "AddCommMonoid",
   "Submodule.setLike",
   "AddSubmonoid.zero_mem'",
   "ZeroMemClass.mk",
   "AddMemClass.mk",
   "AddSubmonoid.toAddSubsemigroup",
   "AddSubmonoidClass",
   "AddZero.toZero",
   "AddSubmonoidClass.mk",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.addSubmonoidClass",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M],\n  AddSubmonoidClass (Submodule R M) M",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "True",
   "Membership.mem",
   "eq_true",
   "SetLike",
   "SetLike.coe_mem",
   "Eq",
   "Subtype.val"],
  "name": "HarderNarasimhan.impl.rmk4d14₂._simp_1_5",
  "constType":
  "∀ {A : Type u_1} {B : Type u_2} [i : SetLike A B] {p : A} (x : ↥p), (↑x ∈ p) = True",
  "constCategory": "Theorem"},
 {"references":
  ["neg_add_cancel_right",
   "AddRightStrictMono",
   "congrArg",
   "sub_eq_add_neg",
   "SubNegMonoid.toSub",
   "HSub.hSub",
   "Eq.symm",
   "AddGroup.toSubNegMonoid",
   "AddGroup.covconv_swap",
   "Eq",
   "propext",
   "instHAdd",
   "add_lt_add_iff_right",
   "Neg.neg",
   "SubNegMonoid.toNeg",
   "Iff.rfl",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "LT.lt",
   "HAdd.hAdd",
   "SubNegMonoid.toAddMonoid",
   "Iff",
   "id",
   "AddGroup",
   "Eq.mpr",
   "instHSub",
   "LT",
   "AddMonoid.toAddZeroClass"],
  "name": "lt_sub_iff_add_lt",
  "constType":
  "∀ {α : Type u} [inst : AddGroup α] [inst_1 : LT α] [AddRightStrictMono α] {a b c : α}, a < c - b ↔ a + b < c",
  "constCategory": "Theorem"},
 {"references":
  ["Lean.Omega.Constraint",
   "Bool",
   "Lean.Omega.Coeffs.dot_smul_left",
   "Lean.Omega.Constraint.sat",
   "Lean.Omega.Coeffs",
   "HMul.hMul",
   "Lean.Omega.IntList.instHMulInt",
   "Lean.Omega.Coeffs.combo_eq_smul_add_smul",
   "Int.instMul",
   "congrArg",
   "Lean.Omega.Constraint.combo_sat",
   "Lean.Omega.IntList",
   "Lean.Omega.IntList.instAdd",
   "Int.instAdd",
   "Eq",
   "Bool.true",
   "Lean.Omega.Constraint.sat'.eq_1",
   "instHAdd",
   "Lean.Omega.Coeffs.combo",
   "Lean.Omega.Constraint.combo",
   "Int",
   "HAdd.hAdd",
   "Lean.Omega.Coeffs.dot_distrib_left",
   "id",
   "instHMul",
   "Eq.mpr",
   "Lean.Omega.Coeffs.dot",
   "Lean.Omega.Constraint.sat'"],
  "name": "Lean.Omega.combo_sat'",
  "constType":
  "∀ (s t : Omega.Constraint) (a : ℤ) (x : Omega.Coeffs) (b : ℤ) (y v : Omega.Coeffs),\n  s.sat' x v = true → t.sat' y v = true → (Omega.Constraint.combo a s b t).sat' (Omega.Coeffs.combo a x b y) v = true",
  "constCategory": "Theorem"},
 {"references":
  ["le_refl", "Preorder", "True", "LE.le", "eq_true", "Eq", "Preorder.toLE"],
  "name": "HarderNarasimhan.impl.subseq_prop0'._simp_1_6",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), (a ≤ a) = True",
  "constCategory": "Theorem"},
 {"references":
  ["Or.elim",
   "PartialOrder.toPreorder",
   "LinearOrder",
   "Preorder.toLT",
   "lt_or_gt_of_ne",
   "ne_of_gt",
   "Iff.intro",
   "LT.lt",
   "LinearOrder.toPartialOrder",
   "Or",
   "ne_of_lt",
   "Iff",
   "Ne"],
  "name": "ne_iff_lt_or_gt",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, a ≠ b ↔ a < b ∨ b < a",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.S₀_order",
   "HarderNarasimhan.instLES₀",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Singleton.singleton",
   "Iff.mp",
   "Preorder.toLT",
   "congrArg",
   "instDistribLatticeOfLinearOrder",
   "iff_self",
   "HarderNarasimhan.instLinearOrderS₀",
   "PrimeSpectrum.instPartialOrder",
   "Preorder.toLE",
   "propext",
   "SemilatticeInf.toPartialOrder",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "True",
   "LinearExtension",
   "And.right",
   "CommSemiring.toSemiring",
   "Finset.instHasSubset",
   "CommRing",
   "PrimeSpectrum",
   "LT.lt",
   "LinearOrder.toPartialOrder",
   "le_iff_le_iff_lt_iff_lt",
   "IsNoetherianRing",
   "Finset.instSingleton",
   "DistribLattice.toLattice",
   "HasSubset.Subset",
   "of_eq_true",
   "HarderNarasimhan.instPartialOrderS₀",
   "Iff",
   "LE.le",
   "HarderNarasimhan.S₀"],
  "name": "HarderNarasimhan.S₀_order'",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {a b : LinearExtension (PrimeSpectrum R)},\n  a < b ↔ {a} < {b}",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "instNeZeroNatHAdd_1.match_1",
   "Zero.ofOfNat0",
   "instHAdd",
   "instNeZeroNatHAdd_1.match_3",
   "instNeZeroNatHAdd.match_5",
   "OfNat.ofNat",
   "NeZero",
   "HAdd.hAdd",
   "Nat",
   "instOfNatNat",
   "False",
   "NeZero.mk",
   "Ne",
   "Zero.toOfNat0",
   "Eq"],
  "name": "instNeZeroNatHAdd_1",
  "constType": "∀ {n m : ℕ} [h : NeZero m], NeZero (n + m)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Ring.toNonAssocRing",
   "Submodule.Quotient.module",
   "Classical.propDecidable",
   "AddGroupWithOne.toAddMonoidWithOne",
   "SMulZeroClass.toSMul",
   "HarderNarasimhan.impl.quot_ntl",
   "instDistribSMul",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "RingHom.id",
   "Submodule.submoduleOf._proof_1",
   "Module.IsNoetherian.finite",
   "Eq.symm",
   "HarderNarasimhan.impl.quot_ntl'",
   "HarderNarasimhan.S",
   "instLTNat",
   "Submodule.addCommGroup",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "LinearMap",
   "Set.instMembership",
   "Ring.toSemiring",
   "Prod",
   "not_lt_of_ge",
   "Nat.instStarOrderedRing",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "lt_top_iff_ne_top",
   "CompleteLattice.toBoundedOrder",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "Nat.find",
   "Submodule.hasQuotient",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.Resμ",
   "Submodule.mem_top",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "instOfNatNat",
   "Preorder.toLE",
   "Eq",
   "propext",
   "CompleteLattice.toConditionallyCompleteLattice",
   "Submodule.instOrderTop",
   "Nat.instAddMonoid",
   "Set",
   "AddCommGroup",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "CommRing.toRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Submodule.completeLattice",
   "ExistsUnique",
   "Ne",
   "HarderNarasimhan.S₀",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "Module.Finite",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "HarderNarasimhan.μ",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "AddMonoidWithOne.toAddMonoid",
   "HarderNarasimhan.impl.piecewise_coprimary._simp_1_1",
   "Nat.instAddCommMonoid",
   "Submodule.subtype",
   "HarderNarasimhan.Coprimary",
   "Semiring.toNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "Eq.rec",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "DistribSMul.toSMulZeroClass",
   "SemilatticeInf.toPartialOrder",
   "SetLike.instMembership",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "IsOrderedAddMonoid.toAddLeftMono",
   "AddZeroClass.toAddZero",
   "HarderNarasimhan.Coprimary.mk",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "isNoetherian_submodule'",
   "Nat",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "ConditionallyCompleteLattice.toLattice",
   "AddZero.toZero",
   "Submodule.submoduleOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Submodule.instNontrivial",
   "Subtype",
   "Submodule.Quotient.instSMul._proof_1",
   "Module.Finite.quotient",
   "Eq.mp",
   "Submodule.module",
   "HarderNarasimhan.impl.rmk4d14₂",
   "Nat.instAddCancelCommMonoid",
   "congrArg",
   "Submodule",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "HarderNarasimhan.HarderNarasimhanFiltration.strict_mono",
   "Nat.instOne",
   "BoundedOrder.toOrderTop",
   "isNoetherian_of_isNoetherianRing_of_finite",
   "HarderNarasimhan.Interval",
   "HarderNarasimhan.HarderNarasimhanFiltration.piecewise_semistable",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "CommSemiring.toSemiring",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "LT.lt",
   "HarderNarasimhan.instNontrivialInterval",
   "IsNoetherianRing",
   "lt_add_one",
   "One.toOfNat1",
   "Submodule.Quotient.nontrivial_of_lt_top",
   "Submodule.setLike",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Subtype.mk",
   "Submodule.addCommMonoid",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.piecewise_coprimary",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (HNFil : HarderNarasimhan.HarderNarasimhanFiltration (HarderNarasimhan.μ R M)),\n  ∀ n < Nat.find ⋯,\n    HarderNarasimhan.Coprimary R\n      (↥(HNFil.filtration (n + 1)) ⧸ Submodule.submoduleOf (HNFil.filtration n) (HNFil.filtration (n + 1)))",
  "constCategory": "Theorem"},
 {"references": ["Membership.mk", "Set", "Set.Mem", "Membership"],
  "name": "Set.instMembership",
  "constType": "{α : Type u} → Membership α (Set α)",
  "constCategory": "Definition"},
 {"references":
  ["HAdd.hAdd",
   "instHAdd",
   "Add",
   "LE.le",
   "LE",
   "CovariantClass",
   "Function.swap"],
  "name": "AddRightMono",
  "constType": "(M : Type u_1) → [Add M] → [LE M] → Prop",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "instLTNat",
   "Fintype.card_lt_of_injective_not_surjective",
   "Function.surjInv",
   "Function.Bijective",
   "Fintype",
   "Function.Surjective",
   "Finite.of_fintype",
   "Fintype.card",
   "LT.lt",
   "And.intro",
   "Nat",
   "Function.injective_surjInv",
   "Function.Surjective.injective_of_fintype",
   "Equiv.ofBijective",
   "Equiv.symm",
   "Function.Injective"],
  "name": "Fintype.card_lt_of_surjective_not_injective",
  "constType":
  "∀ {α : Type u_1} {β : Type u_2} [inst : Fintype α] [inst_1 : Fintype β] (f : α → β),\n  Function.Surjective f → ¬Function.Injective f → Fintype.card β < Fintype.card α",
  "constCategory": "Theorem"},
 {"references":
  ["LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "DecidableLT",
   "Preorder.toLT",
   "LinearOrder"],
  "name": "LinearOrder.toDecidableLT",
  "constType": "{α : Type u_2} → [self : LinearOrder α] → DecidableLT α",
  "constCategory": "Definition"},
 {"references": ["Not", "Iff", "not_congr"],
  "name": "Iff.not",
  "constType": "∀ {a b : Prop}, (a ↔ b) → (¬a ↔ ¬b)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "HarderNarasimhan.CoprimaryFiltration.rec",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Submodule.instBot",
   "Nontrivial",
   "HarderNarasimhan.CoprimaryFiltration.mk",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Nat.instPreorder",
   "Submodule",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.recOn",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] →\n                {motive : HarderNarasimhan.CoprimaryFiltration R M → Sort u} →\n                  (t : HarderNarasimhan.CoprimaryFiltration R M) →\n                    ((filtration : ℕ → Submodule R M) →\n                        (monotone : Monotone filtration) →\n                          (first_eq_bot : filtration 0 = ⊥) →\n                            (fin_len : ∃ n, filtration n = ⊤) →\n                              (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                                (piecewise_coprimary :\n                                    ∀ n < Nat.find fin_len,\n                                      HarderNarasimhan.Coprimary R\n                                        (↥(filtration (n + 1)) ⧸ (filtration n).submoduleOf (filtration (n + 1)))) →\n                                  (strict_mono_associated_prime :\n                                      ∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len),\n                                        { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }) →\n                                    motive\n                                      { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot,\n                                        fin_len := fin_len, strict_mono := strict_mono,\n                                        piecewise_coprimary := piecewise_coprimary,\n                                        strict_mono_associated_prime := strict_mono_associated_prime }) →\n                      motive t",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Submodule.hasQuotient",
   "Subtype",
   "HasQuotient.Quotient",
   "LinearMap.instFunLike",
   "Module",
   "Submodule.Quotient.module",
   "Submodule.module",
   "Membership.mem",
   "LinearEquiv",
   "Submodule",
   "Submodule.subtype",
   "LinearMap.semilinearMapClass",
   "Submodule.Quotient.addCommGroup",
   "Semiring.toNonAssocSemiring",
   "LinearMap.quotKerEquivRange._proof_6",
   "RingHom.id",
   "LinearMap.quotientInfEquivSupQuotient._proof_1",
   "CompleteLattice.toConditionallyCompleteLattice",
   "SetLike.instMembership",
   "LinearMap.quotientInfToSupQuotient",
   "Submodule.addCommGroup",
   "AddCommGroup",
   "LinearMap",
   "Ring.toSemiring",
   "Max.max",
   "Submodule.comap",
   "Submodule.setLike",
   "Min.min",
   "SemilatticeSup.toMax",
   "RingHomInvPair.ids",
   "Submodule.completeLattice",
   "AddCommGroup.toAddCommMonoid",
   "ConditionallyCompleteLattice.toLattice",
   "Submodule.instMin",
   "Submodule.addCommMonoid",
   "LinearMap.subToSupQuotient._proof_1",
   "LinearMap.quotientInfToSupQuotient._proof_1",
   "LinearEquiv.ofBijective",
   "Ring"],
  "name": "LinearMap.quotientInfEquivSupQuotient",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Ring R] →\n      [inst_1 : AddCommGroup M] →\n        [inst_2 : _root_.Module R M] →\n          (p p' : Submodule R M) →\n            (↥p ⧸ Submodule.comap p.subtype p ⊓ Submodule.comap p.subtype p') ≃ₗ[R]\n              ↥(p ⊔ p') ⧸ Submodule.comap (p ⊔ p').subtype p'",
  "constCategory": "Definition"},
 {"references": ["Eq"],
  "name": "Eq.refl",
  "constType": "∀ {α : Sort u_1} (a : α), a = a",
  "constCategory": "Other"},
 {"references": ["Subtype", "BEq.mk", "BEq", "BEq.beq", "Subtype.val"],
  "name": "Subtype.instBEq",
  "constType": "{α : Type u} → {p : α → Prop} → [BEq α] → BEq { x // p x }",
  "constCategory": "Definition"},
 {"references":
  ["SemilatticeInf",
   "SemilatticeInf.toMin",
   "OrderDual",
   "Min.min",
   "OrderDual.instSemilatticeSup",
   "Eq",
   "sup_comm"],
  "name": "inf_comm",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeInf α] (a b : α), a ⊓ b = b ⊓ a",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Submodule.instNontrivial",
   "Module",
   "HarderNarasimhan.μ",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "HarderNarasimhan.impl.μmax_eq_μ",
   "Eq",
   "HarderNarasimhan.S",
   "CommRing.toCommSemiring",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "Prod.snd",
   "CommRing",
   "Prod",
   "LT.lt",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "HarderNarasimhan.S₀",
   "CompleteLattice.toBoundedOrder",
   "Module.Finite"],
  "name": "HarderNarasimhan.μmax_eq_μ",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  HarderNarasimhan.μmax (HarderNarasimhan.μ R M) I = HarderNarasimhan.μ R M I",
  "constCategory": "Theorem"},
 {"references":
  ["Set",
   "Set.Finite.nonempty_fintype",
   "Fintype",
   "Set.Finite",
   "Set.Elem",
   "Nonempty.some"],
  "name": "Set.Finite.fintype",
  "constType": "{α : Type u} → {s : Set α} → s.Finite → Fintype ↑s",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Bool",
  "constType": "Type",
  "constCategory": "Other"},
 {"references":
  ["And.intro",
   "True",
   "And",
   "Eq",
   "trivial",
   "propext",
   "And.left",
   "Iff.intro"],
  "name": "and_true",
  "constType": "∀ (p : Prop), (p ∧ True) = p",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "HAdd.hAdd",
   "instOfNat",
   "instHAdd",
   "Iff",
   "Int.instAdd",
   "LE.le",
   "Int.instLTInt",
   "Int.instLEInt",
   "Iff.rfl",
   "OfNat.ofNat",
   "Int"],
  "name": "Int.add_one_le_iff",
  "constType": "∀ {a b : ℤ}, a + 1 ≤ b ↔ a < b",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "HarderNarasimhan.impl.prop4d18₁",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "HarderNarasimhan.WeakSlopeLike₁.wsl₁",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.NashEquilibrium.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "HarderNarasimhan.NashEquilibrium",
   "Or.inl",
   "Or",
   "HarderNarasimhan.WeakAscendingChainCondition.wacc",
   "HarderNarasimhan.μBstar",
   "HarderNarasimhan.WeakSlopeLike₂.wsl₂",
   "HarderNarasimhan.WeakSlopeLike₁",
   "CompleteLinearOrder",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.impl.prop4d3₂",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.impl.prop4d1₂",
   "Or.casesOn",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "HarderNarasimhan.StrongDescendingChainCondition.wdcc",
   "Eq.refl",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "HarderNarasimhan.WeakSlopeLike₂",
   "eq_of_le_of_ge",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.impl.prop4d18₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Semistable μ →\n    HarderNarasimhan.WeakAscendingChainCondition μ ∧ HarderNarasimhan.WeakSlopeLike₁ μ ∨\n        HarderNarasimhan.StrongDescendingChainCondition μ ∧ HarderNarasimhan.WeakSlopeLike₂ μ →\n      HarderNarasimhan.NashEquilibrium μ",
  "constCategory": "Theorem"},
 {"references":
  ["AddCommMonoid",
   "SetLike.instMembership",
   "Submodule.setLike",
   "Module",
   "Submodule.instTop",
   "Membership.mem",
   "Top.top",
   "trivial",
   "Submodule",
   "Semiring"],
  "name": "Submodule.mem_top",
  "constType":
  "∀ {R : Type u_1} {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M] {x : M},\n  x ∈ ⊤",
  "constCategory": "Theorem"},
 {"references": ["Nat", "OfNat", "OfNat.mk"],
  "name": "instOfNatNat",
  "constType": "(n : ℕ) → OfNat ℕ n",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat.find",
   "Nat",
   "Exists",
   "And",
   "DecidablePred",
   "Eq",
   "Nat.find_lt_iff",
   "propext"],
  "name": "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_6",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (h : ∃ n, p n) (n : ℕ), (Nat.find h < n) = ∃ m < n, p m",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "instDecidableIff",
   "instDecidableEqOfIff",
   "Bool",
   "True",
   "instDecidableTrue",
   "Decidable.decide",
   "Eq.refl",
   "id",
   "False",
   "instDecidableFalse",
   "Eq",
   "Bool.true",
   "of_decide_eq_true",
   "instDecidableNot"],
  "name": "not_true_eq_false",
  "constType": "(¬True) = False",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.hasQuotient",
   "associatedPrimes",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan._μ._proof_1",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.Quotient.module",
   "Submodule.module",
   "Membership.mem",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Submodule",
   "Prod.fst",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "Eq",
   "CommRing.toCommSemiring",
   "SetLike.instMembership",
   "Exists",
   "LinearExtension",
   "Set",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "Prod.snd",
   "CommRing",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "PrimeSpectrum",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Submodule.submoduleOf",
   "Module.Finite",
   "setOf"],
  "name": "HarderNarasimhan._μ",
  "constType":
  "(R : Type u_1) →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      (M : Type u_2) →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] → { z // z.1 < z.2 } → Set (LinearExtension (PrimeSpectrum R))",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "le_trans",
   "SemilatticeSup.toPartialOrder",
   "And",
   "sup_le",
   "le_sup_left",
   "Iff.intro",
   "And.intro",
   "Max.max",
   "le_sup_right",
   "Iff",
   "LE.le",
   "SemilatticeSup.toMax",
   "sup_le_iff.match_1_1",
   "SemilatticeSup",
   "Preorder.toLE"],
  "name": "sup_le_iff",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b c : α}, a ⊔ b ≤ c ↔ a ≤ c ∧ b ≤ c",
  "constCategory": "Theorem"},
 {"references":
  ["AddRightCancelSemigroup",
   "AddRightCancelSemigroup.toAddSemigroup",
   "IsRightCancelAdd",
   "AddSemigroup.toAdd"],
  "name": "AddRightCancelSemigroup.toIsRightCancelAdd",
  "constType":
  "∀ {G : Type u} [self : AddRightCancelSemigroup G], IsRightCancelAdd G",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "SetLike.instMembership",
   "Subtype.ext_iff",
   "Membership.mem",
   "Iff.symm",
   "Subtype.val",
   "OfNat.ofNat",
   "ZeroMemClass",
   "Iff",
   "SetLike",
   "Zero.toOfNat0",
   "ZeroMemClass.zero",
   "Zero",
   "Eq"],
  "name": "ZeroMemClass.coe_eq_zero",
  "constType":
  "∀ {A : Type u_3} {M₁ : Type u_4} [inst : SetLike A M₁] [inst_1 : Zero M₁] [hA : ZeroMemClass A M₁] {S' : A} {x : ↥S'},\n  ↑x = 0 ↔ x = 0",
  "constCategory": "Theorem"},
 {"references":
  ["Finset.map",
   "Subtype",
   "Finset",
   "Eq.trans",
   "Membership.mem",
   "DFunLike.coe",
   "Subtype.val",
   "exists_eq_right._simp_1",
   "Set.Elem",
   "congrArg",
   "iff_self",
   "funext",
   "Subtype.exists._simp_1",
   "Function.Embedding.subtype",
   "Eq",
   "Function.instFunLikeEmbedding",
   "propext",
   "Finset.univ",
   "Finset.mem_map._simp_1",
   "Exists",
   "True",
   "Set",
   "Function.Embedding",
   "And",
   "Set.toFinset",
   "exists_prop._simp_1",
   "true_and",
   "Fintype",
   "Finset.mem_univ._simp_1",
   "exists_prop_congr",
   "Set.instMembership",
   "Iff.of_eq",
   "of_eq_true",
   "Eq.refl",
   "Iff",
   "Finset.instMembership",
   "Subtype.mk"],
  "name": "Set.mem_toFinset",
  "constType":
  "∀ {α : Type u_1} {s : Set α} [inst : Fintype ↑s] {a : α}, a ∈ s.toFinset ↔ a ∈ s",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "DecidableRel", "LT"],
  "name": "DecidableLT",
  "constType": "(α : Type u) → [LT α] → Type (max 0 u)",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.semistableI",
   "Preorder.toLT",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "HarderNarasimhan.instBoundedOrderInterval",
   "Prod.snd",
   "HarderNarasimhan.Resμ",
   "HarderNarasimhan.impl.semistableI_iff",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.instNontrivialInterval",
   "Iff",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "CompleteLattice",
   "HarderNarasimhan.Semistable",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.semistableI_iff",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.semistableI μ I ↔ HarderNarasimhan.Semistable (HarderNarasimhan.Resμ I μ)",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "instAddNat",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_4",
   "Membership.mem",
   "Preorder.toLT",
   "Subtype.val",
   "Set.Elem",
   "Or",
   "PartialOrder",
   "HarderNarasimhan.impl.prop4d1₁_seq.match_1",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_5",
   "Exists",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_1",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_7",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_2",
   "BoundedOrder",
   "Prod.snd",
   "Nat.brecOn",
   "Nat.lt_add_one",
   "Unit",
   "Set.instMembership",
   "Prod",
   "Nat",
   "Nontrivial",
   "Top.top",
   "StrictMono",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instPreorder",
   "Prod.fst",
   "Subtype.prop",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "Preorder.toLE",
   "Not",
   "Set.Nonempty",
   "le_top",
   "instHAdd",
   "Set",
   "Exists.choose",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "HAdd.hAdd",
   "LT.lt",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_6",
   "Nat.succ",
   "LE.le",
   "Nat.below",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_3"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] →\n      [inst_1 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_2 : CompleteLattice S] →\n            (μ : { p // p.1 < p.2 } → S) →\n              (∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩) →\n                (∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤),\n                    μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩) →\n                  {YA |\n                        ∃ (h : YA < ⊤),\n                          ∀ xA < ⊤, ∃ xB, ∃ (hAB : xA < xB), ¬μ ⟨(xA, xB), hAB⟩ ≤ μ ⟨(YA, ⊤), h⟩}.Nonempty →\n                    ℕ → ↑{YA | ∃ (h : YA < ⊤), ∀ xA < ⊤, ∃ xB, ∃ (hAB : xA < xB), ¬μ ⟨(xA, xB), hAB⟩ ≤ μ ⟨(YA, ⊤), h⟩}",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Iff",
   "PartialOrder",
   "LE.le",
   "OrderBot.toBot",
   "le_bot_iff",
   "Eq",
   "Preorder.toLE",
   "Bot.bot",
   "Iff.symm",
   "OrderBot"],
  "name": "eq_bot_iff",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderBot α] {a : α}, a = ⊥ ↔ a ≤ ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "Membership.mem",
   "Iff.mp",
   "Exists.intro",
   "Membership.mem.out",
   "PrimeSpectrum.isPrime",
   "And.intro",
   "Minimal",
   "Semiring.toNonAssocSemiring",
   "funext",
   "Module.annihilator",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "Exists",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "And.right",
   "And",
   "Set.instMembership",
   "Exists.casesOn",
   "AddCommGroup.toAddCommMonoid",
   "id",
   "Eq.mpr",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.impl.exists_minimal_prime_contained_supp._simp_1_1",
   "congrArg",
   "Ideal.exists_minimalPrimes_le",
   "Ideal",
   "Ideal.minimalPrimes",
   "PrimeSpectrum.asIdeal",
   "Preorder.toLE",
   "Eq",
   "CommRing.toCommSemiring",
   "Set",
   "Module.mem_support_iff_of_finite",
   "Module.support",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "CommRing",
   "PrimeSpectrum",
   "IsNoetherianRing",
   "LE.le",
   "Submodule.completeLattice",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.exists_minimal_prime_contained_supp",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [IsNoetherianRing R] {M : Type u_2} [inst_2 : AddCommGroup M]\n  [inst_3 : _root_.Module R M] [Module.Finite R M],\n  ∀ q ∈ Module.support R M, ∃ p, Minimal (fun J ↦ J ∈ Module.support R M) p ∧ p ≤ q",
  "constCategory": "Theorem"},
 {"references": ["CommRing", "Ring"],
  "name": "CommRing.toRing",
  "constType": "{α : Type u} → [self : CommRing α] → Ring α",
  "constCategory": "Definition"},
 {"references":
  ["Nat",
   "instOfNatNat",
   "Nat.succ",
   "LE.le",
   "_private.Init.Prelude.0.Nat.not_succ_le_zero.match_1_5",
   "False",
   "_private.Init.Prelude.0.Nat.not_succ_le_zero.match_1_3",
   "_private.Init.Prelude.0.Nat.not_succ_le_zero.match_1_1",
   "instLENat",
   "OfNat.ofNat",
   "Unit"],
  "name": "Nat.not_succ_le_zero",
  "constType": "∀ (n : ℕ), n.succ ≤ 0 → False",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "instAddNat",
   "HarderNarasimhan.SlopeLike",
   "not_lt._simp_1",
   "Eq.trans",
   "HarderNarasimhan.instWeakSlopeLike₁OfSlopeLike",
   "Classical.propDecidable",
   "HarderNarasimhan.μmin.congr_simp",
   "forall_and_index._simp_1",
   "List.instGetElem?NatLtLength",
   "Subtype.val",
   "Subtype.coe_inj",
   "GetElem?.getElem?",
   "False.elim",
   "HarderNarasimhan.NashEquilibrium",
   "SupSet.sSup",
   "HarderNarasimhan.μBstar",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "gt_trans",
   "Eq.ndrec",
   "rfl",
   "instLTNat",
   "Exists",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "HarderNarasimhan.μmax._proof_1",
   "gt_iff_lt._simp_1",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.μmin_res_intvl",
   "Eq.mpr",
   "HarderNarasimhan.instWellFoundedGTInterval",
   "HarderNarasimhan.in_TotIntvl",
   "setOf",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "Nat.find",
   "Ne.symm",
   "HarderNarasimhan.impl.thm4d21",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.instSlopeLikeIntervalResμ",
   "List",
   "HarderNarasimhan.Stable",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "HarderNarasimhan.instStrongDescendingChainConditionOfStrongDescendingChainCondition'",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "sInf_lt_iff",
   "instOfNatNat",
   "congr",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
   "InfSet.sInf",
   "WellFoundedGT",
   "ConditionallyCompleteLinearOrder.toLinearOrder",
   "HarderNarasimhan.WeakSlopeLike₁",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Nat.instAddMonoid",
   "Set",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "HarderNarasimhan.seesaw'",
   "OfNat.ofNat",
   "not_le_of_gt",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "LinearOrder.toPartialOrder",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.μA",
   "CompleteLinearOrder.toCompleteLattice",
   "inferInstance",
   "forall_exists_index._simp_1",
   "Ne",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "CompleteLattice.toCompleteSemilatticeInf",
   "bot_lt_top",
   "And.casesOn",
   "lt_trans",
   "HarderNarasimhan.μA_res_intvl",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Membership.mem",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "Iff.mp",
   "GT.gt",
   "HarderNarasimhan.μmax",
   "Nat.instAddCommMonoid",
   "And.intro",
   "HarderNarasimhan.proposition_4_1",
   "funext",
   "forall_congr",
   "lt_self_iff_false._simp_1",
   "List.TFAE",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Eq.rec",
   "Nat.instIsOrderedAddMonoid",
   "List.cons",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "HarderNarasimhan.Stable.stable",
   "HarderNarasimhan.instStrongDescendingChainCondition'IntervalResμ",
   "Nat.instPartialOrder",
   "lt_of_le_of_lt",
   "And.right",
   "Nat.instStarRing",
   "And",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.instWeakAscendingChainConditionOfWellFoundedGT",
   "Exists.casesOn",
   "Nat",
   "Decidable.byContradiction",
   "Iff.of_eq",
   "Option",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder",
   "List.length",
   "HarderNarasimhan.lt_lt",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "CompleteSemilatticeSup.toSupSet",
   "lt_of_le_of_ne",
   "CompleteLattice.toCompleteSemilatticeSup",
   "Nat.instAddCancelCommMonoid",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "HarderNarasimhan.μmin",
   "Nat.instOne",
   "BoundedOrder.toOrderTop",
   "le_of_eq",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "List.nil",
   "Not",
   "sSup_le_iff",
   "bot_lt_iff_ne_bot",
   "List.TFAE.out",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.Semistable.semistable",
   "exists_prop_congr",
   "CompleteSemilatticeInf.toInfSet",
   "LT.lt",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "LE.le",
   "CompleteSemilatticeSup.toPartialOrder",
   "HarderNarasimhan.instPartialOrderInterval",
   "False",
   "HarderNarasimhan.impl.step_cond₂_of_stable._simp_1_1",
   "Subtype.mk",
   "lt_self_iff_false",
   "instLENat",
   "OrderTop.toTop",
   "HarderNarasimhan.Stable.toSemistable"],
  "name": "HarderNarasimhan.impl.step_cond₂_of_stable",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) [HarderNarasimhan.SlopeLike μ]\n  [sdc : HarderNarasimhan.StrongDescendingChainCondition' μ] (filtration : ℕ → ℒ) (fin_len : ∃ N, filtration N = ⊥)\n  (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i),\n  (∀ (i : ℕ) (hi : i < Nat.find fin_len),\n      HarderNarasimhan.Stable (HarderNarasimhan.Resμ ⟨(filtration (i + 1), filtration i), ⋯⟩ μ)) →\n    ∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n      z < filtration i → μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["PrimeSpectrum",
   "CommRing.toCommSemiring",
   "IsNoetherianRing",
   "Finset",
   "LinearExtension",
   "CommSemiring.toSemiring",
   "CommRing"],
  "name": "HarderNarasimhan.S₀",
  "constType":
  "(R : Type u_1) → [inst : CommRing R] → [IsNoetherianRing R] → Type u_1",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "IsScalarTower",
   "Module",
   "Membership.mem",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "Subtype.val",
   "Submodule",
   "SMul",
   "AddCommMonoid",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "DistribSMul.toSMulZeroClass",
   "SMul.mk",
   "SetLike.instMembership",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "AddZeroClass.toAddZero",
   "Module.toDistribMulAction",
   "Submodule.setLike",
   "HSMul.hSMul",
   "Submodule.smul._proof_1",
   "Subtype.mk",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "Submodule.smul",
  "constType":
  "{S : Type u'} →\n  {R : Type u} →\n    {M : Type v} →\n      [inst : Semiring R] →\n        [inst_1 : AddCommMonoid M] →\n          {module_M : _root_.Module R M} →\n            (p : Submodule R M) → [inst_2 : SMul S R] → [inst_3 : SMul S M] → [IsScalarTower S R M] → SMul S ↥p",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "Exists",
   "SetLike.instMembership",
   "RingHomSurjective",
   "SemilinearMapClass",
   "Module",
   "Submodule.map",
   "Membership.mem",
   "And",
   "DFunLike.coe",
   "Submodule",
   "Submodule.mem_map",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_7",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} [inst_6 : RingHomSurjective σ₁₂] {F : Type u_9} [inst_7 : FunLike F M M₂]\n  [inst_8 : SemilinearMapClass F σ₁₂ M M₂] {f : F} {p : Submodule R M} {x : M₂},\n  (x ∈ Submodule.map f p) = ∃ y ∈ p, f y = x",
  "constCategory": "Theorem"},
 {"references": ["Ideal", "Semiring"],
  "name": "Ideal.IsPrime",
  "constType": "{α : Type u} → [inst : Semiring α] → Ideal α → Prop",
  "constCategory": "Other"},
 {"references":
  ["Lean.mkAtom",
   "Lean.Name.mkStr4",
   "Lean.Syntax.node",
   "Lean.Name.mkStr1",
   "Array.push",
   "Lean.Syntax",
   "Array.empty",
   "Lean.SourceInfo.none"],
  "name": "SubNegMonoid.zsmul_neg'._autoParam",
  "constType": "Syntax",
  "constCategory": "Definition"},
 {"references": ["Preorder", "Subtype", "Preorder.lift", "Subtype.val"],
  "name": "Subtype.preorder",
  "constType":
  "{α : Type u_2} → [Preorder α] → (p : α → Prop) → Preorder (Subtype p)",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat",
   "instSubNat",
   "instOfNatNat",
   "HSub.hSub",
   "Ne",
   "Nat.pred_lt",
   "instHSub",
   "OfNat.ofNat"],
  "name": "Nat.sub_one_lt",
  "constType": "∀ {n : ℕ}, n ≠ 0 → n - 1 < n",
  "constCategory": "Theorem"},
 {"references":
  ["LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "associatedPrimes",
   "PartialOrder.toPreorder",
   "LinearMap.instFunLike",
   "Module",
   "Membership.mem",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Exists.intro",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "Submodule",
   "LinearMap.semilinearMapClass",
   "Semiring.toNonAssocSemiring",
   "Ideal",
   "RingHom.id",
   "exists_ne",
   "Zero.toOfNat0",
   "Preorder.toLE",
   "Semiring.toModule",
   "CommRing.toCommSemiring",
   "Set.Nonempty",
   "exists_le_isAssociatedPrime_of_isNoetherianRing",
   "LinearMap.ker",
   "Exists",
   "Set",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "And",
   "AddCommGroup",
   "LinearMap",
   "CommRing",
   "IsAssociatedPrime",
   "OfNat.ofNat",
   "Set.instMembership",
   "Exists.casesOn",
   "IsNoetherianRing",
   "AddCommGroup.toDivisionAddCommMonoid",
   "Nontrivial",
   "LE.le",
   "Submodule.completeLattice",
   "NegZeroClass.toZero",
   "AddCommGroup.toAddCommMonoid",
   "Ne",
   "And.casesOn"],
  "name": "associatedPrimes.nonempty",
  "constType":
  "∀ (R : Type u_1) [inst : CommRing R] (M : Type u_2) [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  [IsNoetherianRing R] [Nontrivial M], (associatedPrimes R M).Nonempty",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Eq.trans",
   "True",
   "instHAdd",
   "List",
   "Lean.Omega.IntList.get",
   "Lean.Omega.LinearCombo.coordinate",
   "OfNat.ofNat",
   "congrArg",
   "Int",
   "HAdd.hAdd",
   "eq_self",
   "Lean.Omega.LinearCombo.coordinate_eval",
   "Nat",
   "Lean.Omega.IntList.get_cons_succ",
   "of_eq_true",
   "Lean.Omega.Coeffs.ofList",
   "Lean.Omega.Coeffs.get",
   "instOfNatNat",
   "Lean.Omega.LinearCombo.eval",
   "Lean.Omega.IntList.get_cons_zero",
   "Eq",
   "List.cons"],
  "name": "Lean.Omega.LinearCombo.coordinate_eval_4",
  "constType":
  "∀ {a0 a1 a2 a3 a4 : ℤ} {t : List ℤ},\n  (Omega.LinearCombo.coordinate 4).eval (Omega.Coeffs.ofList (a0 :: a1 :: a2 :: a3 :: a4 :: t)) = a4",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Nat.find",
   "Subtype",
   "PartialOrder.toPreorder",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "instOfNatNat",
   "HarderNarasimhan.JordanHolderFiltration",
   "OrderBot.toBot",
   "CompleteLinearOrder",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "Exists",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "OfNat.ofNat",
   "Exists.casesOn",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "instLENat"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration.match_1_6",
  "constType":
  "∀ (n : ℕ) (ℒ : Type u_1) (ntl : Nontrivial ℒ) (l : Lattice ℒ) (bo : BoundedOrder ℒ) (S : Type u_2)\n  (clo : CompleteLinearOrder S) (μ : { p // p.1 < p.2 } → S) (motive : (∃ JH, Nat.find ⋯ ≤ n + 1) → Prop)\n  (h : ∃ JH, Nat.find ⋯ ≤ n + 1),\n  (∀ (JHy : HarderNarasimhan.JordanHolderFiltration μ) (hJHy : Nat.find ⋯ ≤ n + 1), motive ⋯) → motive h",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "le_refl",
   "Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "OmegaCompletePartialOrder.toPartialOrder",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.ConvexI.mk",
   "Prod.fst",
   "congrArg",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "HarderNarasimhan.Convex",
   "HarderNarasimhan.Affine",
   "Preorder.toLE",
   "Eq",
   "propext",
   "inf_lt_left",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.Affine.affine",
   "Not",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "id",
   "Eq.mpr",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instConvexOfAffine",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} [haff : HarderNarasimhan.Affine μ],\n  HarderNarasimhan.Convex μ",
  "constCategory": "Theorem"},
 {"references": ["Nat", "Fin"],
  "name": "Fin.val",
  "constType": "{n : ℕ} → Fin n → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Ring.intCast_ofNat",
   "Ring.toNeg",
   "Semiring.natCast_succ",
   "Ring.toSub",
   "Semiring.toOne",
   "Ring.zsmul",
   "AddGroupWithOne.mk",
   "Ring.zsmul_succ'",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "AddGroupWithOne",
   "AddCommMonoid.toAddMonoid",
   "Ring.neg_add_cancel",
   "Ring.zsmul_neg'",
   "AddMonoidWithOne.mk",
   "Ring.intCast_negSucc",
   "Ring.toSemiring",
   "Ring.zsmul_zero'",
   "Ring.sub_eq_add_neg",
   "Ring.toIntCast",
   "Semiring.toNatCast",
   "Semiring.natCast_zero",
   "NonUnitalSemiring.toNonUnitalNonAssocSemiring",
   "Semiring.toNonUnitalSemiring",
   "Ring"],
  "name": "Ring.toAddGroupWithOne",
  "constType": "{R : Type u} → [self : Ring R] → AddGroupWithOne R",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁.wsl₁",
   "Subtype",
   "PartialOrder.toPreorder",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "And.intro",
   "HarderNarasimhan.μmin",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "HarderNarasimhan.WeakAscendingChainCondition.wacc",
   "HarderNarasimhan.WeakSlopeLike₁",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.impl.prop4d1₁",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "HarderNarasimhan.impl.prop4d1₂",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "LE.le",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_4_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.WeakAscendingChainCondition μ →\n    HarderNarasimhan.WeakSlopeLike₁ μ →\n      HarderNarasimhan.μAstar μ = HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl ∧\n        HarderNarasimhan.μAstar μ ≤ HarderNarasimhan.μBstar μ",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Or",
   "Subtype.prop",
   "PartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.WeakSlopeLike₂.mk",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.WeakSlopeLike₂",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₂.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (z : { p // p.1 < p.2 }) (hz : ⊥ < (↑z).1), μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ z ∨ μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ ⟨(⊥, (↑z).1), hz⟩) →\n    HarderNarasimhan.WeakSlopeLike₂ μ",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.ConvexI.convex",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "HarderNarasimhan.ConvexI.mk",
   "Subtype.val",
   "HarderNarasimhan.Resμ",
   "Iff.intro",
   "congrArg",
   "Prod.fst",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "Subtype.prop",
   "Eq.symm",
   "HarderNarasimhan.Convex",
   "HarderNarasimhan.Interval",
   "Eq",
   "Preorder.toLE",
   "propext",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Lattice.toSemilatticeInf",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "HarderNarasimhan.instBoundedOrderInterval",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.instNontrivialInterval",
   "HarderNarasimhan.InIntvl",
   "Iff",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "id",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.ConvexI_iff_Convex_res",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ ↔ HarderNarasimhan.Convex (HarderNarasimhan.Resμ I μ)",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "LE.le",
   "Lattice",
   "SemilatticeSup.toMax",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Convex.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] {S : Type u_2} [inst_1 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x y : ℒ) (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩) → HarderNarasimhan.Convex μ",
  "constCategory": "Other"},
 {"references": ["LE.le", "LE", "ge_iff_le", "Eq", "GE.ge", "propext"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_28",
  "constType": "∀ {α : Type u_1} [inst : LE α] {x y : α}, (x ≥ y) = (y ≤ x)",
  "constCategory": "Theorem"},
 {"references":
  ["Unique",
   "Subsingleton",
   "Unique.eq_default",
   "subsingleton_of_forall_eq",
   "Unique.instInhabited",
   "Inhabited.default"],
  "name": "Unique.instSubsingleton",
  "constType": "∀ {α : Sort u_1} [Unique α], Subsingleton α",
  "constCategory": "Theorem"},
 {"references":
  ["IsStrictOrderedRing.toCharZero",
   "PartialOrder.toPreorder",
   "IsStrictOrderedRing",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Preorder.toLT",
   "zero_lt_one",
   "OfNat.ofNat",
   "LT.lt",
   "Semiring.toNonAssocSemiring",
   "One.toOfNat1",
   "MulZeroClass.toZero",
   "PartialOrder",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "AddMonoidWithOne.toOne",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "NeZero.charZero_one",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "Semiring",
   "IsStrictOrderedRing.toZeroLEOneClass"],
  "name": "Mathlib.Tactic.Linarith.zero_lt_one",
  "constType":
  "∀ {α : Type u} [inst : Semiring α] [inst_1 : PartialOrder α] [IsStrictOrderedRing α], 0 < 1",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "Nat.casesOn",
   "Nat.succ",
   "instOfNatNat",
   "Unit.unit",
   "OfNat.ofNat",
   "Unit"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq.match_1",
  "constType":
  "(motive : ℕ → Sort u_1) → (k : ℕ) → (Unit → motive 0) → ((k : ℕ) → motive k.succ) → motive k",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.mk._flat_ctor",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              (filtration : ℕ → ℒ) →\n                Antitone filtration →\n                  (fin_len : ∃ N, filtration N = ⊥) →\n                    (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i) →\n                      filtration 0 = ⊤ →\n                        (∀ (k : ℕ) (hk : k < Nat.find fin_len),\n                            μ ⟨(filtration (k + 1), filtration k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩) →\n                          (∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n                              z < filtration i →\n                                μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩) →\n                            HarderNarasimhan.JordanHolderFiltration μ",
  "constCategory": "Definition"},
 {"references": ["AddSemigroup", "Add"],
  "name": "AddSemigroup.toAdd",
  "constType": "{G : Type u} → [self : AddSemigroup G] → Add G",
  "constCategory": "Definition"},
 {"references":
  ["MulOneClass.toMulOne",
   "Submonoid",
   "Submonoid.instSetLike._proof_1",
   "Subsemigroup.carrier",
   "SetLike.mk",
   "MulOne.toMul",
   "MulOneClass",
   "SetLike",
   "Submonoid.toSubsemigroup"],
  "name": "Submonoid.instSetLike",
  "constType":
  "{M : Type u_1} → [inst : MulOneClass M] → SetLike (Submonoid M) M",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Set",
   "Membership.mem",
   "Preorder.toLT",
   "HarderNarasimhan.St",
   "BoundedOrder",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "HarderNarasimhan.impl.rmk3d5",
   "Set.instMembership",
   "Prod.fst",
   "CompletelyDistribLattice.toCompleteLattice",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "WellFoundedGT",
   "CompleteLinearOrder",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.remark_3_5",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S),\n  ∀ x ∈ HarderNarasimhan.St μ, ∀ y ∈ HarderNarasimhan.St μ, x = y",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.neg_mem",
   "Submodule.toAddSubmonoid",
   "Module",
   "AddCommGroup.toAddGroup",
   "AddCommGroup",
   "AddCommMonoid.toAddMonoid",
   "AddSubgroup.mk",
   "Ring.toSemiring",
   "Submodule",
   "AddSubgroup",
   "AddSubmonoid",
   "AddCommGroup.toAddCommMonoid",
   "Ring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.toAddSubgroup",
  "constType":
  "{R : Type u} →\n  {M : Type v} →\n    [inst : Ring R] → [inst_1 : AddCommGroup M] → {module_M : _root_.Module R M} → Submodule R M → AddSubgroup M",
  "constCategory": "Definition"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "Submodule.Quotient.mk",
   "Submodule.hasQuotient",
   "Eq.trans",
   "HasQuotient.Quotient",
   "Eq.mp",
   "Module",
   "AddCommGroup.toAddGroup",
   "Membership.mem",
   "Submodule.Quotient.instZeroQuotient",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "SubtractionMonoid.toInvolutiveNeg",
   "congrArg",
   "Submodule",
   "Submodule.addSubgroupClass",
   "AddCommSemigroup.toAddCommMagma",
   "Zero.toOfNat0",
   "AddCommMagma.toAdd",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "SetLike.instMembership",
   "AddSubgroupClass.toNegMemClass",
   "Neg.neg",
   "instHAdd",
   "AddCommGroup",
   "add_zero",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "Ring.toSemiring",
   "HAdd.hAdd",
   "NegZeroClass.toNeg",
   "SubNegMonoid.toAddMonoid",
   "AddCommMonoid.toAddCommSemigroup",
   "AddCommGroup.toDivisionAddCommMonoid",
   "Submodule.setLike",
   "Iff",
   "AddCommGroup.toAddCommMonoid",
   "NegZeroClass.toZero",
   "Submodule.Quotient.eq'",
   "AddZero.toZero",
   "inv_mem_iff._simp_4",
   "AddMonoid.toAddZeroClass",
   "Ring"],
  "name": "Submodule.Quotient.mk_eq_zero",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} {x : M} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M), Submodule.Quotient.mk x = 0 ↔ x ∈ p",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "not_strictMono_of_wellFoundedGT",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "Nat.instPreorder",
   "HarderNarasimhan.WeakAscendingChainCondition.mk",
   "False.elim",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "PartialOrder",
   "WellFoundedGT",
   "Preorder.toLE",
   "le_top",
   "Exists",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "StrictMono"],
  "name": "HarderNarasimhan.instWeakAscendingChainConditionOfWellFoundedGT",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  HarderNarasimhan.WeakAscendingChainCondition μ",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.Quotient.mk",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Ideal.IsPrime",
   "Prod.mk",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "And.intro",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "Eq.symm",
   "Semiring.toModule",
   "And.left",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "And.right",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "And",
   "Prod.snd",
   "LinearMap",
   "Submodule.Quotient.mk_eq_zero",
   "Ring.toSemiring",
   "Set.instMembership",
   "Exists.casesOn",
   "Prod",
   "HasSubset.Subset",
   "Iff.of_eq",
   "Eq.refl",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "id",
   "Eq.mpr",
   "Quotient.out",
   "setOf",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HarderNarasimhan._μ._proof_1",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Submodule.Quotient.instZeroQuotient",
   "and_true",
   "congrArg",
   "Submodule",
   "Prod.fst",
   "Submodule.Quotient.addCommGroup",
   "Subtype.prop",
   "Ideal",
   "HarderNarasimhan.impl.annihilator_lift",
   "Zero.toOfNat0",
   "HarderNarasimhan._μ",
   "Eq",
   "Preorder.toLE",
   "propext",
   "CommRing.toCommSemiring",
   "True",
   "LinearExtension",
   "Set",
   "Submodule.quotientRel",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "CommRing",
   "OfNat.ofNat",
   "exists_prop_congr",
   "lt_of_lt_of_le",
   "Set.instHasSubset",
   "PrimeSpectrum",
   "LT.lt",
   "eq_self",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.impl._μ_mono_right._simp_1_1",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Subtype.mk",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl._μ_mono_right",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] {N₁ u N₃ : Submodule R M}\n  (h₁ : N₁ < u) (h₂ : u ≤ N₃), HarderNarasimhan._μ R M ⟨(N₁, u), h₁⟩ ⊆ HarderNarasimhan._μ R M ⟨(N₁, N₃), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["HAdd.hAdd",
   "AddRightMono",
   "instHAdd",
   "Add",
   "LE.le",
   "LE",
   "Eq",
   "add_le_add_iff_right",
   "propext",
   "AddRightReflectLE"],
  "name": "HarderNarasimhan.impl.subseq_prop0'._simp_1_7",
  "constType":
  "∀ {α : Type u_1} [inst : Add α] [inst_1 : LE α] [AddRightMono α] [AddRightReflectLE α] (a : α) {b c : α},\n  (b + a ≤ c + a) = (b ≤ c)",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Or",
   "Iff",
   "Decidable.or_iff_not_imp_left",
   "Classical.propDecidable"],
  "name": "Classical.or_iff_not_imp_left",
  "constType": "∀ {a b : Prop}, a ∨ b ↔ ¬a → b",
  "constCategory": "Theorem"},
 {"references": ["Decidable", "ite", "Eq", "propext", "ite_eq_right_iff"],
  "name": "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_4",
  "constType":
  "∀ {α : Sort u_1} {p : Prop} [inst : Decidable p] {x y : α}, ((if p then x else y) = y) = (p → x = y)",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "le_sup_left",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Max.max",
   "SemilatticeSup.toMax",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.instLatticeInterval._proof_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (x x_1 : HarderNarasimhan.Interval z), ↑x ≤ ↑x ⊔ ↑x_1",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "LE.le",
   "Preorder.toLT",
   "Ne",
   "lt_of_le_of_ne",
   "Preorder.toLE",
   "flip"],
  "name": "Ne.lt_of_le",
  "constType":
  "∀ {α : Type u_2} [inst : PartialOrder α] {a b : α}, a ≠ b → a ≤ b → a < b",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Not",
   "instLTNat",
   "Nat",
   "Nat.lt_or_ge",
   "LE.le",
   "Or.resolve_right",
   "GE.ge",
   "instLENat"],
  "name": "Nat.lt_of_not_le",
  "constType": "∀ {a b : ℕ}, ¬a ≤ b → b < a",
  "constCategory": "Theorem"},
 {"references": ["Zero", "NegZeroClass"],
  "name": "NegZeroClass.toZero",
  "constType": "{G : Type u_2} → [self : NegZeroClass G] → Zero G",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Membership.mem",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Membership.mem.out",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_8",
   "Subtype.val",
   "Prod.fst",
   "Nat.instPreorder",
   "Subtype.prop",
   "Or",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "PartialOrder",
   "Preorder.toLE",
   "Not",
   "Set.Nonempty",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_1",
   "Exists",
   "Exists.choose_spec",
   "Set",
   "instHAdd",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_2",
   "BoundedOrder",
   "HarderNarasimhan.impl.prop4d1₁_seq",
   "Prod.snd",
   "Exists.choose",
   "OfNat.ofNat",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_3",
   "CompleteLattice",
   "setOf",
   "StrictMono"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._proof_9",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  (h₁ : ∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩)\n  (h₂ :\n    ∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤), μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩)\n  (h₃ : {YA | ∃ (h : YA < ⊤), ∀ xA < ⊤, ∃ xB, ∃ (hAB : xA < xB), ¬μ ⟨(xA, xB), hAB⟩ ≤ μ ⟨(YA, ⊤), h⟩}.Nonempty) (k : ℕ),\n  ∃ xB,\n    ∃ (hAB : ↑(HarderNarasimhan.impl.prop4d1₁_seq μ h₁ h₂ h₃ k) < xB),\n      ¬μ ⟨(↑(HarderNarasimhan.impl.prop4d1₁_seq μ h₁ h₂ h₃ k), xB), hAB⟩ ≤\n          μ ⟨(↑(HarderNarasimhan.impl.prop4d1₁_seq μ h₁ h₂ h₃ k), ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["not_le",
   "LT.lt",
   "Not",
   "LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Eq",
   "Preorder.toLE",
   "propext"],
  "name": "HarderNarasimhan.impl.theorem3d10._simp_1_8",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, (¬a ≤ b) = (b < a)",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteDistribLattice.toHNot",
   "CompleteDistribLattice.toFrame",
   "Order.Frame.toCompleteLattice",
   "Order.Coframe",
   "CompleteDistribLattice.toSDiff",
   "CompleteDistribLattice.sdiff_le_iff",
   "CompleteDistribLattice.top_sdiff",
   "Order.Coframe.mk",
   "CompleteDistribLattice"],
  "name": "CompleteDistribLattice.toCoframe",
  "constType":
  "{α : Type u_1} → [self : CompleteDistribLattice α] → Order.Coframe α",
  "constCategory": "Definition"},
 {"references": ["Eq.symm", "Eq.rec", "Eq"],
  "name": "Eq.substr",
  "constType": "∀ {α : Sort u} {p : α → Prop} {a b : α}, b = a → p a → p b",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.impl.subseq",
   "Eq.symm",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "of_eq_false",
   "BoundedOrder",
   "Bot.bot",
   "Nat.find_spec",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "eq_false",
   "Nontrivial",
   "Lattice",
   "id",
   "Eq.mpr",
   "Nat.find",
   "le_trans",
   "Nat.instPreorder",
   "congrArg",
   "le_rfl",
   "HarderNarasimhan.impl.subseq_prop2._simp_1_5",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "congr",
   "OrderBot.toBot",
   "dite_cond_eq_false",
   "Preorder.toLE",
   "Eq",
   "Not",
   "Nat.le_induction",
   "Lattice.toSemilatticeInf",
   "le_top",
   "True",
   "instHAdd",
   "HarderNarasimhan.impl.subseq._proof_2",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "eq_self",
   "of_eq_true",
   "dite_cond_eq_true",
   "le_of_lt",
   "LE.le",
   "instDecidableEqNat",
   "dite",
   "instLENat"],
  "name": "HarderNarasimhan.impl.subseq_prop2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f : ℕ → ℒ) (atf : ∃ k, f k = ⊥),\n  Antitone (HarderNarasimhan.impl.subseq f atf)",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Subtype",
  "constType": "{α : Sort u} → (α → Prop) → Sort (max 1 u)",
  "constCategory": "Other"},
 {"references": ["and_imp", "And", "Eq", "propext"],
  "name": "and_imp._simp_1",
  "constType": "∀ {a b c : Prop}, (a ∧ b → c) = (a → b → c)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.JordanHolderFiltration.rec",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.JordanHolderFiltration μ → Sort u} →\n                (t : HarderNarasimhan.JordanHolderFiltration μ) →\n                  ((filtration : ℕ → ℒ) →\n                      (antitone : Antitone filtration) →\n                        (fin_len : ∃ N, filtration N = ⊥) →\n                          (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i) →\n                            (first_eq_top : filtration 0 = ⊤) →\n                              (step_cond₁ :\n                                  ∀ (k : ℕ) (hk : k < Nat.find fin_len),\n                                    μ ⟨(filtration (k + 1), filtration k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩) →\n                                (step_cond₂ :\n                                    ∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n                                      z < filtration i →\n                                        μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩) →\n                                  motive\n                                    { filtration := filtration, antitone := antitone, fin_len := fin_len,\n                                      strict_anti := strict_anti, first_eq_top := first_eq_top,\n                                      step_cond₁ := step_cond₁, step_cond₂ := step_cond₂ }) →\n                    motive t",
  "constCategory": "Definition"},
 {"references": ["SetRel"],
  "name": "RelSeries",
  "constType": "{α : Type u_1} → SetRel α α → Type u_1",
  "constCategory": "Other"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "Ring.toNonAssocRing",
   "Eq.trans",
   "HMul.hMul",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "mul_neg",
   "MonoidWithZero.toMonoid",
   "NonUnitalNonAssocRing.toHasDistribNeg",
   "InvolutiveNeg.toNeg",
   "Eq.ndrec",
   "Eq",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "instHPow",
   "True",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Neg.neg",
   "Distrib.toMul",
   "Semiring.toMonoidWithZero",
   "HPow.hPow",
   "Ring.toSemiring",
   "Ring.toAddCommGroup",
   "eq_self",
   "Nat",
   "NegZeroClass.toNeg",
   "HasDistribNeg.toInvolutiveNeg",
   "AddCommGroup.toDivisionAddCommMonoid",
   "Monoid.toNatPow",
   "of_eq_true",
   "instHMul",
   "Ring"],
  "name": "Mathlib.Tactic.Ring.neg_mul",
  "constType":
  "∀ {R : Type u_2} [inst : Ring R] (a₁ : R) (a₂ : ℕ) {a₃ b : R}, -a₃ = b → -(a₁ ^ a₂ * a₃) = a₁ ^ a₂ * b",
  "constCategory": "Theorem"},
 {"references": ["SubNegMonoid", "SubNegZeroMonoid"],
  "name": "SubNegZeroMonoid.toSubNegMonoid",
  "constType": "{G : Type u_2} → [self : SubNegZeroMonoid G] → SubNegMonoid G",
  "constCategory": "Definition"},
 {"references": ["EmptyCollection.mk", "Set", "False", "EmptyCollection"],
  "name": "Set.instEmptyCollection",
  "constType": "{α : Type u} → EmptyCollection (Set α)",
  "constCategory": "Definition"},
 {"references":
  ["Set", "Iff", "Membership.mem", "Iff.rfl", "setOf", "Set.instMembership"],
  "name": "Set.mem_setOf",
  "constType": "∀ {α : Type u} {a : α} {p : α → Prop}, a ∈ {x | p x} ↔ p a",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "Eq.trans",
   "LinearMap.instFunLike",
   "Eq.mp",
   "Module",
   "Submodule.module",
   "Membership.mem",
   "Submodule.map",
   "HarderNarasimhan.impl.Submodule.mem_map_subtype_iff._simp_1_4",
   "Subtype.val",
   "DFunLike.coe",
   "congrArg",
   "Submodule",
   "Submodule.subtype",
   "LinearMap.semilinearMapClass",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "funext",
   "Eq",
   "propext",
   "HarderNarasimhan.impl.Submodule.mem_map_subtype_iff._simp_1_1",
   "CommRing.toCommSemiring",
   "Exists",
   "SetLike.instMembership",
   "HarderNarasimhan.impl.Submodule.mem_map_subtype_iff._simp_1_2",
   "CommSemiring.toSemiring",
   "And",
   "AddCommGroup",
   "HarderNarasimhan.impl.Submodule.mem_map_subtype_iff._simp_1_3",
   "CommRing",
   "LinearMap",
   "exists_prop_congr",
   "RingHomSurjective.ids",
   "Exists.casesOn",
   "Iff.of_eq",
   "Submodule.setLike",
   "Eq.refl",
   "Iff.mpr",
   "AddCommGroup.toAddCommMonoid",
   "Subtype.mk",
   "Submodule.addCommMonoid"],
  "name": "HarderNarasimhan.impl.Submodule.mem_map_subtype_iff",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (N : Submodule R M) (N' : Submodule R ↥N) (x : M) (hx1 : x ∈ N), x ∈ Submodule.map N.subtype N' → ⟨x, hx1⟩ ∈ N'",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_32",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.impl.lift_quot_not_bot._simp_1_1",
   "Submodule.Quotient.mk",
   "HarderNarasimhan.impl.lift_quot_not_bot._simp_1_3",
   "Eq.trans",
   "Submodule.Quotient.module",
   "Submodule.map",
   "Membership.mem",
   "Quotient.mk",
   "Membership",
   "Subtype.val",
   "HarderNarasimhan.impl.lift_quot_not_bot._simp_1_2",
   "Submodule.subtype",
   "HarderNarasimhan.impl.lift_quot_not_bot._simp_1_4",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "eq_of_heq",
   "funext",
   "Eq.symm",
   "Eq.ndrec",
   "Submodule.eq_bot_iff",
   "SetLike.instMembership",
   "Exists",
   "outParam",
   "Submodule.addCommGroup",
   "And",
   "AddZeroClass.toAddZero",
   "LinearMap",
   "Submodule.Quotient.mk_eq_zero",
   "Bot.bot",
   "Ring.toSemiring",
   "Exists.casesOn",
   "Submodule.comap",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "Submodule.instBot",
   "HEq",
   "id",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "HarderNarasimhan.impl.lift_quot._proof_1",
   "AddZero.toZero",
   "Submodule.submoduleOf",
   "AddMonoid.toAddZeroClass",
   "Quotient",
   "Submodule.hasQuotient",
   "Subtype",
   "HasQuotient.Quotient",
   "LinearMap.instFunLike",
   "Module",
   "Submodule.module",
   "Submodule.Quotient.instZeroQuotient",
   "AddCommMonoid.toAddMonoid",
   "DFunLike.coe",
   "congrArg",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "congr",
   "Quotient.exists_rep",
   "Zero.toOfNat0",
   "HarderNarasimhan.impl.lift_quot._proof_3",
   "Eq",
   "Submodule.mkQ",
   "CommRing.toCommSemiring",
   "HEq.refl",
   "CommSemiring.toSemiring",
   "Submodule.quotientRel",
   "HarderNarasimhan.impl.lift_quot._proof_2",
   "AddCommGroup",
   "CommRing",
   "Eq.casesOn",
   "OfNat.ofNat",
   "CommRing.toRing",
   "IsNoetherianRing",
   "Submodule.setLike",
   "HarderNarasimhan.impl.lift_quot",
   "Ne",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.lift_quot_not_bot",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (N₁ N₂ : Submodule R M)\n  (x : Submodule R (↥N₂ ⧸ N₁.submoduleOf N₂)), x ≠ ⊥ → HarderNarasimhan.impl.lift_quot N₁ N₂ x ≠ N₁",
  "constCategory": "Theorem"},
 {"references": ["OfNat", "OfNat.mk", "Zero", "Zero.zero"],
  "name": "Zero.toOfNat0",
  "constType": "{α : Type u_1} → [Zero α] → OfNat α 0",
  "constCategory": "Definition"},
 {"references":
  ["Finset.instSingleton",
   "Finset",
   "Finset.singleton_inj",
   "Singleton.singleton",
   "Eq",
   "propext"],
  "name": "HarderNarasimhan.impl.rmk4d14₁._simp_1_2",
  "constType": "∀ {α : Type u_1} {a b : α}, ({a} = {b}) = (a = b)",
  "constCategory": "Theorem"},
 {"references": ["Eq.refl", "Eq.symm", "Eq.ndrec", "Eq"],
  "name": "Mathlib.Tactic.Ring.of_eq",
  "constType": "∀ {α : Sort u_2} {a b c : α}, a = c → b = c → a = b",
  "constCategory": "Theorem"},
 {"references": ["DecidableLE", "ite", "LE.mk", "id"],
  "name":
  "HarderNarasimhan.TotallyOrderedRealVectorSpace.max._inherited_default",
  "constType":
  "{V : Type u_1} → (le : V → V → Prop) → DecidableLE V → V → V → V",
  "constCategory": "Definition"},
 {"references":
  ["instLTNat",
   "_auto._@.Mathlib.Data.List.TFAE.4142160432._hygCtx._hyg.21",
   "List",
   "Option.some",
   "List.instGetElem?NatLtLength",
   "_auto._@.Mathlib.Data.List.TFAE.4142160432._hygCtx._hyg.9",
   "LT.lt",
   "GetElem?.getElem?",
   "Nat",
   "Iff",
   "Option",
   "List.mem_of_getElem?",
   "List.TFAE",
   "autoParam",
   "Eq",
   "List.length"],
  "name": "List.TFAE.out",
  "constType":
  "∀ {l : List Prop},\n  l.TFAE →\n    ∀ (n₁ n₂ : ℕ) {a b : Prop}, autoParam (l[n₁]? = some a) _auto✝ → autoParam (l[n₂]? = some b) _auto✝¹ → (a ↔ b)",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "LocalizedModule",
   "Set",
   "Module",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "CommRing",
   "PrimeSpectrum",
   "Module.support._proof_1",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Ideal.primeCompl",
   "PrimeSpectrum.asIdeal",
   "setOf"],
  "name": "Module.support",
  "constType":
  "(R : Type u_1) →\n  (M : Type u_2) → [inst : CommRing R] → [inst_1 : AddCommGroup M] → [_root_.Module R M] → Set (PrimeSpectrum R)",
  "constCategory": "Definition"},
 {"references":
  ["AddMonoid.toZero",
   "Semiring.mul_one",
   "NonUnitalNonAssocSemiring.toMul",
   "Semiring.toOne",
   "NonUnitalNonAssocSemiring.zero_mul",
   "NonUnitalNonAssocSemiring.mul_zero",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "AddCommMonoid.toAddMonoid",
   "MonoidWithZero",
   "Semiring.one_mul",
   "Semiring.npow_succ",
   "MonoidWithZero.mk",
   "Semigroup.mk",
   "NonUnitalSemiring.toNonUnitalNonAssocSemiring",
   "Monoid.mk",
   "Semiring.npow",
   "Semiring.npow_zero",
   "Semiring.toNonUnitalSemiring",
   "Semiring",
   "NonUnitalSemiring.mul_assoc"],
  "name": "Semiring.toMonoidWithZero",
  "constType": "{α : Type u} → [self : Semiring α] → MonoidWithZero α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "instHAdd",
   "OfNat.ofNat",
   "AddMonoid.mk",
   "HAdd.hAdd",
   "SubNegMonoid.sub'",
   "Nat",
   "Zero.mk",
   "instOfNatNat",
   "id",
   "Add.mk",
   "Zero.toOfNat0",
   "Eq",
   "Neg.mk",
   "AddSemigroup.mk"],
  "name":
  "HarderNarasimhan.TotallyOrderedRealVectorSpace.sub._inherited_default",
  "constType":
  "{V : Type u_1} →\n  (add : V → V → V) →\n    (∀ (a b c : V), a + b + c = a + (b + c)) →\n      (zero : V) →\n        (∀ (a : V), 0 + a = a) →\n          (∀ (a : V), a + 0 = a) →\n            (nsmul : ℕ → V → V) →\n              (∀ (x : V), nsmul 0 x = 0) → (∀ (n : ℕ) (x : V), nsmul (n + 1) x = nsmul n x + x) → (V → V) → V → V → V",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "instAddNat",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "le_trans",
   "Iff.mp",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "HarderNarasimhan.impl.HNlen",
   "Nat.instPreorder",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "WellFoundedGT",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Nat.le_induction",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "instHAdd",
   "Nat.add_one_le_iff",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "HarderNarasimhan.impl.HNFil_ne_top_iff_lt_len",
   "OfNat.ofNat",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Nat.le_succ",
   "HarderNarasimhan.impl.HNFil_is_strict_mono",
   "Nat.succ",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Ne",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil_is_strict_mono'",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (i j : ℕ),\n  i < j → j ≤ HarderNarasimhan.impl.HNlen μ → HarderNarasimhan.impl.HNFil μ i < HarderNarasimhan.impl.HNFil μ j",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Membership.mem",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Membership.mem.out",
   "Subtype.val",
   "Set.Elem",
   "Prod.fst",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "Preorder.toLE",
   "Not",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_5",
   "Exists",
   "Exists.choose_spec",
   "Set",
   "BoundedOrder",
   "Prod.snd",
   "Exists.choose",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "Nat",
   "Nat.succ",
   "Nat.below",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._proof_6",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] [inst_1 : BoundedOrder ℒ] {S : Type u_2} [inst_2 : CompleteLattice S]\n  (μ : { p // p.1 < p.2 } → S) (k : ℕ) (x : Nat.below k.succ),\n  ∃ xB, ∃ (hAB : ↑x.1 < xB), ¬μ ⟨(↑x.1, xB), hAB⟩ ≤ μ ⟨(↑x.1, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["IsNoetherian",
   "Semiring.toNonAssocSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Semiring.toModule",
   "Semiring"],
  "name": "IsNoetherianRing",
  "constType": "(R : Type u_1) → [Semiring R] → Prop",
  "constCategory": "Definition"},
 {"references":
  ["Set.Nonempty",
   "Set",
   "Set.not_nonempty_empty",
   "eq_false",
   "False",
   "Eq",
   "Set.instEmptyCollection",
   "EmptyCollection.emptyCollection"],
  "name":
  "HarderNarasimhan.instNonemptyJordanHolderFiltrationOfWellFoundedGTOfFiniteTotalPayoffOfSlopeLikeOfSemistableOfStrongDescendingChainCondition'._simp_3",
  "constType": "∀ {α : Type u}, ∅.Nonempty = False",
  "constCategory": "Theorem"},
 {"references":
  ["Set.Nonempty",
   "Set",
   "Set.not_nonempty_empty",
   "eq_false",
   "False",
   "Eq",
   "Set.instEmptyCollection",
   "EmptyCollection.emptyCollection"],
  "name": "HarderNarasimhan.impl.JHFil_prop₂._simp_1_11",
  "constType": "∀ {α : Type u}, ∅.Nonempty = False",
  "constCategory": "Theorem"},
 {"references":
  ["le_top",
   "PartialOrder.toPreorder",
   "Iff",
   "PartialOrder",
   "LE.le",
   "Top.top",
   "OrderTop",
   "LE.le.ge_iff_eq",
   "Eq",
   "Preorder.toLE",
   "OrderTop.toTop"],
  "name": "top_le_iff",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderTop α] {a : α}, ⊤ ≤ a ↔ a = ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "FunLike",
   "SetLike.instMembership",
   "SemilinearMapClass",
   "Submodule.mem_comap",
   "Module",
   "Membership.mem",
   "DFunLike.coe",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.comap",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.annihilator_lift._simp_1_3",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} {x : M} {F : Type u_9} [inst_6 : FunLike F M M₂] [inst_7 : SemilinearMapClass F σ₁₂ M M₂] {f : F}\n  {p : Submodule R₂ M₂}, (x ∈ Submodule.comap f p) = (f x ∈ p)",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "SemilinearMapClass.instAddMonoidHomClass",
   "DistribMulActionSemiHomClass.mk",
   "SemilinearMapClass",
   "Module",
   "AddMonoidHomClass.mk",
   "RingHom.instFunLike",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "DFunLike.coe",
   "congrArg",
   "AddCommMonoid",
   "DistribMulActionSemiHomClass",
   "Semiring.toNonAssocSemiring",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Eq",
   "AddHomClass",
   "DistribSMul.toSMulZeroClass",
   "FunLike",
   "SemilinearMapClass.toMulActionSemiHomClass",
   "outParam",
   "AddMonoidHomClass.toZeroHomClass",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "SemilinearMapClass.toAddHomClass",
   "AddZeroClass.toAddZero",
   "MulActionSemiHomClass.map_smulₛₗ",
   "Module.toDistribMulAction",
   "AddCommMonoid.toAddCommSemigroup",
   "Eq.refl",
   "MulActionSemiHomClass.mk",
   "HSMul.hSMul",
   "id",
   "Eq.mpr",
   "AddZero.toZero",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "SemilinearMapClass.distribMulActionSemiHomClass",
  "constType":
  "∀ {R : Type u_1} {S : Type u_5} {M : Type u_8} {M₃ : Type u_11} (F : Type u_14) [inst : Semiring R]\n  [inst_1 : Semiring S] [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₃] [inst_4 : _root_.Module R M]\n  [inst_5 : _root_.Module S M₃] {σ : R →+* S} [inst_6 : FunLike F M M₃] [SemilinearMapClass F σ M M₃],\n  DistribMulActionSemiHomClass F (⇑σ) M M₃",
  "constCategory": "Theorem"},
 {"references":
  ["absurd",
   "Not",
   "Decidable.isFalse",
   "Decidable",
   "False",
   "instDecidableAnd.match_1",
   "Decidable.isTrue"],
  "name": "instDecidableNot",
  "constType": "{p : Prop} → [dp : Decidable p] → Decidable ¬p",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Not",
   "LinearOrder.toPartialOrder",
   "not_lt",
   "PartialOrder.toPreorder",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Eq",
   "Preorder.toLE",
   "propext"],
  "name": "not_lt._simp_1",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, (¬a < b) = (b ≤ a)",
  "constCategory": "Theorem"},
 {"references":
  ["Finset",
   "HEq.refl",
   "Set",
   "Lean.Meta.FastSubsingleton.elim",
   "Set.toFinset",
   "Fintype",
   "Fintype.instFastSubsingleton",
   "Eq.casesOn",
   "Set.Elem",
   "Eq.refl",
   "eq_of_heq",
   "HEq",
   "Eq.symm",
   "Eq",
   "Eq.ndrec"],
  "name": "Set.toFinset_congr",
  "constType":
  "∀ {α : Type u_1} {s t : Set α} [inst : Fintype ↑s] [inst_1 : Fintype ↑t], s = t → s.toFinset = t.toFinset",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HarderNarasimhan.SlopeLike",
   "Eq.trans",
   "Classical.propDecidable",
   "Exists.intro",
   "List.instGetElem?NatLtLength",
   "Subtype.val",
   "Subtype.coe_inj",
   "GetElem?.getElem?",
   "HarderNarasimhan.NashEquilibrium",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "Eq.ndrec",
   "instLTNat",
   "Exists",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "HarderNarasimhan.impl.semistable_of_step_cond₂._simp_1_2",
   "Set.instMembership",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Nat.instStarOrderedRing",
   "Eq.refl",
   "Lattice",
   "Top.top",
   "Eq.mpr",
   "HarderNarasimhan.instWellFoundedGTInterval",
   "setOf",
   "AddMonoid.toAddZeroClass",
   "HarderNarasimhan.Semistable",
   "Nat.find",
   "HarderNarasimhan.impl.thm4d21",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.instSlopeLikeIntervalResμ",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "List",
   "and_true",
   "HarderNarasimhan.Resμ",
   "HarderNarasimhan.instStrongDescendingChainConditionOfStrongDescendingChainCondition'",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "instOfNatNat",
   "congr",
   "WellFoundedGT",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Nat.instAddMonoid",
   "Set",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "HarderNarasimhan.seesaw'",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "eq_self",
   "HarderNarasimhan.μA._proof_1",
   "inferInstance",
   "Ne",
   "eq_of_le_of_ge",
   "dite",
   "CompleteLattice.toCompleteSemilatticeInf",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "lt_trans",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Membership.mem",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "Iff.mp",
   "HarderNarasimhan.impl.semistable_of_step_cond₂._simp_1_1",
   "GT.gt",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.μmax",
   "And.intro",
   "not_false_eq_true",
   "funext",
   "List.TFAE",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Eq.rec",
   "Nat.instIsOrderedAddMonoid",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "Nat.instPartialOrder",
   "HarderNarasimhan.instStrongDescendingChainCondition'IntervalResμ",
   "And.right",
   "Nat.instStarRing",
   "And",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.instWeakAscendingChainConditionOfWellFoundedGT",
   "Exists.casesOn",
   "Nat",
   "Iff.of_eq",
   "Iff.mpr",
   "Option",
   "Nontrivial",
   "id",
   "HarderNarasimhan.lt_lt",
   "List.length",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "lt_of_le_of_ne",
   "Nat.instAddCancelCommMonoid",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Subtype.prop",
   "Nat.instOne",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.semistable_of_step_cond₂._simp_1_3",
   "Not",
   "List.nil",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "List.TFAE.out",
   "True",
   "instHAdd",
   "exists_prop_congr",
   "sInf_le",
   "LT.lt",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "of_eq_true",
   "le_of_lt",
   "HarderNarasimhan.impl.semistable_of_step_cond₂._simp_1_4",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "le_sInf",
   "False",
   "Subtype.mk",
   "OrderTop.toTop",
   "instLENat"],
  "name": "HarderNarasimhan.impl.semistable_of_step_cond₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) [HarderNarasimhan.SlopeLike μ]\n  [sdc : HarderNarasimhan.StrongDescendingChainCondition' μ] (filtration : ℕ → ℒ) (fin_len : ∃ N, filtration N = ⊥)\n  (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i),\n  (∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n      z < filtration i → μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩) →\n    ∀ (i : ℕ) (hi : i < Nat.find fin_len),\n      HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(filtration (i + 1), filtration i), ⋯⟩ μ)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Mathlib.Tactic.Linarith.add_lt_of_neg_of_le",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Ring.toNonAssocRing",
   "Eq.trans",
   "Bool.false",
   "Classical.propDecidable",
   "AddGroupWithOne.toAddMonoidWithOne",
   "Mathlib.Meta.NormNum.IsInt.to_raw_eq",
   "HarderNarasimhan.impl.subseq_prop5._simp_1_5",
   "Int.instCommSemiring",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "False.elim",
   "SubNegMonoid.toSub",
   "NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring",
   "Mathlib.Tactic.Ring.add_overlap_pf_zero",
   "Mathlib.Tactic.Ring.sub_pf",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "instLatticeInt",
   "instLTNat",
   "HarderNarasimhan.impl.subseq_prop1",
   "Exists",
   "NonUnitalCommRing.toNonUnitalNonAssocCommRing",
   "BoundedOrder",
   "instNeZeroNatHAdd_1",
   "Ring.toSemiring",
   "Nat.find_spec",
   "BoundedOrder.toOrderBot",
   "instOfNat",
   "Eq.refl",
   "eq_false",
   "Antitone",
   "AddMonoid.toAddSemigroup",
   "Mathlib.Meta.NormNum.isNat_lt_true",
   "Lattice",
   "AddMonoidWithOne.toOne",
   "Int.negOfNat",
   "Top.top",
   "Int.instCharZero",
   "Eq.mpr",
   "Nat.rawCast",
   "Mathlib.Meta.NormNum.IsNat.to_isInt",
   "Nat.find",
   "Bool",
   "Mathlib.Tactic.Ring.add_mul",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "Mathlib.Tactic.Linarith.lt_irrefl",
   "Int.instRing",
   "Nat.instPreorder",
   "Nat.instNeZeroSucc",
   "Mathlib.Tactic.Ring.add_pf_add_overlap_zero",
   "Int.instAddCommGroup",
   "instOfNatNat",
   "congr",
   "Int.instIsStrictOrderedRing",
   "Mathlib.Tactic.Ring.neg_one_mul",
   "Mathlib.Tactic.Ring.mul_add",
   "Eq",
   "Preorder.toLE",
   "lt_of_not_ge",
   "instNatCastInt",
   "Nat.le_induction",
   "Distrib.toAdd",
   "Mathlib.Tactic.Ring.neg_zero",
   "IsStrictOrderedRing.toIsOrderedRing",
   "Int.instIsOrderedAddMonoid",
   "instOfNatAtLeastTwo",
   "HPow.hPow",
   "OfNat.ofNat",
   "Mathlib.Tactic.Ring.mul_congr",
   "Int",
   "Nat.cast_add",
   "HAdd.hAdd",
   "eq_self",
   "AddGroupWithOne.toAddGroup",
   "Monoid.toNatPow",
   "dite_cond_eq_true",
   "AddCommGroup.toDivisionAddCommMonoid",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "Int.instNormedCommRing",
   "Ne",
   "neg_neg_of_pos",
   "instHSub",
   "dite",
   "Nat.find_min",
   "Nat.find_min'",
   "Nat.instAtLeastTwoHAddOfNat",
   "lt_trans",
   "Nat.cast_one",
   "Mathlib.Tactic.Ring.zero_mul",
   "PartialOrder.toPreorder",
   "Mathlib.Meta.NormNum.IsNat.of_raw",
   "Mathlib.Tactic.Ring.add_pf_zero_add",
   "Mathlib.Meta.NormNum.IsInt.of_raw",
   "Iff.mp",
   "Preorder.toLT",
   "Int.rawCast",
   "HMul.hMul",
   "AddMonoidWithOne.toAddMonoid",
   "HarderNarasimhan.impl.subseq",
   "Semiring.toNonAssocSemiring",
   "Mathlib.Tactic.Ring.add_pf_add_overlap",
   "Ring.toAddGroupWithOne",
   "Int.instLEInt",
   "HSub.hSub",
   "Mathlib.Meta.NormNum.IsInt.to_isNat",
   "AddGroup.toSubNegMonoid",
   "Eq.rec",
   "Mathlib.Tactic.Linarith.zero_lt_one",
   "Int.ofNat",
   "Nat.instLinearOrder",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "SemilatticeInf.toPartialOrder",
   "AddSemigroup.toAdd",
   "instHPow",
   "of_eq_false",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Neg.neg",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Mathlib.Tactic.Ring.mul_zero",
   "Bot.bot",
   "NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring",
   "Mathlib.Tactic.Linarith.mul_neg",
   "Decidable.byContradiction",
   "Nat",
   "Mathlib.Tactic.Ring.atom_pf",
   "AddMonoidWithOne.toNatCast",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "instHMul",
   "NonUnitalNormedCommRing.toNonUnitalCommRing",
   "le_bot_iff",
   "Mathlib.Meta.NormNum.isNat_ofNat",
   "HarderNarasimhan.impl.subseq_prop2",
   "Nat.cast",
   "Eq.mp",
   "le_trans",
   "Mathlib.Meta.NormNum.isInt_add",
   "Mathlib.Tactic.Ring.neg_mul",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "Mathlib.Tactic.Ring.instCommSemiringNat",
   "BoundedOrder.toOrderTop",
   "Mathlib.Tactic.Ring.add_pf_add_lt",
   "MonoidWithZero.toMonoid",
   "Mathlib.Tactic.Ring.sub_congr",
   "Zero.toOfNat0",
   "OrderBot.toBot",
   "dite_cond_eq_false",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Mathlib.Tactic.Ring.cast_zero",
   "Nat.lt_of_add_one_le",
   "Mathlib.Meta.NormNum.isInt_mul",
   "Mathlib.Tactic.Ring.of_eq",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "CommSemiring.toSemiring",
   "Distrib.toMul",
   "Nat.decLe",
   "Mathlib.Tactic.Zify.natCast_le._simp_1",
   "Mathlib.Tactic.Ring.cast_pos",
   "Semiring.toMonoidWithZero",
   "HarderNarasimhan.impl.subseq._proof_2",
   "Mathlib.Tactic.Ring.add_congr",
   "LT.lt",
   "NegZeroClass.toNeg",
   "Mathlib.Tactic.Ring.add_pf_add_zero",
   "Mathlib.Tactic.Ring.neg_add",
   "One.toOfNat1",
   "le_of_lt",
   "Mathlib.Tactic.Ring.neg_congr",
   "Int.instSemiring",
   "Mathlib.Tactic.Linarith.sub_nonpos_of_le",
   "LE.le",
   "Mathlib.Tactic.Ring.add_pf_add_gt",
   "False",
   "OrderTop.toTop",
   "instLENat",
   "Int.instAddMonoid",
   "NormedCommRing.toNonUnitalNormedCommRing"],
  "name": "HarderNarasimhan.impl.subseq_prop5",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f : ℕ → ℒ) (hf0 : f 0 = ⊤)\n  (atf : ∃ k, f k = ⊥) (hfat : Antitone f) (i j : ℕ),\n  i < j → j ≤ Nat.find ⋯ → HarderNarasimhan.impl.subseq f atf j < HarderNarasimhan.impl.subseq f atf i",
  "constCategory": "Theorem"},
 {"references": ["True", "Eq", "trivial", "propext", "Iff.intro"],
  "name": "eq_true",
  "constType": "∀ {p : Prop}, p → p = True",
  "constCategory": "Theorem"},
 {"references":
  ["Setoid",
   "AddMonoid.toOppositeAddAction",
   "Subtype",
   "SetLike.instMembership",
   "AddOpposite",
   "Membership.mem",
   "AddSubgroup.instSetLike",
   "AddAction.orbitRel",
   "AddAction.instAddAction",
   "AddSubgroup.op",
   "AddSubgroup",
   "SubNegMonoid.toAddMonoid",
   "AddGroup",
   "AddSubgroup.toAddGroup",
   "AddGroup.toSubNegMonoid",
   "AddOpposite.instAddGroup"],
  "name": "QuotientAddGroup.leftRel",
  "constType":
  "{α : Type u_1} → [inst : AddGroup α] → AddSubgroup α → Setoid α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.S₁I._proof_1",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.μA",
   "Lattice",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.S₁I",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] →\n      [BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [CompleteLattice S] →\n            ({ p // p.1 < p.2 } → S) →\n              (I : { p // p.1 < p.2 }) → (x : ℒ) → HarderNarasimhan.InIntvl I x → (↑I).1 ≠ x → Prop",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Submodule.instBot",
   "Nontrivial",
   "HarderNarasimhan.CoprimaryFiltration.mk",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Nat.instPreorder",
   "Submodule",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.rec",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] →\n                {motive : HarderNarasimhan.CoprimaryFiltration R M → Sort u} →\n                  ((filtration : ℕ → Submodule R M) →\n                      (monotone : Monotone filtration) →\n                        (first_eq_bot : filtration 0 = ⊥) →\n                          (fin_len : ∃ n, filtration n = ⊤) →\n                            (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                              (piecewise_coprimary :\n                                  ∀ n < Nat.find fin_len,\n                                    HarderNarasimhan.Coprimary R\n                                      (↥(filtration (n + 1)) ⧸ (filtration n).submoduleOf (filtration (n + 1)))) →\n                                (strict_mono_associated_prime :\n                                    ∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len),\n                                      { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }) →\n                                  motive\n                                    { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot,\n                                      fin_len := fin_len, strict_mono := strict_mono,\n                                      piecewise_coprimary := piecewise_coprimary,\n                                      strict_mono_associated_prime := strict_mono_associated_prime }) →\n                    (t : HarderNarasimhan.CoprimaryFiltration R M) → motive t",
  "constCategory": "Other"},
 {"references":
  ["SemilatticeInf",
   "SemilatticeInf.toMin",
   "le_top",
   "PartialOrder.toPreorder",
   "Min.min",
   "inf_of_le_left",
   "Top.top",
   "OrderTop",
   "Eq",
   "Preorder.toLE",
   "OrderTop.toTop",
   "SemilatticeInf.toPartialOrder"],
  "name": "inf_top_eq",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeInf α] [inst_1 : OrderTop α] (a : α), a ⊓ ⊤ = a",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "OrderDual",
   "instHAdd",
   "Preorder.toLT",
   "OfNat.ofNat",
   "Nat.instPreorder",
   "LT.lt",
   "HAdd.hAdd",
   "strictMono_nat_of_lt_succ",
   "StrictAnti",
   "Preorder",
   "Nat",
   "OrderDual.instPreorder",
   "instOfNatNat"],
  "name": "strictAnti_nat_of_succ_lt",
  "constType":
  "∀ {α : Type u} [inst : Preorder α] {f : ℕ → α}, (∀ (n : ℕ), f (n + 1) < f n) → StrictAnti f",
  "constCategory": "Theorem"},
 {"references":
  ["instDistribLatticeOfLinearOrder",
   "DistribLattice.toLattice",
   "Lattice.toSemilatticeInf",
   "Finset",
   "id",
   "LinearOrder",
   "Finset.Nonempty",
   "Finset.inf'"],
  "name": "Finset.min'",
  "constType":
  "{α : Type u_2} → [LinearOrder α] → (s : Finset α) → s.Nonempty → α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Prod.mk",
   "Preorder.toLT",
   "lt_of_le_of_ne",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.InIntvl",
   "LE.le",
   "Lattice",
   "Ne",
   "Preorder.toLE",
   "And.left",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.S₁I._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] (I : { p // p.1 < p.2 }) (y : ℒ),\n  HarderNarasimhan.InIntvl I y → (↑I).1 ≠ y → ((↑I).1, y).1 < ((↑I).1, y).2",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Membership.mem",
   "Preorder.toLT",
   "Classical.propDecidable",
   "GT.gt",
   "Subtype.val",
   "Prod.fst",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.impl.prop3d4₀func._proof_2",
   "Set.Nonempty",
   "Exists",
   "Lattice.toSemilatticeInf",
   "Set",
   "HarderNarasimhan.impl.ℒₛ",
   "And",
   "HarderNarasimhan.impl.prop3d4₀func",
   "HarderNarasimhan.impl.prop3d4₀func._proof_6",
   "BoundedOrder",
   "Prod.snd",
   "Exists.choose",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "Nat.succ",
   "HarderNarasimhan.impl.prop3d4₀func._proof_5",
   "Eq.refl",
   "Lattice",
   "Nontrivial",
   "Subtype.mk",
   "dite",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func.eq_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [h : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (n : ℕ),\n  HarderNarasimhan.impl.prop3d4₀func μ I n.succ =\n    if hbot : (↑I).1 = ↑(HarderNarasimhan.impl.prop3d4₀func μ I n) then ⟨(↑I).1, ⋯⟩\n    else\n      if hne : (HarderNarasimhan.impl.ℒₛ μ I (HarderNarasimhan.impl.prop3d4₀func μ I n) hbot).Nonempty then\n        have res := ⋯;\n        ⟨res.choose, ⋯⟩\n      else ⟨(↑I).1, ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Iff.trans",
   "PartialOrder.toPreorder",
   "True",
   "Eq.trans",
   "SemilatticeSup.toPartialOrder",
   "And",
   "and_true",
   "sup_le_iff._simp_1",
   "congrArg",
   "Max.max",
   "le_antisymm_iff",
   "iff_self",
   "of_eq_true",
   "congr",
   "Iff",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup",
   "le_sup_right._simp_1",
   "Eq",
   "Preorder.toLE",
   "le_refl._simp_1"],
  "name": "sup_of_le_right",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, a ≤ b → a ⊔ b = b",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "instAddNat",
   "HarderNarasimhan.SlopeLike",
   "Eq.trans",
   "Classical.propDecidable",
   "HarderNarasimhan.instNonemptyJordanHolderFiltrationOfWellFoundedGTOfFiniteTotalPayoffOfSlopeLikeOfSemistableOfStrongDescendingChainCondition'._simp_2",
   "HarderNarasimhan.JordanHolderFiltration",
   "Eq.symm",
   "Eq.ndrec",
   "instLTNat",
   "Exists",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Nat.find_spec",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Eq.refl",
   "Lattice",
   "Top.top",
   "Eq.mpr",
   "Exists.choose.congr_simp",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "setOf",
   "Nat.find",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "HarderNarasimhan.instNonemptyJordanHolderFiltrationOfWellFoundedGTOfFiniteTotalPayoffOfSlopeLikeOfSemistableOfStrongDescendingChainCondition'._simp_1",
   "Nat.instPreorder",
   "Prod.fst",
   "le_rfl",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "instOfNatNat",
   "congr",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "propext",
   "lt_of_not_ge",
   "Nat.le_induction",
   "Nat.instAddMonoid",
   "Set",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "eq_self",
   "HarderNarasimhan.impl.JHFil_anti_mono",
   "HarderNarasimhan.impl.JHFil",
   "Ne",
   "HarderNarasimhan.StrongDescendingChainCondition'.wdcc'",
   "dite",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "Nat.find_min",
   "lt_trans",
   "PartialOrder.toPreorder",
   "false_and",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "bot_le",
   "GT.gt",
   "Nat.instAddCommMonoid",
   "forall_congr",
   "funext",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Nat.instIsOrderedAddMonoid",
   "Eq.rec",
   "Nat.instLinearOrder",
   "HarderNarasimhan.impl.JHFil_prop₁",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "And",
   "Nonempty",
   "IsOrderedAddMonoid.toAddLeftMono",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Nat",
   "Iff.of_eq",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "HarderNarasimhan.impl.JHFil._proof_4",
   "HarderNarasimhan.FiniteTotalPayoff.fin_tot_payoff",
   "Subtype",
   "HarderNarasimhan.impl.JHFil_prop₂",
   "le_trans",
   "Nat.instAddCancelCommMonoid",
   "dite_congr",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nonempty.intro",
   "Nat.instOne",
   "BoundedOrder.toOrderTop",
   "dite_cond_eq_false",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.JHFil._proof_1",
   "Not",
   "bot_lt_iff_ne_bot",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "Nat.decLe",
   "Exists.choose",
   "exists_prop_congr",
   "Eq.mpr_prop",
   "LT.lt",
   "lt_add_one",
   "HarderNarasimhan.instNonemptyJordanHolderFiltrationOfWellFoundedGTOfFiniteTotalPayoffOfSlopeLikeOfSemistableOfStrongDescendingChainCondition'._simp_3",
   "of_eq_true",
   "One.toOfNat1",
   "le_of_lt",
   "HarderNarasimhan.impl.JHFil_fin_len",
   "LE.le",
   "False",
   "Subtype.mk",
   "instLENat",
   "OrderTop.toTop"],
  "name":
  "HarderNarasimhan.instNonemptyJordanHolderFiltrationOfWellFoundedGTOfFiniteTotalPayoffOfSlopeLikeOfSemistableOfStrongDescendingChainCondition'",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S} [hftp : HarderNarasimhan.FiniteTotalPayoff μ]\n  [hsl : HarderNarasimhan.SlopeLike μ] [hst : HarderNarasimhan.Semistable μ]\n  [hwdcc' : HarderNarasimhan.StrongDescendingChainCondition' μ], Nonempty (HarderNarasimhan.JordanHolderFiltration μ)",
  "constCategory": "Theorem"},
 {"references":
  ["Not", "Or", "Iff", "Classical.propDecidable", "Decidable.imp_iff_or_not"],
  "name": "imp_iff_or_not",
  "constType": "∀ {b a : Prop}, b → a ↔ a ∨ ¬b",
  "constCategory": "Theorem"},
 {"references": ["absurd", "Not", "Or.elim", "Or", "id"],
  "name": "Or.resolve_left",
  "constType": "∀ {a b : Prop}, a ∨ b → ¬a → b",
  "constCategory": "Theorem"},
 {"references":
  ["Eq.trans",
   "AddCommGroup.toAddGroup",
   "Exists.intro",
   "eq_true",
   "MonoidWithZero.toMulZeroOneClass",
   "SMulZeroClass.toSMul",
   "instZeroNNReal",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "NNReal.instLinearOrder",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toLinearOrder",
   "smul_inv_smul₀",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "ClosureOperator.IsClosed",
   "NNReal",
   "OrderTheory.coe'",
   "BoundedOrder",
   "DivisionSemiring.toGroupWithZero",
   "Prod.snd",
   "Set.Iic",
   "Prod",
   "LinearOrder.toDecidableLT",
   "MulZeroOneClass.toMulZeroClass",
   "Set.instCompleteAtomicBooleanAlgebra",
   "AddCommGroup.toAddCommMonoid",
   "NNReal.instInv",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "Ne.symm",
   "RelEmbedding.toEmbedding",
   "OrderTheory.coe'._proof_1",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "AddCommMonoid.toAddMonoid",
   "Prod.fst",
   "Preorder.toLE",
   "Eq",
   "Set",
   "OrderEmbedding",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toAddCommGroup",
   "OfNat.ofNat",
   "eq_self",
   "Module.toDistribMulAction",
   "dite_cond_eq_true",
   "MulZeroClass.toZero",
   "dite",
   "instPartialOrderNNReal",
   "OrderTheory.DedekindMacNeilleCompletion",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Subtype.instLE",
   "Preorder.toLT",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "HarderNarasimhan.impl.μQuotient_helper._simp_1_2",
   "GT.gt",
   "RelEmbedding.instFunLike",
   "And.intro",
   "PartialOrder",
   "DistribMulAction.toMulAction",
   "NNReal.instMulActionOfReal",
   "Semifield.toDivisionSemiring",
   "AddGroup.toSubNegMonoid",
   "SemilatticeInf.toPartialOrder",
   "DistribSMul.toSMulZeroClass",
   "Real",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "And",
   "DistribMulAction.toDistribSMul",
   "AddZeroClass.toAddZero",
   "Real.instMonoid",
   "HSMul.hSMul",
   "Nontrivial",
   "AddZero.toZero",
   "CompleteDistribLattice.toCoframe",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "GeneralizedCoheytingAlgebra.toLattice",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Function.Embedding.toFun",
   "SemilatticeSup.toPartialOrder",
   "instSemiringNNReal",
   "DFunLike.coe",
   "congrArg",
   "instDistribLatticeOfLinearOrder",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "GroupWithZero.toMonoidWithZero",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "Set.instLE",
   "Not",
   "Inv.inv",
   "Lattice.toSemilatticeInf",
   "True",
   "NNReal.instSemifield",
   "Semiring.toMonoidWithZero",
   "NNReal.instDistribMulActionOfReal",
   "Real.semiring",
   "HarderNarasimhan.μQuotient",
   "LT.lt",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toModule",
   "DistribLattice.toLattice",
   "ne_of_lt",
   "SubNegMonoid.toAddMonoid",
   "of_eq_true",
   "LE.le",
   "Subtype.mk",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.μQuotient_helper",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {V : Type u_2}\n  [inst_3 : HarderNarasimhan.TotallyOrderedRealVectorSpace V] (r : { p // p.1 < p.2 } → NNReal)\n  (d : { p // p.1 < p.2 } → V) (z : { p // p.1 < p.2 }),\n  r z > 0 → ∃ μ, HarderNarasimhan.μQuotient r d z = OrderTheory.coe' μ ∧ r z • μ = d z",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Ordering",
  "constType": "Type",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "Subtype",
   "PartialOrder.toPreorder",
   "Eq.mp",
   "HarderNarasimhan.ConvexI",
   "Iff.mp",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "GT.gt",
   "Prod.fst",
   "Mathlib.Tactic.Push.not_exists._simp_1",
   "IsEmpty",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "IsWellFounded.wf",
   "wellFounded_iff_isEmpty_descending_chain",
   "IsEmpty.elim",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "WellFounded",
   "Not",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "Exists",
   "instHAdd",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "Decidable.byContradiction",
   "Nat",
   "HarderNarasimhan.impl.HNFil_is_strict_mono",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "False",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil_of_fin_len",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ], ∃ N, HarderNarasimhan.impl.HNFil μ N = ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "HarderNarasimhan.JordanHolderFiltration._sizeOf_inst",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "SizeOf",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "SizeOf.sizeOf",
   "lt_add_one",
   "LE.le",
   "instSizeOfDefault",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.mk.sizeOf_spec",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} [inst_4 : SizeOf ℒ] [inst_5 : SizeOf S] (filtration : ℕ → ℒ)\n  (antitone : Antitone filtration) (fin_len : ∃ N, filtration N = ⊥)\n  (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i)\n  (first_eq_top : filtration 0 = ⊤)\n  (step_cond₁ : ∀ (k : ℕ) (hk : k < Nat.find fin_len), μ ⟨(filtration (k + 1), filtration k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩)\n  (step_cond₂ :\n    ∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n      z < filtration i → μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩),\n  sizeOf\n      { filtration := filtration, antitone := antitone, fin_len := fin_len, strict_anti := strict_anti,\n        first_eq_top := first_eq_top, step_cond₁ := step_cond₁, step_cond₂ := step_cond₂ } =\n    1 + sizeOf fin_len + sizeOf first_eq_top",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Subtype",
   "PartialOrder.toPreorder",
   "le_trans",
   "Preorder.toLT",
   "sup_le",
   "Subtype.val",
   "Prod.fst",
   "And.intro",
   "Subtype.prop",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Lattice.toSemilatticeInf",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "le_sup_left",
   "LT.lt",
   "Prod",
   "Max.max",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "SemilatticeSup.toMax"],
  "name": "HarderNarasimhan.instLatticeInterval._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (a b : HarderNarasimhan.Interval z), (↑z).1 ≤ ↑a ⊔ ↑b ∧ ↑a ⊔ ↑b ≤ (↑z).2",
  "constCategory": "Theorem"},
 {"references": ["Nat", "OfNat", "OfNat.mk", "Int.ofNat", "Int"],
  "name": "instOfNat",
  "constType": "{n : ℕ} → OfNat ℤ n",
  "constCategory": "Definition"},
 {"references":
  ["not_le_of_gt",
   "Not",
   "LT.lt",
   "LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "Iff",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Preorder.toLE",
   "lt_of_not_ge",
   "Iff.intro"],
  "name": "lt_iff_not_ge",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, a < b ↔ ¬b ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["MulOneClass.toMulOne",
   "MulZeroOneClass.toZero",
   "MulOne.toMul",
   "MulZeroOneClass.zero_mul",
   "MulZeroClass",
   "MulZeroClass.mk",
   "MulZeroOneClass",
   "MulZeroOneClass.toMulOneClass",
   "MulZeroOneClass.mul_zero"],
  "name": "MulZeroOneClass.toMulZeroClass",
  "constType": "{M₀ : Type u} → [self : MulZeroOneClass M₀] → MulZeroClass M₀",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Eq.mp",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "Prod.fst",
   "congrArg",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "HarderNarasimhan.impl.prop3d4",
   "Eq.symm",
   "WellFoundedGT",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "propext",
   "SemilatticeInf.toPartialOrder",
   "Set.Nonempty",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.St",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "LT.lt",
   "Prod",
   "Lattice",
   "Nontrivial",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_3_4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.μA_DescendingChainCondition μ → HarderNarasimhan.Convex μ → (HarderNarasimhan.St μ).Nonempty",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μA_DescendingChainCondition",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.impl.prop3d4₀func_len",
   "WellFoundedGT",
   "Eq.ndrec",
   "Eq.rec",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_len.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S) (e_μ : μ = μ_1)\n  (I I_1 : { p // p.1 < p.2 }),\n  I = I_1 →\n    ∀ (hμDCC : HarderNarasimhan.μA_DescendingChainCondition μ),\n      HarderNarasimhan.impl.prop3d4₀func_len μ I hμDCC = HarderNarasimhan.impl.prop3d4₀func_len μ_1 I_1 ⋯",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "And.right",
   "Preorder.toLT",
   "And",
   "Prod.snd",
   "lt_of_le_of_ne",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.InIntvl",
   "PartialOrder",
   "LE.le",
   "Ne",
   "Preorder.toLE",
   "And.left"],
  "name": "HarderNarasimhan.μmax._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] (I : { p // p.1 < p.2 }) (u : ℒ),\n  HarderNarasimhan.InIntvl I u ∧ (↑I).1 ≠ u → ((↑I).1, u).1 < ((↑I).1, u).2",
  "constCategory": "Theorem"},
 {"references":
  ["Bool",
   "PartialOrder.toPreorder",
   "Nat.cast",
   "Nat.cast_lt",
   "Mathlib.Meta.NormNum.ble_eq_false",
   "Bool.false",
   "Iff.mp",
   "Preorder.toLT",
   "IsOrderedRing.toIsOrderedAddMonoid",
   "Semiring.toNonAssocSemiring",
   "PartialOrder",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "CharZero",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "Nat.ble",
   "IsOrderedRing.toZeroLEOneClass",
   "instLTNat",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "IsOrderedAddMonoid.toAddLeftMono",
   "LT.lt",
   "IsOrderedRing",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "Iff.mpr",
   "Mathlib.Meta.NormNum.isNat_lt_true.match_1_1",
   "Mathlib.Meta.NormNum.IsNat",
   "Semiring"],
  "name": "Mathlib.Meta.NormNum.isNat_lt_true",
  "constType":
  "∀ {α : Type u_1} [inst : Semiring α] [inst_1 : PartialOrder α] [IsOrderedRing α] [CharZero α] {a b : α} {a' b' : ℕ},\n  Mathlib.Meta.NormNum.IsNat a a' → Mathlib.Meta.NormNum.IsNat b b' → b'.ble a' = false → a < b",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Prod",
   "Subtype",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "Nontrivial",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Preorder.toLE",
   "CompleteLattice",
   "Prod.fst"],
  "name": "HarderNarasimhan.WeakSlopeLike₂",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["InfSet",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Iff.mp",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "Subtype.coe_inj",
   "And.intro",
   "PartialOrder",
   "funext",
   "Eq.symm",
   "Eq.rec",
   "And.left",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Prod",
   "Exists.casesOn",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "Eq.refl",
   "Nontrivial",
   "id",
   "Eq.mpr",
   "HarderNarasimhan.lt_lt",
   "setOf",
   "Subtype",
   "le_trans",
   "and_true",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "congrArg",
   "Iff.intro",
   "Subtype.prop",
   "HarderNarasimhan.μmin",
   "congr",
   "InfSet.sInf",
   "HarderNarasimhan.Interval",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Not",
   "HarderNarasimhan.μmin_res_intvl._simp_1_1",
   "True",
   "Set",
   "HarderNarasimhan.instBoundedOrderInterval",
   "exists_prop_congr",
   "LT.lt",
   "CompleteSemilatticeInf.toInfSet",
   "eq_self",
   "HarderNarasimhan.instNontrivialInterval",
   "HarderNarasimhan.μA._proof_1",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μmin_res_intvl",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {I : { p // p.1 < p.2 }}\n  {S : Type u_2} [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} {J : { p // p.1 < p.2 }},\n  HarderNarasimhan.μmin (HarderNarasimhan.Resμ I μ) J = HarderNarasimhan.μmin μ ⟨(↑(↑J).1, ↑(↑J).2), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "Or",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "And.left",
   "Not",
   "HarderNarasimhan.impl.prop4d14",
   "bot_lt_iff_ne_bot",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Iff.mpr",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "lt_top_iff_ne_top",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_4_14",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (∀ (x : ℒ) (hx : x ≠ ⊥ ∧ x ≠ ⊤),\n      μ ⟨(⊥, x), ⋯⟩ ≤ μ HarderNarasimhan.TotIntvl ∨ ¬μ HarderNarasimhan.TotIntvl ≤ μ ⟨(x, ⊤), ⋯⟩) →\n    HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl →\n      HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_3",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.impl.instConvexITotIntvl",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "HarderNarasimhan.Convex",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Prod",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "Nat.find",
   "Subtype",
   "HarderNarasimhan.impl.HNFil",
   "Nat.instAddCancelCommMonoid",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_5",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "WellFoundedGT",
   "HarderNarasimhan.Interval",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "instHAdd",
   "AddZero.toAdd",
   "HarderNarasimhan.impl.HNFil_is_strict_mono'",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_6",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (i : ℕ) (h_1 : i < Nat.find ⋯),\n  Nontrivial (HarderNarasimhan.Interval ⟨(HarderNarasimhan.impl.HNFil μ i, HarderNarasimhan.impl.HNFil μ (i + 1)), ⋯⟩)",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "Or.inl",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
   "ConditionallyCompleteLinearOrder.toLinearOrder",
   "WellFoundedGT",
   "LE.isTotal",
   "CompleteLinearOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.μ_Admissible.mk",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "IsTotal",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder"],
  "name": "HarderNarasimhan.impl.instμ_Admissible",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S}, HarderNarasimhan.μ_Admissible μ",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Eq.trans",
   "True",
   "instHAdd",
   "List",
   "Lean.Omega.IntList.get",
   "Lean.Omega.LinearCombo.coordinate",
   "OfNat.ofNat",
   "congrArg",
   "Int",
   "HAdd.hAdd",
   "eq_self",
   "Lean.Omega.LinearCombo.coordinate_eval",
   "Nat",
   "Lean.Omega.IntList.get_cons_succ",
   "of_eq_true",
   "Lean.Omega.Coeffs.ofList",
   "Lean.Omega.Coeffs.get",
   "instOfNatNat",
   "Lean.Omega.LinearCombo.eval",
   "Lean.Omega.IntList.get_cons_zero",
   "Eq",
   "List.cons"],
  "name": "Lean.Omega.LinearCombo.coordinate_eval_2",
  "constType":
  "∀ {a0 a1 a2 : ℤ} {t : List ℤ}, (Omega.LinearCombo.coordinate 2).eval (Omega.Coeffs.ofList (a0 :: a1 :: a2 :: t)) = a2",
  "constCategory": "Theorem"},
 {"references": ["Function.Embedding", "RelEmbedding"],
  "name": "RelEmbedding.toEmbedding",
  "constType":
  "{α : Type u_5} → {β : Type u_6} → {r : α → α → Prop} → {s : β → β → Prop} → r ↪r s → α ↪ β",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "Nat",
   "instHAdd",
   "LE.le",
   "Nat.add_comm",
   "Eq",
   "Eq.rec",
   "Nat.le_add_right",
   "instLENat"],
  "name": "Nat.le_add_left",
  "constType": "∀ (n m : ℕ), n ≤ m + n",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "LT.lt",
   "instLTNat",
   "Nat",
   "instHAdd",
   "instOfNatNat",
   "Nat.zero_lt_succ",
   "OfNat.ofNat"],
  "name": "Nat.add_one_pos",
  "constType": "∀ (n : ℕ), 0 < n + 1",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "CommSemiring",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references": ["Exists", "And", "Eq", "propext", "exists_eq_right"],
  "name": "HarderNarasimhan.impl.Submodule.mem_map_subtype_iff._simp_1_4",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {a' : α}, (∃ a, p a ∧ a = a') = p a'",
  "constCategory": "Theorem"},
 {"references": ["HarderNarasimhan.TotallyOrderedRealVectorSpace", "Nat"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.ctorIdx",
  "constType":
  "{V : Type u_1} → HarderNarasimhan.TotallyOrderedRealVectorSpace V → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["List.finRange",
   "List.nodup_finRange",
   "Fintype.mk",
   "Nat",
   "Finset.mk",
   "List.mem_finRange",
   "Fin",
   "Fintype",
   "Multiset.ofList"],
  "name": "Fin.fintype",
  "constType": "(n : ℕ) → Fintype (Fin n)",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt", "Subtype.instLT", "Subtype", "Iff", "Iff.rfl", "Subtype.val", "LT"],
  "name": "Subtype.coe_lt_coe",
  "constType":
  "∀ {α : Type u_2} [inst : LT α] {p : α → Prop} {x y : Subtype p}, ↑x < ↑y ↔ x < y",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "Module",
   "LinearMap.mk",
   "CommSemiring",
   "AddHom.mk",
   "Membership.mem",
   "LocalizedModule.instAddCommMonoid",
   "MulZeroOneClass.toMulOneClass",
   "LocalizedModule.mk",
   "LocalizedModule.mkLinearMap._proof_1",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "NonAssocSemiring.toMulZeroOneClass",
   "SetLike.instMembership",
   "LocalizedModule",
   "Submonoid.instSetLike",
   "CommSemiring.toSemiring",
   "LinearMap",
   "LocalizedModule.mkLinearMap._proof_2",
   "OfNat.ofNat",
   "Submonoid.one",
   "Submonoid",
   "LocalizedModule.isModule'",
   "AddCommMonoid.toAddCommSemigroup",
   "One.toOfNat1"],
  "name": "LocalizedModule.mkLinearMap",
  "constType":
  "{R : Type u} →\n  [inst : CommSemiring R] →\n    (S : Submonoid R) →\n      (M : Type v) → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → M →ₗ[R] LocalizedModule S M",
  "constCategory": "Definition"},
 {"references": ["Or"],
  "name": "Or.inl",
  "constType": "∀ {a b : Prop}, a → a ∨ b",
  "constCategory": "Other"},
 {"references":
  ["Not",
   "Set.Nonempty",
   "Set",
   "Membership.mem",
   "False",
   "Set.instEmptyCollection",
   "EmptyCollection.emptyCollection",
   "Set.not_nonempty_empty.match_1_1",
   "Set.instMembership"],
  "name": "Set.not_nonempty_empty",
  "constType": "∀ {α : Type u}, ¬∅.Nonempty",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "Ring.toNonAssocRing",
   "Eq.trans",
   "HMul.hMul",
   "Int.rawCast",
   "AddGroupWithOne.toAddMonoidWithOne",
   "AddGroup.toSubtractionMonoid",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "Semiring.toNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "NonUnitalNonAssocRing.toHasDistribNeg",
   "InvolutiveNeg.toNeg",
   "Eq.ndrec",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "NonAssocSemiring.toMulZeroOneClass",
   "NonUnitalNonAssocSemiring.toDistrib",
   "MulOne.toOne",
   "Neg.neg",
   "Int.instNegInt",
   "Ring.toSemiring",
   "instOfNat",
   "AddMonoidWithOne.toOne",
   "Int.negOfNat",
   "instHMul",
   "one_mul",
   "MulOneClass.toMulOne",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "MulZeroOneClass.toMulOneClass",
   "Int.cast",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "MulOne.toMul",
   "Int.cast_one",
   "neg_mul",
   "Eq",
   "True",
   "Distrib.toMul",
   "OfNat.ofNat",
   "Int.cast_neg",
   "Int",
   "Ring.toAddCommGroup",
   "eq_self",
   "NegZeroClass.toNeg",
   "AddGroupWithOne.toAddGroup",
   "of_eq_true",
   "AddCommGroup.toDivisionAddCommMonoid",
   "HasDistribNeg.toInvolutiveNeg",
   "One.toOfNat1",
   "AddGroupWithOne.toIntCast",
   "Ring"],
  "name": "Mathlib.Tactic.Ring.neg_one_mul",
  "constType":
  "∀ {R : Type u_2} [inst : Ring R] {a b : R}, (Int.negOfNat 1).rawCast * a = b → -a = b",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.S₀_order",
   "Finset",
   "Singleton.singleton",
   "Set.toFinset_subset_toFinset",
   "Exists.intro",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion",
   "Subtype.val",
   "IsGreatest",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice",
   "Eq.symm",
   "HarderNarasimhan.S",
   "Exists",
   "ClosureOperator.IsClosed",
   "OrderTheory.coe'",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Eq.refl",
   "Iff",
   "HarderNarasimhan.μmax._proof_1",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "CompleteLattice.toBoundedOrder",
   "setOf",
   "RelEmbedding.toEmbedding",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "le_rfl",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
   "HarderNarasimhan._μ",
   "Preorder.toLE",
   "Eq",
   "LinearExtension",
   "Set",
   "Set.toFinset",
   "AddCommGroup",
   "PrimeSpectrum",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Submodule.completeLattice",
   "Ne",
   "HarderNarasimhan.S₀",
   "Module.Finite",
   "OrderTheory.DedekindMacNeilleCompletion",
   "mem_upperBounds",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.instLES₀",
   "Prod.mk",
   "Subtype.instLE",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "HarderNarasimhan.μ",
   "Membership.mem",
   "Preorder.toLT",
   "Subtype.preorder",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "HarderNarasimhan.μmax",
   "And.intro",
   "HarderNarasimhan.impl.μmax_eq_μ._simp_1_1",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "And.right",
   "And",
   "IsGreatest.csSup_eq",
   "HarderNarasimhan.impl._μ_mono_right",
   "Exists.casesOn",
   "Finset.instSingleton",
   "HasSubset.Subset",
   "upperBounds",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder",
   "ConditionallyCompleteLattice.toLattice",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Submodule.instNontrivial",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Function.Embedding.toFun",
   "lt_of_le_of_ne",
   "Submodule",
   "congrArg",
   "instDistribLatticeOfLinearOrder",
   "Subtype.prop",
   "HarderNarasimhan.instLinearOrderS₀",
   "Set.instLE",
   "Not",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "CommSemiring.toSemiring",
   "Finset.instHasSubset",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "Set.instHasSubset",
   "LT.lt",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "ne_of_lt",
   "le_of_lt",
   "LE.le",
   "Subtype.mk"],
  "name": "HarderNarasimhan.impl.μmax_eq_μ",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  HarderNarasimhan.μmax (HarderNarasimhan.μ R M) I = HarderNarasimhan.μ R M I",
  "constCategory": "Theorem"},
 {"references": ["Not", "Classical.not_not", "Iff", "Ne", "Eq"],
  "name": "not_ne_iff",
  "constType": "∀ {α : Sort u_1} {a b : α}, ¬a ≠ b ↔ a = b",
  "constCategory": "Theorem"},
 {"references":
  ["rfl",
   "HSMul.hSMul",
   "Mul",
   "Mul.toSMul",
   "instHMul",
   "HMul.hMul",
   "instHSMul",
   "Eq"],
  "name": "smul_eq_mul",
  "constType": "∀ {α : Type u_9} [inst : Mul α] (a b : α), a • b = a * b",
  "constCategory": "Theorem"},
 {"references":
  ["And.intro",
   "Iff",
   "_private.Init.SimpLemmas.0.and_imp.match_1_1",
   "And",
   "Iff.intro"],
  "name": "and_imp",
  "constType": "∀ {a b c : Prop}, a ∧ b → c ↔ a → b → c",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "SetLike.instMembership",
   "Membership.mem",
   "Sub",
   "Subtype.val",
   "AddSubgroupClass",
   "SubNegMonoid",
   "SubNegMonoid.toSub",
   "AddSubgroupClass.sub._proof_1",
   "Sub.mk",
   "HSub.hSub",
   "SetLike",
   "Subtype.mk",
   "instHSub"],
  "name": "AddSubgroupClass.sub",
  "constType":
  "{G : Type u_5} →\n  {S : Type u_6} → [inst : SubNegMonoid G] → [inst_1 : SetLike S G] → [AddSubgroupClass S G] → {H : S} → Sub ↥H",
  "constCategory": "Definition"},
 {"references":
  ["instDistribLatticeOfLinearOrder",
   "DistribLattice.toLattice",
   "Lattice.toSemilatticeInf",
   "PartialOrder.toPreorder",
   "toLinearExtension._proof_1",
   "LinearExtension",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "OrderHom",
   "PartialOrder",
   "OrderHom.mk",
   "SemilatticeInf.toPartialOrder"],
  "name": "toLinearExtension",
  "constType":
  "{α : Type u} → [inst : PartialOrder α] → α →o LinearExtension α",
  "constCategory": "Definition"},
 {"references":
  ["Max.max",
   "PartialOrder.toPreorder",
   "SemilatticeSup.toMax",
   "le_trans",
   "LE.le",
   "SemilatticeSup.toPartialOrder",
   "SemilatticeSup",
   "le_sup_left",
   "Preorder.toLE"],
  "name": "le_sup_of_le_left",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b c : α}, c ≤ a → c ≤ a ⊔ b",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Nat.cast",
   "Eq.trans",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "instOfNatNat",
   "Nat.add_succ",
   "Zero.toOfNat0",
   "Nat.cast_succ",
   "Eq",
   "AddMonoidWithOne",
   "AddSemigroup.toAdd",
   "True",
   "instHAdd",
   "Nat.recAux",
   "AddZeroClass.toAddZero",
   "add_zero",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "eq_self",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "One.toOfNat1",
   "of_eq_true",
   "Nat.succ",
   "Eq.refl",
   "add_assoc",
   "AddMonoid.toAddSemigroup",
   "Nat.cast_zero",
   "AddMonoidWithOne.toOne",
   "id",
   "Eq.mpr",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass"],
  "name": "Nat.cast_add",
  "constType":
  "∀ {R : Type u_1} [inst : AddMonoidWithOne R] (m n : ℕ), ↑(m + n) = ↑m + ↑n",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "Equiv.left_inv",
   "LinearEquiv.toEquiv",
   "Module",
   "LinearMap.comp",
   "LinearEquiv.toLinearMap",
   "LinearEquiv",
   "LinearMap",
   "RingHomCompTriple",
   "Equiv",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Equiv.invFun",
   "Equiv.right_inv",
   "Equiv.trans",
   "LinearEquiv.mk",
   "RingHomInvPair",
   "Semiring"],
  "name": "LinearEquiv.trans",
  "constType":
  "{R₁ : Type u_2} →\n  {R₂ : Type u_3} →\n    {R₃ : Type u_4} →\n      {M₁ : Type u_8} →\n        {M₂ : Type u_9} →\n          {M₃ : Type u_10} →\n            [inst : Semiring R₁] →\n              [inst_1 : Semiring R₂] →\n                [inst_2 : Semiring R₃] →\n                  [inst_3 : AddCommMonoid M₁] →\n                    [inst_4 : AddCommMonoid M₂] →\n                      [inst_5 : AddCommMonoid M₃] →\n                        {module_M₁ : _root_.Module R₁ M₁} →\n                          {module_M₂ : _root_.Module R₂ M₂} →\n                            {module_M₃ : _root_.Module R₃ M₃} →\n                              {σ₁₂ : R₁ →+* R₂} →\n                                {σ₂₁ : R₂ →+* R₁} →\n                                  {σ₁₃ : R₁ →+* R₃} →\n                                    {σ₃₁ : R₃ →+* R₁} →\n                                      {σ₂₃ : R₂ →+* R₃} →\n                                        {σ₃₂ : R₃ →+* R₂} →\n                                          [RingHomCompTriple σ₁₂ σ₂₃ σ₁₃] →\n                                            [RingHomCompTriple σ₃₂ σ₂₁ σ₃₁] →\n                                              {re₁₂ : RingHomInvPair σ₁₂ σ₂₁} →\n                                                {re₂₃ : RingHomInvPair σ₂₃ σ₃₂} →\n                                                  [inst_8 : RingHomInvPair σ₁₃ σ₃₁] →\n                                                    {re₂₁ : RingHomInvPair σ₂₁ σ₁₂} →\n                                                      {re₃₂ : RingHomInvPair σ₃₂ σ₂₃} →\n                                                        [inst_9 : RingHomInvPair σ₃₁ σ₁₃] →\n                                                          (M₁ ≃ₛₗ[σ₁₂] M₂) → (M₂ ≃ₛₗ[σ₂₃] M₃) → M₁ ≃ₛₗ[σ₁₃] M₃",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "instAddNat",
   "HAdd.hAdd",
   "instLTNat",
   "Nat",
   "Nat.succ",
   "instOfNatNat",
   "instHAdd",
   "Nat.le_of_succ_le",
   "OfNat.ofNat"],
  "name": "Nat.lt_of_succ_lt",
  "constType": "∀ {n m : ℕ}, n.succ < m → n < m",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "And.right",
   "Preorder.toLT",
   "And",
   "Prod.snd",
   "lt_of_le_of_ne",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.InIntvl",
   "PartialOrder",
   "LE.le",
   "Ne",
   "Preorder.toLE",
   "And.left"],
  "name": "HarderNarasimhan.μA._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] (I : { p // p.1 < p.2 }) (a : ℒ),\n  HarderNarasimhan.InIntvl I a ∧ a ≠ (↑I).2 → (a, (↑I).2).1 < (a, (↑I).2).2",
  "constCategory": "Theorem"},
 {"references": ["Option"],
  "name": "Option.none",
  "constType": "{α : Type u} → Option α",
  "constCategory": "Other"},
 {"references": ["Prod.casesOn", "Prod", "Prod.mk"],
  "name": "HarderNarasimhan.IntervalSemistableRel.match_1",
  "constType":
  "{ℒ : Type u_1} → (motive : ℒ × ℒ → Sort u_2) → (x : ℒ × ℒ) → ((x y : ℒ) → motive (x, y)) → motive x",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "RelSeries.toFun",
   "Eq.trans",
   "Eq.mp",
   "Prod.mk",
   "Membership.mem",
   "Fin",
   "RelSeries",
   "congrArg",
   "Fin.cast",
   "instOfNatNat",
   "RelSeries.length",
   "Eq.symm",
   "Eq.ndrec",
   "Eq.rec",
   "Eq",
   "RelSeries.mk",
   "Fin.castSucc",
   "True",
   "instHAdd",
   "Function.comp",
   "SetRel",
   "Fin.cast_refl",
   "OfNat.ofNat",
   "RelSeries.casesOn",
   "Set.instMembership",
   "HAdd.hAdd",
   "Prod",
   "eq_self",
   "Nat",
   "of_eq_true",
   "Eq.refl",
   "id",
   "Eq.mpr",
   "Fin.succ"],
  "name": "RelSeries.ext",
  "constType":
  "∀ {α : Type u_1} {r : SetRel α α} {x y : RelSeries r} (length_eq : x.length = y.length),\n  x.toFun = y.toFun ∘ Fin.cast ⋯ → x = y",
  "constCategory": "Theorem"},
 {"references": ["exists_prop", "Exists", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.μA_res_intvl._simp_1_2",
  "constType": "∀ {b a : Prop}, (∃ (_ : a), b) = (a ∧ b)",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace",
  "constType": "Type u_1 → Type u_1",
  "constCategory": "Other"},
 {"references":
  ["Preorder",
   "upperBounds",
   "Set",
   "Iff",
   "LE.le",
   "Membership.mem",
   "Iff.rfl",
   "Preorder.toLE",
   "Set.instMembership"],
  "name": "mem_upperBounds",
  "constType":
  "∀ {α : Type u_1} [inst : Preorder α] {s : Set α} {a : α}, a ∈ upperBounds s ↔ ∀ x ∈ s, x ≤ a",
  "constCategory": "Theorem"},
 {"references": ["Preorder", "PartialOrder"],
  "name": "PartialOrder.toPreorder",
  "constType": "{α : Type u_2} → [self : PartialOrder α] → Preorder α",
  "constCategory": "Definition"},
 {"references":
  ["IsLeftCancelAdd",
   "AddLeftCancelSemigroup.toAddSemigroup",
   "AddLeftCancelSemigroup",
   "AddSemigroup.toAdd"],
  "name": "AddLeftCancelSemigroup.toIsLeftCancelAdd",
  "constType":
  "∀ {G : Type u} [self : AddLeftCancelSemigroup G], IsLeftCancelAdd G",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Preorder.toLT",
   "Exists.intro",
   "Eq.symm",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "bot_lt_iff_ne_bot",
   "Exists",
   "Lattice.toSemilatticeInf",
   "Exists.choose_spec",
   "BoundedOrder",
   "Exists.choose",
   "Bot.bot",
   "LT.lt",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.succ",
   "Iff.mpr",
   "Nat.below",
   "Lattice",
   "Ne"],
  "name": "HarderNarasimhan.impl.subseq._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] [inst_1 : BoundedOrder ℒ] (f : ℕ → ℒ),\n  (∃ k, f k = ⊥) → ∀ (n : ℕ) (x : Nat.below n.succ), ¬x.1 = ⊥ → ∃ k, f k < x.1",
  "constCategory": "Theorem"},
 {"references": ["outParam", "Membership"],
  "name": "Membership.mem",
  "constType":
  "{α : outParam (Type u)} → {γ : Type v} → [self : Membership α γ] → γ → α → Prop",
  "constCategory": "Definition"},
 {"references":
  ["Ring.toNonAssocRing",
   "Singleton.singleton",
   "Submodule.Quotient.module",
   "AddCommGroup.toAddGroup",
   "AddGroupWithOne.toAddMonoidWithOne",
   "Exists.intro",
   "Submodule.Quotient.instSMul",
   "SMulZeroClass.toSMul",
   "instDistribSMul",
   "Quotient.out_eq",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "RingHom.id",
   "SubNegMonoid.toSub",
   "Submodule.addSubgroupClass",
   "Eq.symm",
   "Submodule.annihilator",
   "Exists",
   "sub_self",
   "Submodule.addCommGroup",
   "Submodule.Quotient.mk_smul",
   "LinearMap",
   "Set.instMembership",
   "Ring.toSemiring",
   "Eq.refl",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "Quotient.out",
   "AddMonoid.toAddZeroClass",
   "Quotient",
   "Submodule.hasQuotient",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Submodule.Quotient.instZeroQuotient",
   "AddCommMonoid.toAddMonoid",
   "HarderNarasimhan.impl.support_quotient_mono._simp_1_1",
   "Eq",
   "Preorder.toLE",
   "propext",
   "AddSubgroupClass.sub",
   "IsScalarTower.left",
   "Set",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "AddCommGroup",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "CommRing.toRing",
   "Module.toDistribMulAction",
   "Submodule.completeLattice",
   "Submodule.smul",
   "instHSub",
   "Submodule.sub_mem_iff_right",
   "Quotient.mk''",
   "Submodule.Quotient.mk",
   "PartialOrder.toPreorder",
   "Membership.mem",
   "Iff.mp",
   "Quotient.mk",
   "Submodule.span",
   "AddMonoidWithOne.toAddMonoid",
   "Algebra.id",
   "Submodule.subtype",
   "Semiring.toNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "HSub.hSub",
   "DistribMulAction.toMulAction",
   "AddGroup.toSubNegMonoid",
   "Semiring.toModule",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "DistribSMul.toSMulZeroClass",
   "SetLike.instMembership",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "DistribMulAction.toDistribSMul",
   "Submodule.Quotient.instSMul'",
   "AddZeroClass.toAddZero",
   "Submodule.Quotient.mk_eq_zero",
   "Exists.casesOn",
   "HasSubset.Subset",
   "Iff.mpr",
   "HSMul.hSMul",
   "id",
   "AddZero.toZero",
   "Submodule.submoduleOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Submodule.Quotient.instSMul._proof_1",
   "Eq.mp",
   "Submodule.module",
   "DFunLike.coe",
   "Submodule",
   "congrArg",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "MonoidWithZero.toMonoid",
   "Algebra.toSMul",
   "instHSMul",
   "PrimeSpectrum.asIdeal",
   "Zero.toOfNat0",
   "CommRing.toCommSemiring",
   "Module.support",
   "CommSemiring.toSemiring",
   "Submodule.quotientRel",
   "Semiring.toMonoidWithZero",
   "Set.instSingletonSet",
   "CommRing",
   "Submodule.isScalarTower'",
   "Set.instHasSubset",
   "SubNegMonoid.toAddMonoid",
   "Submodule.setLike",
   "LE.le",
   "Submodule.mem_annihilator_span_singleton",
   "Submodule.addCommMonoid"],
  "name": "HarderNarasimhan.impl.support_quotient_mono",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (N₁ N₂ N₃ : Submodule R M),\n  N₁ ≤ N₂ → Module.support R (↥N₃ ⧸ N₂.submoduleOf N₃) ⊆ Module.support R (↥N₃ ⧸ N₁.submoduleOf N₃)",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "PartialOrder",
  "constType": "Type u_2 → Type u_2",
  "constCategory": "Other"},
 {"references":
  ["LT.lt",
   "Ne.symm",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "Preorder.toLT",
   "Ne.bot_lt",
   "Ne",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Bot.bot",
   "OrderBot"],
  "name": "Ne.bot_lt'",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderBot α] {a : α}, ⊥ ≠ a → ⊥ < a",
  "constCategory": "Theorem"},
 {"references":
  ["Finset.instSingleton",
   "Finset",
   "Finset.singleton_inj",
   "Singleton.singleton",
   "Eq",
   "propext"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_4",
  "constType": "∀ {α : Type u_1} {a b : α}, ({a} = {b}) = (a = b)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "PartialOrder",
   "InfSet.sInf",
   "Preorder.toLE",
   "Eq",
   "Exists",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.μmin.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.μmin μ I = sInf {x | ∃ u, ∃ (h : HarderNarasimhan.InIntvl I u ∧ u ≠ (↑I).2), μ ⟨(u, (↑I).2), ⋯⟩ = x}",
  "constCategory": "Theorem"},
 {"references": ["IsTotal", "Or"],
  "name": "IsTotal.total",
  "constType":
  "∀ {α : Sort u_1} {r : α → α → Prop} [self : IsTotal α r] (a b : α), r a b ∨ r b a",
  "constCategory": "Theorem"},
 {"references": ["Exists", "Nontrivial", "Ne"],
  "name": "Nontrivial.mk",
  "constType": "∀ {α : Type u_3}, (∃ x y, x ≠ y) → Nontrivial α",
  "constCategory": "Other"},
 {"references": ["List"],
  "name": "List.cons",
  "constType": "{α : Type u} → α → List α → List α",
  "constCategory": "Other"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "Subtype.val",
   "HarderNarasimhan.S₂I",
   "Prod.fst",
   "HarderNarasimhan.S₁I._proof_1",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.μA",
   "Eq.refl",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.S₂I.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (x : ℒ)\n  (hxI : HarderNarasimhan.InIntvl I x) (hx : (↑I).1 ≠ x),\n  HarderNarasimhan.S₂I μ I x hxI hx =\n    ∀ (y : ℒ) (hyI : HarderNarasimhan.InIntvl I y) (hy : (↑I).1 ≠ y),\n      HarderNarasimhan.μA μ ⟨((↑I).1, y), ⋯⟩ = HarderNarasimhan.μA μ ⟨((↑I).1, x), ⋯⟩ → y ≤ x",
  "constCategory": "Theorem"},
 {"references":
  ["AddMonoid.toZero",
   "NonUnitalNonAssocSemiring.toMul",
   "NonUnitalNonAssocSemiring.zero_mul",
   "NonUnitalNonAssocSemiring.mul_zero",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "MulZeroOneClass",
   "MulZeroOneClass.mk",
   "AddCommMonoid.toAddMonoid",
   "NonAssocSemiring.one_mul",
   "MulOneClass.mk",
   "MulOne.mk",
   "NonAssocSemiring.mul_one",
   "NonAssocSemiring.toOne",
   "NonAssocSemiring"],
  "name": "NonAssocSemiring.toMulZeroOneClass",
  "constType": "{α : Type u} → [self : NonAssocSemiring α] → MulZeroOneClass α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "implies_congr",
   "HarderNarasimhan.SlopeLike",
   "Eq.trans",
   "Classical.propDecidable",
   "eq_true",
   "Membership.mem.out",
   "False.elim",
   "HarderNarasimhan.impl.JHFil_prop₁._simp_1_11",
   "HarderNarasimhan.impl.JHFil_prop₁._simp_1_9",
   "Nat.sub_one_add_one",
   "Eq.symm",
   "gt_trans",
   "Eq.ndrec",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "Exists.choose_spec",
   "Or.resolve_left",
   "Nat.recAux",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "BoundedOrder.toOrderBot",
   "eq_false",
   "Nat.instStarOrderedRing",
   "Eq.refl",
   "gt_iff_lt._simp_1",
   "Lattice",
   "Top.top",
   "Eq.mpr",
   "Exists.choose.congr_simp",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "setOf",
   "HarderNarasimhan.impl.JHFil_prop₁._simp_1_8",
   "instDecidableTrue",
   "HarderNarasimhan.impl.JHFil_prop₁._simp_1_12",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "Classical.not_and_iff_not_or_not",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "EmptyCollection.emptyCollection",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Or.inl",
   "Nat.instSemiring",
   "exists_and_left._simp_1",
   "instOfNatNat",
   "congr",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.impl.JHFil_prop₁._simp_1_7",
   "propext",
   "Nat.instAddMonoid",
   "Set",
   "HarderNarasimhan.impl.prop4d6",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "eq_self",
   "dite_cond_eq_true",
   "HarderNarasimhan.impl.JHFil_anti_mono",
   "HarderNarasimhan.impl.JHFil",
   "instDecidableEqNat",
   "forall_exists_index._simp_1",
   "Ne",
   "instHSub",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "dite",
   "bot_lt_top",
   "lt_trans",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "false_and",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "WellFounded.has_min",
   "Prod.mk",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "HarderNarasimhan.impl.JHFil.eq_def",
   "GT.gt",
   "HarderNarasimhan.impl.JHFil.congr_simp",
   "Nat.instAddCommMonoid",
   "And.intro",
   "not_false_eq_true",
   "Or",
   "funext",
   "forall_congr",
   "HSub.hSub",
   "lt_self_iff_false._simp_1",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Eq.rec",
   "Nat.instIsOrderedAddMonoid",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "Nat.instPartialOrder",
   "And.right",
   "Nat.instStarRing",
   "And",
   "IsOrderedAddMonoid.toAddLeftMono",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Unit",
   "Decidable.byContradiction",
   "Nat",
   "Iff.of_eq",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "HarderNarasimhan.impl.JHFil._proof_4",
   "implies_congr_ctx",
   "CompleteDistribLattice.toCoframe",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "GeneralizedCoheytingAlgebra.toLattice",
   "Subtype",
   "Eq.mp",
   "and_imp._simp_1",
   "SemilatticeSup.toPartialOrder",
   "Set.instEmptyCollection",
   "Nat.instAddCancelCommMonoid",
   "dite_congr",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Nat.instOne",
   "BoundedOrder.toOrderTop",
   "IsWellFounded.wf",
   "instDecidableFalse",
   "dite_cond_eq_false",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.JHFil._proof_1",
   "HarderNarasimhan.impl.JHFil_prop₁._simp_1_10",
   "Set.not_nonempty_iff_eq_empty._simp_1",
   "Not",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "HarderNarasimhan.impl.JHFil.match_1",
   "Exists.choose",
   "Eq.mpr_prop",
   "exists_prop_congr",
   "LT.lt",
   "StrictAnti",
   "lt_add_one",
   "ne_of_lt",
   "instSubNat",
   "of_eq_true",
   "One.toOfNat1",
   "False",
   "Subtype.mk",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.JHFil_prop₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [hacc : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) (hμ : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤)\n  (hμsl : HarderNarasimhan.SlopeLike μ) (hst : HarderNarasimhan.Semistable μ)\n  (hdc : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) (k : ℕ)\n  (hk : HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc k > ⊥),\n  μ ⟨(HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc (k + 1), HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc k), ⋯⟩ =\n    μ ⟨(⊥, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Eq.mp",
   "Preorder.toLT",
   "IsSuccArchimedean",
   "congrArg",
   "PartialOrder",
   "forall_congr",
   "IsMax",
   "One",
   "SuccAddOrder.toSuccOrder",
   "Preorder.toLE",
   "Eq",
   "strictAnti_of_succ_lt",
   "Not",
   "Order.succ",
   "Exists",
   "Add",
   "instHAdd",
   "Order.succ_eq_add_one",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "StrictAnti",
   "not_isMax_iff._simp_1",
   "Preorder",
   "One.toOfNat1",
   "SuccAddOrder",
   "Eq.refl",
   "id",
   "forall_exists_index._simp_1",
   "Eq.mpr"],
  "name": "strictAnti_of_add_one_lt",
  "constType":
  "∀ {α : Type u_2} {β : Type u_3} [inst : PartialOrder α] [inst_1 : Preorder β] [inst_2 : Add α] [inst_3 : One α]\n  [inst_4 : SuccAddOrder α] [IsSuccArchimedean α] {f : α → β}, (∀ (a : α), ¬IsMax a → f (a + 1) < f a) → StrictAnti f",
  "constCategory": "Theorem"},
 {"references":
  ["AddZeroClass",
   "SMulZeroClass",
   "AddZeroClass.toAddZero",
   "AddZero.toZero",
   "DistribSMul"],
  "name": "DistribSMul.toSMulZeroClass",
  "constType":
  "{M : Type u_12} → {A : Type u_13} → {inst : AddZeroClass A} → [self : DistribSMul M A] → SMulZeroClass M A",
  "constCategory": "Definition"},
 {"references":
  ["Nat.find",
   "Subtype",
   "PartialOrder.toPreorder",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "Prod.fst",
   "HarderNarasimhan.JordanHolderFiltration",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.strict_anti",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.JordanHolderFiltration μ)\n  (i j : ℕ), i < j → j ≤ Nat.find ⋯ → self.filtration j < self.filtration i",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.Stable",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Stable.stable",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.Stable μ] (x : ℒ) (hx : x ≠ ⊥),\n  x ≠ ⊤ → HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ ≠ HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Preorder",
   "SMul",
   "PosSMulStrictMono",
   "HSMul.hSMul",
   "Preorder.toLT",
   "instHSMul",
   "Zero.toOfNat0",
   "Zero",
   "OfNat.ofNat"],
  "name": "PosSMulStrictMono.mk",
  "constType":
  "∀ {α : Type u_1} {β : Type u_2} [inst : SMul α β] [inst_1 : Preorder α] [inst_2 : Preorder β] [inst_3 : Zero α],\n  (∀ ⦃a : α⦄, 0 < a → ∀ ⦃b₁ b₂ : β⦄, b₁ < b₂ → a • b₁ < a • b₂) → PosSMulStrictMono α β",
  "constCategory": "Other"},
 {"references": ["NonAssocSemiring", "NonUnitalNonAssocSemiring"],
  "name": "NonAssocSemiring.toNonUnitalNonAssocSemiring",
  "constType":
  "{α : Type u} → [self : NonAssocSemiring α] → NonUnitalNonAssocSemiring α",
  "constCategory": "Definition"},
 {"references":
  ["Lean.Omega.Constraint.upperBound",
   "Int.instSub",
   "instDecidableAnd",
   "Bool",
   "Eq.trans",
   "Lean.Omega.Coeffs",
   "and_true",
   "Option.some",
   "GE.ge",
   "Decidable.decide",
   "congrArg",
   "Decidable.decide.congr_simp",
   "congr",
   "Int.instAdd",
   "Eq.symm",
   "HSub.hSub",
   "Int.instLEInt",
   "Lean.Omega.Constraint.lowerBound",
   "Eq",
   "Bool.true",
   "decide_eq_true_eq",
   "True",
   "Lean.Omega.UpperBound.sat",
   "instHAdd",
   "Neg.neg",
   "And",
   "Lean.Omega.LowerBound.sat",
   "OfNat.ofNat",
   "Int.instNegInt",
   "Int",
   "HAdd.hAdd",
   "eq_self",
   "instDecidableEqBool",
   "Option.none",
   "Int.zero_sub",
   "instOfNat",
   "LE.le",
   "id",
   "Eq.mpr",
   "Lean.Omega.Constraint.mk",
   "instHSub",
   "Int.decLe",
   "Lean.Omega.Coeffs.dot",
   "Int.sub_left_le_of_le_add",
   "Lean.Omega.Constraint.sat'"],
  "name": "Lean.Omega.Constraint.addInequality_sat",
  "constType":
  "∀ {c : ℤ} {x y : Omega.Coeffs}, c + x.dot y ≥ 0 → { lowerBound := some (-c), upperBound := none }.sat' x y = true",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_3",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil_μA_pseudo_strict_anti",
   "HarderNarasimhan.impl.HNFil",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_9",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "HarderNarasimhan.impl.instConvexITotIntvl",
   "WellFoundedGT",
   "HarderNarasimhan.Convex",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_8",
   "Not",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "HarderNarasimhan.μA",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_10",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (i : ℕ) (hi : i + 1 < Nat.find ⋯),\n  ¬HarderNarasimhan.μA μ ⟨(HarderNarasimhan.impl.HNFil μ i, HarderNarasimhan.impl.HNFil μ (i + 1)), ⋯⟩ ≤\n      HarderNarasimhan.μA μ ⟨(HarderNarasimhan.impl.HNFil μ (i + 1), HarderNarasimhan.impl.HNFil μ (i + 2)), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["AddZeroClass", "AddZero"],
  "name": "AddZeroClass.toAddZero",
  "constType": "{M : Type u} → [self : AddZeroClass M] → AddZero M",
  "constCategory": "Definition"},
 {"references": ["Bot"],
  "name": "Bot.bot",
  "constType": "{α : Type u_1} → [self : Bot α] → α",
  "constCategory": "Definition"},
 {"references":
  ["NonUnitalNonAssocRing.toAddCommGroup",
   "contravariant_swap_add_of_contravariant_add",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "AddCommGroup.toAddCancelCommMonoid",
   "Ring.toNonAssocRing",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "AddCommGroup.toAddGroup",
   "Preorder.toLT",
   "HMul.hMul",
   "IsRightCancelAdd.addRightStrictMono_of_addRightMono",
   "AddCancelMonoid.toAddRightCancelMonoid",
   "GT.gt",
   "AddGroup.toSubtractionMonoid",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "Semiring.toNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "PartialOrder",
   "NonUnitalNonAssocRing.toHasDistribNeg",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "InvolutiveNeg.toNeg",
   "AddGroup.toSubNegMonoid",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "AddGroup.existsAddOfLE",
   "Left.one_lt_inv_iff._simp_4",
   "NonUnitalNonAssocSemiring.toDistrib",
   "AddGroup.toAddCancelMonoid",
   "Neg.neg",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "AddRightCancelMonoid.toAddRightCancelSemigroup",
   "IsOrderedAddMonoid.toAddLeftMono",
   "AddZeroClass.toAddZero",
   "Ring.toSemiring",
   "gt_iff_lt._simp_1",
   "id",
   "NegZeroClass.toZero",
   "instHMul",
   "Eq.mpr",
   "mul_pos_of_neg_of_neg",
   "covariant_swap_add_of_covariant_add",
   "AddMonoid.toAddZeroClass",
   "Eq.mp",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "IsOrderedRing.toIsOrderedAddMonoid",
   "neg_of_neg_pos",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "neg_mul",
   "IsOrderedCancelAddMonoid.toAddLeftReflectLT",
   "Zero.toOfNat0",
   "Eq",
   "Preorder.toLE",
   "IsStrictOrderedRing.toIsOrderedCancelAddMonoid",
   "AddRightCancelSemigroup.toIsRightCancelAdd",
   "Distrib.toAdd",
   "IsStrictOrderedRing",
   "IsStrictOrderedRing.toIsOrderedRing",
   "Distrib.toMul",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "Ring.toAddCommGroup",
   "NegZeroClass.toNeg",
   "AddGroupWithOne.toAddGroup",
   "HasDistribNeg.toInvolutiveNeg",
   "SubNegMonoid.toAddMonoid",
   "AddCommGroup.toDivisionAddCommMonoid",
   "AddCommMonoid.toAddCommSemigroup",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "LE.le",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "neg_neg_of_pos",
   "IsStrictOrderedRing.toMulPosStrictMono",
   "Ring"],
  "name": "Mathlib.Tactic.Linarith.mul_neg",
  "constType":
  "∀ {α : Type u} [inst : Ring α] [inst_1 : PartialOrder α] [IsStrictOrderedRing α] {a b : α}, a < 0 → 0 < b → b * a < 0",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "Module",
   "AddEquivClass.mk",
   "LinearMap.toAddHom",
   "LinearEquiv.toLinearMap",
   "LinearEquiv",
   "SemilinearEquivClass",
   "AddHom.map_add'",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "AddCommMonoid.toAddCommSemigroup",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "SemilinearEquivClass.mk",
   "LinearMap.map_smul'",
   "RingHomInvPair",
   "LinearEquiv.instEquivLike",
   "Semiring"],
  "name": "LinearEquiv.instSemilinearEquivClass",
  "constType":
  "∀ {R : Type u_1} {S : Type u_6} {M : Type u_7} {M₂ : Type u_9} [inst : Semiring R] [inst_1 : Semiring S]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module S M₂]\n  {σ : R →+* S} {σ' : S →+* R} [inst_6 : RingHomInvPair σ σ'] [inst_7 : RingHomInvPair σ' σ],\n  SemilinearEquivClass (M ≃ₛₗ[σ] M₂) σ M M₂",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Nat",
  "constType": "Type",
  "constCategory": "Other"},
 {"references": ["NatCast", "AddMonoidWithOne"],
  "name": "AddMonoidWithOne.toNatCast",
  "constType": "{R : Type u_2} → [self : AddMonoidWithOne R] → NatCast R",
  "constCategory": "Definition"},
 {"references":
  ["Set.Nonempty",
   "Set",
   "Set.toFinset",
   "Finset.toSet",
   "Iff.rfl",
   "Set.coe_toFinset",
   "Fintype",
   "Set.Elem",
   "congrArg",
   "Finset.coe_nonempty",
   "Iff",
   "id",
   "Eq.symm",
   "Eq.mpr",
   "Eq",
   "Finset.Nonempty",
   "propext"],
  "name": "Set.toFinset_nonempty",
  "constType":
  "∀ {α : Type u_1} {s : Set α} [inst : Fintype ↑s], s.toFinset.Nonempty ↔ s.Nonempty",
  "constCategory": "Theorem"},
 {"references": ["LE.le", "LE", "ge_iff_le", "Eq", "GE.ge", "propext"],
  "name": "HarderNarasimhan.impl.subseq_prop0'._simp_1_5",
  "constType": "∀ {α : Type u_1} [inst : LE α] {x y : α}, (x ≥ y) = (y ≤ x)",
  "constCategory": "Theorem"},
 {"references":
  ["Add", "Lean.Omega.LinearCombo.add", "Lean.Omega.LinearCombo", "Add.mk"],
  "name": "Lean.Omega.LinearCombo.instAdd",
  "constType": "Add Omega.LinearCombo",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.JordanHolderFiltration μ → Sort u} →\n                ((filtration : ℕ → ℒ) →\n                    (antitone : Antitone filtration) →\n                      (fin_len : ∃ N, filtration N = ⊥) →\n                        (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i) →\n                          (first_eq_top : filtration 0 = ⊤) →\n                            (step_cond₁ :\n                                ∀ (k : ℕ) (hk : k < Nat.find fin_len),\n                                  μ ⟨(filtration (k + 1), filtration k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩) →\n                              (step_cond₂ :\n                                  ∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n                                    z < filtration i →\n                                      μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩) →\n                                motive\n                                  { filtration := filtration, antitone := antitone, fin_len := fin_len,\n                                    strict_anti := strict_anti, first_eq_top := first_eq_top, step_cond₁ := step_cond₁,\n                                    step_cond₂ := step_cond₂ }) →\n                  (t : HarderNarasimhan.JordanHolderFiltration μ) → motive t",
  "constCategory": "Other"},
 {"references":
  ["AddCommMonoid",
   "Submodule.nontrivial_iff",
   "Module",
   "Iff.mpr",
   "Nontrivial",
   "Submodule",
   "Semiring"],
  "name": "Submodule.instNontrivial",
  "constType":
  "∀ {R : Type u_1} {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  [Nontrivial M], Nontrivial (Submodule R M)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Ne.symm",
   "BoundedOrder",
   "Bot.bot",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "Nontrivial",
   "Top.top",
   "Ne",
   "OrderBot.toBot",
   "Preorder.toLE",
   "bot_ne_top",
   "OrderTop.toTop"],
  "name": "top_ne_bot",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : BoundedOrder α] [Nontrivial α], ⊤ ≠ ⊥",
  "constCategory": "Theorem"},
 {"references": ["CompleteBooleanAlgebra", "CompleteAtomicBooleanAlgebra"],
  "name": "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
  "constType":
  "{α : Type u} → [self : CompleteAtomicBooleanAlgebra α] → CompleteBooleanAlgebra α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Inhabited.mk",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_3",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_1",
   "Prod.fst",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_2",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_7",
   "HarderNarasimhan.impl.instConvexITotIntvl",
   "WellFoundedGT",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_10",
   "Prod.snd",
   "Inhabited",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_4",
   "Lattice",
   "Nontrivial",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        [inst_3 : WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [inst_4 : CompleteLattice S] →\n              {μ : { p // p.1 < p.2 } → S} →\n                [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] →\n                  [hμcvx : HarderNarasimhan.Convex μ] →\n                    [h : HarderNarasimhan.μ_Admissible μ] → Inhabited (HarderNarasimhan.HarderNarasimhanFiltration μ)",
  "constCategory": "Definition"},
 {"references": ["absurd", "Not", "Or.elim", "Or", "id"],
  "name": "Or.resolve_right",
  "constType": "∀ {a b : Prop}, a ∨ b → ¬b → a",
  "constCategory": "Theorem"},
 {"references":
  ["LinearMap.comp._proof_2",
   "RingHom",
   "LinearMap.instFunLike",
   "Module",
   "LinearMap.mk",
   "AddHom.mk",
   "Function.comp",
   "LinearMap",
   "DFunLike.coe",
   "RingHomCompTriple",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "AddCommMonoid.toAddCommSemigroup",
   "LinearMap.comp._proof_1",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "Semiring"],
  "name": "LinearMap.comp",
  "constType":
  "{R₁ : Type u_2} →\n  {R₂ : Type u_3} →\n    {R₃ : Type u_4} →\n      {M₁ : Type u_9} →\n        {M₂ : Type u_10} →\n          {M₃ : Type u_11} →\n            [inst : Semiring R₁] →\n              [inst_1 : Semiring R₂] →\n                [inst_2 : Semiring R₃] →\n                  [inst_3 : AddCommMonoid M₁] →\n                    [inst_4 : AddCommMonoid M₂] →\n                      [inst_5 : AddCommMonoid M₃] →\n                        {module_M₁ : _root_.Module R₁ M₁} →\n                          {module_M₂ : _root_.Module R₂ M₂} →\n                            {module_M₃ : _root_.Module R₃ M₃} →\n                              {σ₁₂ : R₁ →+* R₂} →\n                                {σ₂₃ : R₂ →+* R₃} →\n                                  {σ₁₃ : R₁ →+* R₃} →\n                                    [RingHomCompTriple σ₁₂ σ₂₃ σ₁₃] →\n                                      (M₂ →ₛₗ[σ₂₃] M₃) → (M₁ →ₛₗ[σ₁₂] M₂) → M₁ →ₛₗ[σ₁₃] M₃",
  "constCategory": "Definition"},
 {"references":
  ["Real",
   "Real.instIsOrderedAddMonoid",
   "NNReal",
   "Real.instZeroLEOneClass",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Real.instAddCommMonoid",
   "Nonneg.semiring",
   "Real.instIsOrderedRing",
   "IsOrderedRing.toPosMulMono",
   "Real.partialOrder",
   "Real.semiring",
   "Semiring"],
  "name": "instSemiringNNReal",
  "constType": "Semiring NNReal",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.JordanHolderFiltration.casesOn",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.ext.match_1",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} (motive : HarderNarasimhan.JordanHolderFiltration μ → Prop)\n  (h : HarderNarasimhan.JordanHolderFiltration μ),\n  (∀ (filtration : ℕ → ℒ) (antitone : Antitone filtration) (fin_len : ∃ N, filtration N = ⊥)\n      (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i)\n      (first_eq_top : filtration 0 = ⊤)\n      (step_cond₁ : ∀ (k : ℕ) (hk : k < Nat.find fin_len), μ ⟨(filtration (k + 1), filtration k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩)\n      (step_cond₂ :\n        ∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n          z < filtration i → μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩),\n      motive\n        { filtration := filtration, antitone := antitone, fin_len := fin_len, strict_anti := strict_anti,\n          first_eq_top := first_eq_top, step_cond₁ := step_cond₁, step_cond₂ := step_cond₂ }) →\n    motive h",
  "constCategory": "Definition"},
 {"references":
  ["Lean.Omega.Constraint",
   "Bool",
   "Lean.Omega.Constraint.sat",
   "And",
   "Lean.Omega.Coeffs",
   "Lean.Omega.Constraint.combine",
   "And.intro",
   "Eq.mpr",
   "Lean.Omega.Constraint.combine_sat",
   "Eq",
   "Bool.true",
   "Lean.Omega.Coeffs.dot",
   "Lean.Omega.Constraint.sat'"],
  "name": "Lean.Omega.Constraint.combine_sat'",
  "constType":
  "∀ {s t : Omega.Constraint} {x y : Omega.Coeffs}, s.sat' x y = true → t.sat' x y = true → (s.combine t).sat' x y = true",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Max.max",
   "SemilatticeInf.toMin",
   "Lattice.toSemilatticeInf",
   "PartialOrder.toPreorder",
   "Min.min",
   "SemilatticeSup.toMax",
   "LE.le",
   "Lattice",
   "IsModularLattice",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "IsModularLattice.sup_inf_le_assoc_of_le",
  "constType":
  "∀ {α : Type u_2} {inst : Lattice α} [self : IsModularLattice α] {x : α} (y : α) {z : α}, x ≤ z → (x ⊔ y) ⊓ z ≤ x ⊔ y ⊓ z",
  "constCategory": "Theorem"},
 {"references": ["Eq", "propext", "Iff.intro"],
  "name": "Eq.propIntro",
  "constType": "∀ {a b : Prop}, (a → b) → (b → a) → a = b",
  "constCategory": "Theorem"},
 {"references": ["Option.none", "Top", "WithTop", "Top.mk"],
  "name": "WithTop.top",
  "constType": "{α : Type u_1} → Top (WithTop α)",
  "constCategory": "Definition"},
 {"references":
  ["Real",
   "Real.partialOrder._proof_1",
   "Real.partialOrder._proof_3",
   "Real.partialOrder._proof_2",
   "Real.instLE",
   "LT.lt",
   "PartialOrder.mk",
   "PartialOrder",
   "Real.instLT",
   "LE.mk",
   "LE.le",
   "Real.partialOrder._proof_4",
   "Preorder.mk",
   "LT.mk"],
  "name": "Real.partialOrder",
  "constType": "PartialOrder ℝ",
  "constCategory": "Definition"},
 {"references":
  ["Iff.trans",
   "exists_eq_left",
   "Exists",
   "Iff",
   "And",
   "exists_congr",
   "Eq",
   "And.comm"],
  "name": "exists_eq_right",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {a' : α}, (∃ a, p a ∧ a = a') ↔ p a'",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μA_res_intvl",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.instWeakSlopeLike₁OfSlopeLike",
   "Prod.mk",
   "Preorder.toLT",
   "Subtype.val",
   "HarderNarasimhan.proposition_4_1",
   "HarderNarasimhan.μBstar",
   "eq_of_heq",
   "Eq.symm",
   "CompleteLinearOrder",
   "Eq.ndrec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "HarderNarasimhan.instWeakAscendingChainConditionOfWellFoundedGT",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "HEq",
   "Top.top",
   "id",
   "HarderNarasimhan.instWellFoundedGTInterval",
   "HarderNarasimhan.μmin_res_intvl",
   "Eq.mpr",
   "HarderNarasimhan.lt_lt",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.instSlopeLikeIntervalResμ",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "HarderNarasimhan.Resμ",
   "congrArg",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "HarderNarasimhan.WeakSlopeLike₁",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "HarderNarasimhan.instBoundedOrderInterval",
   "Eq.casesOn",
   "CompletelyDistribLattice.toCompleteLattice",
   "LT.lt",
   "HarderNarasimhan.instNontrivialInterval",
   "HarderNarasimhan.μA",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "inferInstance",
   "Subtype.mk",
   "OrderTop.toTop",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.μA_eq_μmin",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) [HarderNarasimhan.SlopeLike μ] (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.μmin μ I = HarderNarasimhan.μA μ I",
  "constCategory": "Theorem"},
 {"references": ["Not", "Classical.not_imp", "And", "Eq", "propext"],
  "name": "Classical.not_imp._simp_2",
  "constType": "∀ {a b : Prop}, (¬(a → b)) = (a ∧ ¬b)",
  "constCategory": "Theorem"},
 {"references": ["Exists", "Set", "Membership.mem", "Set.instMembership"],
  "name": "Set.Nonempty",
  "constType": "{α : Type u} → Set α → Prop",
  "constCategory": "Definition"},
 {"references": ["Prod.casesOn", "Prod", "Prod.mk"],
  "name": "HarderNarasimhan.JordanHolderRel.match_1",
  "constType":
  "{ℒ : Type u_1} → (motive : ℒ × ℒ → Sort u_2) → (x : ℒ × ℒ) → ((x y : ℒ) → motive (x, y)) → motive x",
  "constCategory": "Definition"},
 {"references":
  ["rfl",
   "Not",
   "instLTNat",
   "Iff.mp",
   "And",
   "DecidablePred",
   "Nat.findGreatest",
   "Nat.findGreatest_eq_iff",
   "OfNat.ofNat",
   "LT.lt",
   "Nat",
   "instOfNatNat",
   "LE.le",
   "Ne",
   "Eq",
   "instLENat",
   "And.left"],
  "name": "Nat.findGreatest_le",
  "constType":
  "∀ {P : ℕ → Prop} [inst : DecidablePred P] (n : ℕ), Nat.findGreatest P n ≤ n",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.StI",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Eq.rec",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.StI.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S),\n  μ = μ_1 →\n    ∀ (I I_1 : { p // p.1 < p.2 }),\n      I = I_1 → ∀ (a a_1 : ℒ), a = a_1 → HarderNarasimhan.StI μ I a = HarderNarasimhan.StI μ_1 I_1 a_1",
  "constCategory": "Theorem"},
 {"references": ["Mul", "Distrib"],
  "name": "Distrib.toMul",
  "constType": "{R : Type u_1} → [self : Distrib R] → Mul R",
  "constCategory": "Definition"},
 {"references":
  ["HasSubset.mk",
   "Finset",
   "HasSubset",
   "Membership.mem",
   "Finset.instMembership"],
  "name": "Finset.instHasSubset",
  "constType": "{α : Type u_1} → HasSubset (Finset α)",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "zero_le'",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "CommMonoidWithZero.toMonoidWithZero",
   "LinearOrderedCommMonoidWithZero.toLinearOrder",
   "Preorder.toLT",
   "MonoidWithZero.toMulZeroOneClass",
   "LinearOrderedCommMonoidWithZero",
   "OfNat.ofNat",
   "LT.lt",
   "not_lt_of_ge",
   "instDistribLatticeOfLinearOrder",
   "DistribLattice.toLattice",
   "MulZeroOneClass.toMulZeroClass",
   "MulZeroClass.toZero",
   "Zero.toOfNat0",
   "LinearOrderedCommMonoidWithZero.toCommMonoidWithZero",
   "SemilatticeInf.toPartialOrder"],
  "name": "not_lt_zero'",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrderedCommMonoidWithZero α] {a : α}, ¬a < 0",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNlen",
   "Prod.fst",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "Eq.rec",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "LT.lt",
   "Prod",
   "Nat",
   "Eq.refl",
   "Lattice",
   "Nontrivial",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNlen.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S) (e_μ : μ = μ_1)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ], HarderNarasimhan.impl.HNlen μ = HarderNarasimhan.impl.HNlen μ_1",
  "constCategory": "Theorem"},
 {"references":
  ["Iff.trans",
   "Not",
   "lt_iff_lt_of_le_iff_le",
   "PartialOrder.toPreorder",
   "LinearOrder",
   "Preorder.toLT",
   "Iff.symm",
   "Iff.intro",
   "LT.lt",
   "LinearOrder.toPartialOrder",
   "not_lt",
   "Iff",
   "not_congr",
   "LE.le",
   "Preorder.toLE"],
  "name": "le_iff_le_iff_lt_iff_lt",
  "constType":
  "∀ {α : Type u_2} {β : Type u_5} [inst : LinearOrder α] [inst_1 : LinearOrder β] {a b : α} {c d : β},\n  (a ≤ b ↔ c ≤ d) ↔ (b < a ↔ d < c)",
  "constCategory": "Theorem"},
 {"references":
  ["LinearMap.instFunLike",
   "Module",
   "LocalizedModule.instAddCommMonoid",
   "MulZeroOneClass.toMulOneClass",
   "LocalizedModule.mkLinearMap",
   "Submodule",
   "LinearMap.semilinearMapClass",
   "AddCommMonoid",
   "Subsingleton",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "IsLocalizedModule.subsingleton_iff_ker_eq_top",
   "Eq",
   "NonAssocSemiring.toMulZeroOneClass",
   "CommRing.toCommSemiring",
   "LinearMap.ker",
   "LocalizedModule",
   "Submodule.instTop",
   "CommSemiring.toSemiring",
   "CommRing",
   "localizedModuleIsLocalizedModule",
   "LinearMap",
   "Submonoid",
   "LocalizedModule.isModule'",
   "Iff",
   "Top.top"],
  "name": "LocalizedModule.subsingleton_iff_ker_eq_top",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  {S : Submonoid R}, Subsingleton (LocalizedModule S M) ↔ LinearMap.ker (LocalizedModule.mkLinearMap S M) = ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "Module",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "Nonempty",
   "CommRing",
   "IsNoetherianRing",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration",
   "HarderNarasimhan.CoprimaryFiltration",
   "instNonemptyOfInhabited",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "inferInstance",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instNonemptyCoprimaryFiltration",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  Nonempty (HarderNarasimhan.CoprimaryFiltration R M)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "HarderNarasimhan.impl.HNlen",
   "Prod.fst",
   "HarderNarasimhan.impl.instConvexITotIntvl",
   "WellFoundedGT",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.impl.HNFil_is_strict_mono'",
   "LT.lt",
   "Prod",
   "Nat",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (i j : ℕ),\n  i < j → j ≤ HarderNarasimhan.impl.HNlen μ → HarderNarasimhan.impl.HNFil μ i < HarderNarasimhan.impl.HNFil μ j",
  "constCategory": "Theorem"},
 {"references":
  ["Eq.trans",
   "Singleton.singleton",
   "Membership.mem",
   "SMulZeroClass.toSMul",
   "Submodule.span",
   "Subtype.val",
   "Set.Elem",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "iff_self",
   "forall_congr",
   "Semiring.toModule",
   "Submodule.annihilator",
   "forall_prop_domain_congr",
   "DistribSMul.toSMulZeroClass",
   "SetLike.instMembership",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "DistribMulAction.toDistribSMul",
   "AddZeroClass.toAddZero",
   "Submodule.mem_annihilator_span_singleton._simp_1_1",
   "Set.instMembership",
   "Iff",
   "Eq.refl",
   "HSMul.hSMul",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Subtype",
   "forall_eq._simp_1",
   "Module",
   "CommSemiring",
   "AddCommMonoid.toAddMonoid",
   "congrArg",
   "Ideal",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "Eq",
   "True",
   "Set",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Semiring.toMonoidWithZero",
   "Set.instSingletonSet",
   "OfNat.ofNat",
   "Module.toDistribMulAction",
   "of_eq_true",
   "Submodule.setLike",
   "Subtype.forall._simp_1",
   "Subtype.mk",
   "Set.mem_singleton_iff._simp_1"],
  "name": "Submodule.mem_annihilator_span_singleton",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M] (g : M)\n  (r : R), r ∈ (Submodule.span R {g}).annihilator ↔ r • g = 0",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Ideal.IsPrime",
   "Distrib.toMul",
   "Membership.mem",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "HMul.hMul",
   "Ideal.IsTwoSided",
   "Iff.intro",
   "Or.casesOn",
   "Semiring.toNonAssocSemiring",
   "Ideal.mul_mem_right",
   "Or",
   "Ideal",
   "Ideal.IsPrime.mem_or_mem",
   "Submodule.setLike",
   "Iff",
   "instHMul",
   "Ideal.mul_mem_left",
   "Semiring.toModule",
   "Semiring"],
  "name": "Ideal.IsPrime.mul_mem_iff_mem_or_mem",
  "constType":
  "∀ {α : Type u} [inst : Semiring α] {I : Ideal α} [I.IsTwoSided], I.IsPrime → ∀ {x y : α}, x * y ∈ I ↔ x ∈ I ∨ y ∈ I",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "sup_eq_left",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "inf_le_inf_left",
   "sup_le",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "And.intro",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "Eq.rec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "And.right",
   "lt_of_le_of_lt",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "le_sup_left",
   "Set.instMembership",
   "Prod",
   "Exists.casesOn",
   "HarderNarasimhan.impl.lem2d4₂I",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "Nontrivial",
   "Lattice",
   "id",
   "Eq.mpr",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "sup_le_sup_right",
   "SemilatticeInf.toMin",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "le_trans",
   "SemilatticeSup.toPartialOrder",
   "lt_of_le_of_ne",
   "Prod.fst",
   "congrArg",
   "lt_irrefl",
   "HarderNarasimhan.impl.lem2d4₁",
   "Preorder.toLE",
   "Eq",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Set",
   "LT.lt",
   "Max.max",
   "HarderNarasimhan.μA._proof_1",
   "Min.min",
   "HarderNarasimhan.μA",
   "LE.le",
   "SemilatticeSup.toMax",
   "le_sInf",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "right_lt_sup",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.lem2d4₃I",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        ∀ (w : ℒ),\n          HarderNarasimhan.InIntvl I w →\n            ∀ (hxw : ¬x ≤ w) (u : ℒ) (huxw : u ≤ x ⊓ w),\n              HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(w, x ⊔ w), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.prop3d4._simp_1_1",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references": ["Bool"],
  "name": "sorryAx",
  "constType": "(α : Sort u) → Bool → α",
  "constCategory": "Axiom"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "GT.gt",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.impl.prop3d4₀func.match_1",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.impl.prop3d4₀func._proof_2",
   "Set.Nonempty",
   "Exists",
   "Lattice.toSemilatticeInf",
   "Set",
   "HarderNarasimhan.impl.ℒₛ",
   "And",
   "HarderNarasimhan.impl.prop3d4₀func",
   "HarderNarasimhan.impl.prop3d4₀func._proof_6",
   "BoundedOrder",
   "Prod.snd",
   "Exists.choose",
   "Set.instMembership",
   "Unit",
   "LT.lt",
   "Prod",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.impl.prop3d4₀func._proof_5",
   "Lattice",
   "Nontrivial",
   "HarderNarasimhan.impl.prop3d4₀func._proof_1",
   "Subtype.mk",
   "dite",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func._sunfold",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] →\n      [BoundedOrder ℒ] →\n        [h : WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [CompleteLattice S] →\n              ({ p // p.1 < p.2 } → S) → (I : { p // p.1 < p.2 }) → ℕ → { p // HarderNarasimhan.InIntvl I p }",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.WeakSlopeLike₁.mk",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Subtype.val",
   "Prod.fst",
   "And.intro",
   "Or.inl",
   "Or",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁",
   "CompleteLinearOrder",
   "Eq",
   "Preorder.toLE",
   "And.left",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "Or.casesOn",
   "le_of_lt",
   "Eq.refl",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "HarderNarasimhan.SlopeLike.slopelike"],
  "name": "HarderNarasimhan.instWeakSlopeLike₁OfSlopeLike",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S} [hμ : HarderNarasimhan.SlopeLike μ],\n  HarderNarasimhan.WeakSlopeLike₁ μ",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.Stable",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.Stable.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} [toSemistable : HarderNarasimhan.Semistable μ],\n  (∀ (x : ℒ) (hx : x ≠ ⊥), x ≠ ⊤ → HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ ≠ HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩) →\n    HarderNarasimhan.Stable μ",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Eq.refl",
   "PartialOrder",
   "LE.le",
   "Nontrivial",
   "HarderNarasimhan.instPartialOrderInterval",
   "HarderNarasimhan.Interval",
   "Subtype.mk",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "HarderNarasimhan.lt_lt"],
  "name": "HarderNarasimhan.Resμ.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] (z : { p // p.1 < p.2 })\n  {S : Type u_2} [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (p : { p // p.1 < p.2 }),\n  HarderNarasimhan.Resμ z μ p = μ ⟨(↑(↑p).1, ↑(↑p).2), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Nat", "Nat.casesOn", "Nat.succ", "instOfNatNat", "OfNat.ofNat"],
  "name":
  "_private.HarderNarasimhan.JordanHolderFiltration.Impl.0.HarderNarasimhan.impl.JHFil.match_1.splitter",
  "constType":
  "(motive : ℕ → Sort u_1) → (k : ℕ) → motive 0 → ((n : ℕ) → motive n.succ) → motive k",
  "constCategory": "Definition"},
 {"references":
  ["MulActionSemiHomClass.map_smulₛₗ",
   "FunLike",
   "SMul",
   "MulActionHomClass",
   "HSMul.hSMul",
   "id",
   "instHSMul",
   "Eq",
   "DFunLike.coe"],
  "name": "map_smul",
  "constType":
  "∀ {F : Type u_8} {M : Type u_9} {X : Type u_10} {Y : Type u_11} [inst : SMul M X] [inst_1 : SMul M Y]\n  [inst_2 : FunLike F X Y] [MulActionHomClass F M X Y] (f : F) (c : M) (x : X), f (c • x) = c • f x",
  "constCategory": "Theorem"},
 {"references":
  ["OrderDual.toDual",
   "OrderDual",
   "Equiv.instEquivLike",
   "Exists",
   "EquivLike.toFunLike",
   "OrderDual.exists",
   "Eq",
   "DFunLike.coe",
   "Equiv",
   "propext"],
  "name": "HarderNarasimhan.impl.dualμBstar_eq_μAstar._simp_1_3",
  "constType":
  "∀ {α : Type u_1} {p : αᵒᵈ → Prop}, (∃ a, p a) = ∃ a, p (OrderDual.toDual a)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "LT.lt",
   "instLTNat",
   "Nat",
   "instOfNatNat",
   "instHAdd",
   "Nat.le_of_succ_le_succ",
   "LE.le",
   "instLENat",
   "OfNat.ofNat"],
  "name": "Nat.le_of_lt_add_one",
  "constType": "∀ {n m : ℕ}, n < m + 1 → n ≤ m",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "SetLike.instMembership",
   "LinearMap.instFunLike",
   "SemilinearMapClass",
   "Module",
   "Submodule.module",
   "Membership.mem",
   "LinearMap",
   "Submodule",
   "LinearMap.semilinearMapClass",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "RingHom.id",
   "Submodule.addCommMonoid",
   "Semiring"],
  "name": "Submodule.submoduleOf._proof_1",
  "constType":
  "∀ {R : Type u_2} {M : Type u_1} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  (q : Submodule R M), SemilinearMapClass (↥q →ₗ[R] M) (RingHom.id R) (↥q) M",
  "constCategory": "Theorem"},
 {"references": ["Eq.rec", "Eq"],
  "name": "Eq.ndrec",
  "constType":
  "{α : Sort u2} → {a : α} → {motive : α → Sort u1} → motive a → {b : α} → a = b → motive b",
  "constCategory": "Definition"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "Ring.toNonAssocRing",
   "Eq.trans",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "sub_eq_add_neg",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "SubNegMonoid.toSub",
   "HSub.hSub",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "Eq.ndrec",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "Distrib.toAdd",
   "True",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "Neg.neg",
   "SubNegMonoid.toNeg",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "HAdd.hAdd",
   "Ring.toAddCommGroup",
   "eq_self",
   "NegZeroClass.toNeg",
   "AddGroupWithOne.toAddGroup",
   "SubNegMonoid.toAddMonoid",
   "AddCommGroup.toDivisionAddCommMonoid",
   "of_eq_true",
   "instHSub",
   "AddMonoid.toAddZeroClass",
   "Ring"],
  "name": "Mathlib.Tactic.Ring.sub_pf",
  "constType":
  "∀ {R : Type u_2} [inst : Ring R] {a b c d : R}, -b = c → a + c = d → a - b = d",
  "constCategory": "Theorem"},
 {"references":
  ["not_le",
   "LT.lt",
   "Not",
   "LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Eq",
   "Preorder.toLE",
   "propext"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_19",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, (¬a ≤ b) = (b < a)",
  "constCategory": "Theorem"},
 {"references":
  ["instTransEq",
   "Trans.trans",
   "add_lt_add_left",
   "AddZeroClass",
   "instHAdd",
   "AddLeftStrictMono",
   "add_zero",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "Eq.symm",
   "Zero.toOfNat0",
   "Eq",
   "LT",
   "AddZero.toZero"],
  "name": "lt_add_of_pos_right",
  "constType":
  "∀ {α : Type u_1} [inst : AddZeroClass α] [inst_1 : LT α] [AddLeftStrictMono α] (a : α) {b : α}, 0 < b → a < a + b",
  "constCategory": "Theorem"},
 {"references": ["Classical.choose_spec", "Exists", "Exists.choose"],
  "name": "Exists.choose_spec",
  "constType": "∀ {α : Sort u_1} {p : α → Prop} (P : ∃ a, p a), p P.choose",
  "constCategory": "Theorem"},
 {"references":
  ["AddCancelMonoid",
   "SubNegMonoid.toAddMonoid",
   "AddLeftCancelMonoid.mk",
   "AddCancelMonoid.mk",
   "AddGroup",
   "AddGroup.toAddCancelMonoid._proof_2",
   "AddGroup.toSubNegMonoid",
   "AddGroup.toAddCancelMonoid._proof_1"],
  "name": "AddGroup.toAddCancelMonoid",
  "constType": "{G : Type u_1} → [AddGroup G] → AddCancelMonoid G",
  "constCategory": "Definition"},
 {"references": ["Preorder", "ClosureOperator"],
  "name": "ClosureOperator.IsClosed",
  "constType":
  "{α : Type u_1} → [inst : Preorder α] → ClosureOperator α → α → Prop",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "bot_le",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "PartialOrder",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "OrderBot.toBot",
   "HarderNarasimhan.StrongDescendingChainCondition.mk",
   "Preorder.toLE",
   "Exists",
   "instHAdd",
   "lt_of_le_of_lt",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "StrictAnti",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.StrongDescendingChainCondition μ → Sort u} →\n                ((wdcc : ∀ (x : ℕ → ℒ) (saf : StrictAnti x), ∃ N, μ ⟨(⊥, x N), ⋯⟩ ≤ μ ⟨(x (N + 1), x N), ⋯⟩) →\n                    motive ⋯) →\n                  (t : HarderNarasimhan.StrongDescendingChainCondition μ) → motive t",
  "constCategory": "Other"},
 {"references": ["exists_prop", "Exists", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.semistable_of_step_cond₂._simp_1_2",
  "constType": "∀ {b a : Prop}, (∃ (_ : a), b) = (a ∧ b)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder", "Or", "PartialOrder", "LE.le", "Preorder.toLE"],
  "name": "HarderNarasimhan.IsComparable",
  "constType": "{ℒ : Type u_1} → [PartialOrder ℒ] → ℒ → ℒ → Prop",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Submodule.instNontrivial",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.μ",
   "Preorder.toLT",
   "Prod.fst",
   "Or.inl",
   "HarderNarasimhan.instLinearOrderS₀",
   "Preorder.toLE",
   "HarderNarasimhan.S",
   "CompleteLattice.toConditionallyCompleteLattice",
   "SemilatticeInf.toPartialOrder",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "OrderTheory.instIsTotalDedekindMacNeilleCompletionLe",
   "CommSemiring.toSemiring",
   "HarderNarasimhan.IsAttained",
   "AddCommGroup",
   "Prod.snd",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "HarderNarasimhan.μ_Admissible.mk",
   "CommRing",
   "HarderNarasimhan.impl.prop3d13₁",
   "LT.lt",
   "Prod",
   "IsNoetherianRing",
   "IsTotal",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Nontrivial",
   "LE.le",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "inferInstance",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.S₀",
   "CompleteLattice.toBoundedOrder",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instμ_AdmissibleℒSμ",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  HarderNarasimhan.μ_Admissible (HarderNarasimhan.μ R M)",
  "constCategory": "Theorem"},
 {"references": ["MulOneClass"],
  "name": "Submonoid",
  "constType": "(M : Type u_3) → [MulOneClass M] → Type u_3",
  "constCategory": "Other"},
 {"references":
  ["HarderNarasimhan.impl.CP.f1._proof_1",
   "PartialOrder.toPreorder",
   "SemilinearMapClass",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Preorder.toLT",
   "Subtype.val",
   "PrimeSpectrum.isPrime",
   "LinearMap.semilinearMapClass",
   "Semiring.toNonAssocSemiring",
   "Finset.min'",
   "RingHom.id",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "SetLike.instMembership",
   "LocalizedModule",
   "Submodule.addCommGroup",
   "Prod.snd",
   "LinearMap",
   "Prod",
   "LocalizedModule.isModule'",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "LocalizedModule.instAddCommMonoid",
   "HarderNarasimhan.impl.μ_nonempty",
   "Prod.fst",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Ideal.primeCompl",
   "PrimeSpectrum.asIdeal",
   "HarderNarasimhan._μ",
   "CommRing.toCommSemiring",
   "LinearExtension",
   "CommSemiring.toSemiring",
   "Set.toFinset",
   "AddCommGroup",
   "CommRing",
   "LT.lt",
   "PrimeSpectrum",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_3",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  SemilinearMapClass\n    (↥(↑I).2 →ₗ[R]\n      LocalizedModule ((HarderNarasimhan._μ R M I).toFinset.min' ⋯).asIdeal.primeCompl\n        (↥(↑I).2 ⧸ Submodule.submoduleOf (↑I).1 (↑I).2))\n    (RingHom.id R) (↥(↑I).2)\n    (LocalizedModule ((HarderNarasimhan._μ R M I).toFinset.min' ⋯).asIdeal.primeCompl\n      (↥(↑I).2 ⧸ Submodule.submoduleOf (↑I).1 (↑I).2))",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "PartialOrder",
   "Eq.refl",
   "Nontrivial",
   "Eq",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.TotIntvl.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ],\n  HarderNarasimhan.TotIntvl = HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.trans",
   "True",
   "ite",
   "LinearOrder",
   "ite_cond_eq_true",
   "min_def",
   "congrArg",
   "eq_self",
   "LinearOrder.toPartialOrder",
   "of_eq_true",
   "LinearOrder.toDecidableLE",
   "Min.min",
   "LE.le",
   "Eq",
   "Preorder.toLE",
   "le_refl._simp_1",
   "LinearOrder.toMin"],
  "name": "min_self",
  "constType": "∀ {α : Type u_1} [inst : LinearOrder α] (a : α), min a a = a",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "instLTNat",
   "Nat.succ_add",
   "Nat.add_le_of_le_sub",
   "instHAdd",
   "Eq.mp",
   "Nat.ge_of_not_lt",
   "OfNat.ofNat",
   "congrArg",
   "HAdd.hAdd",
   "LT.lt",
   "Nat",
   "Nat.not_lt_zero",
   "Nat.sub_eq_zero_of_le",
   "instSubNat",
   "Nat.succ",
   "instOfNatNat",
   "LE.le",
   "HSub.hSub",
   "instHSub",
   "instLENat",
   "Nat.le_of_lt"],
  "name": "Nat.add_lt_of_lt_sub",
  "constType": "∀ {a b c : ℕ}, a < c - b → a + b < c",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "And",
   "Preorder.toLT",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "le_rfl",
   "And.intro",
   "Subtype.prop",
   "le_of_lt",
   "PartialOrder",
   "LE.le",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.instBoundedOrderInterval._proof_3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] {z : { p // p.1 < p.2 }}, (↑z).1 ≤ (↑z).1 ∧ (↑z).1 ≤ (↑z).2",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "CompleteLattice.toLattice",
   "SemilatticeSup.toPartialOrder",
   "BoundedOrder",
   "Preorder.toLE",
   "CompleteLattice"],
  "name": "CompleteLattice.toBoundedOrder",
  "constType": "{α : Type u_8} → [self : CompleteLattice α] → BoundedOrder α",
  "constCategory": "Definition"},
 {"references":
  ["SemilatticeInf",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Min.min",
   "LE.le",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "SemilatticeInf.inf_le_right"],
  "name": "inf_le_right",
  "constType": "∀ {α : Type u} [inst : SemilatticeInf α] {a b : α}, a ⊓ b ≤ b",
  "constCategory": "Theorem"},
 {"references": ["Setoid", "Setoid.r", "Quot"],
  "name": "Quotient",
  "constType": "{α : Sort u} → Setoid α → Sort u",
  "constCategory": "Definition"},
 {"references":
  ["Quotient",
   "HasQuotient.mk",
   "Module",
   "Submodule.quotientRel",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "HasQuotient",
   "Submodule",
   "Ring.toSemiring",
   "Ring"],
  "name": "Submodule.hasQuotient",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Ring R] → [inst_1 : AddCommGroup M] → [inst_2 : _root_.Module R M] → HasQuotient M (Submodule R M)",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Or",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₁.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤), μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩) →\n    HarderNarasimhan.WeakSlopeLike₁ μ",
  "constCategory": "Other"},
 {"references": ["LE.le", "LE", "ge_iff_le", "Eq", "GE.ge", "propext"],
  "name": "HarderNarasimhan.impl.theorem3d10._simp_1_5",
  "constType": "∀ {α : Type u_1} [inst : LE α] {x y : α}, (x ≥ y) = (y ≤ x)",
  "constCategory": "Theorem"},
 {"references": ["Decidable", "Eq"],
  "name": "DecidableEq",
  "constType": "Sort u → Sort (max 1 u)",
  "constCategory": "Definition"},
 {"references":
  ["Int.instCommRing", "CommRing.toRing", "inferInstance", "Int", "Ring"],
  "name": "Int.instRing",
  "constType": "Ring ℤ",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Not",
   "LinearOrder.toPartialOrder",
   "not_lt",
   "PartialOrder.toPreorder",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Eq",
   "Preorder.toLE",
   "propext"],
  "name": "HarderNarasimhan.impl.prop3d13₂._simp_3",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, (¬a < b) = (b ≤ a)",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "IsNoetherianRing",
   "Module",
   "Nontrivial",
   "CommSemiring.toSemiring",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "CommRing",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration",
  "constType":
  "(R : Type u_1) →\n  [inst : CommRing R] →\n    [IsNoetherianRing R] →\n      (M : Type u_2) →\n        [Nontrivial M] → [inst_3 : AddCommGroup M] → [inst_4 : _root_.Module R M] → [Module.Finite R M] → Type u_2",
  "constCategory": "Other"},
 {"references": ["Ord", "Ordering"],
  "name": "Ord.mk",
  "constType": "{α : Type u} → (α → α → Ordering) → Ord α",
  "constCategory": "Other"},
 {"references":
  ["Submodule.Quotient.mk",
   "Eq.trans",
   "AddCommGroup.toAddGroup",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Iff.mp",
   "Quotient.mk",
   "Exists.intro",
   "Submodule.Quotient.instSMul",
   "SMulZeroClass.toSMul",
   "Algebra.id",
   "Subtype.val",
   "Quotient.out_eq",
   "Submodule.subtype",
   "LinearMap.semilinearMapClass",
   "MulAction.toSMul",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "Submodule.submoduleOf._proof_1",
   "Eq.symm",
   "DistribMulAction.toMulAction",
   "AddGroup.toSubNegMonoid",
   "Semiring.toModule",
   "DistribSMul.toSMulZeroClass",
   "rfl",
   "Exists",
   "LinearMap.ker",
   "SetLike.instMembership",
   "HarderNarasimhan.impl.annihilator_lift._simp_1_1",
   "Submodule.addCommGroup",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "DistribMulAction.toDistribSMul",
   "Submodule.Quotient.instSMul'",
   "LinearMap",
   "AddZeroClass.toAddZero",
   "Submodule.Quotient.mk_eq_zero",
   "Ring.toSemiring",
   "Submodule.comap",
   "Iff.mpr",
   "SMulMemClass.smul_mem",
   "Nontrivial",
   "HSMul.hSMul",
   "HarderNarasimhan.impl.annihilator_lift._simp_1_2",
   "id",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "Quotient.out",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Submodule.submoduleOf",
   "Quotient",
   "LinearMap.toSpanSingleton",
   "Submodule.hasQuotient",
   "Subtype",
   "HasQuotient.Quotient",
   "LinearMap.instFunLike",
   "Eq.mp",
   "Module",
   "Submodule.module",
   "Submodule.smulMemClass",
   "Submodule.Quotient.instZeroQuotient",
   "AddCommMonoid.toAddMonoid",
   "congrArg",
   "Submodule",
   "Iff.intro",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "Ideal.ext",
   "Algebra.toSMul",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "Eq",
   "CommRing.toCommSemiring",
   "True",
   "IsScalarTower.left",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.quotientRel",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "CommRing",
   "OfNat.ofNat",
   "Submodule.isScalarTower'",
   "eq_self",
   "CommRing.toRing",
   "Module.toDistribMulAction",
   "IsNoetherianRing",
   "of_eq_true",
   "SubNegMonoid.toAddMonoid",
   "Submodule.setLike",
   "HarderNarasimhan.impl.annihilator_lift._simp_1_3",
   "Submodule.smul",
   "Subtype.mk",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.annihilator_lift",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [IsNoetherianRing R] {M : Type u_2} [Nontrivial M] [inst_3 : AddCommGroup M]\n  [inst_4 : _root_.Module R M] [Module.Finite R M] {N₁ u N₃ : Submodule R M} (p : Ideal R) (m : ↥u ⧸ N₁.submoduleOf u),\n  p = LinearMap.ker (LinearMap.toSpanSingleton R (↥u ⧸ N₁.submoduleOf u) m) →\n    ↑(Quotient.out m) ∈ N₃ → ∃ x, p = LinearMap.ker (LinearMap.toSpanSingleton R (↥N₃ ⧸ N₁.submoduleOf N₃) x)",
  "constCategory": "Theorem"},
 {"references": ["IsWellFounded", "GT.gt", "LT"],
  "name": "WellFoundedGT",
  "constType": "(α : Type u_1) → [LT α] → Prop",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Prod",
   "Subtype",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "Nontrivial",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Preorder.toLE",
   "CompleteLattice",
   "Prod.fst"],
  "name": "HarderNarasimhan.WeakSlopeLike₁",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["le_top",
   "True",
   "LE.le",
   "Top.top",
   "LE",
   "eq_true",
   "OrderTop",
   "Eq",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.semistableI_iff._simp_1_10",
  "constType":
  "∀ {α : Type u} [inst : LE α] [inst_1 : OrderTop α] {a : α}, (a ≤ ⊤) = True",
  "constCategory": "Theorem"},
 {"references": ["Iff", "Eq"],
  "name": "propext",
  "constType": "∀ {a b : Prop}, (a ↔ b) → a = b",
  "constCategory": "Axiom"},
 {"references":
  ["SetLike.instPartialOrder",
   "PartialOrder.toPreorder",
   "SetLike.instMembership",
   "Module",
   "Submodule.instTop",
   "Membership.mem",
   "OrderTop",
   "Submodule",
   "AddCommMonoid",
   "Submodule.setLike",
   "Preorder.toLE",
   "trivial",
   "Semiring",
   "OrderTop.mk"],
  "name": "Submodule.instOrderTop",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_3} →\n    [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → OrderTop (Submodule R M)",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "PartialOrder.toPreorder",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "Nontrivial",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice"],
  "name": "HarderNarasimhan.NashEquilibrium.nash_eq",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : PartialOrder ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.NashEquilibrium μ],\n  HarderNarasimhan.μAstar μ = HarderNarasimhan.μBstar μ",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "decidableLTOfDecidableLE",
   "DecidableLE",
   "DecidableLT",
   "Iff",
   "LE.mk",
   "id",
   "And",
   "Preorder.mk",
   "LT.mk"],
  "name":
  "HarderNarasimhan.TotallyOrderedRealVectorSpace.toDecidableLT._inherited_default",
  "constType":
  "{V : Type u_1} →\n  (le lt : V → V → Prop) →\n    (∀ (a : V), le a a) →\n      (∀ (a b c : V), le a b → le b c → le a c) →\n        (∀ (a b : V), lt a b ↔ le a b ∧ ¬le b a) → DecidableLE V → DecidableLT V",
  "constCategory": "Definition"},
 {"references": ["Not", "Decidable", "Decidable.casesOn"],
  "name": "ite",
  "constType": "{α : Sort u} → (c : Prop) → [h : Decidable c] → α → α → α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Bot.mk",
   "Preorder.toLT",
   "Subtype.val",
   "BoundedOrder.mk",
   "HarderNarasimhan.instBoundedOrderInterval._proof_4",
   "Prod.fst",
   "PartialOrder",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "OrderBot.mk",
   "OrderTop.mk",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.instBoundedOrderInterval._proof_2",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "Top.mk",
   "Subtype.mk",
   "HarderNarasimhan.instBoundedOrderInterval._proof_3",
   "HarderNarasimhan.instBoundedOrderInterval._proof_1"],
  "name": "HarderNarasimhan.instBoundedOrderInterval",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] → {z : { p // p.1 < p.2 }} → BoundedOrder (HarderNarasimhan.Interval z)",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat",
   "Nat.cast",
   "Int.instLTInt",
   "Eq",
   "Mathlib.Tactic.Zify.natCast_lt",
   "propext",
   "instNatCastInt",
   "Int"],
  "name": "Mathlib.Tactic.Zify.natCast_lt._simp_1",
  "constType": "∀ (a b : ℕ), (a < b) = (↑a < ↑b)",
  "constCategory": "Theorem"},
 {"references": ["Nat", "OfNat"],
  "name": "OfNat.ofNat",
  "constType": "{α : Type u} → (x : ℕ) → [self : OfNat α x] → α",
  "constCategory": "Definition"},
 {"references":
  ["MulOneClass.toMulOne",
   "Subtype",
   "SetLike.instMembership",
   "MulOne.toOne",
   "Submonoid.instSetLike",
   "Membership.mem",
   "MulOneClass",
   "One.mk",
   "OfNat.ofNat",
   "Submonoid",
   "One.toOfNat1",
   "Submonoid.one_mem",
   "One",
   "Subtype.mk"],
  "name": "Submonoid.one",
  "constType":
  "{M : Type u_4} → [inst : MulOneClass M] → (S : Submonoid M) → One ↥S",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "OrderDual",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Or",
   "Subtype.prop",
   "OrderDual.instLT",
   "PartialOrder",
   "OrderDual.instTop",
   "OrderDual.instLE",
   "OrderBot.toBot",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "OrderDual.instPreorder",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "CompleteLattice",
   "HarderNarasimhan.impl.instCoeSubtypeProdOrderDualLtFstSndOfNontrivialOfBoundedOrder_harderNarasimhan._proof_1"],
  "name": "HarderNarasimhan.impl.h₂_dual_of_h₂",
  "constType":
  "∀ {ℒ : Type u_1} [Nontrivial ℒ] [inst : PartialOrder ℒ] [inst_1 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_2 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (z : { p // p.1 < p.2 }) (hz : ⊥ < (↑z).1), μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ z ∨ μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ ⟨(⊥, (↑z).1), hz⟩) →\n    ∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤),\n      (fun p ↦ μ ⟨((↑p).2, (↑p).1), ⋯⟩) z ≤ (fun p ↦ μ ⟨((↑p).2, (↑p).1), ⋯⟩) ⟨((↑z).1, ⊤), ⋯⟩ ∨\n        (fun p ↦ μ ⟨((↑p).2, (↑p).1), ⋯⟩) ⟨((↑z).2, ⊤), hz⟩ ≤ (fun p ↦ μ ⟨((↑p).2, (↑p).1), ⋯⟩) ⟨((↑z).1, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.le_trans", "Nat", "Nat.le_succ", "Nat.succ", "LE.le", "instLENat"],
  "name": "Nat.le_of_succ_le",
  "constType": "∀ {n m : ℕ}, n.succ ≤ m → n ≤ m",
  "constCategory": "Theorem"},
 {"references":
  ["Iff.trans",
   "Max.max",
   "PartialOrder.toPreorder",
   "sup_eq_left",
   "Iff",
   "eq_comm",
   "LE.le",
   "SemilatticeSup.toMax",
   "SemilatticeSup.toPartialOrder",
   "SemilatticeSup",
   "Preorder.toLE",
   "Eq"],
  "name": "left_eq_sup",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, a = a ⊔ b ↔ b ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "HarderNarasimhan.JordanHolderFiltration.noConfusion",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.mk.noConfusion",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              (P : Sort u) →\n                (filtration : ℕ → ℒ) →\n                  (antitone : Antitone filtration) →\n                    (fin_len : ∃ N, filtration N = ⊥) →\n                      (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i) →\n                        (first_eq_top : filtration 0 = ⊤) →\n                          (step_cond₁ :\n                              ∀ (k : ℕ) (hk : k < Nat.find fin_len),\n                                μ ⟨(filtration (k + 1), filtration k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩) →\n                            (step_cond₂ :\n                                ∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n                                  z < filtration i →\n                                    μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩) →\n                              (filtration' : ℕ → ℒ) →\n                                (antitone' : Antitone filtration') →\n                                  (fin_len' : ∃ N, filtration' N = ⊥) →\n                                    (strict_anti' :\n                                        ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len' → filtration' j < filtration' i) →\n                                      (first_eq_top' : filtration' 0 = ⊤) →\n                                        (step_cond₁' :\n                                            ∀ (k : ℕ) (hk : k < Nat.find fin_len'),\n                                              μ ⟨(filtration' (k + 1), filtration' k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩) →\n                                          (step_cond₂' :\n                                              ∀ (i : ℕ) (hi : i < Nat.find fin_len') (z : ℒ)\n                                                (h' : filtration' (i + 1) < z),\n                                                z < filtration' i →\n                                                  μ ⟨(filtration' (i + 1), z), h'⟩ <\n                                                    μ ⟨(filtration' (i + 1), filtration' i), ⋯⟩) →\n                                            { filtration := filtration, antitone := antitone, fin_len := fin_len,\n                                                  strict_anti := strict_anti, first_eq_top := first_eq_top,\n                                                  step_cond₁ := step_cond₁, step_cond₂ := step_cond₂ } =\n                                                { filtration := filtration', antitone := antitone', fin_len := fin_len',\n                                                  strict_anti := strict_anti', first_eq_top := first_eq_top',\n                                                  step_cond₁ := step_cond₁', step_cond₂ := step_cond₂' } →\n                                              (filtration = filtration' → P) → P",
  "constCategory": "Definition"},
 {"references":
  ["Function.injective_surjInv",
   "Finite.of_injective",
   "Function.surjInv",
   "Finite",
   "Function.Surjective"],
  "name": "Finite.of_surjective",
  "constType":
  "∀ {α : Sort u_4} {β : Sort u_5} [Finite α] (f : α → β), Function.Surjective f → Finite β",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Prod.mk",
   "Preorder.toLT",
   "lt_of_le_of_ne",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Subtype.prop",
   "HarderNarasimhan.InIntvl",
   "LE.le",
   "Lattice",
   "Ne",
   "Preorder.toLE",
   "And.left",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.ℒₛ._proof_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] (I : { p // p.1 < p.2 }) (x : { p // HarderNarasimhan.InIntvl I p }),\n  (↑I).1 ≠ ↑x → ((↑I).1, ↑x).1 < ((↑I).1, ↑x).2",
  "constCategory": "Theorem"},
 {"references": ["And.intro", "And", "And.rec"],
  "name": "And.casesOn",
  "constType":
  "{a b : Prop} → {motive : a ∧ b → Sort u} → (t : a ∧ b) → ((left : a) → (right : b) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "And.right",
   "Preorder.toLT",
   "Prod.snd",
   "lt_of_le_of_ne",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.InIntvl",
   "PartialOrder",
   "LE.le",
   "Ne",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.IsAttained._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] (I : { p // p.1 < p.2 }) (a : ℒ),\n  HarderNarasimhan.InIntvl I a → a ≠ (↑I).2 → (a, (↑I).2).1 < (a, (↑I).2).2",
  "constCategory": "Theorem"},
 {"references": ["outParam"],
  "name": "DFunLike",
  "constType":
  "Sort u_1 → (α : outParam (Sort u_2)) → outParam (α → Sort u_3) → Sort (max (max (max 1 u_1) u_2) u_3)",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "Nontrivial",
   "Lattice",
   "Eq.symm",
   "HarderNarasimhan.Convex",
   "Eq",
   "Preorder.toLE",
   "propext",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.instConvexOfConvexITotIntvl._simp_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Convex μ = HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "RingHomCompTriple.mk",
   "Eq.trans",
   "True",
   "RingHomCompTriple",
   "congrArg",
   "eq_self",
   "Semiring.toNonAssocSemiring",
   "of_eq_true",
   "RingHom.id",
   "RingHom.comp_id",
   "Eq",
   "RingHom.comp",
   "Semiring"],
  "name": "RingHomCompTriple.ids",
  "constType":
  "∀ {R₁ : Type u_1} {R₂ : Type u_2} [inst : Semiring R₁] [inst_1 : Semiring R₂] {σ₁₂ : R₁ →+* R₂},\n  RingHomCompTriple (RingHom.id R₁) σ₁₂ σ₁₂",
  "constCategory": "Theorem"},
 {"references": ["Prod"],
  "name": "Prod.mk",
  "constType": "{α : Type u} → {β : Type v} → α → β → α × β",
  "constCategory": "Other"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Membership.mem",
   "Preorder.toLT",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "Preorder.toLE",
   "Not",
   "Set.Nonempty",
   "Exists",
   "Exists.choose_spec",
   "Set",
   "BoundedOrder",
   "Prod.snd",
   "Exists.choose",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._proof_4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] [inst_1 : BoundedOrder ℒ] {S : Type u_2} [inst_2 : CompleteLattice S]\n  (μ : { p // p.1 < p.2 } → S)\n  (h₃ : {YA | ∃ (h : YA < ⊤), ∀ xA < ⊤, ∃ xB, ∃ (hAB : xA < xB), ¬μ ⟨(xA, xB), hAB⟩ ≤ μ ⟨(YA, ⊤), h⟩}.Nonempty),\n  Exists.choose h₃ ∈ {YA | ∃ (h : YA < ⊤), ∀ xA < ⊤, ∃ xB, ∃ (hAB : xA < xB), ¬μ ⟨(xA, xB), hAB⟩ ≤ μ ⟨(YA, ⊤), h⟩}",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Eq.refl",
   "PartialOrder",
   "Nontrivial",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "Eq",
   "Eq.rec"],
  "name": "HarderNarasimhan.Interval.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] (z z_1 : { p // p.1 < p.2 }),\n  z = z_1 → HarderNarasimhan.Interval z = HarderNarasimhan.Interval z_1",
  "constCategory": "Theorem"},
 {"references":
  ["Ring.toAddGroupWithOne",
   "AddGroupWithOne.toIntCast",
   "Int.cast",
   "Int",
   "Ring"],
  "name": "Int.rawCast",
  "constType": "{α : Type u} → [Ring α] → ℤ → α",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.μQuotient_helper._simp_1_2",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "AddRightStrictMono",
   "add_ne_add_left",
   "Add",
   "instHAdd",
   "LE.le.lt_of_ne",
   "Preorder.toLT",
   "CovariantClass.elim",
   "Function.swap",
   "HAdd.hAdd",
   "LT.lt",
   "AddRightMono",
   "Iff.mpr",
   "PartialOrder",
   "LT.lt.ne",
   "LE.le",
   "IsRightCancelAdd",
   "Ne",
   "Preorder.toLE",
   "CovariantClass.mk",
   "LT.lt.le"],
  "name": "IsRightCancelAdd.addRightStrictMono_of_addRightMono",
  "constType":
  "∀ (N : Type u_2) [inst : Add N] [IsRightCancelAdd N] [inst_2 : PartialOrder N] [AddRightMono N], AddRightStrictMono N",
  "constCategory": "Theorem"},
 {"references": ["Exists", "And", "Eq", "propext", "exists_eq_right"],
  "name": "HarderNarasimhan.impl.lift_quot_middle._simp_1_5",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {a' : α}, (∃ a, p a ∧ a = a') = p a'",
  "constCategory": "Theorem"},
 {"references": ["AddMonoid", "AddMonoidWithOne"],
  "name": "AddMonoidWithOne.toAddMonoid",
  "constType": "{R : Type u_2} → [self : AddMonoidWithOne R] → AddMonoid R",
  "constCategory": "Definition"},
 {"references":
  ["HAdd.hAdd",
   "AddRightMono",
   "instHAdd",
   "Add",
   "LE.le",
   "LE",
   "Function.swap",
   "CovariantClass.elim"],
  "name": "add_le_add_right",
  "constType":
  "∀ {α : Type u_1} [inst : Add α] [inst_1 : LE α] [i : AddRightMono α] {b c : α}, b ≤ c → ∀ (a : α), b + a ≤ c + a",
  "constCategory": "Theorem"},
 {"references":
  ["rfl",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "Nat.cast",
   "Eq",
   "AddMonoidWithOne",
   "Mathlib.Meta.NormNum.IsNat.to_eq.match_1_1",
   "Mathlib.Meta.NormNum.IsNat",
   "Unit"],
  "name": "Mathlib.Meta.NormNum.IsNat.to_eq",
  "constType":
  "∀ {α : Type u} [inst : AddMonoidWithOne α] {n : ℕ} {a a' : α}, Mathlib.Meta.NormNum.IsNat a n → ↑n = a' → a = a'",
  "constCategory": "Theorem"},
 {"references":
  ["sorryAx",
   "Submodule.toAddSubmonoid",
   "Lean.Name",
   "Submodule.Quotient.module",
   "Lean.Name.str",
   "Bool.false",
   "Membership.mem",
   "Inter.inter",
   "LinearMap.semilinearMapClass",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "Semiring.toModule",
   "NonAssocSemiring.toMulZeroOneClass",
   "Set.instInter",
   "Set.instSDiff",
   "LinearMap.ker",
   "SetLike.instMembership",
   "LocalizedModule",
   "Submonoid.instSetLike",
   "Submodule.addCommGroup",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "And",
   "LinearMap",
   "AddZeroClass.toAddZero",
   "Set.instMembership",
   "Submonoid",
   "Nat",
   "SetLike.coe",
   "LocalizedModule.isModule'",
   "Iff",
   "AddCommGroup.toAddCommMonoid",
   "AddSubmonoid.toAddSubsemigroup",
   "setOf",
   "AddMonoid.toAddZeroClass",
   "associatedPrimes",
   "Submodule.hasQuotient",
   "Lean.Name.anonymous",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "LocalizedModule.instAddCommMonoid",
   "MulZeroOneClass.toMulOneClass",
   "AddCommMonoid.toAddMonoid",
   "EmptyCollection.emptyCollection",
   "Set.instEmptyCollection",
   "LocalizedModule.mkLinearMap",
   "Submodule",
   "AddSubsemigroup.carrier",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "Eq",
   "CommRing.toCommSemiring",
   "Set",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "AddCommGroup",
   "CommRing",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "CommRing.toRing",
   "IsNoetherianRing",
   "Submodule.setLike",
   "SDiff.sdiff",
   "Lean.Name.num"],
  "name":
  "HarderNarasimhan.AdmittedResults.bourbaki_elements_math_alg_comm_chIV_sec1_no2_prop6",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [IsNoetherianRing R] {M : Type u_2} [inst_2 : AddCommGroup M]\n  [inst_3 : _root_.Module R M] (S : Submonoid R) (N : Submodule R M),\n  associatedPrimes R ↥N = associatedPrimes R M \\ {p | p ∈ associatedPrimes R M ∧ p.carrier ∩ ↑S = ∅} ∧\n      associatedPrimes R (M ⧸ N) = {p | p ∈ associatedPrimes R M ∧ p.carrier ∩ ↑S = ∅} ↔\n    N = LinearMap.ker (LocalizedModule.mkLinearMap S M)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "Nat.instPreorder",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "PartialOrder",
   "Preorder.toLE",
   "le_top",
   "Exists",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "StrictMono"],
  "name": "HarderNarasimhan.WeakAscendingChainCondition.wacc",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : PartialOrder ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.WeakAscendingChainCondition μ]\n  (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "AddMonoid.End.instSemiring",
   "Module",
   "RingHom.instFunLike",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "RingHom.ker",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Ideal",
   "Module.annihilator._proof_1",
   "Module.toAddMonoidEnd",
   "AddMonoid.End",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Module.annihilator",
  "constType":
  "(R : Type u_1) → (M : Type u_2) → [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [_root_.Module R M] → Ideal R",
  "constCategory": "Definition"},
 {"references":
  ["Nat.find",
   "Nat",
   "Exists",
   "Decidable",
   "Subsingleton.elim",
   "Eq.refl",
   "DecidablePred",
   "instSubsingletonDecidable",
   "Eq.ndrec",
   "Eq.rec",
   "Eq",
   "Pi.instSubsingleton"],
  "name": "Nat.find.congr_simp",
  "constType":
  "∀ {p p_1 : ℕ → Prop} (e_p : p = p_1) {inst : DecidablePred p} [inst_1 : DecidablePred p_1] (H : ∃ n, p n),\n  Nat.find H = Nat.find ⋯",
  "constCategory": "Theorem"},
 {"references": ["NonUnitalSemiring", "Semiring"],
  "name": "Semiring.toNonUnitalSemiring",
  "constType": "{α : Type u} → [self : Semiring α] → NonUnitalSemiring α",
  "constCategory": "Definition"},
 {"references":
  ["Nat.lt",
   "Nat.instMax",
   "instMinNat",
   "DecidableEq",
   "Nat.le_refl",
   "PartialOrder.mk",
   "LT.mk",
   "Nat.instLinearOrder._proof_3",
   "Nat.le",
   "Nat.le_trans",
   "DecidableLE",
   "DecidableLT",
   "LinearOrder",
   "Nat.decLe",
   "LinearOrder.mk",
   "instOrdNat",
   "Nat.le_antisymm",
   "Nat.decLt",
   "Nat",
   "Nat.instLinearOrder._proof_2",
   "Nat.instLinearOrder._proof_1",
   "LE.mk",
   "Nat.le_total",
   "inferInstance",
   "instDecidableEqNat",
   "Preorder.mk",
   "Nat.lt_iff_le_not_le"],
  "name": "Nat.instLinearOrder",
  "constType": "LinearOrder ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Finset",
   "Set.mem_toFinset",
   "Set",
   "Membership.mem",
   "Finset.instMembership",
   "Set.toFinset",
   "Eq",
   "Fintype",
   "propext",
   "Set.Elem",
   "Set.instMembership"],
  "name": "HarderNarasimhan.impl.associated_primes_quot_koqcl._simp_1_2",
  "constType":
  "∀ {α : Type u_1} {s : Set α} [inst : Fintype ↑s] {a : α}, (a ∈ s.toFinset) = (a ∈ s)",
  "constCategory": "Theorem"},
 {"references": ["Inv", "InvOneClass"],
  "name": "InvOneClass.toInv",
  "constType": "{G : Type u_2} → [self : InvOneClass G] → Inv G",
  "constCategory": "Definition"},
 {"references": ["GeneralizedCoheytingAlgebra", "CoheytingAlgebra"],
  "name": "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
  "constType":
  "{α : Type u_4} → [self : CoheytingAlgebra α] → GeneralizedCoheytingAlgebra α",
  "constCategory": "Definition"},
 {"references": ["Neg"],
  "name": "Neg.neg",
  "constType": "{α : Type u} → [self : Neg α] → α → α",
  "constCategory": "Definition"},
 {"references":
  ["Submodule.hasQuotient",
   "HasQuotient.Quotient",
   "IsScalarTower",
   "Module",
   "AddCommGroup.toAddGroup",
   "SMulZeroClass.toSMul",
   "Submodule",
   "SMul",
   "MonoidWithZero.toMonoid",
   "Quotient.map'",
   "instHSMul",
   "AddGroup.toSubNegMonoid",
   "DistribSMul.toSMulZeroClass",
   "SMul.mk",
   "Submodule.quotientRel",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "Submodule.Quotient.instSMul'._proof_1",
   "AddZeroClass.toAddZero",
   "Ring.toSemiring",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "HSMul.hSMul",
   "AddCommGroup.toAddCommMonoid",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Ring"],
  "name": "Submodule.Quotient.instSMul'",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Ring R] →\n      [inst_1 : AddCommGroup M] →\n        [inst_2 : _root_.Module R M] →\n          {S : Type u_3} →\n            [inst_3 : SMul S R] → [inst_4 : SMul S M] → [IsScalarTower S R M] → (P : Submodule R M) → SMul S (M ⧸ P)",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "instAddNat",
   "RelSeries.toFun",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "Fin",
   "Fin.val",
   "NatCast.natCast",
   "RelSeries.length",
   "eq_of_heq",
   "Eq.symm",
   "HarderNarasimhan.IntervalSemistableRel",
   "Eq.ndrec",
   "HEq.casesOn",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Fin.castSucc",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "SetRel",
   "instNeZeroNatHAdd_1",
   "Nat.lt_add_one",
   "Prod",
   "Nat",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "HEq",
   "Eq.mpr",
   "Fin.succ",
   "HarderNarasimhan.Semistable",
   "Subtype",
   "Nat.cast",
   "RelSeries",
   "Fin.val_cast_of_lt",
   "HarderNarasimhan.IntervalSemistableRel._proof_1",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "instOfNatNat",
   "Fin.NatCast.instNatCast",
   "Fin.mk",
   "HarderNarasimhan.Interval",
   "Eq",
   "Preorder.toLE",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "instHAdd",
   "RelSeries.step",
   "HarderNarasimhan.instBoundedOrderInterval",
   "Exists.choose",
   "Eq.casesOn",
   "OfNat.ofNat",
   "Nat.lt.step",
   "HAdd.hAdd",
   "LT.lt",
   "Nat.lt_of_succ_lt",
   "Nat.succ_lt_succ",
   "Subtype.mk",
   "Fin.isLt",
   "LT",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.balabala1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (s : RelSeries (HarderNarasimhan.IntervalSemistableRel μ))\n  {i : ℕ}, i + 1 < s.length → s.toFun ↑i < s.toFun ↑(i + 1)",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.JordanHolderRel.match_1",
   "Exists",
   "HarderNarasimhan.JordanHolderRel._proof_1",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "SetRel",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.JordanHolderRel",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → SetRel ℒ ℒ",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁.mk",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Or",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₁.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.WeakSlopeLike₁ μ → Sort u} →\n                ((wsl₁ :\n                      ∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤),\n                        μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩) →\n                    motive ⋯) →\n                  (t : HarderNarasimhan.WeakSlopeLike₁ μ) → motive t",
  "constCategory": "Other"},
 {"references": [],
  "name": "id",
  "constType": "{α : Sort u} → α → α",
  "constCategory": "Definition"},
 {"references":
  ["Submodule.hasQuotient",
   "Submodule.Quotient.mk",
   "SetLike.instMembership",
   "HasQuotient.Quotient",
   "Module",
   "Membership.mem",
   "Submodule.Quotient.instZeroQuotient",
   "AddCommGroup",
   "Submodule.Quotient.mk_eq_zero",
   "OfNat.ofNat",
   "Ring.toSemiring",
   "Submodule",
   "Submodule.setLike",
   "AddCommGroup.toAddCommMonoid",
   "Zero.toOfNat0",
   "Eq",
   "propext",
   "Ring"],
  "name": "HarderNarasimhan.impl.lift_quot_middle._simp_1_6",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} {x : M} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M), (Submodule.Quotient.mk x = 0) = (x ∈ p)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "SetLike.instMembership",
   "LinearMap.instFunLike",
   "Module",
   "Submodule.module",
   "Membership.mem",
   "LinearMap",
   "Submodule.subtype",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.comap",
   "Submodule.setLike",
   "RingHom.id",
   "Submodule.submoduleOf._proof_1",
   "Submodule.addCommMonoid",
   "Semiring"],
  "name": "Submodule.submoduleOf",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_5} →\n    [inst : Semiring R] →\n      [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → Submodule R M → (q : Submodule R M) → Submodule R ↥q",
  "constCategory": "Definition"},
 {"references":
  ["absurd",
   "Option.casesOn",
   "Option.none",
   "WithTop.top",
   "Eq.refl",
   "Option",
   "Top.top",
   "WithTop.some",
   "WithTop",
   "Ne",
   "Option.some",
   "Eq"],
  "name": "WithTop.untop.match_1",
  "constType":
  "{α : Type u_1} →\n  (motive : (x : WithTop α) → x ≠ ⊤ → Sort u_2) →\n    (x : WithTop α) → (x_1 : x ≠ ⊤) → ((x : α) → (x_2 : ↑x ≠ ⊤) → motive (some x) x_2) → motive x x_1",
  "constCategory": "Definition"},
 {"references": ["Not", "and_imp", "Iff", "And", "False"],
  "name": "not_and",
  "constType": "∀ {a b : Prop}, ¬(a ∧ b) ↔ a → ¬b",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "Lattice",
   "LE.le",
   "SemilatticeSup.toMax",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Convex.convex",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Lattice ℒ} {S : Type u_2} {inst_1 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S}\n  [self : HarderNarasimhan.Convex μ] (x y : ℒ) (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["SupSet", "CompleteSemilatticeSup"],
  "name": "CompleteSemilatticeSup.toSupSet",
  "constType": "{α : Type u_8} → [self : CompleteSemilatticeSup α] → SupSet α",
  "constCategory": "Definition"},
 {"references":
  ["PosSMulStrictMono",
   "PartialOrder.toPreorder",
   "strictMono_smul_left_of_pos",
   "PosSMulMono.of_pos",
   "Preorder.toLT",
   "SMulZeroClass.toSMul",
   "StrictMono.monotone",
   "SMulWithZero.toSMulZeroClass",
   "OfNat.ofNat",
   "PosSMulMono",
   "LT.lt",
   "PartialOrder",
   "HSMul.hSMul",
   "instHSMul",
   "Zero.toOfNat0",
   "Zero",
   "SMulWithZero"],
  "name": "PosSMulStrictMono.toPosSMulMono",
  "constType":
  "∀ {α : Type u_1} {β : Type u_2} [inst : Zero α] [inst_1 : Zero β] [inst_2 : SMulWithZero α β] [inst_3 : PartialOrder α]\n  [inst_4 : PartialOrder β] [PosSMulStrictMono α β], PosSMulMono α β",
  "constCategory": "Theorem"},
 {"references": ["Nonempty"],
  "name": "Nonempty.intro",
  "constType": "∀ {α : Sort u} (val : α), Nonempty α",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "Nat",
   "Fin.val",
   "instOfNatNat",
   "instHAdd",
   "Nat.le_of_lt_succ",
   "LE.le",
   "Fin.is_lt",
   "Fin",
   "instLENat",
   "OfNat.ofNat"],
  "name": "Fin.is_le",
  "constType": "∀ {n : ℕ} (i : Fin (n + 1)), ↑i ≤ n",
  "constCategory": "Theorem"},
 {"references":
  ["Semiring.toNonAssocSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Semiring.toModule",
   "Submodule",
   "Semiring"],
  "name": "Ideal",
  "constType": "(R : Type u) → [Semiring R] → Type u",
  "constCategory": "Definition"},
 {"references": ["LE", "Bot", "OrderBot"],
  "name": "OrderBot.toBot",
  "constType": "{α : Type u} → {inst : LE α} → [self : OrderBot α] → Bot α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "bot_le",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "PartialOrder",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "OrderBot.toBot",
   "HarderNarasimhan.StrongDescendingChainCondition.mk",
   "Preorder.toLE",
   "Exists",
   "instHAdd",
   "lt_of_le_of_lt",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "StrictAnti",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x : ℕ → ℒ) (saf : StrictAnti x), ∃ N, μ ⟨(⊥, x N), ⋯⟩ ≤ μ ⟨(x (N + 1), x N), ⋯⟩) →\n    HarderNarasimhan.StrongDescendingChainCondition μ",
  "constCategory": "Definition"},
 {"references":
  ["Nat.cast",
   "Eq.trans",
   "Mathlib.Tactic.Ring.cast_zero.match_1_1",
   "CommSemiring",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "Semiring.toNonAssocSemiring",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "True",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "CommSemiring.toSemiring",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "eq_self",
   "AddMonoidWithOne.toNatCast",
   "of_eq_true",
   "MulZeroClass.toZero",
   "Nat.cast_zero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "AddZero.toZero",
   "Mathlib.Meta.NormNum.IsNat",
   "AddMonoid.toAddZeroClass"],
  "name": "Mathlib.Tactic.Ring.cast_zero",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {a : R}, Mathlib.Meta.NormNum.IsNat a 0 → a = 0",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "PartialOrder",
   "LE.le",
   "Eq",
   "Preorder.toLE",
   "PartialOrder.le_antisymm"],
  "name": "le_antisymm",
  "constType":
  "∀ {α : Type u_1} [inst : PartialOrder α] {a b : α}, a ≤ b → b ≤ a → a = b",
  "constCategory": "Theorem"},
 {"references":
  ["inf_le_right",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Min.min",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.instLatticeInterval._proof_7",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (x x_1 : HarderNarasimhan.Interval z), ↑x ⊓ ↑x_1 ≤ ↑x_1",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Prod.mk",
   "Preorder.toLT",
   "SemilatticeSup.toPartialOrder",
   "Prod.fst",
   "HarderNarasimhan.FiniteTotalPayoff.mk",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "CompleteLattice.toLattice",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toBoundedOrder",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.FiniteTotalPayoff.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}, μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤ → HarderNarasimhan.FiniteTotalPayoff μ",
  "constCategory": "Definition"},
 {"references": ["LE.le", "DecidableRel", "LE"],
  "name": "DecidableLE",
  "constType": "(α : Type u) → [LE α] → Type (max 0 u)",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Lean.Omega.LinearCombo",
  "constType": "Type",
  "constCategory": "Other"},
 {"references": ["CommSemiring", "Semiring"],
  "name": "CommSemiring.toSemiring",
  "constType": "{R : Type u} → [self : CommSemiring R] → Semiring R",
  "constCategory": "Definition"},
 {"references":
  ["Submodule.instNontrivial",
   "HarderNarasimhan.ConvexI",
   "Module",
   "HarderNarasimhan.μ",
   "Iff.mp",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "HarderNarasimhan.Convex",
   "HarderNarasimhan.impl.prop3d11",
   "HarderNarasimhan.S",
   "CompleteLattice.toConditionallyCompleteLattice",
   "SemilatticeInf.toPartialOrder",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "HarderNarasimhan.TotIntvl",
   "CommRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "inferInstance",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.S₀",
   "CompleteLattice.toBoundedOrder",
   "Module.Finite"],
  "name": "HarderNarasimhan.proposition_3_11",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  HarderNarasimhan.Convex (HarderNarasimhan.μ R M)",
  "constCategory": "Theorem"},
 {"references": ["DecidableLE", "ite", "LE.mk", "id"],
  "name":
  "HarderNarasimhan.TotallyOrderedRealVectorSpace.min._inherited_default",
  "constType":
  "{V : Type u_1} → (le : V → V → Prop) → DecidableLE V → V → V → V",
  "constCategory": "Definition"},
 {"references":
  ["Int.decLt",
   "LT.lt",
   "Lean.Omega.Constraint",
   "Bool",
   "Lean.Omega.Constraint.isImpossible.match_1",
   "Bool.false",
   "Int.instLTInt",
   "Decidable.decide",
   "Int"],
  "name": "Lean.Omega.Constraint.isImpossible",
  "constType": "Omega.Constraint → Bool",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.impl.subseq",
   "Eq.symm",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "bot_lt_iff_ne_bot",
   "Exists",
   "Lattice.toSemilatticeInf",
   "Exists.choose_spec",
   "BoundedOrder",
   "Exists.choose",
   "Bot.bot",
   "LT.lt",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Ne"],
  "name": "HarderNarasimhan.impl.subseq._proof_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f : ℕ → ℒ) (atf : ∃ k, f k = ⊥)\n  (t : ℕ), ¬HarderNarasimhan.impl.subseq f atf t = ⊥ → ∃ k, f k < HarderNarasimhan.impl.subseq f atf t",
  "constCategory": "Theorem"},
 {"references":
  ["le_refl", "Preorder", "True", "LE.le", "eq_true", "Eq", "Preorder.toLE"],
  "name": "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_1",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), (a ≤ a) = True",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.toSubMulAction",
   "SetLike.instMembership",
   "Subtype",
   "Module",
   "IsScalarTower",
   "Membership.mem",
   "SubMulAction.isScalarTower'",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "Submodule",
   "Module.toDistribMulAction",
   "AddCommMonoid",
   "SMul",
   "Submodule.setLike",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "Submodule.smul",
   "AddZero.toZero",
   "Semiring",
   "AddMonoid.toAddZeroClass",
   "DistribSMul.toSMulZeroClass"],
  "name": "Submodule.isScalarTower'",
  "constType":
  "∀ {S : Type u'} {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] {module_M : _root_.Module R M}\n  (p : Submodule R M) {S' : Type u_1} [inst_2 : SMul S R] [inst_3 : SMul S M] [inst_4 : SMul S' R] [inst_5 : SMul S' M]\n  [inst_6 : SMul S S'] [inst_7 : IsScalarTower S' R M] [IsScalarTower S S' M] [inst_9 : IsScalarTower S R M],\n  IsScalarTower S S' ↥p",
  "constCategory": "Theorem"},
 {"references":
  ["Finset.instSingleton",
   "Finset",
   "Finset.singleton_inj",
   "Singleton.singleton",
   "Eq",
   "propext"],
  "name": "HarderNarasimhan.impl.rmk4d14₂._simp_1_3",
  "constType": "∀ {α : Type u_1} {a b : α}, ({a} = {b}) = (a = b)",
  "constCategory": "Theorem"},
 {"references": ["InfSet", "CompleteSemilatticeInf"],
  "name": "CompleteSemilatticeInf.toInfSet",
  "constType": "{α : Type u_8} → [self : CompleteSemilatticeInf α] → InfSet α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Iff.mp",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "Prod.fst",
   "Prod.casesOn",
   "le_rfl",
   "And.intro",
   "PartialOrder",
   "HarderNarasimhan.Interval",
   "Nontrivial.mk",
   "Preorder.toLE",
   "Exists",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "ne_of_lt",
   "le_of_lt",
   "Nontrivial",
   "LE.le",
   "Ne",
   "Subtype.casesOn",
   "Subtype.mk",
   "Subtype.coe_ne_coe"],
  "name": "HarderNarasimhan.instNontrivialInterval",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }},\n  Nontrivial (HarderNarasimhan.Interval z)",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "SubNegMonoid.toAddMonoid",
   "Real",
   "AddCommGroup.add_comm",
   "Module",
   "AddCommGroup.toAddGroup",
   "AddCommMonoid.mk",
   "AddGroup.toSubNegMonoid",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toAddCommGroup",
   "Real.semiring"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.toModule",
  "constType":
  "{V : Type u_1} → [self : HarderNarasimhan.TotallyOrderedRealVectorSpace V] → _root_.Module ℝ V",
  "constCategory": "Definition"},
 {"references": ["Nat", "SizeOf"],
  "name": "SizeOf.sizeOf",
  "constType": "{α : Sort u} → [self : SizeOf α] → α → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Max.max",
   "le_sup_right",
   "PartialOrder.toPreorder",
   "True",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup.toPartialOrder",
   "eq_true",
   "SemilatticeSup",
   "Eq",
   "Preorder.toLE"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_27",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, (b ≤ a ⊔ b) = True",
  "constCategory": "Theorem"},
 {"references": ["SubNegMonoid", "AddMonoid"],
  "name": "SubNegMonoid.toAddMonoid",
  "constType": "{G : Type u} → [self : SubNegMonoid G] → AddMonoid G",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} → HarderNarasimhan.HarderNarasimhanFiltration μ → ℕ → ℒ",
  "constCategory": "Definition"},
 {"references":
  ["Lean.Omega.Constraint", "Lean.Omega.UpperBound", "Lean.Omega.LowerBound"],
  "name": "Lean.Omega.Constraint.mk",
  "constType": "Omega.LowerBound → Omega.UpperBound → Omega.Constraint",
  "constCategory": "Other"},
 {"references": ["SupSet", "ConditionallyCompleteLattice"],
  "name": "ConditionallyCompleteLattice.toSupSet",
  "constType":
  "{α : Type u_5} → [self : ConditionallyCompleteLattice α] → SupSet α",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Max.max",
   "PartialOrder.toPreorder",
   "LT.lt.trans_le",
   "SemilatticeSup.toMax",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "SemilatticeSup",
   "le_sup_left"],
  "name": "lt_sup_of_lt_left",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b c : α}, c < a → c < a ⊔ b",
  "constCategory": "Theorem"},
 {"references": ["NonAssocSemiring"],
  "name": "RingHom",
  "constType":
  "(α : Type u_5) → (β : Type u_6) → [NonAssocSemiring α] → [NonAssocSemiring β] → Type (max u_5 u_6)",
  "constCategory": "Other"},
 {"references":
  ["HarderNarasimhan.instLES₀",
   "Finset",
   "PartialOrder.toPreorder",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Singleton.singleton",
   "instDistribLatticeOfLinearOrder",
   "PrimeSpectrum.instPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lex'Order.Lex'Order_prop",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Exists.choose_spec",
   "CommSemiring.toSemiring",
   "And",
   "LinearOrder",
   "Finset.instHasSubset",
   "CommRing",
   "PrimeSpectrum",
   "LinearOrder.toPartialOrder",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Finset.instSingleton",
   "HasSubset.Subset",
   "Iff",
   "LE.le",
   "HarderNarasimhan.S₀"],
  "name": "HarderNarasimhan.S₀_order",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R],\n  (∀ (A B : HarderNarasimhan.S₀ R), A ⊆ B → A ≤ B) ∧ ∀ (a b : LinearExtension (PrimeSpectrum R)), a ≤ b ↔ {a} ≤ {b}",
  "constCategory": "Theorem"},
 {"references": ["Inhabited"],
  "name": "Inhabited.mk",
  "constType": "{α : Sort u} → α → Inhabited α",
  "constCategory": "Other"},
 {"references":
  ["le_refl", "Preorder", "True", "LE.le", "eq_true", "Eq", "Preorder.toLE"],
  "name": "HarderNarasimhan.impl.prop4d14._simp_1_1",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), (a ≤ a) = True",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Submodule.hasQuotient",
   "Nat.find",
   "Subtype",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.Quotient.module",
   "Submodule.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "HarderNarasimhan.Coprimary",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "instLTNat",
   "CommRing.toCommSemiring",
   "SetLike.instMembership",
   "instHAdd",
   "HarderNarasimhan.CoprimaryFiltration.filtration",
   "Submodule.addCommGroup",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "AddCommGroup",
   "CommRing",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "CommRing.toRing",
   "Nat",
   "IsNoetherianRing",
   "Submodule.setLike",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Top.top",
   "HarderNarasimhan.CoprimaryFiltration.fin_len",
   "Submodule.addCommMonoid",
   "Submodule.submoduleOf",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.piecewise_coprimary",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (self : HarderNarasimhan.CoprimaryFiltration R M),\n  ∀ n < Nat.find ⋯,\n    HarderNarasimhan.Coprimary R\n      (↥(self.filtration (n + 1)) ⧸ (self.filtration n).submoduleOf (self.filtration (n + 1)))",
  "constCategory": "Theorem"},
 {"references":
  ["Decidable", "Classical.propDecidable._proof_1", "Classical.choice"],
  "name": "Classical.propDecidable",
  "constType": "(a : Prop) → Decidable a",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.JordanHolderFiltration",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.JordanHolderFiltration.filtration",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} → HarderNarasimhan.JordanHolderFiltration μ → ℕ → ℒ",
  "constCategory": "Definition"},
 {"references": ["exists_false", "Exists", "eq_false", "False", "Eq"],
  "name":
  "HarderNarasimhan.instNonemptyJordanHolderFiltrationOfWellFoundedGTOfFiniteTotalPayoffOfSlopeLikeOfSemistableOfStrongDescendingChainCondition'._simp_2",
  "constType": "∀ {α : Sort u_1}, (∃ _a, False) = False",
  "constCategory": "Theorem"},
 {"references":
  ["Monoid.toOne",
   "MonoidWithZero.zero_mul",
   "MulZeroOneClass",
   "MulZeroOneClass.mk",
   "Monoid.mul_one",
   "MonoidWithZero",
   "Semigroup.toMul",
   "MulOneClass.mk",
   "MulOne.mk",
   "MonoidWithZero.toMonoid",
   "Monoid.one_mul",
   "Monoid.toSemigroup",
   "MonoidWithZero.mul_zero",
   "MonoidWithZero.toZero"],
  "name": "MonoidWithZero.toMulZeroOneClass",
  "constType":
  "{M₀ : Type u} → [self : MonoidWithZero M₀] → MulZeroOneClass M₀",
  "constCategory": "Definition"},
 {"references":
  ["Real.instPreorder",
   "Real.instZero",
   "Real",
   "NNReal",
   "Zero",
   "Nonneg.zero"],
  "name": "instZeroNNReal",
  "constType": "Zero NNReal",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "OrderDual.toDual",
   "OrderDual",
   "Subtype",
   "PartialOrder.toPreorder",
   "Equiv.instEquivLike",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.impl.dualμAstar_eq_μBstar",
   "Subtype.val",
   "DFunLike.coe",
   "Equiv",
   "Prod.fst",
   "OrderDual.ofDual",
   "OrderDual.instNontrivial",
   "Subtype.prop",
   "OrderDual.instLT",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "EquivLike.toFunLike",
   "OrderDual.instCompleteLattice",
   "OrderDual.instPartialOrder",
   "Preorder.toLE",
   "Eq",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "Subtype.mk",
   "OrderDual.instBoundedOrder",
   "CompleteLattice"],
  "name": "HarderNarasimhan.dualμAstar_eq_μBstar",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  OrderDual.ofDual\n    ((HarderNarasimhan.μAstar fun p ↦ OrderDual.toDual (μ ⟨((↑p).2, (↑p).1), ⋯⟩)) = HarderNarasimhan.μBstar μ)",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Equiv",
  "constType": "Sort u_1 → Sort u_2 → Sort (max (max 1 u_1) u_2)",
  "constCategory": "Other"},
 {"references":
  ["Function.Injective.eq_iff",
   "Subtype.coe_injective",
   "Subtype",
   "Iff",
   "Eq",
   "Subtype.val"],
  "name": "Subtype.coe_inj",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {a b : Subtype p}, ↑a = ↑b ↔ a = b",
  "constCategory": "Theorem"},
 {"references":
  ["Distrib.toAdd",
   "PartialOrder.toPreorder",
   "Real",
   "NonUnitalNonAssocSemiring.toDistrib",
   "NNReal",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "CanonicallyOrderedAdd",
   "instSemiringNNReal",
   "Real.instRing",
   "Real.instIsOrderedRing",
   "Semiring.toNonAssocSemiring",
   "Nonneg.canonicallyOrderedAdd",
   "Preorder.toLE",
   "instPartialOrderNNReal",
   "Real.partialOrder"],
  "name": "NNReal.instCanonicallyOrderedAdd",
  "constType": "CanonicallyOrderedAdd NNReal",
  "constCategory": "Theorem"},
 {"references": ["Exists", "exists_prop_of_true", "True", "Iff", "True.intro"],
  "name": "exists_true_left",
  "constType": "∀ {p : True → Prop}, Exists p ↔ p True.intro",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "le_refl",
   "PartialOrder.toPreorder",
   "LinearOrder",
   "Preorder.toLT",
   "absurd",
   "LT.lt",
   "LinearOrder.toPartialOrder",
   "le_of_not_gt.match_1_1",
   "Or",
   "le_of_lt",
   "LE.le",
   "Eq.rec",
   "Eq",
   "Preorder.toLE",
   "lt_trichotomy"],
  "name": "le_of_not_gt",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, ¬b < a → a ≤ b",
  "constCategory": "Theorem"},
 {"references": ["Nat", "RelSeries", "SetRel"],
  "name": "RelSeries.length",
  "constType": "{α : Type u_1} → {r : SetRel α α} → RelSeries r → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["IsNoetherian",
   "AddCommMonoid",
   "Module",
   "Submodule.instTop",
   "Top.top",
   "Module.Finite.mk",
   "IsNoetherian.noetherian",
   "Module.Finite",
   "Submodule",
   "Semiring"],
  "name": "Module.IsNoetherian.finite",
  "constType":
  "∀ (R : Type u_1) (M : Type u_2) [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  [IsNoetherian R M], Module.Finite R M",
  "constCategory": "Theorem"},
 {"references":
  ["Exists", "Exists.intro", "Eq", "forall_exists_index", "propext"],
  "name": "HarderNarasimhan.impl.prop2d6₀._simp_1_2",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {q : (∃ x, p x) → Prop}, (∀ (h : ∃ x, p x), q h) = ∀ (x : α) (h : p x), q ⋯",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Ring.toNonAssocRing",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Preorder.toLT",
   "AddGroupWithOne.toAddMonoidWithOne",
   "SMulZeroClass.toSMul",
   "HarderNarasimhan.impl.quot_ntl",
   "AddMonoidWithOne.toAddMonoid",
   "instDistribSMul",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "Module.IsNoetherian.finite",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "DistribSMul.toSMulZeroClass",
   "SetLike.instMembership",
   "Submodule.addCommGroup",
   "AddZeroClass.toAddZero",
   "isNoetherian_submodule'",
   "Iff.mpr",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "AddZero.toZero",
   "Submodule.submoduleOf",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.hasQuotient",
   "Subtype",
   "HasQuotient.Quotient",
   "Module",
   "Module.Finite.quotient",
   "Submodule.Quotient.instSMul._proof_1",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Submodule.nontrivial_iff",
   "isNoetherian_of_isNoetherianRing_of_finite",
   "CommRing.toCommSemiring",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "CommRing",
   "LT.lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.quot_ntl'",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] {N₁ N₂ : HarderNarasimhan.ℒ R M}\n  (hN : N₁ < N₂), Nontrivial (HarderNarasimhan.ℒ R (↥N₂ ⧸ Submodule.submoduleOf N₁ N₂))",
  "constCategory": "Theorem"},
 {"references": ["DFunLike"],
  "name": "FunLike",
  "constType":
  "Sort u_1 → Sort u_2 → Sort u_3 → Sort (max (max (max 1 u_1) u_2) u_3)",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Membership.mem.out",
   "Subtype.val",
   "HarderNarasimhan.S₂I",
   "HarderNarasimhan.S₁I",
   "And.intro",
   "False.elim",
   "Or",
   "HarderNarasimhan.S₁I._proof_1",
   "Eq.symm",
   "IsTotal.total",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Exists",
   "Exists.choose_spec",
   "And.right",
   "lt_of_le_of_lt",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.IsComparable",
   "Set.instMembership",
   "Prod",
   "not_lt_of_ge",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "Subtype",
   "HarderNarasimhan.StI",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "Prod.fst",
   "le_rfl",
   "Subtype.prop",
   "Or.inl",
   "HarderNarasimhan.impl.prop2d6₃I",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "eq_of_le_of_not_lt'",
   "Lattice.toSemilatticeInf",
   "Set",
   "Exists.choose",
   "LT.lt",
   "Or.casesOn",
   "IsTotal",
   "ne_of_lt",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d8₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.ConvexI I μ →\n    ((IsTotal S fun x1 x2 ↦ x1 ≤ x2) ∨\n        ∀ (z : ℒ) (hzI : HarderNarasimhan.InIntvl I z) (hz : (↑I).1 ≠ z),\n          HarderNarasimhan.IsAttained μ ⟨((↑I).1, z), ⋯⟩) →\n      ∀ (x : ℒ) (hxSt : x ∈ HarderNarasimhan.StI μ I) (y : ℒ),\n        HarderNarasimhan.InIntvl I y →\n          ∀ (hxy : x < y), HarderNarasimhan.μA μ ⟨((↑I).1, y), ⋯⟩ = HarderNarasimhan.μA μ ⟨(x, y), hxy⟩",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat",
   "instSubNat",
   "instOfNatNat",
   "Nat.le_pred_of_lt",
   "LE.le",
   "HSub.hSub",
   "instHSub",
   "instLENat",
   "OfNat.ofNat"],
  "name": "Nat.le_sub_one_of_lt",
  "constType": "∀ {a b : ℕ}, a < b → a ≤ b - 1",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "Nat",
   "instOfNatNat",
   "instHAdd",
   "Nat.left_eq_add",
   "Eq",
   "OfNat.ofNat",
   "propext"],
  "name": "Nat.left_eq_add._simp_1",
  "constType": "∀ {a b : ℕ}, (a = a + b) = (b = 0)",
  "constCategory": "Theorem"},
 {"references":
  ["Units.instGroup",
   "Iff.mp",
   "SMulZeroClass.toSMul",
   "MonoidWithZero.toMulZeroOneClass",
   "NoZeroSMulDivisors",
   "Or",
   "GroupWithZero.toMonoidWithZero",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "Eq",
   "Group.toDivInvMonoid",
   "Units",
   "DistribMulAction",
   "DistribSMul.toSMulZeroClass",
   "Not",
   "DistribMulAction.toDistribSMul",
   "Units.mk0",
   "AddMonoid",
   "GroupWithZero",
   "AddZeroClass.toAddZero",
   "NoZeroSMulDivisors.mk",
   "OfNat.ofNat",
   "Classical.or_iff_not_imp_left",
   "smul_eq_zero_iff_eq",
   "Units.instDistribMulAction",
   "DivInvMonoid.toMonoid",
   "MulZeroOneClass.toMulZeroClass",
   "MulZeroClass.toZero",
   "Iff.mpr",
   "HSMul.hSMul",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass"],
  "name": "GroupWithZero.toNoZeroSMulDivisors",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : GroupWithZero R] [inst_1 : AddMonoid M] [inst_2 : DistribMulAction R M],\n  NoZeroSMulDivisors R M",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Membership.mem",
   "instZeroLEOneClass",
   "Classical.propDecidable",
   "Preorder.toLT",
   "GT.gt",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.impl.JHFil._proof_2",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "Nat.instPartialOrder",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "Nat.instStarRing",
   "And",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Set.instMembership",
   "Unit",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.impl.JHFil._proof_4",
   "CompleteDistribLattice.toCoframe",
   "AddMonoid.toAddZeroClass",
   "setOf",
   "HarderNarasimhan.Semistable",
   "Subtype",
   "GeneralizedCoheytingAlgebra.toLattice",
   "SemilatticeSup.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Nat.instAddCancelCommMonoid",
   "Prod.fst",
   "Nat.instPreorder",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Nat.instSemiring",
   "Nat.instOne",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.JHFil._proof_1",
   "Preorder.toLE",
   "Eq",
   "Not",
   "Nat.instAddMonoid",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "Set",
   "instHAdd",
   "HarderNarasimhan.impl.JHFil.match_1",
   "AddZero.toAdd",
   "Exists.choose",
   "OfNat.ofNat",
   "LT.lt",
   "CompletelyDistribLattice.toCompleteLattice",
   "HAdd.hAdd",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "HarderNarasimhan.impl.JHFil",
   "Ne",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "dite",
   "OrderTop.toTop",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.JHFil._sunfold",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        [hacc : WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [inst_3 : CompleteLinearOrder S] →\n              (μ : { p // p.1 < p.2 } → S) →\n                μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤ →\n                  HarderNarasimhan.SlopeLike μ →\n                    HarderNarasimhan.Semistable μ →\n                      (∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) → ℕ → ℒ",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁.mk",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Or",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.WeakSlopeLike₁.rec",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₁.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.WeakSlopeLike₁ μ → Sort u} →\n                (t : HarderNarasimhan.WeakSlopeLike₁ μ) →\n                  ((wsl₁ :\n                        ∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤),\n                          μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["AddSubgroup.instSetLike._proof_1",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "AddSubsemigroup.carrier",
   "SetLike.mk",
   "AddSubgroup",
   "AddSubgroup.toAddSubmonoid",
   "SubNegMonoid.toAddMonoid",
   "AddGroup",
   "AddSubmonoid.toAddSubsemigroup",
   "SetLike",
   "AddGroup.toSubNegMonoid",
   "AddMonoid.toAddZeroClass"],
  "name": "AddSubgroup.instSetLike",
  "constType":
  "{G : Type u_1} → [inst : AddGroup G] → SetLike (AddSubgroup G) G",
  "constCategory": "Definition"},
 {"references":
  ["HAdd.hAdd",
   "AddCommMonoid",
   "instHAdd",
   "AddMonoid.toAddSemigroup",
   "AddMonoid",
   "Eq",
   "AddSemigroup.toAdd"],
  "name": "AddCommMonoid.mk",
  "constType":
  "{M : Type u} → [toAddMonoid : AddMonoid M] → (∀ (a b : M), a + b = b + a) → AddCommMonoid M",
  "constCategory": "Other"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "Lattice.mk",
   "HarderNarasimhan.instLatticeInterval._proof_3",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.instLatticeInterval._proof_8",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "HarderNarasimhan.instLatticeInterval._proof_7",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.instLatticeInterval._proof_6",
   "HarderNarasimhan.instLatticeInterval._proof_4",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.instLatticeInterval._proof_5",
   "LT.lt",
   "Prod",
   "Max.max",
   "HarderNarasimhan.instLatticeInterval._proof_1",
   "Min.min",
   "HarderNarasimhan.instLatticeInterval._proof_2",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "SemilatticeSup.toMax",
   "HarderNarasimhan.instPartialOrderInterval",
   "SemilatticeSup.mk",
   "Subtype.mk"],
  "name": "HarderNarasimhan.instLatticeInterval",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] → [inst_2 : BoundedOrder ℒ] → {z : { p // p.1 < p.2 }} → Lattice (HarderNarasimhan.Interval z)",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Nat.lt_of_lt_of_le",
   "instLTNat",
   "Nat",
   "Fin.val",
   "LE.le",
   "Fin",
   "Fin.isLt",
   "instLENat"],
  "name": "Fin.castLE._proof_1",
  "constType": "∀ {n m : ℕ}, n ≤ m → ∀ (i : Fin n), ↑i < m",
  "constCategory": "Theorem"},
 {"references": ["DivisionSemiring", "Semiring"],
  "name": "DivisionSemiring.toSemiring",
  "constType": "{K : Type u_2} → [self : DivisionSemiring K] → Semiring K",
  "constCategory": "Definition"},
 {"references":
  ["LE.le.ge_iff_eq'",
   "PartialOrder.toPreorder",
   "AddZeroClass",
   "CanonicallyOrderedAdd",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "zero_le",
   "PartialOrder",
   "Iff",
   "LE.le",
   "Zero.toOfNat0",
   "Eq",
   "Preorder.toLE",
   "AddZero.toZero"],
  "name": "nonpos_iff_eq_zero",
  "constType":
  "∀ {α : Type u} [inst : AddZeroClass α] [inst_1 : PartialOrder α] [CanonicallyOrderedAdd α] {a : α}, a ≤ 0 ↔ a = 0",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "FunLike",
   "SetLike.instMembership",
   "SemilinearMapClass",
   "Submodule.mem_comap",
   "Module",
   "Membership.mem",
   "DFunLike.coe",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.comap",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name":
  "HarderNarasimhan.impl.CoprimaryFiltration.toHarderNarasimhanFiltration._simp_1_1",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} {x : M} {F : Type u_9} [inst_6 : FunLike F M M₂] [inst_7 : SemilinearMapClass F σ₁₂ M M₂] {f : F}\n  {p : Submodule R₂ M₂}, (x ∈ Submodule.comap f p) = (f x ∈ p)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Semistable.mk",
   "CompleteSemilatticeInf.toPartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.Semistable.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x : ℒ) (hx : x ≠ ⊥), ¬HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ > HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩) →\n    HarderNarasimhan.Semistable μ",
  "constCategory": "Definition"},
 {"references":
  ["Nat", "Nat.succ", "Nat.le.refl", "LE.le", "Nat.le.step", "instLENat"],
  "name": "Nat.le_succ",
  "constType": "∀ (n : ℕ), n ≤ n.succ",
  "constCategory": "Theorem"},
 {"references":
  ["absurd", "Not", "False.elim", "False", "Eq", "propext", "Iff.intro"],
  "name": "eq_false",
  "constType": "∀ {p : Prop}, ¬p → p = False",
  "constCategory": "Theorem"},
 {"references":
  ["Bot.mk",
   "Module",
   "Singleton.singleton",
   "Submodule.instBot._proof_1",
   "AddCommMonoid.toAddMonoid",
   "Submodule",
   "AddSubsemigroup.mk",
   "AddCommMonoid",
   "Bot",
   "Zero.toOfNat0",
   "Set",
   "AddSubmonoid.mk",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "Set.instSingletonSet",
   "Bot.bot",
   "OfNat.ofNat",
   "Submodule.instBot._proof_3",
   "Submodule.mk",
   "AddSubmonoid",
   "AddSubmonoid.instBot",
   "Submodule.instBot._proof_2",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "Submodule.instBot",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_3} → [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → Bot (Submodule R M)",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "gt_iff_lt._simp_1",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["SMulMemClass",
   "SMul",
   "SetLike.instMembership",
   "outParam",
   "HSMul.hSMul",
   "Membership.mem",
   "instHSMul",
   "SetLike"],
  "name": "SMulMemClass.smul_mem",
  "constType":
  "∀ {S : Type u_1} {R : outParam (Type u_2)} {M : Type u_3} {inst : SMul R M} {inst_1 : SetLike S M}\n  [self : SMulMemClass S R M] {s : S} (r : R) {m : M}, m ∈ s → r • m ∈ s",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "Semiring.toNonAssocSemiring",
   "RingHomSurjective",
   "RingHom.id",
   "CommSemiring.toSemiring",
   "CommRing",
   "RingHomSurjective.ids"],
  "name": "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_1",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R], RingHomSurjective (RingHom.id R)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "Nat.instPreorder",
   "HarderNarasimhan.WeakAscendingChainCondition.mk",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "PartialOrder",
   "Preorder.toLE",
   "le_top",
   "Exists",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.WeakAscendingChainCondition.rec",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "StrictMono"],
  "name": "HarderNarasimhan.WeakAscendingChainCondition.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.WeakAscendingChainCondition μ → Sort u} →\n                (t : HarderNarasimhan.WeakAscendingChainCondition μ) →\n                  ((wacc : ∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Preorder.toLT",
   "Membership.mem.out",
   "Subtype.val",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "Semiring.toModule",
   "And.left",
   "SetLike.instMembership",
   "Exists",
   "LinearMap.ker",
   "Submodule.addCommGroup",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Prod.snd",
   "LinearMap",
   "Set.instMembership",
   "Prod",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "Eq",
   "CommRing.toCommSemiring",
   "Set",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "CommRing",
   "LT.lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan._μ._proof_1",
  "constType":
  "∀ (R : Type u_1) [inst : CommRing R] [inst_1 : IsNoetherianRing R] (M : Type u_2) [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  ∀ p ∈ associatedPrimes R (↥(↑I).2 ⧸ Submodule.submoduleOf (↑I).1 (↑I).2), p.IsPrime",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "neg_add_cancel_right",
   "AddRightStrictMono",
   "SubNegZeroMonoid.toNegZeroClass",
   "AddGroup.toSubtractionMonoid",
   "congrArg",
   "sub_eq_add_neg",
   "SubNegMonoid.toSub",
   "Eq.symm",
   "HSub.hSub",
   "Zero.toOfNat0",
   "AddGroup.covconv_swap",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "propext",
   "Neg.neg",
   "add_lt_add_iff_right",
   "instHAdd",
   "SubNegMonoid.toNeg",
   "Iff.rfl",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "zero_add",
   "SubNegMonoid.toAddMonoid",
   "Iff",
   "NegZeroClass.toZero",
   "id",
   "AddGroup",
   "Eq.mpr",
   "instHSub",
   "AddZero.toZero",
   "LT",
   "AddMonoid.toAddZeroClass"],
  "name": "sub_pos",
  "constType":
  "∀ {α : Type u} [inst : AddGroup α] [inst_1 : LT α] [AddRightStrictMono α] {a b : α}, 0 < a - b ↔ b < a",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "Module",
   "RingHom.instFunLike",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "DFunLike.coe",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "AddHom.toFun",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Eq",
   "DistribSMul.toSMulZeroClass",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "LinearMap",
   "AddZeroClass.toAddZero",
   "Module.toDistribMulAction",
   "AddCommMonoid.toAddCommSemigroup",
   "HSMul.hSMul",
   "AddHom",
   "AddZero.toZero",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "LinearMap.mk",
  "constType":
  "{R : Type u_14} →\n  {S : Type u_15} →\n    [inst : Semiring R] →\n      [inst_1 : Semiring S] →\n        {σ : R →+* S} →\n          {M : Type u_16} →\n            {M₂ : Type u_17} →\n              [inst_2 : AddCommMonoid M] →\n                [inst_3 : AddCommMonoid M₂] →\n                  [inst_4 : _root_.Module R M] →\n                    [inst_5 : _root_.Module S M₂] →\n                      (toAddHom : M →ₙ+ M₂) →\n                        (∀ (m : R) (x : M), toAddHom.toFun (m • x) = σ m • toAddHom.toFun x) → M →ₛₗ[σ] M₂",
  "constCategory": "Other"},
 {"references": ["GetElem", "outParam"],
  "name": "GetElem.getElem",
  "constType":
  "{coll : Type u} →\n  {idx : Type v} →\n    {elem : outParam (Type w)} →\n      {valid : outParam (coll → idx → Prop)} →\n        [self : GetElem coll idx elem valid] → (xs : coll) → (i : idx) → valid xs i → elem",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "SetLike.instMembership",
   "LinearMap.ker",
   "SemilinearMapClass",
   "Module",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "DFunLike.coe",
   "OfNat.ofNat",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "Zero.toOfNat0",
   "Eq",
   "AddZero.toZero",
   "propext",
   "LinearMap.mem_ker",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "HarderNarasimhan.impl.prop3d11._simp_3",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_2} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {τ₁₂ : R →+* R₂} {F : Type u_11} [inst_6 : FunLike F M M₂] [inst_7 : SemilinearMapClass F τ₁₂ M M₂] {f : F} {y : M},\n  (y ∈ LinearMap.ker f) = (f y = 0)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "LT.lt",
   "Nat.succ_le_succ",
   "instLTNat",
   "Nat",
   "instOfNatNat",
   "instHAdd",
   "LE.le",
   "instLENat",
   "OfNat.ofNat"],
  "name": "Nat.lt_add_one_of_le",
  "constType": "∀ {n m : ℕ}, n ≤ m → n < m + 1",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "Exists.intro",
   "bot_le",
   "Nat.instAddCommMonoid",
   "Eq.symm",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Eq.rec",
   "HarderNarasimhan.StrongDescendingChainCondition.mk",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "Nat.instPartialOrder",
   "CompleteLattice.toLattice",
   "lt_of_le_of_lt",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Nat.lt_add_one",
   "Exists.casesOn",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "SemilatticeSup.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "le_top",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "LE.le",
   "HarderNarasimhan.StrongDescendingChainCondition'.wdcc'",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name":
  "HarderNarasimhan.instStrongDescendingChainConditionOfStrongDescendingChainCondition'",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} [h : HarderNarasimhan.StrongDescendingChainCondition' μ],\n  HarderNarasimhan.StrongDescendingChainCondition μ",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Prod.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.instNontrivialInterval",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.Interval",
   "Subtype.mk",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.IntervalSemistableRel._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (x y : ℒ) (h : x < y),\n  Nontrivial (HarderNarasimhan.Interval ⟨(x, y), h⟩)",
  "constCategory": "Theorem"},
 {"references":
  ["instLTNat",
   "Nat.le_sub_one_of_lt",
   "OfNat.ofNat",
   "Iff.intro",
   "LT.lt",
   "Nat",
   "instSubNat",
   "instOfNatNat",
   "Iff",
   "LE.le",
   "HSub.hSub",
   "instHSub",
   "instLENat",
   "Nat.lt_of_le_sub_one"],
  "name": "Nat.le_sub_one_iff_lt",
  "constType": "∀ {m n : ℕ}, 0 < m → (n ≤ m - 1 ↔ n < m)",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Exists.intro",
   "CompleteLattice.toCompleteSemilatticeSup",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "le_rfl",
   "And.intro",
   "Subtype.prop",
   "HarderNarasimhan.μmin",
   "PartialOrder",
   "Eq",
   "Preorder.toLE",
   "Exists",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "sInf_le",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.μA._proof_1",
   "ne_of_lt",
   "le_of_lt",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "HarderNarasimhan.μmax._proof_1",
   "Nontrivial",
   "LE.le",
   "le_sSup",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.impl.rmk4d10₀",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.μmin μ I ≤ μ I ∧ μ I ≤ HarderNarasimhan.μmax μ I",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.ext",
   "Semiring.toNonAssocSemiring",
   "SetLike.instMembership",
   "Ideal",
   "Submodule.setLike",
   "Iff",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Membership.mem",
   "Eq",
   "Semiring.toModule",
   "Semiring"],
  "name": "Ideal.ext",
  "constType":
  "∀ {α : Type u} [inst : Semiring α] {I J : Ideal α}, (∀ (x : α), x ∈ I ↔ x ∈ J) → I = J",
  "constCategory": "Theorem"},
 {"references":
  ["FunLike",
   "DFunLike.mk",
   "EquivLike.toFunLike._proof_1",
   "EquivLike.coe",
   "EquivLike"],
  "name": "EquivLike.toFunLike",
  "constType":
  "{E : Sort u_1} → {α : Sort u_3} → {β : Sort u_4} → [EquivLike E α β] → FunLike E α β",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Prod",
   "Subtype",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "Nontrivial",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Preorder.toLE",
   "CompleteLattice",
   "Prod.fst"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["LT.lt",
   "Preorder",
   "LE.le",
   "Preorder.toLT",
   "Preorder.toLE",
   "lt_of_lt_of_le",
   "flip"],
  "name": "lt_of_le_of_lt'",
  "constType":
  "∀ {α : Type u_1} [inst : Preorder α] {a b c : α}, b ≤ a → c < b → c < a",
  "constCategory": "Theorem"},
 {"references": ["Not", "Decidable.not_imp_symm", "Decidable"],
  "name": "Not.decidable_imp_symm",
  "constType": "∀ {a b : Prop} [Decidable a], (¬a → b) → ¬b → a",
  "constCategory": "Theorem"},
 {"references": ["exists_prop", "Exists", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.μmin_res_intvl._simp_1_1",
  "constType": "∀ {b a : Prop}, (∃ (_ : a), b) = (a ∧ b)",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "Ring.toNonAssocRing",
   "True",
   "Eq.trans",
   "Neg.neg",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "OfNat.ofNat",
   "congrArg",
   "Ring.toAddCommGroup",
   "eq_self",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "NegZeroClass.toNeg",
   "of_eq_true",
   "AddCommGroup.toDivisionAddCommMonoid",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "NegZeroClass.toZero",
   "Zero.toOfNat0",
   "neg_zero",
   "Eq",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "Ring"],
  "name": "Mathlib.Tactic.Ring.neg_zero",
  "constType": "∀ {R : Type u_2} [inst : Ring R], -0 = 0",
  "constCategory": "Theorem"},
 {"references":
  ["Ring.toNonAssocRing",
   "existsUnique_of_exists_of_unique",
   "Classical.propDecidable",
   "eq_true",
   "AddGroupWithOne.toAddMonoidWithOne",
   "ite_cond_eq_true",
   "Int.instCommSemiring",
   "congrFun",
   "RelSeries.length",
   "Int.instLTInt",
   "Eq.symm",
   "HarderNarasimhan.exists_unique_relSeries_isIntervalSemistable_of_completeLinearOrder._simp_1_1",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "instLatticeInt",
   "instLTNat",
   "Exists",
   "BoundedOrder",
   "Ring.toSemiring",
   "instOfNat",
   "eq_false",
   "AddMonoid.toAddSemigroup",
   "Top.top",
   "Int.negOfNat",
   "Eq.mpr",
   "Nat.find",
   "HarderNarasimhan.impl.instμ_Admissible",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.lt_add_one_of_le",
   "Mathlib.Tactic.Linarith.lt_irrefl",
   "Fin.val_cast_of_lt",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Mathlib.Tactic.Ring.neg_one_mul",
   "Int.instIsStrictOrderedRing",
   "Eq",
   "instNatCastInt",
   "Mathlib.Tactic.Ring.neg_zero",
   "Int.instIsOrderedAddMonoid",
   "Fin.eq_of_val_eq",
   "HPow.hPow",
   "CompletelyDistribLattice.toCompleteLattice",
   "eq_self",
   "Monoid.toNatPow",
   "RelSeries.ext",
   "instHSub",
   "PartialOrder.toPreorder",
   "Mathlib.Meta.NormNum.IsNat.of_raw",
   "Mathlib.Meta.NormNum.IsInt.of_raw",
   "Mathlib.Tactic.Ring.add_pf_zero_add",
   "Preorder.toLT",
   "Fin",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "Semiring.toNonAssocSemiring",
   "eq_of_heq",
   "Int.instLEInt",
   "HarderNarasimhan.IntervalSemistableRel",
   "HarderNarasimhan.Convex",
   "CompleteLinearOrder",
   "AddGroup.toSubNegMonoid",
   "Eq.rec",
   "Int.ofNat",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Fin.cast_val_eq_self",
   "And.right",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "SetRel",
   "HarderNarasimhan.instUniqueHarderNarasimhanFiltration",
   "Bot.bot",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "ite_cond_eq_false",
   "Unique.uniq",
   "Exists.casesOn",
   "RelSeries.last",
   "Nat",
   "Mathlib.Tactic.Ring.atom_pf",
   "NonUnitalNormedCommRing.toNonUnitalCommRing",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.cast",
   "Eq.mp",
   "HarderNarasimhan.impl.hHFil_of_hNSeries",
   "BoundedOrder.toOrderTop",
   "Mathlib.Tactic.Ring.add_pf_add_lt",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "HarderNarasimhan.exists_relSeries_isIntervalSemistable",
   "HarderNarasimhan.impl.balabala2",
   "Not",
   "instHAdd",
   "Distrib.toMul",
   "Mathlib.Tactic.Ring.cast_pos",
   "Function.comp",
   "Mathlib.Tactic.Ring.add_congr",
   "LT.lt",
   "of_eq_true",
   "One.toOfNat1",
   "Mathlib.Tactic.Ring.neg_add",
   "Mathlib.Tactic.Ring.add_pf_add_zero",
   "Mathlib.Tactic.Ring.neg_congr",
   "Unique.toInhabited",
   "Mathlib.Tactic.Linarith.sub_nonpos_of_le",
   "False",
   "Subtype.mk",
   "OrderTop.toTop",
   "NormedCommRing.toNonUnitalNormedCommRing",
   "instAddNat",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Mathlib.Tactic.Linarith.add_lt_of_neg_of_le",
   "Eq.trans",
   "Mathlib.Meta.NormNum.IsInt.to_raw_eq",
   "Inhabited.default",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "False.elim",
   "NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring",
   "SubNegMonoid.toSub",
   "Mathlib.Tactic.Ring.add_overlap_pf_zero",
   "Eq.ndrec",
   "Mathlib.Tactic.Ring.sub_pf",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "NonUnitalCommRing.toNonUnitalNonAssocCommRing",
   "Prod.snd",
   "instNeZeroNatHAdd_1",
   "Prod",
   "BoundedOrder.toOrderBot",
   "RelSeries.head",
   "Eq.refl",
   "Lattice",
   "AddMonoidWithOne.toOne",
   "HEq",
   "Nat.rawCast",
   "Mathlib.Meta.NormNum.IsNat.to_isInt",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "Int.add_one_le_iff",
   "Int.instRing",
   "Mathlib.Tactic.Ring.add_pf_add_overlap_zero",
   "Int.instAddCommGroup",
   "instOfNatNat",
   "Int.instAdd",
   "WellFoundedGT",
   "Preorder.toLE",
   "Distrib.toAdd",
   "IsStrictOrderedRing.toIsOrderedRing",
   "ite",
   "Mathlib.Tactic.Zify.natCast_lt._simp_1",
   "OfNat.ofNat",
   "ite_congr",
   "Int",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "AddGroupWithOne.toAddGroup",
   "AddCommGroup.toDivisionAddCommMonoid",
   "HarderNarasimhan.μA",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "ExistsUnique",
   "Int.instNormedCommRing",
   "neg_neg_of_pos",
   "dite",
   "RelSeries.toFun",
   "Prod.mk",
   "HMul.hMul",
   "Int.rawCast",
   "Fin.val",
   "Ring.toAddGroupWithOne",
   "funext",
   "HSub.hSub",
   "Mathlib.Meta.NormNum.IsInt.to_isNat",
   "Mathlib.Tactic.Linarith.zero_lt_one",
   "Nat.instLinearOrder",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "AddSemigroup.toAdd",
   "instHPow",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Neg.neg",
   "And",
   "HarderNarasimhan.impl.balabala1",
   "NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "instHMul",
   "Mathlib.Meta.NormNum.isNat_ofNat",
   "Subtype",
   "RelSeries",
   "Mathlib.Tactic.Ring.neg_mul",
   "Mathlib.Meta.NormNum.isInt_add",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "Fin.cast",
   "Fin.is_le",
   "Fin.NatCast.instNatCast",
   "Mathlib.Tactic.Ring.instCommSemiringNat",
   "MonoidWithZero.toMonoid",
   "Zero.toOfNat0",
   "Mathlib.Tactic.Ring.sub_congr",
   "OrderBot.toBot",
   "Mathlib.Tactic.Ring.cast_zero",
   "Mathlib.Meta.NormNum.isInt_mul",
   "Mathlib.Tactic.Ring.of_eq",
   "Lattice.toSemilatticeInf",
   "True",
   "HEq.refl",
   "CommSemiring.toSemiring",
   "Nat.decLe",
   "Mathlib.Tactic.Zify.natCast_le._simp_1",
   "Semiring.toMonoidWithZero",
   "Eq.casesOn",
   "NegZeroClass.toNeg",
   "Int.instSemiring",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "LE.le",
   "Mathlib.Tactic.Ring.add_pf_add_gt",
   "instLENat",
   "Int.instAddMonoid"],
  "name":
  "HarderNarasimhan.exists_unique_relSeries_isIntervalSemistable_of_completeLinearOrder",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) [hμ : HarderNarasimhan.μA_DescendingChainCondition μ]\n  [hμcvx : HarderNarasimhan.Convex μ],\n  ∃! s,\n    s.head = ⊥ ∧\n      s.last = ⊤ ∧\n        ∀ (i : ℕ) (hi : i + 1 < s.length),\n          ¬HarderNarasimhan.μA μ ⟨(s.toFun ↑i, s.toFun ↑(i + 1)), ⋯⟩ ≤\n              HarderNarasimhan.μA μ ⟨(s.toFun ↑(i + 1), s.toFun ↑(i + 2)), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Ord",
   "LinearOrder.compare_eq_compareOfLessAndEq._autoParam",
   "PartialOrder.toPreorder",
   "DecidableLE",
   "Ord.compare",
   "ite",
   "DecidableLT",
   "DecidableEq",
   "LinearOrder",
   "Preorder.toLT",
   "LinearOrder.max_def._autoParam",
   "Min",
   "compareOfLessAndEq",
   "Ordering",
   "LinearOrder.min_def._autoParam",
   "Max.max",
   "Or",
   "Min.min",
   "PartialOrder",
   "LE.le",
   "autoParam",
   "Eq",
   "Max",
   "Preorder.toLE"],
  "name": "LinearOrder.mk",
  "constType":
  "{α : Type u_2} →\n  [toPartialOrder : PartialOrder α] →\n    [toMin : Min α] →\n      [toMax : Max α] →\n        [toOrd : Ord α] →\n          (∀ (a b : α), a ≤ b ∨ b ≤ a) →\n            (toDecidableLE : DecidableLE α) →\n              (toDecidableEq : DecidableEq α) →\n                (toDecidableLT : DecidableLT α) →\n                  autoParam (∀ (a b : α), a ⊓ b = if a ≤ b then a else b) LinearOrder.min_def._autoParam →\n                    autoParam (∀ (a b : α), a ⊔ b = if a ≤ b then b else a) LinearOrder.max_def._autoParam →\n                      autoParam (∀ (a b : α), compare a b = compareOfLessAndEq a b)\n                          LinearOrder.compare_eq_compareOfLessAndEq._autoParam →\n                        LinearOrder α",
  "constCategory": "Other"},
 {"references":
  ["_private.Init.Data.Subtype.Basic.0.Subtype.exists.match_1_3",
   "Exists",
   "Subtype",
   "Iff",
   "Exists.intro",
   "Subtype.mk",
   "_private.Init.Data.Subtype.Basic.0.Subtype.exists.match_1_1",
   "Iff.intro"],
  "name": "Subtype.exists",
  "constType":
  "∀ {α : Sort u} {p : α → Prop} {q : { a // p a } → Prop}, (∃ x, q x) ↔ ∃ a, ∃ (b : p a), q ⟨a, b⟩",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.SlopeLike.rec",
   "Prod.fst",
   "Or",
   "PartialOrder",
   "Preorder.toLE",
   "And.left",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "HarderNarasimhan.SlopeLike.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.SlopeLike.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.SlopeLike μ → Sort u} →\n                (t : HarderNarasimhan.SlopeLike μ) →\n                  ((slopelike :\n                        ∀ (x y z : ℒ) (h : x < y ∧ y < z),\n                          (μ ⟨(x, y), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ < μ ⟨(x, z), ⋯⟩) ∧\n                            (μ ⟨(x, y), ⋯⟩ < μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩) ∧\n                              (μ ⟨(x, z), ⋯⟩ < μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(y, z), ⋯⟩) ∧\n                                (μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ < μ ⟨(y, z), ⋯⟩)) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["Set.instHasSubset",
   "HasSubset.Subset",
   "Set",
   "Singleton.singleton",
   "Iff",
   "Membership.mem",
   "forall_eq",
   "Set.instSingletonSet",
   "Set.instMembership"],
  "name": "Set.singleton_subset_iff",
  "constType": "∀ {α : Type u} {a : α} {s : Set α}, {a} ⊆ s ↔ a ∈ s",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "Eq.symm",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Eq.ndrec",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk.noConfusion",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat.lt_add_one",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "HEq",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Eq.propIntro",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "Eq.casesOn",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.mk.injEq",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (filtration : ℕ → ℒ) (monotone : Monotone filtration)\n  (first_eq_bot : filtration 0 = ⊥) (fin_len : ∃ n, filtration n = ⊤)\n  (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j)\n  (piecewise_semistable :\n    ∀ (i : ℕ) (h : i < Nat.find fin_len),\n      HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(filtration i, filtration (i + 1)), ⋯⟩ μ))\n  (μA_pseudo_strict_anti :\n    ∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len),\n      ¬HarderNarasimhan.μA μ ⟨(filtration i, filtration (i + 1)), ⋯⟩ ≤\n          HarderNarasimhan.μA μ ⟨(filtration (i + 1), filtration (i + 2)), ⋯⟩)\n  (filtration_1 : ℕ → ℒ) (monotone_1 : Monotone filtration_1) (first_eq_bot_1 : filtration_1 0 = ⊥)\n  (fin_len_1 : ∃ n, filtration_1 n = ⊤)\n  (strict_mono_1 : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len_1 → filtration_1 i < filtration_1 j)\n  (piecewise_semistable_1 :\n    ∀ (i : ℕ) (h : i < Nat.find fin_len_1),\n      HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(filtration_1 i, filtration_1 (i + 1)), ⋯⟩ μ))\n  (μA_pseudo_strict_anti_1 :\n    ∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len_1),\n      ¬HarderNarasimhan.μA μ ⟨(filtration_1 i, filtration_1 (i + 1)), ⋯⟩ ≤\n          HarderNarasimhan.μA μ ⟨(filtration_1 (i + 1), filtration_1 (i + 2)), ⋯⟩),\n  ({ filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot, fin_len := fin_len,\n        strict_mono := strict_mono, piecewise_semistable := piecewise_semistable,\n        μA_pseudo_strict_anti := μA_pseudo_strict_anti } =\n      { filtration := filtration_1, monotone := monotone_1, first_eq_bot := first_eq_bot_1, fin_len := fin_len_1,\n        strict_mono := strict_mono_1, piecewise_semistable := piecewise_semistable_1,\n        μA_pseudo_strict_anti := μA_pseudo_strict_anti_1 }) =\n    (filtration = filtration_1)",
  "constCategory": "Theorem"},
 {"references":
  ["Set.image",
   "Exists",
   "Set",
   "Membership.mem",
   "And",
   "Set.mem_image",
   "Eq",
   "propext",
   "Set.instMembership"],
  "name": "HarderNarasimhan.instWellFoundedGTInterval._simp_1",
  "constType":
  "∀ {α : Type u} {β : Type v} (f : α → β) (s : Set α) (y : β), (y ∈ f '' s) = ∃ x ∈ s, f x = y",
  "constCategory": "Theorem"},
 {"references": ["Add"],
  "name": "IsLeftCancelAdd",
  "constType": "(G : Type u) → [Add G] → Prop",
  "constCategory": "Other"},
 {"references":
  ["LinearOrder.toPartialOrder",
   "CommRing.toCommSemiring",
   "IsNoetherianRing",
   "PartialOrder",
   "HarderNarasimhan.instLinearOrderS₀",
   "CommSemiring.toSemiring",
   "HarderNarasimhan.S₀",
   "CommRing"],
  "name": "HarderNarasimhan.instPartialOrderS₀",
  "constType":
  "{R : Type u_1} → [inst : CommRing R] → [inst_1 : IsNoetherianRing R] → PartialOrder (HarderNarasimhan.S₀ R)",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Membership.mem",
   "instZeroLEOneClass",
   "Classical.propDecidable",
   "Preorder.toLT",
   "GT.gt",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.impl.JHFil._proof_2",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "Nat.instPartialOrder",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "Nat.instStarRing",
   "And",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Nat.brecOn",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Set.instMembership",
   "Unit",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "HarderNarasimhan.impl.JHFil._proof_3",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteDistribLattice.toCoframe",
   "AddMonoid.toAddZeroClass",
   "setOf",
   "HarderNarasimhan.Semistable",
   "Subtype",
   "GeneralizedCoheytingAlgebra.toLattice",
   "SemilatticeSup.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Nat.instAddCancelCommMonoid",
   "Prod.fst",
   "Nat.instPreorder",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Nat.instSemiring",
   "Nat.instOne",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.JHFil._proof_1",
   "Preorder.toLE",
   "Eq",
   "Not",
   "Nat.instAddMonoid",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "Set",
   "instHAdd",
   "HarderNarasimhan.impl.JHFil.match_1",
   "AddZero.toAdd",
   "Exists.choose",
   "OfNat.ofNat",
   "LT.lt",
   "CompletelyDistribLattice.toCompleteLattice",
   "HAdd.hAdd",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "Nat.succ",
   "Nat.below",
   "Ne",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "dite",
   "OrderTop.toTop",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.JHFil",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        [hacc : WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [inst_3 : CompleteLinearOrder S] →\n              (μ : { p // p.1 < p.2 } → S) →\n                μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤ →\n                  HarderNarasimhan.SlopeLike μ →\n                    HarderNarasimhan.Semistable μ →\n                      (∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) → ℕ → ℒ",
  "constCategory": "Definition"},
 {"references": ["Not", "not_and", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₂._simp_1_9",
  "constType": "∀ {a b : Prop}, (¬(a ∧ b)) = (a → ¬b)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.CoprimaryFiltration.rec",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "SizeOf",
   "Set.instMembership",
   "Nat",
   "Submodule.instBot",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Top.top",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Nat.instPreorder",
   "Submodule",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "SizeOf.sizeOf",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "instSizeOfDefault",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration._sizeOf_1",
  "constType":
  "{R : Type u_1} →\n  {inst : CommRing R} →\n    {inst_1 : IsNoetherianRing R} →\n      {M : Type u_2} →\n        {inst_2 : Nontrivial M} →\n          {inst_3 : AddCommGroup M} →\n            {inst_4 : _root_.Module R M} →\n              {inst_5 : Module.Finite R M} → [SizeOf R] → [SizeOf M] → HarderNarasimhan.CoprimaryFiltration R M → ℕ",
  "constCategory": "Definition"},
 {"references": ["Preorder", "LE.le", "le_of_eq", "Preorder.toLE", "Eq"],
  "name": "Eq.le",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] {a b : α}, a = b → a ≤ b",
  "constCategory": "Theorem"},
 {"references":
  ["rfl",
   "RingHom",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "LinearMap.instFunLike",
   "Module",
   "LinearMap.comp",
   "Eq",
   "LinearMap",
   "DFunLike.coe",
   "RingHomCompTriple",
   "Semiring"],
  "name": "LinearMap.comp_apply",
  "constType":
  "∀ {R₁ : Type u_2} {R₂ : Type u_3} {R₃ : Type u_4} {M₁ : Type u_9} {M₂ : Type u_10} {M₃ : Type u_11} [inst : Semiring R₁]\n  [inst_1 : Semiring R₂] [inst_2 : Semiring R₃] [inst_3 : AddCommMonoid M₁] [inst_4 : AddCommMonoid M₂]\n  [inst_5 : AddCommMonoid M₃] {module_M₁ : _root_.Module R₁ M₁} {module_M₂ : _root_.Module R₂ M₂}\n  {module_M₃ : _root_.Module R₃ M₃} {σ₁₂ : R₁ →+* R₂} {σ₂₃ : R₂ →+* R₃} {σ₁₃ : R₁ →+* R₃}\n  [inst_6 : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃] (f : M₂ →ₛₗ[σ₂₃] M₃) (g : M₁ →ₛₗ[σ₁₂] M₂) (x : M₁), (f ∘ₛₗ g) x = f (g x)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Zero.ofOfNat0",
   "instHAdd",
   "OfNat.ofNat",
   "NeZero",
   "HAdd.hAdd",
   "Nat",
   "Nat.AtLeastTwo",
   "instOfNatNat",
   "Nat.instAtLeastTwoHAddOfNat._proof_1",
   "Nat.AtLeastTwo.mk",
   "Ne",
   "Zero.toOfNat0",
   "NeZero.ne"],
  "name": "Nat.instAtLeastTwoHAddOfNat",
  "constType": "∀ (n : ℕ) [NeZero n], (n + 1).AtLeastTwo",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.mem_coe",
   "SetLike.instMembership",
   "SetLike.coe",
   "Set",
   "Membership.mem",
   "SetLike",
   "Eq",
   "propext",
   "Set.instMembership"],
  "name": "HarderNarasimhan.impl.submoduleOf_map_subtype._simp_1_1",
  "constType":
  "∀ {A : Type u_1} {B : Type u_2} [i : SetLike A B] {p : A} {x : B}, (x ∈ ↑p) = (x ∈ p)",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Ne.symm",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "Preorder.toLT",
   "Top.top",
   "OrderTop",
   "Ne",
   "Ne.lt_top",
   "Preorder.toLE",
   "OrderTop.toTop"],
  "name": "Ne.lt_top'",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderTop α] {a : α}, ⊤ ≠ a → a < ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "sup_le",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "And.intro",
   "Or",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Exists.casesOn",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "Lattice",
   "inf_le_left",
   "ConditionallyCompleteLattice.toLattice",
   "setOf",
   "inf_le_right",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "SemilatticeInf.toMin",
   "Subtype",
   "le_trans",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "Prod.fst",
   "Or.inl",
   "InfSet.sInf",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.impl.prop2d8₀I",
   "CompleteLattice.toConditionallyCompleteLattice",
   "Lattice.toSemilatticeInf",
   "le_sInf_iff",
   "Set",
   "Or.casesOn",
   "LT.lt",
   "CompleteSemilatticeInf.toInfSet",
   "Max.max",
   "HarderNarasimhan.μA._proof_1",
   "Min.min",
   "HarderNarasimhan.μA",
   "LE.le",
   "SemilatticeSup.toMax",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice",
   "lt_sup_of_lt_left"],
  "name": "HarderNarasimhan.impl.prop2d8₁I",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        ∀ (y : ℒ),\n          HarderNarasimhan.InIntvl I y →\n            ∀ (u : ℒ),\n              HarderNarasimhan.InIntvl I u →\n                ∀ (h : u < x ∧ u < y),\n                  HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩ ⊓ HarderNarasimhan.μA μ ⟨(u, y), ⋯⟩ ≤\n                    HarderNarasimhan.μA μ ⟨(u, x ⊔ y), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "bot_le",
   "Subtype.val",
   "Prod.fst",
   "And.intro",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "le_top",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "LE.le",
   "Nontrivial",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "bot_lt_top"],
  "name": "HarderNarasimhan.instCoeIntervalMkProdLtFstSndMkBotTop._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] (a : ℒ),\n  (↑⟨(⊥, ⊤), ⋯⟩).1 ≤ a ∧ a ≤ (↑⟨(⊥, ⊤), ⋯⟩).2",
  "constCategory": "Theorem"},
 {"references":
  ["rfl",
   "Nat",
   "Mathlib.Meta.NormNum.IsNat.mk",
   "Nat.rawCast",
   "AddMonoidWithOne",
   "Mathlib.Meta.NormNum.IsNat"],
  "name": "Mathlib.Meta.NormNum.IsNat.of_raw",
  "constType":
  "∀ (α : Type u_1) [inst : AddMonoidWithOne α] (n : ℕ), Mathlib.Meta.NormNum.IsNat n.rawCast n",
  "constCategory": "Theorem"},
 {"references":
  ["CommMonoidWithZero",
   "MonoidWithZero.mk",
   "CommMonoidWithZero.mul_zero",
   "CommMonoid.toMonoid",
   "CommMonoidWithZero.toZero",
   "CommMonoidWithZero.toCommMonoid",
   "CommMonoidWithZero.zero_mul",
   "MonoidWithZero"],
  "name": "CommMonoidWithZero.toMonoidWithZero",
  "constType":
  "{M₀ : Type u_2} → [self : CommMonoidWithZero M₀] → MonoidWithZero M₀",
  "constCategory": "Definition"},
 {"references":
  ["rfl",
   "Mathlib.Meta.NormNum.IsInt.mk",
   "Mathlib.Meta.NormNum.IsInt",
   "Int.rawCast",
   "Int",
   "Ring"],
  "name": "Mathlib.Meta.NormNum.IsInt.of_raw",
  "constType":
  "∀ (α : Type u_1) [inst : Ring α] (n : ℤ), Mathlib.Meta.NormNum.IsInt n.rawCast n",
  "constCategory": "Theorem"},
 {"references":
  ["Set.instHasSubset",
   "AddCommMonoid",
   "SetLike.coe",
   "HasSubset.Subset",
   "Submodule.instInfSet",
   "Submodule.setLike",
   "Set",
   "Module",
   "InfSet.sInf",
   "setOf",
   "Submodule",
   "Semiring"],
  "name": "Submodule.span",
  "constType":
  "(R : Type u_1) →\n  {M : Type u_4} →\n    [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → Set M → Submodule R M",
  "constCategory": "Definition"},
 {"references":
  ["And.intro",
   "Nat",
   "Iff.mpr",
   "LE.le",
   "And",
   "instLEFin",
   "Fin",
   "Fin.le_antisymm_iff",
   "Eq"],
  "name": "Fin.le_antisymm",
  "constType": "∀ {n : ℕ} {x y : Fin n}, x ≤ y → y ≤ x → x = y",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "LT"],
  "name": "GT.gt",
  "constType": "{α : Type u} → [LT α] → α → α → Prop",
  "constCategory": "Definition"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "LocalizedModule",
   "Submonoid.instSetLike",
   "Module",
   "Membership.mem",
   "CommSemiring",
   "CommSemiring.toSemiring",
   "MulZeroOneClass.toMulOneClass",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "LocalizedModule.mk",
   "Submonoid.one",
   "OfNat.ofNat",
   "Submonoid",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "One.toOfNat1",
   "Zero.mk",
   "Zero.toOfNat0",
   "Zero",
   "AddZero.toZero",
   "NonAssocSemiring.toMulZeroOneClass",
   "AddMonoid.toAddZeroClass"],
  "name": "LocalizedModule.instZero",
  "constType":
  "{R : Type u} →\n  [inst : CommSemiring R] →\n    {S : Submonoid R} →\n      {M : Type v} → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → Zero (LocalizedModule S M)",
  "constCategory": "Definition"},
 {"references":
  ["RelEmbedding.instFunLike._proof_1",
   "FunLike",
   "DFunLike.mk",
   "RelEmbedding.toEmbedding",
   "Function.Embedding.toFun",
   "RelEmbedding"],
  "name": "RelEmbedding.instFunLike",
  "constType":
  "{α : Type u_1} → {β : Type u_2} → {r : α → α → Prop} → {s : β → β → Prop} → FunLike (r ↪r s) α β",
  "constCategory": "Definition"},
 {"references":
  ["Int.instSub",
   "Eq.trans",
   "Classical.propDecidable",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "Exists.intro",
   "Subtype.val",
   "HarderNarasimhan.JordanHolderFiltration",
   "Eq.symm",
   "Int.add_one_le_of_lt",
   "Bool.true",
   "instLTNat",
   "HarderNarasimhan.impl.subseq_prop1",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "le_sup_left",
   "Lean.Omega.LinearCombo.coordinate",
   "Prod",
   "BoundedOrder.toOrderBot",
   "instOfNat",
   "Antitone",
   "Eq.refl",
   "Lattice",
   "Top.top",
   "Lean.Omega.Constraint.addEquality_sat",
   "Lean.Omega.Int.sub_congr",
   "Or.elim",
   "Nat.find",
   "Lean.Omega.LinearCombo.coordinate_eval_2",
   "Bool",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Option.some",
   "Nat.instPreorder",
   "Prod.fst",
   "Lean.Omega.LinearCombo.mk",
   "Lean.Omega.LinearCombo.instSub",
   "instOfNatNat",
   "Lean.Omega.Int.ofNat_sub_dichotomy",
   "Int.instAdd",
   "Eq",
   "Preorder.toLE",
   "instNatCastInt",
   "HarderNarasimhan.instBoundedOrderInterval",
   "OfNat.ofNat",
   "Int",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "Max.max",
   "Lean.Omega.Int.ofNat_lt_of_lt",
   "Option.none",
   "Nat.sub_le",
   "instHSub",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "le_of_le_of_eq",
   "Preorder.toLT",
   "Lean.Omega.Int.ofNat_le_of_le",
   "HarderNarasimhan.impl.subseq",
   "And.intro",
   "Int.instLEInt",
   "HSub.hSub",
   "CompleteLinearOrder",
   "Eq.rec",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.JordanHolderFiltration.strict_anti",
   "Neg.neg",
   "And.right",
   "Lean.Omega.Constraint.addInequality_sat",
   "And",
   "Bot.bot",
   "Int.instNegInt",
   "instDecidableEqBool",
   "Nat",
   "Nontrivial",
   "id",
   "Lean.Omega.LinearCombo.coordinate_eval_7",
   "Subtype",
   "Nat.cast",
   "Lean.Omega.Constraint.combine_sat'",
   "Int.sub_eq_zero_of_eq",
   "Decidable.decide",
   "Lean.Omega.Coeffs.ofList",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Lean.Omega.Constraint.not_sat'_of_isImpossible",
   "HarderNarasimhan.JordanHolderFiltration.first_eq_top",
   "of_decide_eq_true",
   "Not",
   "List.nil",
   "Lattice.toSemilatticeInf",
   "le_top",
   "instHAdd",
   "Lean.Omega.LinearCombo",
   "Lean.Omega.Constraint.isImpossible",
   "Int.sub_nonneg_of_le",
   "LT.lt",
   "HarderNarasimhan.instNontrivialInterval",
   "Nat.le_of_not_lt",
   "Lean.Omega.LinearCombo.sub_eval",
   "instSubNat",
   "LE.le",
   "SemilatticeSup.toMax",
   "HarderNarasimhan.instPartialOrderInterval",
   "False",
   "Lean.Omega.Constraint.mk",
   "Lean.Omega.LinearCombo.eval",
   "Subtype.mk",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "OrderTop.toTop",
   "instLENat"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_21",
  "constType":
  "∀ (n : ℕ) (ℒ : Type u_1) (ntl : Nontrivial ℒ) (l : Lattice ℒ) (bo : BoundedOrder ℒ) (S : Type u_2)\n  (clo : CompleteLinearOrder S) (μ : { p // p.1 < p.2 } → S) (JHy JHx : HarderNarasimhan.JordanHolderFiltration μ)\n  (this : 0 < Nat.find ⋯ - 1),\n  (Antitone fun n ↦ ⟨JHx.filtration (Nat.find ⋯ - 1) ⊔ JHy.filtration n, ⋯⟩) →\n    (fun n ↦ ⟨JHx.filtration (Nat.find ⋯ - 1) ⊔ JHy.filtration n, ⋯⟩) 0 = ⊤ →\n      (fun n ↦ ⟨JHx.filtration (Nat.find ⋯ - 1) ⊔ JHy.filtration n, ⋯⟩) (Nat.find ⋯) = ⊥ →\n        ∀ (i j : ℕ), ¬Nat.find ⋯ - 1 < Nat.find ⋯ → False",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "HMod.hMod",
   "Nat",
   "Nat.mod_succ_eq_iff_lt",
   "Nat.succ",
   "instHMod",
   "Eq",
   "propext",
   "Nat.instMod"],
  "name": "HarderNarasimhan.impl.balabala2._simp_1_1",
  "constType": "∀ {m n : ℕ}, (m % n.succ = m) = (m < n.succ)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Preorder.toLT",
   "Subtype.val",
   "Set.Elem",
   "Exists",
   "SetLike.instMembership",
   "Submodule.addCommGroup",
   "PrimeSpectrum.mk",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ._proof_1",
   "Prod.snd",
   "Fintype",
   "Set.instMembership",
   "Prod",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "setOf",
   "Submodule.submoduleOf",
   "Set.Finite.fintype",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Submodule.hasQuotient",
   "Subtype",
   "HasQuotient.Quotient",
   "HarderNarasimhan._μ._proof_1",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "HarderNarasimhan._μ",
   "Eq",
   "CommRing.toCommSemiring",
   "LinearExtension",
   "Set",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "CommRing",
   "PrimeSpectrum",
   "LT.lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] → {I : { z // z.1 < z.2 }} → Fintype ↑(HarderNarasimhan._μ R M I)",
  "constCategory": "Definition"},
 {"references": ["rfl", "funext", "Eq.rec", "Eq"],
  "name": "forall_congr",
  "constType":
  "∀ {α : Sort u} {p q : α → Prop}, (∀ (a : α), p a = q a) → (∀ (a : α), p a) = ∀ (a : α), q a",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Subtype",
   "Iff.mp",
   "Iff.intro",
   "Acc",
   "IsEmpty",
   "And.intro",
   "WellFounded.intro",
   "instOfNatNat",
   "Eq",
   "WellFounded",
   "rfl",
   "instHAdd",
   "IsEmpty.mk",
   "And.right",
   "And",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "wellFounded_iff_isEmpty_descending_chain.match_1_3",
   "wellFounded_iff_isEmpty_descending_chain.match_1_1",
   "Nat",
   "acc_iff_isEmpty_descending_chain",
   "Iff",
   "Iff.mpr",
   "False",
   "Subtype.mk",
   "wellFounded_iff_isEmpty_descending_chain.match_1_5",
   "IsEmpty.false"],
  "name": "wellFounded_iff_isEmpty_descending_chain",
  "constType":
  "∀ {α : Sort u_1} {r : α → α → Prop}, WellFounded r ↔ IsEmpty { f // ∀ (n : ℕ), r (f (n + 1)) (f n) }",
  "constCategory": "Theorem"},
 {"references":
  ["Semifield.toCommSemiring",
   "Semifield.zpow_neg'",
   "CommSemiring.toSemiring",
   "Semifield.mul_inv_cancel",
   "Semifield.toDiv",
   "Semifield.nnqsmul_def",
   "Semifield.div_eq_mul_inv",
   "Semifield.toInv",
   "Semifield.inv_zero",
   "DivisionSemiring",
   "Semifield.nnqsmul",
   "Semifield.toNNRatCast",
   "DivisionSemiring.mk",
   "Semifield.zpow_zero'",
   "Semifield.zpow",
   "Semifield.toNontrivial",
   "Semifield",
   "Semifield.zpow_succ'",
   "Semifield.nnratCast_def"],
  "name": "Semifield.toDivisionSemiring",
  "constType": "{K : Type u_2} → [self : Semifield K] → DivisionSemiring K",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.S₁I",
   "HarderNarasimhan.S₁I._proof_1",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.μA",
   "Eq.refl",
   "Lattice",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.S₁I.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (x : ℒ)\n  (hxI : HarderNarasimhan.InIntvl I x) (hx : (↑I).1 ≠ x),\n  HarderNarasimhan.S₁I μ I x hxI hx =\n    ∀ (y : ℒ) (hyI : HarderNarasimhan.InIntvl I y) (hy : (↑I).1 ≠ y),\n      ¬HarderNarasimhan.μA μ ⟨((↑I).1, y), ⋯⟩ > HarderNarasimhan.μA μ ⟨((↑I).1, x), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat.lt_add_one",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "HarderNarasimhan.HarderNarasimhanFiltration.noConfusion",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.mk.noConfusion",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              (P : Sort u) →\n                (filtration : ℕ → ℒ) →\n                  (monotone : Monotone filtration) →\n                    (first_eq_bot : filtration 0 = ⊥) →\n                      (fin_len : ∃ n, filtration n = ⊤) →\n                        (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                          (piecewise_semistable :\n                              ∀ (i : ℕ) (h : i < Nat.find fin_len),\n                                HarderNarasimhan.Semistable\n                                  (HarderNarasimhan.Resμ ⟨(filtration i, filtration (i + 1)), ⋯⟩ μ)) →\n                            (μA_pseudo_strict_anti :\n                                ∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len),\n                                  ¬HarderNarasimhan.μA μ ⟨(filtration i, filtration (i + 1)), ⋯⟩ ≤\n                                      HarderNarasimhan.μA μ ⟨(filtration (i + 1), filtration (i + 2)), ⋯⟩) →\n                              (filtration' : ℕ → ℒ) →\n                                (monotone' : Monotone filtration') →\n                                  (first_eq_bot' : filtration' 0 = ⊥) →\n                                    (fin_len' : ∃ n, filtration' n = ⊤) →\n                                      (strict_mono' :\n                                          ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len' → filtration' i < filtration' j) →\n                                        (piecewise_semistable' :\n                                            ∀ (i : ℕ) (h : i < Nat.find fin_len'),\n                                              HarderNarasimhan.Semistable\n                                                (HarderNarasimhan.Resμ ⟨(filtration' i, filtration' (i + 1)), ⋯⟩ μ)) →\n                                          (μA_pseudo_strict_anti' :\n                                              ∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len'),\n                                                ¬HarderNarasimhan.μA μ ⟨(filtration' i, filtration' (i + 1)), ⋯⟩ ≤\n                                                    HarderNarasimhan.μA μ\n                                                      ⟨(filtration' (i + 1), filtration' (i + 2)), ⋯⟩) →\n                                            { filtration := filtration, monotone := monotone,\n                                                  first_eq_bot := first_eq_bot, fin_len := fin_len,\n                                                  strict_mono := strict_mono,\n                                                  piecewise_semistable := piecewise_semistable,\n                                                  μA_pseudo_strict_anti := μA_pseudo_strict_anti } =\n                                                { filtration := filtration', monotone := monotone',\n                                                  first_eq_bot := first_eq_bot', fin_len := fin_len',\n                                                  strict_mono := strict_mono',\n                                                  piecewise_semistable := piecewise_semistable',\n                                                  μA_pseudo_strict_anti := μA_pseudo_strict_anti' } →\n                                              (filtration = filtration' → P) → P",
  "constCategory": "Definition"},
 {"references":
  ["SetLike.instPartialOrder",
   "PartialOrder.toPreorder",
   "Module",
   "Membership.mem",
   "Iff.mp",
   "AddCommMonoid.toAddMonoid",
   "Iff.intro",
   "Submodule",
   "AddCommMonoid",
   "Eq.symm",
   "Zero.toOfNat0",
   "OrderBot.toBot",
   "Submodule.instOrderBot",
   "Eq",
   "Eq.rec",
   "Preorder.toLE",
   "SetLike.instMembership",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "eq_bot_iff",
   "OfNat.ofNat",
   "Submodule.setLike",
   "Iff",
   "Iff.mpr",
   "LE.le",
   "Submodule.instBot",
   "Submodule.mem_bot",
   "AddZero.toZero",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.eq_bot_iff",
  "constType":
  "∀ {R : Type u_1} {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M), p = ⊥ ↔ ∀ x ∈ p, x = 0",
  "constCategory": "Theorem"},
 {"references": ["Not", "False.elim", "Eq.mp", "False", "Eq"],
  "name": "of_eq_false",
  "constType": "∀ {p : Prop}, p = False → ¬p",
  "constCategory": "Theorem"},
 {"references":
  ["Lean.mkAtom",
   "Lean.Name.mkStr4",
   "Lean.Syntax.node",
   "Lean.Name.mkStr1",
   "Array.push",
   "Lean.Syntax",
   "Array.empty",
   "Lean.SourceInfo.none"],
  "name": "SubNegMonoid.zsmul_succ'._autoParam",
  "constType": "Syntax",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Real",
  "constType": "Type",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "HarderNarasimhan.CoprimaryFiltration._sizeOf_inst",
   "LinearMap",
   "Bot.bot",
   "SizeOf",
   "Set.instMembership",
   "Nat",
   "Eq.refl",
   "Submodule.instBot",
   "Nontrivial",
   "HarderNarasimhan.CoprimaryFiltration.mk",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Nat.instPreorder",
   "Submodule",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "HarderNarasimhan.CoprimaryFiltration",
   "instOfNatNat",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "SizeOf.sizeOf",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "instSizeOfDefault",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.mk.sizeOf_spec",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] [inst_6 : SizeOf R]\n  [inst_7 : SizeOf M] (filtration : ℕ → Submodule R M) (monotone : Monotone filtration)\n  (first_eq_bot : filtration 0 = ⊥) (fin_len : ∃ n, filtration n = ⊤)\n  (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j)\n  (piecewise_coprimary :\n    ∀ n < Nat.find fin_len,\n      HarderNarasimhan.Coprimary R (↥(filtration (n + 1)) ⧸ (filtration n).submoduleOf (filtration (n + 1))))\n  (strict_mono_associated_prime :\n    ∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len),\n      { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }),\n  sizeOf\n      { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot, fin_len := fin_len,\n        strict_mono := strict_mono, piecewise_coprimary := piecewise_coprimary,\n        strict_mono_associated_prime := strict_mono_associated_prime } =\n    1 + sizeOf first_eq_bot + sizeOf fin_len",
  "constCategory": "Theorem"},
 {"references":
  ["associatedPrimes",
   "CommRing.toCommSemiring",
   "Module",
   "Set",
   "CommSemiring.toSemiring",
   "Membership.mem",
   "AddCommGroup",
   "CommRing",
   "HarderNarasimhan.Coprimary.mk",
   "Set.instMembership",
   "HarderNarasimhan.Coprimary.rec",
   "IsNoetherianRing",
   "HarderNarasimhan.Coprimary",
   "Ideal",
   "AddCommGroup.toAddCommMonoid",
   "ExistsUnique"],
  "name": "HarderNarasimhan.Coprimary.recOn",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : AddCommGroup M] →\n          [inst_3 : _root_.Module R M] →\n            {motive : HarderNarasimhan.Coprimary R M → Sort u} →\n              (t : HarderNarasimhan.Coprimary R M) →\n                ((coprimary : ∃! p, p ∈ associatedPrimes R M) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["HAdd.hAdd",
   "AddZeroClass",
   "instHAdd",
   "Zero.toOfNat0",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "Eq",
   "AddZero.toZero",
   "OfNat.ofNat",
   "AddZeroClass.zero_add"],
  "name": "zero_add",
  "constType": "∀ {M : Type u} [inst : AddZeroClass M] (a : M), 0 + a = a",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "Prod.fst",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "Eq.rec",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "LT.lt",
   "Prod",
   "Nat",
   "Eq.refl",
   "Lattice",
   "Nontrivial",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S) (e_μ : μ = μ_1)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (k k_1 : ℕ),\n  k = k_1 → HarderNarasimhan.impl.HNFil μ k = HarderNarasimhan.impl.HNFil μ_1 k_1",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Option",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Submodule.instBot",
   "Nontrivial",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Submodule",
   "Nat.instPreorder",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "HarderNarasimhan.CoprimaryFiltration",
   "instOfNatNat",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Submodule.instTop",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.mk",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] →\n                (filtration : ℕ → Submodule R M) →\n                  Monotone filtration →\n                    filtration 0 = ⊥ →\n                      (fin_len : ∃ n, filtration n = ⊤) →\n                        (∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                          (piecewise_coprimary :\n                              ∀ n < Nat.find fin_len,\n                                HarderNarasimhan.Coprimary R\n                                  (↥(filtration (n + 1)) ⧸ (filtration n).submoduleOf (filtration (n + 1)))) →\n                            (∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len),\n                                { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }) →\n                              HarderNarasimhan.CoprimaryFiltration R M",
  "constCategory": "Other"},
 {"references": ["LE.le", "LE", "ge_iff_le", "Eq", "GE.ge", "propext"],
  "name": "HarderNarasimhan.impl.rmk4d14₁._simp_1_4",
  "constType": "∀ {α : Type u_1} [inst : LE α] {x y : α}, (x ≥ y) = (y ≤ x)",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.SlopeLike",
   "Nat.find",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Nat.instPreorder",
   "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration",
   "Prod.fst",
   "HarderNarasimhan.JordanHolderFiltration",
   "WellFoundedGT",
   "OrderBot.toBot",
   "CompleteLinearOrder",
   "HarderNarasimhan.Affine",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "rfl",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "Nat.instPartialOrder",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Prod",
   "LT.lt",
   "CompletelyDistribLattice.toCompleteLattice",
   "Nat",
   "BoundedOrder.toOrderBot",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "inferInstance",
   "IsModularLattice",
   "eq_of_le_of_ge",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "Eq.le",
   "instLENat",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.length_eq_of_JordanHolderFiltration",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ]\n  [IsModularLattice ℒ] {S : Type u_2} [inst_5 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S}\n  [HarderNarasimhan.FiniteTotalPayoff μ] [HarderNarasimhan.SlopeLike μ] [HarderNarasimhan.Semistable μ]\n  [HarderNarasimhan.StrongDescendingChainCondition' μ] [HarderNarasimhan.Affine μ]\n  (JH1 JH2 : HarderNarasimhan.JordanHolderFiltration μ), Nat.find ⋯ = Nat.find ⋯",
  "constCategory": "Theorem"},
 {"references": ["SemilatticeInf", "SemilatticeInf.inf", "Min", "Min.mk"],
  "name": "SemilatticeInf.toMin",
  "constType": "{α : Type u} → [SemilatticeInf α] → Min α",
  "constCategory": "Definition"},
 {"references":
  ["Set.range_subset_iff",
   "Set",
   "Eq.mp",
   "Membership.mem",
   "Set.Infinite",
   "Set.range",
   "Set.instMembership",
   "congrArg",
   "Set.instHasSubset",
   "Set.infinite_range_of_injective",
   "HasSubset.Subset",
   "Set.Infinite.mono",
   "Eq.symm",
   "Infinite",
   "propext",
   "Function.Injective"],
  "name": "Set.infinite_of_injective_forall_mem",
  "constType":
  "∀ {α : Type u} {β : Type v} [Infinite α] {s : Set β} {f : α → β},\n  Function.Injective f → (∀ (x : α), f x ∈ s) → s.Infinite",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "HarderNarasimhan.impl.prop2d6₁I",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.impl.prop2d6₀",
   "Prod.fst",
   "And.intro",
   "Eq.symm",
   "Eq",
   "Eq.rec",
   "Preorder.toLE",
   "CompleteLattice.toConditionallyCompleteLattice",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Lattice.toSemilatticeInf",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "inf_eq_left",
   "LT.lt",
   "Prod",
   "le_of_lt",
   "Min.min",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "ConditionallyCompleteLattice.toLattice",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop2d6₂I₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        ∀ (y : ℒ),\n          HarderNarasimhan.InIntvl I y →\n            ∀ (z : ℒ),\n              HarderNarasimhan.InIntvl I z →\n                ∀ (h : x < y ∧ y < z),\n                  HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩ < HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩ →\n                    HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ ∧\n                      HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["Eq.rec", "Eq"],
  "name": "Eq.mp",
  "constType": "{α β : Sort u} → α = β → α → β",
  "constCategory": "Definition"},
 {"references":
  ["DecidableLT",
   "DecidableEq",
   "id",
   "LT.mk",
   "compareOfLessAndEq",
   "Ordering"],
  "name":
  "HarderNarasimhan.TotallyOrderedRealVectorSpace.compare._inherited_default",
  "constType":
  "{V : Type u_1} → (lt : V → V → Prop) → DecidableEq V → DecidableLT V → V → V → Ordering",
  "constCategory": "Definition"},
 {"references": ["Decidable"],
  "name": "DecidablePred",
  "constType": "{α : Sort u} → (α → Prop) → Sort (max 1 u)",
  "constCategory": "Definition"},
 {"references":
  ["AddCancelCommMonoid",
   "Nat.add_zero",
   "Nat.zero_add",
   "AddCommMonoid.mk",
   "HMul.hMul",
   "Nat.add_comm",
   "Nat.succ_mul",
   "Nat.zero_mul",
   "AddCancelCommMonoid.mk",
   "Nat.add_assoc",
   "Nat.zero",
   "AddMonoid.mk",
   "Nat",
   "Nat.add",
   "Zero.mk",
   "instMulNat",
   "instHMul",
   "Add.mk",
   "Nat.instAddCancelCommMonoid._proof_1",
   "AddSemigroup.mk"],
  "name": "Nat.instAddCancelCommMonoid",
  "constType": "AddCancelCommMonoid ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Not", "Bool", "Decidable", "Bool.false", "Decidable.casesOn", "Bool.true"],
  "name": "Decidable.decide",
  "constType": "(p : Prop) → [h : Decidable p] → Bool",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "Exists",
   "SetLike.instMembership",
   "RingHomSurjective",
   "SemilinearMapClass",
   "Module",
   "Submodule.map",
   "Membership.mem",
   "And",
   "DFunLike.coe",
   "Submodule",
   "Submodule.mem_map",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.koqcl_iso._simp_1_1",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} [inst_6 : RingHomSurjective σ₁₂] {F : Type u_9} [inst_7 : FunLike F M M₂]\n  [inst_8 : SemilinearMapClass F σ₁₂ M M₂] {f : F} {p : Submodule R M} {x : M₂},\n  (x ∈ Submodule.map f p) = ∃ y ∈ p, f y = x",
  "constCategory": "Theorem"},
 {"references": ["Exists", "Set", "Eq", "setOf"],
  "name": "Set.range",
  "constType": "{α : Type u} → {ι : Sort u_1} → (ι → α) → Set α",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "Or.inr",
   "Decidable",
   "Eq.mpr_not",
   "Decidable.em",
   "Eq.mpr_prop",
   "congrArg",
   "Or.casesOn",
   "dif_pos",
   "Or",
   "Or.inl",
   "Eq.refl",
   "Eq.symm",
   "id",
   "Eq.mpr",
   "dif_neg",
   "Eq.rec",
   "Eq",
   "dite"],
  "name": "dite_congr",
  "constType":
  "∀ {b c : Prop} {α : Sort u_1} {x : Decidable b} [inst : Decidable c] {x_1 : b → α} {u : c → α} {y : ¬b → α} {v : ¬c → α}\n  (h₁ : b = c), (∀ (h : c), x_1 ⋯ = u h) → (∀ (h : ¬c), y ⋯ = v h) → dite b x_1 y = dite c u v",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Neg.neg",
   "Function.Injective.eq_iff'",
   "SubNegZeroMonoid.toNegZeroClass",
   "OfNat.ofNat",
   "SubtractionMonoid.toInvolutiveNeg",
   "NegZeroClass.toNeg",
   "Iff",
   "NegZeroClass.toZero",
   "neg_injective",
   "Zero.toOfNat0",
   "InvolutiveNeg.toNeg",
   "neg_zero",
   "Eq"],
  "name": "neg_eq_zero",
  "constType":
  "∀ {α : Type u_1} [inst : SubtractionMonoid α] {a : α}, -a = 0 ↔ a = 0",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Or",
   "Subtype.prop",
   "PartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.WeakSlopeLike₂.mk",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.WeakSlopeLike₂",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₂.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.WeakSlopeLike₂ μ → Sort u} →\n                ((wsl₂ :\n                      ∀ (z : { p // p.1 < p.2 }) (hz : ⊥ < (↑z).1),\n                        μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ z ∨ μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ ⟨(⊥, (↑z).1), hz⟩) →\n                    motive ⋯) →\n                  (t : HarderNarasimhan.WeakSlopeLike₂ μ) → motive t",
  "constCategory": "Other"},
 {"references": ["OrderDual", "Nontrivial"],
  "name": "OrderDual.instNontrivial",
  "constType": "∀ {α : Type u_1} [h : Nontrivial α], Nontrivial αᵒᵈ",
  "constCategory": "Theorem"},
 {"references": ["Lean.Omega.Coeffs", "List", "Int"],
  "name": "Lean.Omega.Coeffs.ofList",
  "constType": "List ℤ → Omega.Coeffs",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "HarderNarasimhan.Convex.mk",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "LE.le",
   "Lattice",
   "SemilatticeSup.toMax",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Convex.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] {S : Type u_2} [inst_1 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x y : ℒ) (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩) → HarderNarasimhan.Convex μ",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk.noConfusion",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat.lt_add_one",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.mk.inj",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} {filtration : ℕ → ℒ} {monotone : Monotone filtration}\n  {first_eq_bot : filtration 0 = ⊥} {fin_len : ∃ n, filtration n = ⊤}\n  {strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j}\n  {piecewise_semistable :\n    ∀ (i : ℕ) (h : i < Nat.find fin_len),\n      HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(filtration i, filtration (i + 1)), ⋯⟩ μ)}\n  {μA_pseudo_strict_anti :\n    ∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len),\n      ¬HarderNarasimhan.μA μ ⟨(filtration i, filtration (i + 1)), ⋯⟩ ≤\n          HarderNarasimhan.μA μ ⟨(filtration (i + 1), filtration (i + 2)), ⋯⟩}\n  {filtration_1 : ℕ → ℒ} {monotone_1 : Monotone filtration_1} {first_eq_bot_1 : filtration_1 0 = ⊥}\n  {fin_len_1 : ∃ n, filtration_1 n = ⊤}\n  {strict_mono_1 : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len_1 → filtration_1 i < filtration_1 j}\n  {piecewise_semistable_1 :\n    ∀ (i : ℕ) (h : i < Nat.find fin_len_1),\n      HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(filtration_1 i, filtration_1 (i + 1)), ⋯⟩ μ)}\n  {μA_pseudo_strict_anti_1 :\n    ∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len_1),\n      ¬HarderNarasimhan.μA μ ⟨(filtration_1 i, filtration_1 (i + 1)), ⋯⟩ ≤\n          HarderNarasimhan.μA μ ⟨(filtration_1 (i + 1), filtration_1 (i + 2)), ⋯⟩},\n  { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot, fin_len := fin_len,\n        strict_mono := strict_mono, piecewise_semistable := piecewise_semistable,\n        μA_pseudo_strict_anti := μA_pseudo_strict_anti } =\n      { filtration := filtration_1, monotone := monotone_1, first_eq_bot := first_eq_bot_1, fin_len := fin_len_1,\n        strict_mono := strict_mono_1, piecewise_semistable := piecewise_semistable_1,\n        μA_pseudo_strict_anti := μA_pseudo_strict_anti_1 } →\n    filtration = filtration_1",
  "constCategory": "Theorem"},
 {"references":
  ["MulOne.mk",
   "MulOneClass.mk",
   "Monoid.one_mul",
   "MulOneClass",
   "Monoid.toOne",
   "Monoid",
   "Monoid.mul_one",
   "Monoid.toSemigroup",
   "Semigroup.toMul"],
  "name": "Monoid.toMulOneClass",
  "constType": "{M : Type u} → [self : Monoid M] → MulOneClass M",
  "constCategory": "Definition"},
 {"references":
  ["AddCommMagma",
   "AddCommSemigroup.toAddSemigroup",
   "AddCommSemigroup.add_comm",
   "AddCommSemigroup",
   "AddCommMagma.mk",
   "AddSemigroup.toAdd"],
  "name": "AddCommSemigroup.toAddCommMagma",
  "constType": "{G : Type u} → [self : AddCommSemigroup G] → AddCommMagma G",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "instAddNat",
   "HAdd.hAdd",
   "instLTNat",
   "Nat",
   "instOfNatNat",
   "instHAdd",
   "LE.le",
   "instLENat",
   "OfNat.ofNat"],
  "name": "Nat.lt_of_add_one_le",
  "constType": "∀ {n m : ℕ}, n + 1 ≤ m → n < m",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "BoundedOrder",
   "subsingleton_of_bot_eq_top",
   "Bot.bot",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "not_subsingleton",
   "PartialOrder",
   "Nontrivial",
   "Top.top",
   "Ne",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "OrderTop.toTop"],
  "name": "bot_ne_top",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : BoundedOrder α] [Nontrivial α], ⊥ ≠ ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Iff.mp",
   "Preorder.toLT",
   "sup_le",
   "HarderNarasimhan.μmax",
   "le_sup_right",
   "Or",
   "Eq.symm",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "le_sup_left",
   "Prod",
   "HarderNarasimhan.impl.lem2d4₂I",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "Lattice",
   "id",
   "Eq.mpr",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "SemilatticeInf.toMin",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "le_trans",
   "SemilatticeSup.toPartialOrder",
   "Prod.fst",
   "congrArg",
   "le_inf",
   "Or.inl",
   "HarderNarasimhan.impl.lem2d4₁",
   "Preorder.toLE",
   "Eq",
   "sup_le_iff",
   "propext",
   "inf_lt_left",
   "Not",
   "not_and_or",
   "Lattice.toSemilatticeInf",
   "LT.lt",
   "not_le_of_gt",
   "Or.casesOn",
   "Max.max",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "Min.min",
   "SemilatticeSup.toMax",
   "LE.le",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop2d8₀I",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        ∀ (y : ℒ),\n          HarderNarasimhan.InIntvl I y →\n            ∀ (u : ℒ) (h : u < x ∧ u < y) (w : ℒ),\n              HarderNarasimhan.InIntvl I w →\n                ∀ (hw : u ≤ w ∧ w < x ⊔ y),\n                  HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩ ≤ HarderNarasimhan.μmax μ ⟨(w, x ⊔ y), ⋯⟩ ∨\n                    HarderNarasimhan.μA μ ⟨(u, y), ⋯⟩ ≤ HarderNarasimhan.μmax μ ⟨(w, x ⊔ y), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Real.instPreorder",
   "PartialOrder.toPreorder",
   "smul_lt_smul_of_pos_left",
   "Preorder.toLT",
   "NNReal.toReal",
   "instSemiringNNReal",
   "NNReal.coe_pos",
   "instZeroNNReal",
   "MulAction.toSMul",
   "Real.instLT",
   "MonoidWithZero.toMonoid",
   "NNReal.instMulActionOfReal",
   "Zero.toOfNat0",
   "PosSMulStrictMono",
   "PosSMulStrictMono.mk",
   "Real",
   "NNReal",
   "Semiring.toMonoidWithZero",
   "OfNat.ofNat",
   "LT.lt",
   "Preorder",
   "Real.instZero",
   "MulAction",
   "Real.instMonoid",
   "Iff.mpr",
   "instPartialOrderNNReal"],
  "name": "NNReal.instPosSMulStrictMono",
  "constType":
  "∀ {α : Type u_2} [inst : Preorder α] [inst_1 : MulAction ℝ α] [PosSMulStrictMono ℝ α], PosSMulStrictMono NNReal α",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "LE",
   "Classical.propDecidable",
   "Exists.intro",
   "heq_of_eq",
   "Inhabited.default",
   "RelSeries.length",
   "Eq.symm",
   "Eq.ndrec",
   "HEq.casesOn",
   "rfl",
   "_private.Mathlib.Tactic.CongrExclamation.0.heq_imp_of_eq_imp",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists",
   "Fin.castSucc",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "Prod.snd",
   "instNeZeroNatHAdd_1",
   "Prod",
   "Nat.find_spec",
   "BoundedOrder.toOrderBot",
   "RelSeries.head",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "Lattice",
   "HEq",
   "Top.top",
   "Eq.mpr",
   "Fin.succ",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "Nat.find",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.IntervalSemistableRel._proof_1",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "instOfNatNat",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "HarderNarasimhan.μA",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "CompleteLattice",
   "lt_trans",
   "PartialOrder.toPreorder",
   "RelSeries.toFun",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "Fin",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "Nat.instAddCommMonoid",
   "And.intro",
   "Fin.val",
   "PartialOrder",
   "eq_of_heq",
   "HarderNarasimhan.IntervalSemistableRel",
   "HarderNarasimhan.Convex",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "RelSeries.mk",
   "SemilatticeInf.toPartialOrder",
   "Nat.instPartialOrder",
   "Nat.mod_eq_of_lt",
   "And",
   "Nat.instStarRing",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.impl.balabala1",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat.lt_add_one",
   "Nat",
   "RelSeries.last",
   "Nontrivial",
   "Fin.prop",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Nat.cast",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration",
   "RelSeries",
   "Nat.instAddCancelCommMonoid",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.strict_mono",
   "Fin.is_le",
   "Nat.instOne",
   "BoundedOrder.toOrderTop",
   "Fin.NatCast.instNatCast",
   "HarderNarasimhan.Interval",
   "HarderNarasimhan.HarderNarasimhanFiltration.piecewise_semistable",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.balabala2",
   "Not",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "instHAdd",
   "HarderNarasimhan.μ_Admissible",
   "HarderNarasimhan.HarderNarasimhanFiltration.μA_pseudo_strict_anti",
   "Eq.casesOn",
   "LT.lt",
   "lt_add_one",
   "Nat.succ_lt_succ",
   "le_of_lt",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "LE.le",
   "Subtype.mk",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.exists_relSeries_isIntervalSemistable",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ],\n  ∃ s,\n    s.head = ⊥ ∧\n      s.last = ⊤ ∧\n        ∀ (i : ℕ) (hi : i + 1 < s.length),\n          ¬HarderNarasimhan.μA μ ⟨(s.toFun ↑i, s.toFun ↑(i + 1)), ⋯⟩ ≤\n              HarderNarasimhan.μA μ ⟨(s.toFun ↑(i + 1), s.toFun ↑(i + 2)), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.mk",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              (filtration : ℕ → ℒ) →\n                Antitone filtration →\n                  (fin_len : ∃ N, filtration N = ⊥) →\n                    (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i) →\n                      filtration 0 = ⊤ →\n                        (∀ (k : ℕ) (hk : k < Nat.find fin_len),\n                            μ ⟨(filtration (k + 1), filtration k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩) →\n                          (∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n                              z < filtration i →\n                                μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩) →\n                            HarderNarasimhan.JordanHolderFiltration μ",
  "constCategory": "Other"},
 {"references":
  ["Setoid",
   "Module",
   "AddCommGroup.toAddGroup",
   "AddCommGroup.toAddCommMonoid",
   "QuotientAddGroup.leftRel",
   "AddCommGroup",
   "Submodule.toAddSubgroup",
   "Submodule",
   "Ring.toSemiring",
   "Ring"],
  "name": "Submodule.quotientRel",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} → [inst : Ring R] → [inst_1 : AddCommGroup M] → [inst_2 : _root_.Module R M] → Submodule R M → Setoid M",
  "constCategory": "Definition"},
 {"references": ["Not", "Exists", "not_exists", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₂._simp_1_10",
  "constType": "∀ {α : Sort u_1} {p : α → Prop}, (¬∃ x, p x) = ∀ (x : α), ¬p x",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.sub",
   "Nat.brecOn",
   "OfNat.ofNat",
   "Unit",
   "Nat",
   "instSubNat",
   "instOfNatNat",
   "Nat.succ",
   "LE.le",
   "Nat.below",
   "HSub.hSub",
   "_private.Init.Data.Nat.Basic.0.Nat.sub_le_sub_right.match_1_1",
   "Nat.pred_le_pred",
   "instHSub",
   "instLENat"],
  "name": "Nat.sub_le_sub_right",
  "constType": "∀ {n m : ℕ}, n ≤ m → ∀ (k : ℕ), n - k ≤ m - k",
  "constCategory": "Theorem"},
 {"references":
  ["inf_le_right",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "le_trans",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "And.intro",
   "le_inf",
   "Subtype.prop",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Lattice.toSemilatticeInf",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Min.min",
   "Lattice",
   "Nontrivial",
   "LE.le"],
  "name": "HarderNarasimhan.instLatticeInterval._proof_5",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (a b : HarderNarasimhan.Interval z), (↑z).1 ≤ ↑a ⊓ ↑b ∧ ↑a ⊓ ↑b ≤ (↑z).2",
  "constCategory": "Theorem"},
 {"references": ["Eq.symm", "Eq.rec", "Eq"],
  "name": "Eq.mpr_prop",
  "constType": "∀ {p q : Prop}, p = q → q → p",
  "constCategory": "Theorem"},
 {"references": ["OfNat", "OfNat.mk", "One.one", "One"],
  "name": "One.toOfNat1",
  "constType": "{α : Type u_1} → [One α] → OfNat α 1",
  "constCategory": "Definition"},
 {"references":
  ["Ring.toAddCommGroup",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "NegZeroClass.toNeg",
   "AddCommGroup.toDivisionAddCommMonoid",
   "Neg.neg",
   "Eq.refl",
   "Eq.symm",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "Eq.ndrec",
   "Eq",
   "SubNegZeroMonoid.toNegZeroClass",
   "Ring"],
  "name": "Mathlib.Tactic.Ring.neg_congr",
  "constType":
  "∀ {R : Type u_2} [inst : Ring R] {a a' b : R}, a = a' → -a' = b → -a = b",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "LT.lt",
   "Preorder",
   "lt_iff_le_not_ge",
   "LE.le",
   "And",
   "Iff.mp",
   "Preorder.toLT",
   "Preorder.toLE",
   "And.left"],
  "name": "le_of_lt",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] {a b : α}, a < b → a ≤ b",
  "constCategory": "Theorem"},
 {"references":
  ["Finset",
   "Set.mem_toFinset",
   "Set",
   "Membership.mem",
   "Finset.instMembership",
   "Set.toFinset",
   "Eq",
   "Fintype",
   "propext",
   "Set.Elem",
   "Set.instMembership"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_11",
  "constType":
  "∀ {α : Type u_1} {s : Set α} [inst : Fintype ↑s] {a : α}, (a ∈ s.toFinset) = (a ∈ s)",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "False",
  "constType": "Prop",
  "constCategory": "Other"},
 {"references": ["Subtype"],
  "name": "Subtype.mk",
  "constType": "{α : Sort u} → {p : α → Prop} → (val : α) → p val → Subtype p",
  "constCategory": "Other"},
 {"references":
  ["NormedCommRing",
   "AddGroup.mk",
   "Ring.toSub",
   "NonUnitalNonAssocSemiring.toMul",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_8",
   "AddCommMonoid.toAddMonoid",
   "NonUnitalNormedCommRing",
   "NormedRing.toRing",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_12",
   "AddCommGroup.mk",
   "NormedRing.toNorm",
   "NormedCommRing.toNormedRing",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_2",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_10",
   "SubNegMonoid.mk",
   "Semiring.toNonUnitalSemiring",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_9",
   "Ring.toNeg",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_3",
   "Ring.zsmul",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_13",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonUnitalNormedCommRing.mk",
   "NormedRing.toMetricSpace",
   "NonUnitalNonAssocRing.mk",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_5",
   "Ring.toSemiring",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_6",
   "NonUnitalRing.mk",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_4",
   "NonUnitalSemiring.toNonUnitalNonAssocSemiring",
   "NormedCommRing.mul_comm",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_11",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_7",
   "NonUnitalNormedRing.mk",
   "NormedCommRing.toNonUnitalNormedCommRing._proof_1"],
  "name": "NormedCommRing.toNonUnitalNormedCommRing",
  "constType":
  "{α : Type u_2} → [β : NormedCommRing α] → NonUnitalNormedCommRing α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "Eq.ndrec",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Eq.refl",
   "Nontrivial",
   "Submodule.instBot",
   "AddCommGroup.toAddCommMonoid",
   "Top.top",
   "HarderNarasimhan.CoprimaryFiltration.casesOn",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Nat.instPreorder",
   "Submodule",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite",
   "HarderNarasimhan.CoprimaryFiltration.noConfusionType"],
  "name": "HarderNarasimhan.CoprimaryFiltration.noConfusion",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] →\n                {P : Sort u} →\n                  {x1 x2 : HarderNarasimhan.CoprimaryFiltration R M} →\n                    x1 = x2 → HarderNarasimhan.CoprimaryFiltration.noConfusionType P x1 x2",
  "constCategory": "Definition"},
 {"references": ["Bot"],
  "name": "Bot.mk",
  "constType": "{α : Type u_1} → α → Bot α",
  "constCategory": "Other"},
 {"references": ["Eq.rec", "Eq"],
  "name": "Eq.trans",
  "constType": "∀ {α : Sort u} {a b c : α}, a = b → b = c → a = c",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₂._simp_1_6",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt", "Nat", "Fin.val", "Decidable", "Fin", "instLTFin", "Nat.decLt"],
  "name": "Fin.decLt",
  "constType": "{n : ℕ} → (a b : Fin n) → Decidable (a < b)",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "AddCommMonoid.toAddCommSemigroup",
   "Module",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "AddHom",
   "LinearMap",
   "Semiring"],
  "name": "LinearMap.toAddHom",
  "constType":
  "{R : Type u_14} →\n  {S : Type u_15} →\n    [inst : Semiring R] →\n      [inst_1 : Semiring S] →\n        {σ : R →+* S} →\n          {M : Type u_16} →\n            {M₂ : Type u_17} →\n              [inst_2 : AddCommMonoid M] →\n                [inst_3 : AddCommMonoid M₂] →\n                  [inst_4 : _root_.Module R M] → [inst_5 : _root_.Module S M₂] → (M →ₛₗ[σ] M₂) → M →ₙ+ M₂",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Max.max",
   "le_sup_right",
   "SemilatticeSup.toMax",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.instLatticeInterval._proof_3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (x x_1 : HarderNarasimhan.Interval z), ↑x_1 ≤ ↑x ⊔ ↑x_1",
  "constCategory": "Theorem"},
 {"references": ["Exists", "exists_and_right", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.lift_quot_middle._simp_1_4",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {b : Prop}, (∃ x, p x ∧ b) = ((∃ x, p x) ∧ b)",
  "constCategory": "Theorem"},
 {"references":
  ["AddCancelMonoid.toAddLeftCancelMonoid",
   "AddCancelMonoid.toIsRightCancelAdd",
   "AddCancelMonoid",
   "AddRightCancelMonoid",
   "AddRightCancelMonoid.mk",
   "AddLeftCancelMonoid.toAddMonoid"],
  "name": "AddCancelMonoid.toAddRightCancelMonoid",
  "constType":
  "{M : Type u} → [self : AddCancelMonoid M] → AddRightCancelMonoid M",
  "constCategory": "Definition"},
 {"references":
  ["Set", "Membership.mem", "Iff.mp", "Iff.rfl", "setOf", "Set.instMembership"],
  "name": "Membership.mem.out",
  "constType": "∀ {α : Type u} {a : α} {p : α → Prop}, a ∈ {x | p x} → p a",
  "constCategory": "Theorem"},
 {"references":
  ["SemilatticeInf",
   "SemilatticeInf.toMin",
   "OrderDual",
   "sup_assoc",
   "Min.min",
   "OrderDual.instSemilatticeSup",
   "Eq"],
  "name": "inf_assoc",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeInf α] (a b c : α), a ⊓ b ⊓ c = a ⊓ (b ⊓ c)",
  "constCategory": "Theorem"},
 {"references":
  ["Ring.toAddGroupWithOne",
   "Mathlib.Meta.NormNum.IsInt",
   "AddGroupWithOne.toIntCast",
   "Int.rawCast",
   "Mathlib.Meta.NormNum.IsInt.to_raw_eq.match_1_1",
   "Eq",
   "Int.cast",
   "Ring",
   "Int"],
  "name": "Mathlib.Meta.NormNum.IsInt.to_raw_eq",
  "constType":
  "∀ {α : Type u} {a : α} {n : ℤ} [inst : Ring α], Mathlib.Meta.NormNum.IsInt a n → a = n.rawCast",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "Nat.instPartialOrder",
   "CompleteLattice.toLattice",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Prod",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.StrongDescendingChainCondition'.mk",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.StrongDescendingChainCondition'.rec",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition'.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.StrongDescendingChainCondition' μ → Sort u} →\n                (t : HarderNarasimhan.StrongDescendingChainCondition' μ) →\n                  ((wdcc' : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["NonUnitalNonAssocRing.toAddCommGroup",
   "NonUnitalNonAssocRing",
   "NonUnitalNonAssocSemiring.mk",
   "AddCommGroup.add_comm",
   "AddCommGroup.toAddGroup",
   "AddCommMonoid.mk",
   "NonUnitalNonAssocRing.toMul",
   "NonUnitalNonAssocRing.right_distrib",
   "NonUnitalNonAssocRing.mul_zero",
   "SubNegMonoid.toAddMonoid",
   "NonUnitalNonAssocRing.zero_mul",
   "AddGroup.toSubNegMonoid",
   "NonUnitalNonAssocSemiring",
   "NonUnitalNonAssocRing.left_distrib"],
  "name": "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
  "constType":
  "{α : Type u} → [self : NonUnitalNonAssocRing α] → NonUnitalNonAssocSemiring α",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "OrderDual.toDual",
   "OrderDual",
   "Equiv.instEquivLike",
   "PartialOrder.toPreorder",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Set",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ClosureOperator",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "DFunLike.coe",
   "Equiv",
   "OrderDual.ofDual",
   "OrderDual.instPreorder",
   "upperBounds",
   "GaloisConnection.closureOperator",
   "Set.instCompleteAtomicBooleanAlgebra",
   "OrderTheory.DedekindMacNeilleConnection",
   "PartialOrder",
   "lowerBounds",
   "EquivLike.toFunLike",
   "Preorder.toLE"],
  "name": "OrderTheory.DedekindMacNeilleClosureOperator",
  "constType": "(α : Type u_1) → [PartialOrder α] → ClosureOperator (Set α)",
  "constCategory": "Definition"},
 {"references":
  ["Max.max",
   "PartialOrder.toPreorder",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup.toPartialOrder",
   "SemilatticeSup.le_sup_right",
   "SemilatticeSup",
   "Preorder.toLE"],
  "name": "le_sup_right",
  "constType": "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, b ≤ a ⊔ b",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "LinearMap.instFunLike",
   "SemilinearMapClass",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Membership.mem",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Submodule",
   "LinearMap.semilinearMapClass",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "CommRing.toCommSemiring",
   "SetLike.instMembership",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "Prod.snd",
   "LinearMap",
   "CommRing",
   "LT.lt",
   "Prod",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_2",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_1} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  SemilinearMapClass (↥(↑I).2 →ₗ[R] M) (RingHom.id R) (↥(↑I).2) M",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "Function.injective_id",
   "CharZero.mk",
   "CharZero",
   "Nat.instAddMonoidWithOne"],
  "name": "Nat.instCharZero",
  "constType": "CharZero ℕ",
  "constCategory": "Theorem"},
 {"references":
  ["AddZeroClass",
   "outParam",
   "SetLike",
   "AddZeroClass.toAddZero",
   "AddZero.toZero",
   "AddSubmonoidClass",
   "ZeroMemClass"],
  "name": "AddSubmonoidClass.toZeroMemClass",
  "constType":
  "∀ {S : Type u_3} {M : outParam (Type u_4)} {inst : AddZeroClass M} {inst_1 : SetLike S M}\n  [self : AddSubmonoidClass S M], ZeroMemClass S M",
  "constCategory": "Theorem"},
 {"references":
  ["Lex'Order.Lex'Order_prop",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "PartialOrder.toPreorder",
   "Exists",
   "Finset",
   "LinearExtension",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Singleton.singleton",
   "LinearOrder",
   "And",
   "Finset.instHasSubset",
   "CommRing",
   "PrimeSpectrum",
   "instDistribLatticeOfLinearOrder",
   "LinearOrder.toPartialOrder",
   "Finset.instSingleton",
   "DistribLattice.toLattice",
   "HasSubset.Subset",
   "Iff",
   "LE.le",
   "PrimeSpectrum.instPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.instLinearOrderS₀._proof_1",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R],\n  ∃ lo,\n    (∀ (A B : Finset (LinearExtension (PrimeSpectrum R))), A ⊆ B → A ≤ B) ∧\n      ∀ (a b : LinearExtension (PrimeSpectrum R)), a ≤ b ↔ {a} ≤ {b}",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.toSubMulAction",
   "Module",
   "AddCommGroup.toAddGroup",
   "SubNegMonoid.toNeg",
   "AddCommGroup",
   "AddCommMonoid.toAddMonoid",
   "NegMemClass.mk",
   "Ring.toSemiring",
   "Submodule",
   "AddSubgroupClass",
   "Submodule.setLike",
   "AddCommGroup.toAddCommMonoid",
   "AddGroup.toSubNegMonoid",
   "AddSubmonoidClass",
   "SubMulAction.neg_mem",
   "Submodule.addSubmonoidClass",
   "AddSubgroupClass.mk",
   "Ring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.addSubgroupClass",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M],\n  AddSubgroupClass (Submodule R M) M",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "PartialOrder.toPreorder",
   "Subtype",
   "HarderNarasimhan.NashEquilibrium.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "Nontrivial",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice"],
  "name": "HarderNarasimhan.NashEquilibrium.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  HarderNarasimhan.μAstar μ = HarderNarasimhan.μBstar μ → HarderNarasimhan.NashEquilibrium μ",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.μB",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nontrivial",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.μBstar.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.μBstar μ = HarderNarasimhan.μB μ ⟨(⊥, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "implies_congr",
   "Eq.trans",
   "Exists.intro",
   "Membership.mem.out",
   "Subtype.val",
   "Set.Elem",
   "strictMono_nat_of_lt_succ",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "Exists",
   "Exists.choose_spec",
   "ne_top_of_lt",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "HarderNarasimhan.μmax._proof_1",
   "Classical.byContradiction",
   "Top.top",
   "Eq.mpr",
   "Mathlib.Tactic.Push.not_and_eq",
   "HarderNarasimhan.in_TotIntvl",
   "lt_top_iff_ne_top",
   "HarderNarasimhan.impl.prop4d1_helper",
   "setOf",
   "StrictMono",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "InfSet.sInf",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice.toConditionallyCompleteLattice",
   "propext",
   "Set",
   "HarderNarasimhan.impl.prop4d1₁_seq",
   "sInf_le_of_le",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "HAdd.hAdd",
   "HarderNarasimhan.μA._proof_1",
   "Ne",
   "CompleteLattice.toCompleteSemilatticeInf",
   "bot_lt_top",
   "CompleteLattice",
   "Mathlib.Tactic.Push.not_forall_eq",
   "And.casesOn",
   "lt_trans",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Subtype.preorder",
   "HarderNarasimhan.μmax",
   "And.intro",
   "Or",
   "sSup_le",
   "PartialOrder",
   "funext",
   "forall_congr",
   "Eq.rec",
   "And.left",
   "ConditionallyCompleteLattice.toInfSet",
   "binderNameHint",
   "And.right",
   "And",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "Nat.lt_add_one",
   "Exists.casesOn",
   "Nat",
   "Iff.of_eq",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "lt_of_le_of_ne",
   "CompleteLattice.toCompleteSemilatticeSup",
   "congrArg",
   "Mathlib.Tactic.Push.not_exists._simp_1",
   "Set.mem_setOf",
   "HarderNarasimhan.μmin",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "le_antisymm",
   "Not",
   "Set.Nonempty",
   "le_top",
   "instHAdd",
   "Exists.choose",
   "exists_prop_congr",
   "LT.lt",
   "LE.le",
   "le_sSup",
   "CompleteSemilatticeSup.toPartialOrder",
   "False",
   "le_sInf",
   "Subtype.mk",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.prop4d1₁",
  "constType":
  "∀ (ℒ : Type u_1) [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] (S : Type u_2)\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩) →\n    (∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤),\n        μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩) →\n      HarderNarasimhan.μAstar μ = HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["Exists",
   "Iff",
   "Exists.intro",
   "_private.Init.PropLemmas.0.forall_exists_index.match_1_1",
   "Iff.intro"],
  "name": "forall_exists_index",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {q : (∃ x, p x) → Prop}, (∀ (h : ∃ x, p x), q h) ↔ ∀ (x : α) (h : p x), q ⋯",
  "constCategory": "Theorem"},
 {"references": ["Eq.refl", "Eq"],
  "name": "rfl",
  "constType": "∀ {α : Sort u} {a : α}, a = a",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Membership.mem",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Membership.mem.out",
   "Subtype.val",
   "Set.Elem",
   "Prod.fst",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "Preorder.toLE",
   "Not",
   "Exists",
   "Set",
   "BoundedOrder",
   "Prod.snd",
   "Exists.choose",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "Nat",
   "Nat.succ",
   "Nat.below",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._proof_5",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] [inst_1 : BoundedOrder ℒ] {S : Type u_2} [inst_2 : CompleteLattice S]\n  (μ : { p // p.1 < p.2 } → S) (k : ℕ) (x : Nat.below k.succ), ↑x.1 < ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.μA_DescendingChainCondition",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["Subtype",
   "Real.instZero",
   "Real",
   "LE.le",
   "Zero.toOfNat0",
   "OfNat.ofNat",
   "Real.instLE"],
  "name": "NNReal",
  "constType": "Type",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.WeakSlopeLike₁.wsl₁",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.NashEquilibrium.mk",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "And.intro",
   "HarderNarasimhan.NashEquilibrium",
   "SupSet.sSup",
   "sSup_le",
   "HarderNarasimhan.WeakAscendingChainCondition.wacc",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "funext",
   "Eq.rec",
   "HarderNarasimhan.impl.prop4d1₁",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "Set.instMembership",
   "Exists.casesOn",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Iff",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "HarderNarasimhan.μmax._proof_1",
   "id",
   "Top.top",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "setOf",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Ne.symm",
   "Subtype",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "congrArg",
   "Iff.intro",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.WeakSlopeLike₁",
   "OrderBot.toBot",
   "bot_ne_top",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Not",
   "bot_lt_iff_ne_bot",
   "HarderNarasimhan.NashEquilibrium.nash_eq",
   "Set",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "exists_prop_congr",
   "LT.lt",
   "LE.le",
   "CompleteSemilatticeSup.toPartialOrder",
   "le_sSup",
   "eq_of_le_of_ge",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.rmk4d10₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.WeakAscendingChainCondition μ →\n    HarderNarasimhan.WeakSlopeLike₁ μ →\n      (HarderNarasimhan.NashEquilibrium μ ↔\n        ∀ (y : ℒ) (hy : y ≠ ⊥), HarderNarasimhan.μmin μ ⟨(⊥, y), ⋯⟩ ≤ HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "HarderNarasimhan.impl.subseq_prop0'",
   "Classical.propDecidable",
   "Preorder.toLT",
   "GE.ge",
   "HarderNarasimhan.impl.subseq_prop3._simp_1_7",
   "HarderNarasimhan.impl.subseq",
   "Eq.symm",
   "Eq.rec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "of_eq_false",
   "Nat.instPartialOrder",
   "And.right",
   "Nat.recAux",
   "And",
   "BoundedOrder",
   "Bot.bot",
   "Exists.casesOn",
   "Nat",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.impl.subseq_prop3._simp_1_6",
   "Antitone",
   "eq_false",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "id",
   "Eq.mpr",
   "Nat.find",
   "Ne.symm",
   "Eq.mp",
   "HarderNarasimhan.impl.subseq_prop3._simp_1_5",
   "lt_of_le_of_ne",
   "Nat.instPreorder",
   "congrArg",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "congr",
   "le_of_eq",
   "OrderBot.toBot",
   "dite_cond_eq_false",
   "Preorder.toLE",
   "Eq",
   "Not",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "HarderNarasimhan.impl.subseq._proof_2",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "eq_self",
   "of_eq_true",
   "dite_cond_eq_true",
   "le_of_lt",
   "LE.le",
   "instDecidableEqNat",
   "dite",
   "instLENat",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.subseq_prop3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f : ℕ → ℒ),\n  f 0 = ⊤ → ∀ (atf : ∃ k, f k = ⊥), Antitone f → ∀ (k : ℕ), HarderNarasimhan.impl.subseq f atf k ≤ f k",
  "constCategory": "Theorem"},
 {"references":
  ["FunLike",
   "EmbeddingLike.apply_eq_iff_eq",
   "EmbeddingLike",
   "Eq",
   "DFunLike.coe",
   "propext"],
  "name": "HarderNarasimhan.impl.rmk4d14₂._simp_1_2",
  "constType":
  "∀ {F : Sort u_1} {α : Sort u_2} {β : Sort u_3} [inst : FunLike F α β] [i : EmbeddingLike F α β] (f : F) {x y : α},\n  (f x = f y) = (x = y)",
  "constCategory": "Theorem"},
 {"references":
  ["Nonempty.intro", "Nonempty", "Inhabited", "Inhabited.default"],
  "name": "instNonemptyOfInhabited",
  "constType": "∀ {α : Sort u} [Inhabited α], Nonempty α",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "HarderNarasimhan.ConvexI.convex",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "inf_assoc",
   "And.intro",
   "le_sup_right",
   "sSup_le",
   "Eq.symm",
   "Eq.ndrec",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Exists",
   "lt_of_le_of_lt",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Exists.casesOn",
   "Prod",
   "mt",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "Eq.refl",
   "HarderNarasimhan.μmax._proof_1",
   "Nontrivial",
   "Lattice",
   "id",
   "Eq.mpr",
   "setOf",
   "sup_le_sup_right",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "Subtype",
   "le_trans",
   "OmegaCompletePartialOrder.toPartialOrder",
   "SemilatticeSup.toPartialOrder",
   "lt_of_le_of_ne",
   "CompleteLattice.toCompleteSemilatticeSup",
   "Prod.fst",
   "congrArg",
   "le_inf",
   "Preorder.toLE",
   "Eq",
   "le_antisymm",
   "inf_lt_left",
   "lt_of_le_of_lt'",
   "Not",
   "Lattice.toSemilatticeInf",
   "Set",
   "inf_idem",
   "HarderNarasimhan.impl.lem2d4₂I._simp_1_1",
   "inf_le_inf_right",
   "right_eq_sup",
   "LT.lt",
   "Max.max",
   "Min.min",
   "le_of_lt",
   "SemilatticeSup.toMax",
   "LE.le",
   "CompleteSemilatticeSup.toPartialOrder",
   "le_sSup",
   "Ne",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.lem2d4₂I",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        ∀ (w : ℒ),\n          HarderNarasimhan.InIntvl I w →\n            ∀ (hxw : ¬x ≤ w) (t : ℒ) (hxwt : x ⊔ w ≤ t),\n              HarderNarasimhan.μmax μ ⟨(x ⊓ w, x), ⋯⟩ ≤ HarderNarasimhan.μmax μ ⟨(w, t), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Not", "Decidable.byContradiction", "Classical.propDecidable", "False"],
  "name": "Classical.byContradiction",
  "constType": "∀ {p : Prop}, (¬p → False) → p",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Lattice",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references": ["Not", "not_and", "And", "Eq", "propext"],
  "name": "Mathlib.Tactic.Push.not_and_eq",
  "constType": "∀ (p q : Prop), (¬(p ∧ q)) = (p → ¬q)",
  "constCategory": "Theorem"},
 {"references":
  ["AddZeroClass",
   "AddSubmonoid",
   "AddSubsemigroup",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd"],
  "name": "AddSubmonoid.toAddSubsemigroup",
  "constType":
  "{M : Type u_3} → [inst : AddZeroClass M] → AddSubmonoid M → AddSubsemigroup M",
  "constCategory": "Definition"},
 {"references":
  ["Nat", "AddMonoidWithOne.toNatCast", "Nat.cast", "AddMonoidWithOne"],
  "name": "Nat.rawCast",
  "constType": "{α : Type u} → [AddMonoidWithOne α] → ℕ → α",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "LT.lt",
   "Preorder",
   "Preorder.lt_iff_le_not_ge._autoParam",
   "Iff",
   "LE.le",
   "And",
   "LE",
   "autoParam",
   "LT"],
  "name": "Preorder.mk",
  "constType":
  "{α : Type u_2} →\n  [toLE : LE α] →\n    [toLT : LT α] →\n      (∀ (a : α), a ≤ a) →\n        (∀ (a b c : α), a ≤ b → b ≤ c → a ≤ c) →\n          autoParam (∀ (a b : α), a < b ↔ a ≤ b ∧ ¬b ≤ a) Preorder.lt_iff_le_not_ge._autoParam → Preorder α",
  "constCategory": "Other"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "Or.inl",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
   "ConditionallyCompleteLinearOrder.toLinearOrder",
   "WellFoundedGT",
   "LE.isTotal",
   "CompleteLinearOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.μ_Admissible.mk",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "IsTotal",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder"],
  "name": "HarderNarasimhan.instμ_Admissible",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S}, HarderNarasimhan.μ_Admissible μ",
  "constCategory": "Theorem"},
 {"references":
  ["AddMonoid.zero_add",
   "AddMonoid.toZero",
   "AddZero.mk",
   "AddMonoid.add_zero",
   "AddZeroClass",
   "AddMonoid.toAddSemigroup",
   "AddMonoid",
   "AddZeroClass.mk",
   "AddSemigroup.toAdd"],
  "name": "AddMonoid.toAddZeroClass",
  "constType": "{M : Type u} → [self : AddMonoid M] → AddZeroClass M",
  "constCategory": "Definition"},
 {"references": ["Or", "_private.Init.Prelude.0.Or.elim.match_1_1"],
  "name": "Or.elim",
  "constType": "∀ {a b c : Prop}, a ∨ b → (a → c) → (b → c) → c",
  "constCategory": "Theorem"},
 {"references":
  ["le_refl", "Preorder", "True", "LE.le", "eq_true", "Eq", "Preorder.toLE"],
  "name": "HarderNarasimhan.impl.subseq_prop3._simp_1_5",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), (a ≤ a) = True",
  "constCategory": "Theorem"},
 {"references": ["Not", "Exists", "Classical.not_forall", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._simp_5",
  "constType": "∀ {α : Sort u_1} {p : α → Prop}, (¬∀ (x : α), p x) = ∃ x, ¬p x",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "PartialOrder.toPreorder",
   "Subtype",
   "HarderNarasimhan.NashEquilibrium.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.NashEquilibrium.rec",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "Nontrivial",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice"],
  "name": "HarderNarasimhan.NashEquilibrium.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.NashEquilibrium μ → Sort u} →\n                (t : HarderNarasimhan.NashEquilibrium μ) →\n                  ((nash_eq : HarderNarasimhan.μAstar μ = HarderNarasimhan.μBstar μ) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["rfl",
   "SetLike.instMembership",
   "Module",
   "Set",
   "Singleton.singleton",
   "Membership.mem",
   "Submodule.span",
   "Set.instSingletonSet",
   "Submodule",
   "AddCommMonoid",
   "Submodule.setLike",
   "Submodule.subset_span",
   "Semiring"],
  "name": "Submodule.mem_span_singleton_self",
  "constType":
  "∀ {R : Type u_1} {M : Type u_4} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M] (x : M),\n  x ∈ Submodule.span R {x}",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "AddZeroClass",
   "CanonicallyOrderedAdd",
   "nonpos_iff_eq_zero",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "PartialOrder",
   "LE.le",
   "Zero.toOfNat0",
   "Preorder.toLE",
   "Eq",
   "AddZero.toZero",
   "propext"],
  "name": "le_one_iff_eq_one._simp_4",
  "constType":
  "∀ {α : Type u} [inst : AddZeroClass α] [inst_1 : PartialOrder α] [CanonicallyOrderedAdd α] {a : α}, (a ≤ 0) = (a = 0)",
  "constCategory": "Theorem"},
 {"references": ["Lean.Omega.LinearCombo", "Lean.Omega.Coeffs", "Int"],
  "name": "Lean.Omega.LinearCombo.mk",
  "constType": "ℤ → Omega.Coeffs → Omega.LinearCombo",
  "constCategory": "Other"},
 {"references":
  ["Lean.Omega.LinearCombo", "Lean.Omega.LinearCombo.sub", "Sub.mk", "Sub"],
  "name": "Lean.Omega.LinearCombo.instSub",
  "constType": "Sub Omega.LinearCombo",
  "constCategory": "Definition"},
 {"references": ["Exists", "exists_and_left", "And", "Eq", "propext"],
  "name": "exists_and_left._simp_1",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {b : Prop}, (∃ x, b ∧ p x) = (b ∧ ∃ x, p x)",
  "constCategory": "Theorem"},
 {"references": ["rfl", "Eq.rec", "Eq"],
  "name": "congr",
  "constType":
  "∀ {α : Sort u} {β : Sort v} {f₁ f₂ : α → β} {a₁ a₂ : α}, f₁ = f₂ → a₁ = a₂ → f₁ a₁ = f₂ a₂",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.IsAttained._proof_1",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "Classical.propDecidable",
   "Exists.intro",
   "sup_le",
   "HarderNarasimhan.impl.comparable_iff",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "HarderNarasimhan.impl.prop2d6₀",
   "And.intro",
   "Or",
   "Eq.rec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.IsComparable",
   "Prod",
   "Exists.casesOn",
   "Classical.or_iff_not_imp_left",
   "HarderNarasimhan.impl.lem2d4₂I",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "Lattice",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "Or.inr",
   "Subtype",
   "Ne.symm",
   "HarderNarasimhan.impl.prop2d6₂I₂",
   "le_trans",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Or.resolve_right",
   "lt_of_le_of_ne",
   "Prod.fst",
   "le_inf",
   "Or.inl",
   "HarderNarasimhan.impl.lem2d4₁",
   "Preorder.toLE",
   "Eq",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "sInf_le",
   "LT.lt",
   "Or.casesOn",
   "HarderNarasimhan.μA._proof_1",
   "le_of_lt",
   "Min.min",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.impl.prop2d6₂I₁",
   "LE.le",
   "eq_of_le_of_ge",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "dite",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop2d6₃I",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        ∀ (y : ℒ),\n          HarderNarasimhan.InIntvl I y →\n            ∀ (z : ℒ),\n              HarderNarasimhan.InIntvl I z →\n                ∀ (h : x < y ∧ y < z),\n                  HarderNarasimhan.IsComparable (HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩)\n                        (HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩) ∨\n                      HarderNarasimhan.IsAttained μ ⟨(x, z), ⋯⟩ →\n                    HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩ = HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ ∨\n                      HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ ∧\n                        HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ < HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "FunLike",
   "LinearMap.ker",
   "SemilinearMapClass",
   "Module",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Eq.refl",
   "Eq",
   "Eq.rec",
   "Eq.ndrec",
   "Semiring"],
  "name": "LinearMap.ker.congr_simp",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_2} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {τ₁₂ τ₁₂_1 : R →+* R₂} (e_τ₁₂ : τ₁₂ = τ₁₂_1) {F : Type u_11} [inst_6 : FunLike F M M₂]\n  [inst_7 : SemilinearMapClass F τ₁₂ M M₂] (f f_1 : F), f = f_1 → LinearMap.ker f = LinearMap.ker f_1",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "And.intro",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "HarderNarasimhan.WeakSlopeLike₁",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "OrderBot.toBot",
   "Preorder.toLE",
   "HarderNarasimhan.impl.rmk4d10₁",
   "bot_lt_iff_ne_bot",
   "HarderNarasimhan.impl.rmk4d10₃",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "HarderNarasimhan.impl.rmk4d10₂",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Iff.mpr",
   "Iff",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "HarderNarasimhan.WeakSlopeLike₂",
   "Ne",
   "Subtype.mk",
   "lt_top_iff_ne_top",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.remark_4_10",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (HarderNarasimhan.μBstar μ ≤ HarderNarasimhan.μAstar μ ↔\n      ∀ (x : ℒ) (hx : x ≠ ⊤) (y : ℒ) (hy : ⊥ < y),\n        HarderNarasimhan.μmin μ ⟨(⊥, y), hy⟩ ≤ HarderNarasimhan.μmax μ ⟨(x, ⊤), ⋯⟩) ∧\n    (HarderNarasimhan.WeakAscendingChainCondition μ →\n        HarderNarasimhan.WeakSlopeLike₁ μ →\n          (HarderNarasimhan.NashEquilibrium μ ↔\n            ∀ (y : ℒ) (hy : y ≠ ⊥),\n              HarderNarasimhan.μmin μ ⟨(⊥, y), ⋯⟩ ≤ HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl)) ∧\n      (HarderNarasimhan.StrongDescendingChainCondition μ →\n        HarderNarasimhan.WeakSlopeLike₂ μ →\n          (HarderNarasimhan.NashEquilibrium μ ↔\n            ∀ (y : ℒ) (hy : y ≠ ⊤),\n              HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl ≤ HarderNarasimhan.μmax μ ⟨(y, ⊤), ⋯⟩))",
  "constCategory": "Theorem"},
 {"references":
  ["ZeroHomClass",
   "FunLike",
   "Zero.toOfNat0",
   "Zero",
   "Eq",
   "DFunLike.coe",
   "OfNat.ofNat",
   "ZeroHomClass.map_zero"],
  "name": "map_zero",
  "constType":
  "∀ {M : Type u_4} {N : Type u_5} {F : Type u_9} [inst : Zero M] [inst_1 : Zero N] [inst_2 : FunLike F M N]\n  [ZeroHomClass F M N] (f : F), f 0 = 0",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Module",
   "Singleton.singleton",
   "Membership.mem",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Submodule.span",
   "Semiring.toNonAssocSemiring",
   "Ideal",
   "PrimeSpectrum.asIdeal",
   "Eq",
   "Preorder.toLE",
   "Semiring.toModule",
   "propext",
   "Submodule.annihilator",
   "CommRing.toCommSemiring",
   "Exists",
   "Set",
   "Module.support",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "AddCommGroup",
   "Set.instSingletonSet",
   "CommRing",
   "Set.instMembership",
   "PrimeSpectrum",
   "LE.le",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "Module.mem_support_iff_exists_annihilator"],
  "name": "HarderNarasimhan.impl.support_quotient_mono._simp_1_1",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  {p : PrimeSpectrum R}, (p ∈ Module.support R M) = ∃ m, (Submodule.span R {m}).annihilator ≤ p.asIdeal",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "And",
   "Preorder.toLT",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "le_rfl",
   "Prod",
   "LT.lt",
   "And.intro",
   "Subtype.prop",
   "le_of_lt",
   "Lattice",
   "LE.le",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.prop3d4₀func._proof_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] (I : { p // p.1 < p.2 }), (↑I).1 ≤ (↑I).1 ∧ (↑I).1 ≤ (↑I).2",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "inferInstance",
   "AddMonoid",
   "AddCommMonoid.toAddMonoid",
   "Nat.instAddCommMonoid"],
  "name": "Nat.instAddMonoid",
  "constType": "AddMonoid ℕ",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.JordanHolderFiltration.casesOn",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.noConfusionType",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              Sort u → HarderNarasimhan.JordanHolderFiltration μ → HarderNarasimhan.JordanHolderFiltration μ → Sort u",
  "constCategory": "Definition"},
 {"references":
  ["HAdd.hAdd", "instHAdd", "Eq.refl", "Int.instAdd", "Eq.ndrec", "Eq", "Int"],
  "name": "Lean.Omega.Int.add_congr",
  "constType": "∀ {a b c d : ℤ}, a = b → c = d → a + c = b + d",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "Iff.mp",
   "GT.gt",
   "And.intro",
   "False.elim",
   "Or",
   "PartialOrder",
   "Eq.symm",
   "And.left",
   "imp_iff_or_not",
   "And.right",
   "And",
   "Or.resolve_left",
   "BoundedOrder",
   "Prod.snd",
   "Decidable.not_and_iff_not_or_not'",
   "Prod",
   "Classical.or_iff_not_imp_left",
   "not_lt_of_ge",
   "Eq.refl",
   "Iff.mpr",
   "Iff",
   "Nontrivial",
   "id",
   "imp_iff_not_or",
   "Eq.mpr",
   "HarderNarasimhan.SlopeLike.mk",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "Subtype",
   "Classical.not_not",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Or.resolve_right",
   "congrArg",
   "Prod.fst",
   "Iff.intro",
   "Or.inl",
   "le_of_eq",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Not",
   "eq_of_le_of_not_lt",
   "Iff.symm",
   "LT.lt",
   "not_le_of_gt",
   "Or.casesOn",
   "le_of_lt",
   "LE.le",
   "Subtype.mk",
   "Decidable.iff_iff_and_or_not_and_not",
   "dite",
   "CompleteLattice",
   "HarderNarasimhan.SlopeLike.slopelike",
   "instDecidableNot",
   "And.casesOn"],
  "name": "HarderNarasimhan.impl.prop4d6",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.SlopeLike μ ↔\n    ∀ (x y z : ℒ) (h : x < y ∧ y < z),\n      μ ⟨(x, y), ⋯⟩ < μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ < μ ⟨(y, z), ⋯⟩ ∨\n        μ ⟨(x, y), ⋯⟩ > μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ > μ ⟨(y, z), ⋯⟩ ∨\n          μ ⟨(x, y), ⋯⟩ = μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ = μ ⟨(y, z), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "Exists",
   "instHAdd",
   "HarderNarasimhan.μA_DescendingChainCondition.rec",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.μA_DescendingChainCondition.mk",
   "StrictAnti",
   "Nat",
   "HarderNarasimhan.μA",
   "Lattice",
   "Nontrivial",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μA_DescendingChainCondition.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.μA_DescendingChainCondition μ → Sort u} →\n                (t : HarderNarasimhan.μA_DescendingChainCondition μ) →\n                  ((μ_dcc :\n                        ∀ (a : ℒ) (f : ℕ → ℒ) (h₁ : ∀ (n : ℕ), f n > a),\n                          StrictAnti f →\n                            ∃ N, ¬HarderNarasimhan.μA μ ⟨(a, f N), ⋯⟩ < HarderNarasimhan.μA μ ⟨(a, f (N + 1)), ⋯⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Eq.trans",
   "True",
   "instHAdd",
   "List",
   "Lean.Omega.IntList.get",
   "Lean.Omega.LinearCombo.coordinate",
   "OfNat.ofNat",
   "congrArg",
   "Int",
   "HAdd.hAdd",
   "eq_self",
   "Lean.Omega.LinearCombo.coordinate_eval",
   "Nat",
   "Lean.Omega.IntList.get_cons_succ",
   "of_eq_true",
   "Lean.Omega.Coeffs.ofList",
   "Lean.Omega.Coeffs.get",
   "instOfNatNat",
   "Lean.Omega.LinearCombo.eval",
   "Lean.Omega.IntList.get_cons_zero",
   "Eq",
   "List.cons"],
  "name": "Lean.Omega.LinearCombo.coordinate_eval_6",
  "constType":
  "∀ {a0 a1 a2 a3 a4 a5 a6 : ℤ} {t : List ℤ},\n  (Omega.LinearCombo.coordinate 6).eval (Omega.Coeffs.ofList (a0 :: a1 :: a2 :: a3 :: a4 :: a5 :: a6 :: t)) = a6",
  "constCategory": "Theorem"},
 {"references":
  ["EmbeddingLike.injective",
   "Function.Injective.eq_iff",
   "FunLike",
   "EmbeddingLike",
   "Iff",
   "Eq",
   "DFunLike.coe"],
  "name": "EmbeddingLike.apply_eq_iff_eq",
  "constType":
  "∀ {F : Sort u_1} {α : Sort u_2} {β : Sort u_3} [inst : FunLike F α β] [i : EmbeddingLike F α β] (f : F) {x y : α},\n  f x = f y ↔ x = y",
  "constCategory": "Theorem"},
 {"references": ["exists_prop", "Exists", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl._μ_mono_right._simp_1_1",
  "constType": "∀ {b a : Prop}, (∃ (_ : a), b) = (a ∧ b)",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid",
   "SubtractionMonoid.mk",
   "AddCommGroup.add_comm",
   "SubtractionMonoid.neg_eq_of_add",
   "AddCommGroup.toAddGroup",
   "SubtractionCommMonoid",
   "SubtractionCommMonoid.mk",
   "AddCommGroup",
   "SubtractionMonoid.neg_neg",
   "AddGroup.toSubNegMonoid",
   "SubtractionMonoid.neg_add_rev",
   "AddGroup.toSubtractionMonoid"],
  "name": "AddCommGroup.toDivisionAddCommMonoid",
  "constType": "{G : Type u_1} → [AddCommGroup G] → SubtractionCommMonoid G",
  "constCategory": "Definition"},
 {"references":
  ["CommRing.toCommSemiring",
   "IsNoetherianRing",
   "Module",
   "Nontrivial",
   "CommSemiring.toSemiring",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "CommRing",
   "Submodule",
   "Module.Finite"],
  "name": "HarderNarasimhan.ℒ",
  "constType":
  "(R : Type u_1) →\n  [inst : CommRing R] →\n    [IsNoetherianRing R] →\n      (M : Type u_2) →\n        [Nontrivial M] → [inst_3 : AddCommGroup M] → [inst_4 : _root_.Module R M] → [Module.Finite R M] → Type u_2",
  "constCategory": "Definition"},
 {"references":
  ["SetLike.instPartialOrder",
   "Submodule.completeLattice._proof_6",
   "PartialOrder.toPreorder",
   "Submodule.instInfSet",
   "Submodule.completeLattice._proof_8",
   "Module",
   "Membership.mem",
   "SupSet.mk",
   "Lattice.mk",
   "Submodule.completeLattice._proof_1",
   "BoundedOrder.mk",
   "Submodule",
   "Submodule.completeLattice._proof_5",
   "AddCommMonoid",
   "InfSet.sInf",
   "Submodule.instOrderBot",
   "Preorder.toLE",
   "_private.Mathlib.Algebra.Module.Submodule.Lattice.0.Submodule.sInf_le'",
   "OrderBot",
   "Submodule.instOrderTop",
   "Submodule.completeLattice._proof_3",
   "CompleteLattice.mk",
   "Set",
   "Submodule.completeLattice._proof_7",
   "Submodule.completeLattice._proof_2",
   "And",
   "OrderTop",
   "Set.instMembership",
   "Submodule.completeLattice._proof_4",
   "Submodule.setLike",
   "Min.min",
   "LE.le",
   "inferInstance",
   "SemilatticeSup.mk",
   "Submodule.instMin",
   "_private.Mathlib.Algebra.Module.Submodule.Lattice.0.Submodule.le_sInf'",
   "CompleteLattice",
   "Semiring",
   "setOf"],
  "name": "Submodule.completeLattice",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_3} →\n    [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → CompleteLattice (Submodule R M)",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "AddZeroClass",
   "Preorder.toLT",
   "CanonicallyOrderedAdd",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "LE.le.eq_or_lt",
   "LT.lt",
   "Or",
   "zero_le",
   "Or.imp_left",
   "PartialOrder",
   "Eq.symm",
   "Zero.toOfNat0",
   "Preorder.toLE",
   "Eq",
   "AddZero.toZero"],
  "name": "eq_zero_or_pos",
  "constType":
  "∀ {α : Type u} [inst : AddZeroClass α] [inst_1 : PartialOrder α] [CanonicallyOrderedAdd α] (a : α), a = 0 ∨ 0 < a",
  "constCategory": "Theorem"},
 {"references": ["Nat", "Lean.Name"],
  "name": "Lean.Name.num",
  "constType": "Name → ℕ → Name",
  "constCategory": "Other"},
 {"references": ["Not", "Decidable", "Decidable.casesOn"],
  "name": "dite",
  "constType":
  "{α : Sort u} → (c : Prop) → [h : Decidable c] → (c → α) → (¬c → α) → α",
  "constCategory": "Definition"},
 {"references":
  ["Nat.le_trans",
   "Nat.sub",
   "Nat.le_refl",
   "Nat.zero",
   "Nat",
   "instSubNat",
   "Nat.succ",
   "Nat.rec",
   "LE.le",
   "HSub.hSub",
   "instHSub",
   "instLENat",
   "Nat.pred_le"],
  "name": "Nat.sub_le",
  "constType": "∀ (n m : ℕ), n - m ≤ n",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "instLTNat", "Nat", "Fin.val", "Fin"],
  "name": "Fin.isLt",
  "constType": "∀ {n : ℕ} (self : Fin n), ↑self < n",
  "constCategory": "Theorem"},
 {"references":
  ["absurd",
   "Not",
   "rfl",
   "Decidable.isFalse",
   "Decidable",
   "ite",
   "_private.Init.Core.0.if_pos.match_1_1",
   "Eq",
   "Decidable.isTrue"],
  "name": "if_pos",
  "constType":
  "∀ {c : Prop} {h : Decidable c}, c → ∀ {α : Sort u} {t e : α}, (if c then t else e) = t",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.impl.instConvexITotIntvl",
   "WellFoundedGT",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "Exists",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.impl.HNFil_of_fin_len",
   "Nat",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ], ∃ N, HarderNarasimhan.impl.HNFil μ N = ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "SupSet.sSup",
   "PartialOrder",
   "Preorder.toLE",
   "Eq",
   "Exists",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.μmax._proof_1",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.μB",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] →\n      [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → { p // p.1 < p.2 } → S",
  "constCategory": "Definition"},
 {"references": ["LE.le", "LE", "ge_iff_le", "Eq", "GE.ge", "propext"],
  "name": "HarderNarasimhan.impl.subseq_prop3._simp_1_7",
  "constType": "∀ {α : Type u_1} [inst : LE α] {x y : α}, (x ≥ y) = (y ≤ x)",
  "constCategory": "Theorem"},
 {"references":
  ["PrimeSpectrum",
   "Ideal.IsPrime",
   "CommSemiring.toSemiring",
   "CommSemiring",
   "PrimeSpectrum.asIdeal"],
  "name": "PrimeSpectrum.isPrime",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] (self : PrimeSpectrum R), self.asIdeal.IsPrime",
  "constCategory": "Theorem"},
 {"references": ["and_imp", "And", "Eq", "propext"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_24",
  "constType": "∀ {a b c : Prop}, (a ∧ b → c) = (a → b → c)",
  "constCategory": "Theorem"},
 {"references":
  ["AddCommMonoid",
   "NNReal.toRealHom",
   "Real",
   "Module",
   "NNReal",
   "instSemiringNNReal",
   "Real.semiring",
   "Module.compHom"],
  "name": "NNReal.instModuleOfReal",
  "constType":
  "{M : Type u_1} → [inst : AddCommMonoid M] → [_root_.Module ℝ M] → _root_.Module NNReal M",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Semistable.mk",
   "CompleteSemilatticeInf.toPartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.Semistable.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.Semistable μ → Sort u} →\n                ((semistable :\n                      ∀ (x : ℒ) (hx : x ≠ ⊥), ¬HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ > HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩) →\n                    motive ⋯) →\n                  (t : HarderNarasimhan.Semistable μ) → motive t",
  "constCategory": "Other"},
 {"references": ["HSub", "outParam"],
  "name": "HSub.hSub",
  "constType":
  "{α : Type u} → {β : Type v} → {γ : outParam (Type w)} → [self : HSub α β γ] → α → β → γ",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.Stable.mk",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.Stable",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.Stable.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.Stable μ → Sort u} →\n                ([toSemistable : HarderNarasimhan.Semistable μ] →\n                    (stable :\n                        ∀ (x : ℒ) (hx : x ≠ ⊥),\n                          x ≠ ⊤ → HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ ≠ HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩) →\n                      motive ⋯) →\n                  (t : HarderNarasimhan.Stable μ) → motive t",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "Fin.castSucc",
   "instHAdd",
   "Prod.mk",
   "Membership.mem",
   "RelSeries",
   "Fin",
   "SetRel",
   "OfNat.ofNat",
   "Set.instMembership",
   "HAdd.hAdd",
   "Prod",
   "Nat",
   "instOfNatNat",
   "Fin.succ"],
  "name": "RelSeries.mk",
  "constType":
  "{α : Type u_1} →\n  {r : SetRel α α} →\n    (length : ℕ) →\n      (toFun : Fin (length + 1) → α) → (∀ (i : Fin length), (toFun i.castSucc, toFun i.succ) ∈ r) → RelSeries r",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "HarderNarasimhan.impl.CP.f1._proof_1",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Submodule.map",
   "Preorder.toLT",
   "Subtype.val",
   "Submodule.subtype",
   "Semiring.toNonAssocSemiring",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_2",
   "Finset.min'",
   "RingHom.id",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "SetLike.instMembership",
   "LinearMap.ker",
   "LocalizedModule",
   "Submodule.addCommGroup",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_4",
   "HarderNarasimhan.impl.CP.f1",
   "Prod.snd",
   "LinearMap",
   "Prod",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_3",
   "LocalizedModule.isModule'",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_1",
   "Submodule.submoduleOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.hasQuotient",
   "Subtype",
   "HasQuotient.Quotient",
   "LinearMap.instFunLike",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "LocalizedModule.instAddCommMonoid",
   "LinearMap.comp",
   "HarderNarasimhan.impl.μ_nonempty",
   "Prod.fst",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Ideal.primeCompl",
   "PrimeSpectrum.asIdeal",
   "HarderNarasimhan._μ",
   "CommRing.toCommSemiring",
   "LinearExtension",
   "CommSemiring.toSemiring",
   "Set.toFinset",
   "AddCommGroup",
   "CommRing",
   "LT.lt",
   "PrimeSpectrum",
   "HarderNarasimhan.impl.CP.f2",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.ker_of_quot_comp_localization",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] → [inst_5 : Module.Finite R M] → { z // z.1 < z.2 } → HarderNarasimhan.ℒ R M",
  "constCategory": "Definition"},
 {"references":
  ["Unique",
   "AddUnits",
   "PartialOrder.toPreorder",
   "Unique.mk",
   "CanonicallyOrderedAdd",
   "CanonicallyOrderedCommMonoid.toUniqueAddUnits._proof_1",
   "AddMonoid",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "AddUnits.instInhabited",
   "PartialOrder",
   "Preorder.toLE",
   "AddMonoid.toAddZeroClass"],
  "name": "CanonicallyOrderedCommMonoid.toUniqueAddUnits",
  "constType":
  "{α : Type u} → [inst : AddMonoid α] → [inst_1 : PartialOrder α] → [CanonicallyOrderedAdd α] → Unique (AddUnits α)",
  "constCategory": "Definition"},
 {"references": ["HPow.mk", "HPow", "Pow", "Pow.pow"],
  "name": "instHPow",
  "constType": "{α : Type u_1} → {β : Type u_2} → [Pow α β] → HPow α β α",
  "constCategory": "Definition"},
 {"references": ["InfSet", "ConditionallyCompleteLattice"],
  "name": "ConditionallyCompleteLattice.toInfSet",
  "constType":
  "{α : Type u_5} → [self : ConditionallyCompleteLattice α] → InfSet α",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "Membership.mem.out",
   "Subtype.val",
   "Set.Elem",
   "False.elim",
   "Or",
   "PartialOrder",
   "forall_congr",
   "funext",
   "Eq.rec",
   "Eq.ndrec",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_5",
   "Exists",
   "Exists.choose_spec",
   "Or.resolve_left",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Exists.casesOn",
   "Prod",
   "Nat",
   "Iff.of_eq",
   "Iff.mpr",
   "Eq.refl",
   "Classical.byContradiction",
   "Top.top",
   "Exists.choose.congr_simp",
   "setOf",
   "HarderNarasimhan.impl.prop4d1₁_seq._simp_4",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "HarderNarasimhan.impl.prop4d1₁_seq._simp_5",
   "Eq.mp",
   "le_trans",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "congrArg",
   "not_lt_top_iff",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "not_true_eq_false",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Not",
   "True",
   "Set",
   "Exists.choose",
   "exists_prop_congr",
   "LT.lt",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_6",
   "HarderNarasimhan.impl.prop4d1₁_seq._simp_3",
   "Nat.succ",
   "Nat.below",
   "LE.le",
   "False",
   "Subtype.mk",
   "HarderNarasimhan.impl.prop4d1₁_seq._simp_6",
   "OrderTop.toTop",
   "HarderNarasimhan.impl.prop4d1₁_seq._proof_3",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._proof_7",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] [inst_1 : BoundedOrder ℒ] {S : Type u_2} [inst_2 : CompleteLattice S]\n  (μ : { p // p.1 < p.2 } → S),\n  (∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤), μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩) →\n    ∀ (k : ℕ) (x : Nat.below k.succ),\n      ⋯.choose ∈ {YA | ∃ (h : YA < ⊤), ∀ xA < ⊤, ∃ xB, ∃ (hAB : xA < xB), ¬μ ⟨(xA, xB), hAB⟩ ≤ μ ⟨(YA, ⊤), h⟩}",
  "constCategory": "Theorem"},
 {"references":
  ["LinearOrderedCommMonoidWithZero", "LinearOrderedCommGroupWithZero"],
  "name": "LinearOrderedCommGroupWithZero.toLinearOrderedCommMonoidWithZero",
  "constType":
  "{α : Type u_3} → [self : LinearOrderedCommGroupWithZero α] → LinearOrderedCommMonoidWithZero α",
  "constCategory": "Definition"},
 {"references": ["semiOutParam", "CoeOut"],
  "name": "CoeOut.mk",
  "constType":
  "{α : Sort u} → {β : semiOutParam (Sort v)} → (α → β) → CoeOut α β",
  "constCategory": "Other"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Membership.mem",
   "Preorder.toLT",
   "Membership.mem.out",
   "GT.gt",
   "Subtype.val",
   "Prod.fst",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "And.left",
   "HarderNarasimhan.impl.ℒₛ._proof_1",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Set.Nonempty",
   "Exists",
   "Lattice.toSemilatticeInf",
   "Exists.choose_spec",
   "Set",
   "HarderNarasimhan.impl.ℒₛ",
   "HarderNarasimhan.impl.prop3d4₀func",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Exists.choose",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "Nat",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.impl.prop3d4₀func._proof_5",
   "Lattice",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "HarderNarasimhan.impl.ℒₛ._proof_2",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func._proof_6",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [h : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (n : ℕ)\n  (hbot : ¬(↑I).1 = ↑(HarderNarasimhan.impl.prop3d4₀func μ I n))\n  (hne : (HarderNarasimhan.impl.ℒₛ μ I (HarderNarasimhan.impl.prop3d4₀func μ I n) hbot).Nonempty),\n  HarderNarasimhan.InIntvl I ⋯.choose",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "Module",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "CommRing",
   "SizeOf",
   "IsNoetherianRing",
   "HarderNarasimhan.CoprimaryFiltration",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "HarderNarasimhan.CoprimaryFiltration._sizeOf_1",
   "SizeOf.mk",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration._sizeOf_inst",
  "constType":
  "(R : Type u_1) →\n  {inst : CommRing R} →\n    {inst_1 : IsNoetherianRing R} →\n      (M : Type u_2) →\n        {inst_2 : Nontrivial M} →\n          {inst_3 : AddCommGroup M} →\n            {inst_4 : _root_.Module R M} →\n              {inst_5 : Module.Finite R M} → [SizeOf R] → [SizeOf M] → SizeOf (HarderNarasimhan.CoprimaryFiltration R M)",
  "constCategory": "Definition"},
 {"references":
  ["HAdd.hAdd",
   "AddZeroClass",
   "instHAdd",
   "AddZeroClass.add_zero",
   "Zero.toOfNat0",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "Eq",
   "AddZero.toZero",
   "OfNat.ofNat"],
  "name": "add_zero",
  "constType": "∀ {M : Type u} [inst : AddZeroClass M] (a : M), a + 0 = a",
  "constCategory": "Theorem"},
 {"references": ["Bool", "DecidableEq", "Bool.decEq"],
  "name": "instDecidableEqBool",
  "constType": "DecidableEq Bool",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Or",
   "Subtype.prop",
   "PartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.WeakSlopeLike₂",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₂.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (z : { p // p.1 < p.2 }) (hz : ⊥ < (↑z).1), μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ z ∨ μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ ⟨(⊥, (↑z).1), hz⟩) →\n    HarderNarasimhan.WeakSlopeLike₂ μ",
  "constCategory": "Other"},
 {"references":
  ["SemilatticeInf",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Min.min",
   "LE.le",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "SemilatticeInf.inf_le_left"],
  "name": "inf_le_left",
  "constType": "∀ {α : Type u} [inst : SemilatticeInf α] {a b : α}, a ⊓ b ≤ a",
  "constCategory": "Theorem"},
 {"references": ["implies_dep_congr_ctx", "Eq"],
  "name": "implies_congr_ctx",
  "constType":
  "∀ {p₁ p₂ q₁ q₂ : Prop}, p₁ = p₂ → (p₂ → q₁ = q₂) → (p₁ → q₁) = (p₂ → q₂)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat.instPreorder",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "Monotone",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.monotone",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.HarderNarasimhanFiltration μ),\n  Monotone self.filtration",
  "constCategory": "Theorem"},
 {"references": ["Not", "Exists", "not_exists", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._simp_4",
  "constType": "∀ {α : Sort u_1} {p : α → Prop}, (¬∃ x, p x) = ∀ (x : α), ¬p x",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "HarderNarasimhan.ConvexI.convex",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "HarderNarasimhan.Convex.convex",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.ConvexI.mk",
   "Subtype.val",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Iff.intro",
   "Subtype.prop",
   "CompleteSemilatticeInf.toPartialOrder",
   "HarderNarasimhan.Convex.mk",
   "HarderNarasimhan.Convex",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "inf_lt_left",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Lattice.toSemilatticeInf",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "HarderNarasimhan.InIntvl",
   "Min.min",
   "Iff",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "id",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice",
   "HarderNarasimhan.lt_lt"],
  "name": "HarderNarasimhan.impl.ConvexI_iff_Convex_Res",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ ↔ HarderNarasimhan.Convex (HarderNarasimhan.Resμ I μ)",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.μ_Admissible",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.μ_Admissible.mk",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "IsTotal",
   "Or",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "WellFoundedGT",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.μ_Admissible.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        [inst_3 : WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [inst_4 : CompleteLattice S] →\n              {μ : { p // p.1 < p.2 } → S} →\n                {motive : HarderNarasimhan.μ_Admissible μ → Sort u} →\n                  ((μ_adm :\n                        (IsTotal S fun x1 x2 ↦ x1 ≤ x2) ∨ ∀ (I : { p // p.1 < p.2 }), HarderNarasimhan.IsAttained μ I) →\n                      motive ⋯) →\n                    (t : HarderNarasimhan.μ_Admissible μ) → motive t",
  "constCategory": "Other"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "sub_self",
   "AddZeroClass.toAddZero",
   "SubNegZeroMonoid.toNegZeroClass",
   "OfNat.ofNat",
   "AddGroup.toSubtractionMonoid",
   "congrArg",
   "Iff.intro",
   "SubNegMonoid.toAddMonoid",
   "eq_of_sub_eq_zero",
   "Iff",
   "Eq.refl",
   "SubNegMonoid.toSub",
   "id",
   "HSub.hSub",
   "NegZeroClass.toZero",
   "AddGroup",
   "Eq.mpr",
   "Zero.toOfNat0",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "instHSub",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass"],
  "name": "sub_eq_zero",
  "constType":
  "∀ {G : Type u_3} [inst : AddGroup G] {a b : G}, a - b = 0 ↔ a = b",
  "constCategory": "Theorem"},
 {"references":
  ["Mathlib.Tactic.Zify.natCast_eq",
   "Nat",
   "Nat.cast",
   "Eq",
   "propext",
   "instNatCastInt",
   "Int"],
  "name": "Mathlib.Tactic.Zify.natCast_eq._simp_1",
  "constType": "∀ (a b : ℕ), (a = b) = (↑a = ↑b)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "Prod.fst",
   "instOfNatNat",
   "WellFoundedGT",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "OfNat.ofNat",
   "LT.lt",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Lattice",
   "Nontrivial",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ], HarderNarasimhan.impl.HNFil μ 0 = ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["MulOneClass.toMulOne",
   "FunLike",
   "RingHom.toMonoidHom",
   "RingHom",
   "DFunLike.mk",
   "MulOne.toOne",
   "NonAssocSemiring",
   "MonoidHom.toOneHom",
   "MulZeroOneClass.toMulOneClass",
   "OneHom.toFun",
   "RingHom.instFunLike._proof_1",
   "NonAssocSemiring.toMulZeroOneClass"],
  "name": "RingHom.instFunLike",
  "constType":
  "{α : Type u_2} → {β : Type u_3} → {x : NonAssocSemiring α} → {x_1 : NonAssocSemiring β} → FunLike (α →+* β) α β",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.StI",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil._proof_2",
   "Prod.fst",
   "IsGreatest",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "WellFoundedGT",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.HNFil.match_1",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.impl.HNFil._proof_1",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Nat.brecOn",
   "Exists.choose",
   "Bot.bot",
   "OfNat.ofNat",
   "Unit",
   "LT.lt",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.succ",
   "Lattice",
   "Nontrivial",
   "Nat.below",
   "Top.top",
   "Subtype.mk",
   "dite",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        [inst_3 : WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [inst_4 : CompleteLattice S] →\n              (μ : { p // p.1 < p.2 } → S) →\n                [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] →\n                  [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ] →\n                    [h : HarderNarasimhan.μ_Admissible μ] → ℕ → ℒ",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Module",
   "RingHomInvPair",
   "Semiring"],
  "name": "LinearEquiv",
  "constType":
  "{R : Type u_14} →\n  {S : Type u_15} →\n    [inst : Semiring R] →\n      [inst_1 : Semiring S] →\n        (σ : R →+* S) →\n          {σ' : S →+* R} →\n            [RingHomInvPair σ σ'] →\n              [RingHomInvPair σ' σ] →\n                (M : Type u_16) →\n                  (M₂ : Type u_17) →\n                    [inst_4 : AddCommMonoid M] →\n                      [inst_5 : AddCommMonoid M₂] → [_root_.Module R M] → [_root_.Module S M₂] → Type (max u_16 u_17)",
  "constCategory": "Other"},
 {"references":
  ["AddMonoid.toZero",
   "SubNegMonoid.toAddMonoid",
   "SubNegMonoid.toNeg",
   "SubNegZeroMonoid.toSubNegMonoid",
   "NegZeroClass",
   "NegZeroClass.mk",
   "SubNegZeroMonoid",
   "SubNegZeroMonoid.neg_zero"],
  "name": "SubNegZeroMonoid.toNegZeroClass",
  "constType": "{G : Type u_2} → [self : SubNegZeroMonoid G] → NegZeroClass G",
  "constCategory": "Definition"},
 {"references":
  ["smul_zero",
   "LinearMap.toSpanSingleton",
   "Eq.trans",
   "Module",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "congrArg",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Semiring.toModule",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "DistribSMul.toSMulZeroClass",
   "LinearMap.instZero",
   "True",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "LinearMap.ext_ring",
   "AddZeroClass.toAddZero",
   "LinearMap",
   "OfNat.ofNat",
   "eq_self",
   "Module.toDistribMulAction",
   "One.toOfNat1",
   "of_eq_true",
   "AddMonoidWithOne.toOne",
   "HSMul.hSMul",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "LinearMap.toSpanSingleton_zero",
  "constType":
  "∀ (R : Type u_1) (M : Type u_4) [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M],\n  LinearMap.toSpanSingleton R M 0 = 0",
  "constCategory": "Theorem"},
 {"references":
  ["AddCancelCommMonoid",
   "AddLeftCancelMonoid",
   "AddLeftCancelMonoid.mk",
   "AddCancelCommMonoid.toIsLeftCancelAdd",
   "AddCommMonoid.toAddMonoid",
   "AddCancelCommMonoid.toAddCommMonoid"],
  "name": "AddCancelCommMonoid.toAddLeftCancelMonoid",
  "constType":
  "{M : Type u} → [self : AddCancelCommMonoid M] → AddLeftCancelMonoid M",
  "constCategory": "Definition"},
 {"references": ["Nat", "Fin.val", "Fin.mk", "Fin", "Fin.cast._proof_1", "Eq"],
  "name": "Fin.cast",
  "constType": "{n m : ℕ} → n = m → Fin n → Fin m",
  "constCategory": "Definition"},
 {"references":
  ["Order.Frame.mk",
   "CompletelyDistribLattice.himp_bot",
   "CompletelyDistribLattice.toHasCompl",
   "CompletelyDistribLattice.toHNot",
   "CompletelyDistribLattice.sdiff_le_iff",
   "CompleteDistribLattice",
   "CompletelyDistribLattice.toCompleteLattice",
   "CompletelyDistribLattice.top_sdiff",
   "CompletelyDistribLattice.toHImp",
   "CompletelyDistribLattice.toSDiff",
   "CompletelyDistribLattice",
   "CompleteDistribLattice.mk",
   "CompletelyDistribLattice.le_himp_iff"],
  "name": "CompletelyDistribLattice.toCompleteDistribLattice",
  "constType":
  "{α : Type u} → [CompletelyDistribLattice α] → CompleteDistribLattice α",
  "constCategory": "Definition"},
 {"references":
  ["Submodule.ext",
   "HarderNarasimhan.impl.CP.f1._proof_1",
   "Eq.trans",
   "Submodule.Quotient.module",
   "Submodule.map",
   "Exists.intro",
   "HarderNarasimhan.impl.CP.f2._proof_2",
   "Membership",
   "Subtype.val",
   "Quotient.out_eq",
   "Submodule.quotientQuotientEquivQuotient",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_2",
   "Finset.min'",
   "RingHom.id",
   "Subtype.coe_eta",
   "Eq.symm",
   "Eq.ndrec",
   "Submodule.coe_mem",
   "LinearMap.ker",
   "Exists",
   "LocalizedModule",
   "Submodule.addCommGroup",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_4",
   "Prod.snd",
   "LinearMap",
   "Ring.toSemiring",
   "Prod",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_3",
   "LocalizedModule.isModule'",
   "Iff",
   "Eq.refl",
   "HEq",
   "RingHomInvPair.ids",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_1",
   "Quotient.out",
   "AddMonoid.toAddZeroClass",
   "Quotient",
   "Submodule.hasQuotient",
   "HarderNarasimhan.impl.CP.f2._proof_1",
   "HasQuotient.Quotient",
   "LinearMap.instFunLike",
   "Module",
   "LinearMap.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "LocalizedModule.instAddCommMonoid",
   "Submodule.Quotient.instZeroQuotient",
   "HarderNarasimhan.impl.prop3d11._simp_3",
   "AddCommMonoid.toAddMonoid",
   "HarderNarasimhan.impl.μ_nonempty",
   "Prod.fst",
   "congr",
   "AddCommMagma.toAdd",
   "HarderNarasimhan._μ",
   "Eq",
   "propext",
   "LinearExtension",
   "Set.toFinset",
   "AddCommGroup",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "eq_self",
   "CommRing.toRing",
   "HarderNarasimhan.ℒ",
   "Submodule.completeLattice",
   "LinearMap.comp_apply",
   "And.casesOn",
   "Module.Finite",
   "Quotient.mk''",
   "Submodule.Quotient.mk",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.impl.koqcl_iso._simp_1_2",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "RingHomCompTriple.ids",
   "Membership.mem",
   "AddHom.mk",
   "Preorder.toLT",
   "Quotient.mk",
   "PrimeSpectrum.isPrime",
   "Submodule.subtype",
   "LinearMap.semilinearMapClass",
   "And.intro",
   "Semiring.toNonAssocSemiring",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "eq_of_heq",
   "funext",
   "PrimeSpectrum.instPartialOrder",
   "Eq.rec",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization",
   "SetLike.instMembership",
   "outParam",
   "And",
   "True.intro",
   "HarderNarasimhan.impl.CP.f1",
   "AddZeroClass.toAddZero",
   "Submodule.Quotient.mk_eq_zero",
   "Exists.casesOn",
   "HarderNarasimhan.impl.submoduleOf_map_subtype",
   "Nontrivial",
   "id",
   "AddZero.toZero",
   "Submodule.submoduleOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "Submodule.module",
   "LinearMap.comp",
   "LinearEquiv",
   "DFunLike.coe",
   "HarderNarasimhan.impl.koqcl_iso._simp_1_1",
   "Iff.intro",
   "Submodule",
   "congrArg",
   "Submodule.Quotient.addCommGroup",
   "Ideal.primeCompl",
   "PrimeSpectrum.asIdeal",
   "Zero.toOfNat0",
   "AddCommSemigroup.toAddCommMagma",
   "Submodule.mkQ",
   "CommRing.toCommSemiring",
   "HEq.refl",
   "True",
   "Submodule.quotientRel",
   "CommSemiring.toSemiring",
   "CommRing",
   "Eq.casesOn",
   "LinearEquiv.symm",
   "RingHomSurjective.ids",
   "LT.lt",
   "HarderNarasimhan.impl.CP.f2",
   "IsNoetherianRing",
   "of_eq_true",
   "AddCommMonoid.toAddCommSemigroup",
   "Submodule.setLike",
   "Subtype.mk",
   "Submodule.addCommMonoid",
   "LinearMap.mem_ker"],
  "name": "HarderNarasimhan.impl.koqcl_iso",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  ∃ x, True",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Preorder",
   "Preorder.toLT",
   "False",
   "lt_self_iff_false",
   "Eq",
   "propext"],
  "name": "HarderNarasimhan.impl.prop4d8._simp_1_3",
  "constType": "∀ {α : Type u_2} [inst : Preorder α] (x : α), (x < x) = False",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Or",
   "Subtype.prop",
   "PartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.WeakSlopeLike₂",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₂.wsl₂",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : PartialOrder ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.WeakSlopeLike₂ μ]\n  (z : { p // p.1 < p.2 }) (hz : ⊥ < (↑z).1), μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ z ∨ μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ ⟨(⊥, (↑z).1), hz⟩",
  "constCategory": "Theorem"},
 {"references":
  ["LinearOrder.toPartialOrder",
   "IsTotal",
   "PartialOrder.toPreorder",
   "LE.le",
   "LinearOrder",
   "IsTotal.mk",
   "le_total",
   "Preorder.toLE"],
  "name": "LE.isTotal",
  "constType":
  "∀ {α : Type u} [inst : LinearOrder α], IsTotal α fun x1 x2 ↦ x1 ≤ x2",
  "constCategory": "Theorem"},
 {"references":
  ["AddGroupWithOne.toAddGroup",
   "Ring.toAddGroupWithOne",
   "Eq.refl",
   "SubNegMonoid.toSub",
   "Eq.symm",
   "HSub.hSub",
   "AddGroup.toSubNegMonoid",
   "Eq.ndrec",
   "instHSub",
   "Eq",
   "Ring"],
  "name": "Mathlib.Tactic.Ring.sub_congr",
  "constType":
  "∀ {R : Type u_2} [inst : Ring R] {a a' b b' c : R}, a = a' → b = b' → a' - b' = c → a - b = c",
  "constCategory": "Theorem"},
 {"references": ["Decidable", "Decidable.isFalse", "False", "not_false"],
  "name": "instDecidableFalse",
  "constType": "Decidable False",
  "constCategory": "Definition"},
 {"references": ["AddMonoid"],
  "name": "AddUnits",
  "constType": "(α : Type u) → [AddMonoid α] → Type u",
  "constCategory": "Other"},
 {"references": ["Preorder", "SMul", "Zero"],
  "name": "PosSMulStrictMono",
  "constType":
  "(α : Type u_1) → (β : Type u_2) → [SMul α β] → [Preorder α] → [Preorder β] → [Zero α] → Prop",
  "constCategory": "Other"},
 {"references":
  ["Exists", "Subtype", "Subtype.exists", "Subtype.mk", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.Submodule.mem_map_subtype_iff._simp_1_2",
  "constType":
  "∀ {α : Sort u} {p : α → Prop} {q : { a // p a } → Prop}, (∃ x, q x) = ∃ a, ∃ (b : p a), q ⟨a, b⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Bool",
   "Decidable.isFalse",
   "Decidable",
   "Nat.le_of_ble_eq_true",
   "Nat.not_le_of_not_ble_eq_true",
   "instDecidableEqBool",
   "Nat",
   "LE.le",
   "dite",
   "Eq",
   "instLENat",
   "Bool.true",
   "Nat.ble",
   "Decidable.isTrue"],
  "name": "Nat.decLe",
  "constType": "(n m : ℕ) → Decidable (n ≤ m)",
  "constCategory": "Definition"},
 {"references":
  ["OrderTheory.DedekindMacNeilleClosureOperator",
   "PartialOrder",
   "inferInstance",
   "OrderTheory.instCompleteLatticeClosedsSetOfPartialOrder_harderNarasimhan",
   "CompleteLattice",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
  "constType":
  "{α : Type u_1} → [inst : PartialOrder α] → CompleteLattice (OrderTheory.DedekindMacNeilleCompletion α)",
  "constCategory": "Definition"},
 {"references": ["Exists", "exists_and_right", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.Submodule.mem_map_subtype_iff._simp_1_3",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {b : Prop}, (∃ x, p x ∧ b) = ((∃ x, p x) ∧ b)",
  "constCategory": "Theorem"},
 {"references": ["List.isSetoid", "Quotient", "List"],
  "name": "Multiset",
  "constType": "Type u → Type u",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "LinearMap.instFunLike",
   "Eq.trans",
   "Module",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "DFunLike.coe",
   "Submodule",
   "LinearMap.semilinearMapClass",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "LinearMap.mem_ker._simp_1",
   "Zero.toOfNat0",
   "Eq",
   "LinearMap.instZero",
   "LinearMap.ker",
   "SetLike.instMembership",
   "True",
   "Submodule.instTop",
   "Submodule.eq_top_iff'",
   "AddZeroClass.toAddZero",
   "LinearMap",
   "OfNat.ofNat",
   "eq_self",
   "of_eq_true",
   "Submodule.setLike",
   "Iff.mpr",
   "Top.top",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "LinearMap.ker_zero",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_2} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {τ₁₂ : R →+* R₂}, LinearMap.ker 0 = ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["Exists",
   "Iff.mpr",
   "Iff",
   "_private.Init.PropLemmas.0.exists_prop_congr.match_1_3",
   "Iff.mp",
   "_private.Init.PropLemmas.0.exists_prop_congr.match_1_1",
   "Exists.intro",
   "Iff.intro"],
  "name": "exists_prop_congr",
  "constType":
  "∀ {p p' : Prop} {q q' : p → Prop}, (∀ (h : p), q h ↔ q' h) → ∀ (hp : p ↔ p'), Exists q ↔ ∃ (h : p'), q' ⋯",
  "constCategory": "Theorem"},
 {"references": ["Neg", "NegZeroClass"],
  "name": "NegZeroClass.toNeg",
  "constType": "{G : Type u_2} → [self : NegZeroClass G] → Neg G",
  "constCategory": "Definition"},
 {"references":
  ["Int.instCommSemiring",
   "CommSemiring.toSemiring",
   "inferInstance",
   "Int",
   "Semiring"],
  "name": "Int.instSemiring",
  "constType": "Semiring ℤ",
  "constCategory": "Definition"},
 {"references":
  ["Submodule.toAddSubmonoid",
   "Module",
   "AddCommMonoid.toAddMonoid",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "Submodule",
   "Submodule.setLike._proof_1",
   "AddSubsemigroup.carrier",
   "SetLike.mk",
   "AddCommMonoid",
   "SetLike",
   "AddSubmonoid.toAddSubsemigroup",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.setLike",
  "constType":
  "{R : Type u} →\n  {M : Type v} →\n    [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → SetLike (Submodule R M) M",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.μA",
   "Eq.refl",
   "PartialOrder",
   "Nontrivial",
   "Eq.rec",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μA.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S),\n  μ = μ_1 → ∀ (I I_1 : { p // p.1 < p.2 }), I = I_1 → HarderNarasimhan.μA μ I = HarderNarasimhan.μA μ_1 I_1",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteSemilatticeSup.le_sSup",
   "PartialOrder.toPreorder",
   "SupSet.sSup",
   "Set",
   "LE.le",
   "Membership.mem",
   "CompleteSemilatticeSup",
   "CompleteSemilatticeSup.toPartialOrder",
   "CompleteSemilatticeSup.toSupSet",
   "Preorder.toLE",
   "Set.instMembership"],
  "name": "le_sSup",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteSemilatticeSup α] {s : Set α} {a : α}, a ∈ s → a ≤ sSup s",
  "constCategory": "Theorem"},
 {"references":
  ["SMul",
   "IsScalarTower",
   "HSMul.hSMul",
   "instHSMul",
   "Eq",
   "IsScalarTower.smul_assoc"],
  "name": "smul_assoc",
  "constType":
  "∀ {α : Type u_5} {M : Type u_9} {N : Type u_10} [inst : SMul M N] [inst_1 : SMul N α] [inst_2 : SMul M α]\n  [IsScalarTower M N α] (x : M) (y : N) (z : α), (x • y) • z = x • y • z",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Or.inr",
   "Decidable",
   "And",
   "Iff.mp",
   "iff_of_false",
   "And.rec",
   "Iff.intro",
   "And.intro",
   "Or.rec",
   "mt",
   "Or",
   "Or.inl",
   "Iff",
   "Iff.mpr",
   "iff_of_true",
   "dite"],
  "name": "Decidable.iff_iff_and_or_not_and_not",
  "constType": "∀ {a b : Prop} [Decidable b], (a ↔ b) ↔ a ∧ b ∨ ¬a ∧ ¬b",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.find",
   "Subtype",
   "PartialOrder.toPreorder",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "instOfNatNat",
   "HarderNarasimhan.JordanHolderFiltration",
   "OrderBot.toBot",
   "CompleteLinearOrder",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "Exists",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "OfNat.ofNat",
   "Exists.casesOn",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "instLENat"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration.match_1_1",
  "constType":
  "∀ (ℒ : Type u_1) (ntl : Nontrivial ℒ) (l : Lattice ℒ) (bo : BoundedOrder ℒ) (S : Type u_2) (clo : CompleteLinearOrder S)\n  (μ : { p // p.1 < p.2 } → S) (motive : (∃ JH, Nat.find ⋯ ≤ 0) → Prop) (h : ∃ JH, Nat.find ⋯ ≤ 0),\n  (∀ (JH : HarderNarasimhan.JordanHolderFiltration μ) (hJH : Nat.find ⋯ ≤ 0), motive ⋯) → motive h",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "HMod.hMod",
   "Nat.cast",
   "Fin.last",
   "True",
   "Eq.trans",
   "instHAdd",
   "Nat.mod_succ",
   "Fin",
   "instNeZeroNatHAdd_1",
   "OfNat.ofNat",
   "congrArg",
   "Nat.instMod",
   "HAdd.hAdd",
   "Nat.instNeZeroSucc",
   "eq_self",
   "Nat",
   "of_eq_true",
   "Nat.succ",
   "instOfNatNat",
   "Fin.NatCast.instNatCast",
   "instHMod",
   "Eq",
   "Fin.ext"],
  "name": "Fin.natCast_eq_last",
  "constType": "∀ (n : ℕ), ↑n = Fin.last n",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.ext",
   "Set.toFinset_congr",
   "Ring.toNonAssocRing",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_9",
   "instLawfulBEq",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_15",
   "AddCommGroup.toAddGroup",
   "Submodule.Quotient.module",
   "Submodule.map",
   "Classical.propDecidable",
   "QuotientAddGroup.leftRel",
   "AddGroupWithOne.toAddMonoidWithOne",
   "Submodule.Quotient.instSMul",
   "SMulZeroClass.toSMul",
   "HarderNarasimhan.impl.prop3d12",
   "sub_zero",
   "AddGroup.toSubtractionMonoid",
   "Subtype.coe_inj",
   "Finset.min'",
   "RingHom.id",
   "CompleteSemilatticeInf.toPartialOrder",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_11",
   "Module.IsNoetherian.finite",
   "Eq.symm",
   "HarderNarasimhan.impl.quot_ntl'",
   "HarderNarasimhan.S",
   "SemilinearMapClass.toMulActionSemiHomClass",
   "Exists",
   "LinearMap.ker",
   "AddSubgroup.instSetLike",
   "Submodule.Quotient.mk_smul",
   "HarderNarasimhan.instLatticeInterval",
   "LinearMap",
   "Ring.toSemiring",
   "eq_false",
   "Iff",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_12",
   "SMulMemClass.smul_mem",
   "Submodule.instBot",
   "Top.top",
   "Eq.mpr",
   "HarderNarasimhan.impl.lift_quot._proof_1",
   "Quotient.out",
   "HarderNarasimhan.Semistable",
   "RelEmbedding.toEmbedding",
   "HasQuotient.Quotient",
   "HarderNarasimhan._μ._proof_1",
   "LinearMap.instFunLike",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Submodule.Quotient.instZeroQuotient",
   "HarderNarasimhan.impl.prop3d11._simp_3",
   "AddCommMonoid.toAddMonoid",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Ideal.ext",
   "Subtype.property",
   "HarderNarasimhan.impl.lift_quot._proof_3",
   "Eq",
   "AddSubgroupClass.sub",
   "LinearExtension",
   "Set",
   "SubNegMonoid.toNeg",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Set.toFinset",
   "HarderNarasimhan.impl.lift_quot._proof_2",
   "Eq.to_iff",
   "AddZero.toAdd",
   "eq_self",
   "Module.toDistribMulAction",
   "HarderNarasimhan.instPartialOrderS₀",
   "QuotientAddGroup.mk",
   "Ne",
   "instHSub",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTheory.DedekindMacNeilleCompletion",
   "instBEqOfDecidableEq",
   "Quotient.mk''",
   "HarderNarasimhan.μA_res_intvl",
   "Submodule.Quotient.mk",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_8",
   "PartialOrder.toPreorder",
   "Subtype.instLE",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "zero_sub",
   "HarderNarasimhan.μ",
   "Membership.mem",
   "Preorder.toLT",
   "GT.gt",
   "HarderNarasimhan.impl.prop3d11._simp_2",
   "Algebra.id",
   "RelEmbedding.instFunLike",
   "Submodule.subtype",
   "LinearMap.semilinearMapClass",
   "MulAction.toSMul",
   "not_false_eq_true",
   "Semiring.toNonAssocSemiring",
   "Ne.bot_lt'",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_10",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "forall_congr",
   "eq_of_heq",
   "DistribMulAction.toMulAction",
   "PrimeSpectrum.instPartialOrder",
   "AddGroup.toSubNegMonoid",
   "beq_eq_beq",
   "Semiring.toModule",
   "Finset.Nonempty",
   "SemilatticeInf.toPartialOrder",
   "DistribSMul.toSMulZeroClass",
   "And.left",
   "Subtype.instLT",
   "outParam",
   "PrimeSpectrum.mk",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "And.right",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_2",
   "Exists.casesOn",
   "AddSubgroup",
   "isNoetherian_submodule'",
   "Finset.instSingleton",
   "Iff.of_eq",
   "AddZero.toZero",
   "HarderNarasimhan.lt_lt",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "LinearMap.toSpanSingleton",
   "associatedPrimes",
   "Submodule.instNontrivial",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Eq.mp",
   "Submodule.module",
   "Submodule.smulMemClass",
   "lt_of_le_of_ne",
   "DFunLike.coe",
   "HarderNarasimhan.instBoundedOrderInterval._proof_4",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_14",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.instLinearOrderS₀",
   "isNoetherian_of_isNoetherianRing_of_finite",
   "Algebra.toSMul",
   "HarderNarasimhan.Semistable.mk",
   "Not",
   "Submodule.mkQ",
   "instHAdd",
   "Submodule.quotientRel",
   "IsAssociatedPrime._proof_1",
   "IsAssociatedPrime",
   "Submodule.sub_mem_iff_left",
   "Submodule.add_mem",
   "RingHomSurjective.ids",
   "LT.lt",
   "HarderNarasimhan.instBoundedOrderInterval._proof_2",
   "of_eq_true",
   "le_of_lt",
   "Subtype.instLawfulBEq",
   "HarderNarasimhan.instPartialOrderInterval",
   "False",
   "Subtype.mk",
   "trivial",
   "OrderTop.toTop",
   "LT",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Finset",
   "Bot.mk",
   "Submodule.mem_map_of_mem",
   "Eq.trans",
   "Singleton.singleton",
   "LE",
   "Exists.intro",
   "HarderNarasimhan.impl.quot_ntl",
   "instDistribSMul",
   "map_smul",
   "Subtype.val",
   "BoundedOrder.mk",
   "Quotient.out_eq",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "iff_self",
   "SubNegMonoid.toSub",
   "Submodule.submoduleOf._proof_1",
   "Submodule.addSubgroupClass",
   "Eq.ndrec",
   "rfl",
   "sub_self",
   "ClosureOperator.IsClosed",
   "Submodule.addCommGroup",
   "OrderTheory.coe'",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Submodule.mem_map",
   "BoundedOrder.toOrderBot",
   "Submodule.comap",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Eq.refl",
   "AddCommGroup.toAddCommMonoid",
   "HEq",
   "Set.ext",
   "Subtype.instBEq",
   "Top.mk",
   "HarderNarasimhan.instBoundedOrderInterval._proof_3",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "setOf",
   "Quotient",
   "Submodule.hasQuotient",
   "Bool",
   "Ne.symm",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_17",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "and_true",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_19",
   "HarderNarasimhan.impl.μ_nonempty",
   "HarderNarasimhan.impl.prop3d13₂._simp_3",
   "congr",
   "QuotientAddGroup.mk_out_eq_mul",
   "HarderNarasimhan._μ",
   "Preorder.toLE",
   "OrderBot.mk",
   "CompleteLattice.toConditionallyCompleteLattice",
   "propext",
   "OrderTop.mk",
   "IsScalarTower.left",
   "Submodule.mem_comap",
   "Submodule.instTop",
   "AddCommGroup",
   "HarderNarasimhan.instBoundedOrderInterval",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "PrimeSpectrum",
   "LinearOrder.toPartialOrder",
   "CommRing.toRing",
   "AddCommGroup.toDivisionAddCommMonoid",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.μA",
   "Submodule.map_subtype_le",
   "Submodule.completeLattice",
   "HarderNarasimhan.impl.lift_quot",
   "Submodule.smul",
   "HarderNarasimhan.S₀",
   "Submodule.sub_mem_iff_right",
   "HarderNarasimhan.instBoundedOrderInterval._proof_1",
   "bot_lt_top",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_7",
   "And.casesOn",
   "Module.Finite",
   "DFunLike",
   "Prod.mk",
   "Ideal.IsPrime",
   "Iff.mp",
   "Quotient.mk",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "AddMonoidWithOne.toAddMonoid",
   "And.intro",
   "Ring.toAddGroupWithOne",
   "funext",
   "HSub.hSub",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "SetLike.instMembership",
   "Neg.neg",
   "DistribMulAction.toDistribSMul",
   "And",
   "Submodule.Quotient.instSMul'",
   "Submodule.toAddSubgroup",
   "Submodule.Quotient.mk_eq_zero",
   "Iff.mpr",
   "HSMul.hSMul",
   "Nontrivial",
   "NegZeroClass.toZero",
   "id",
   "SetLike.coe_mem",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_13",
   "Submodule.submoduleOf",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_3",
   "Submodule.Quotient.isScalarTower",
   "Submodule.ker_subtype",
   "Subtype",
   "sub_eq_zero",
   "Submodule.Quotient.instSMul._proof_1",
   "Module.Finite.quotient",
   "Submodule.coe_eq_zero",
   "Function.Embedding.toFun",
   "Subtype.partialOrder",
   "SubNegZeroMonoid.toSubNegMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "Iff.intro",
   "Submodule",
   "congrArg",
   "Submodule.Quotient.addCommGroup",
   "HarderNarasimhan.impl.Submodule.mem_map_subtype_iff",
   "Subtype.prop",
   "Ideal",
   "MonoidWithZero.toMonoid",
   "HarderNarasimhan.impl.lift_quot_not_bot",
   "instHSMul",
   "Zero.toOfNat0",
   "HarderNarasimhan.Interval",
   "RelEmbedding.instEmbeddingLike",
   "Finset.min'.congr_simp",
   "HarderNarasimhan.impl.lift_quot_middle",
   "OrderBot.toBot",
   "RelEmbedding",
   "Submodule.instOrderBot",
   "OrderTheory.instLinearOrderDedekindMacNeilleCompletion",
   "Set.instLE",
   "bot_lt_iff_ne_bot",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "Submodule.add",
   "HEq.refl",
   "True",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_16",
   "CommSemiring.toSemiring",
   "HarderNarasimhan.Semistable.semistable",
   "Semiring.toMonoidWithZero",
   "Iff.rfl",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "Eq.casesOn",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_4",
   "Submodule.isScalarTower'",
   "exists_prop_congr",
   "HarderNarasimhan.instNontrivialInterval",
   "IsNoetherianRing",
   "SubNegMonoid.toAddMonoid",
   "Submodule.setLike",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_5",
   "LE.le",
   "Submodule.zero",
   "BEq.beq",
   "Submodule.addCommMonoid"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (N₁ N₂ : HarderNarasimhan.ℒ R M)\n  (hN : N₁ < N₂),\n  HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(N₁, N₂), hN⟩ (HarderNarasimhan.μ R M)) ↔\n    HarderNarasimhan.Semistable (HarderNarasimhan.μ R (↥N₂ ⧸ Submodule.submoduleOf N₁ N₂))",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "And.right",
   "OmegaCompletePartialOrder.toPartialOrder",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Or",
   "PartialOrder",
   "LE.le",
   "Nontrivial",
   "Subtype.mk",
   "Preorder.toLE",
   "CompleteLattice",
   "And.left"],
  "name": "HarderNarasimhan.SlopeLike.slopelike",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : PartialOrder ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.SlopeLike μ] (x y z : ℒ)\n  (h : x < y ∧ y < z),\n  (μ ⟨(x, y), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ < μ ⟨(x, z), ⋯⟩) ∧\n    (μ ⟨(x, y), ⋯⟩ < μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩) ∧\n      (μ ⟨(x, z), ⋯⟩ < μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(y, z), ⋯⟩) ∧\n        (μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ < μ ⟨(y, z), ⋯⟩)",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "FunLike",
   "LinearMap.ker",
   "SetLike.instMembership",
   "SemilinearMapClass",
   "Module",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "DFunLike.coe",
   "OfNat.ofNat",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "Iff",
   "Submodule.mem_bot",
   "Zero.toOfNat0",
   "Eq",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "LinearMap.mem_ker",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_2} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {τ₁₂ : R →+* R₂} {F : Type u_11} [inst_6 : FunLike F M M₂] [inst_7 : SemilinearMapClass F τ₁₂ M M₂] {f : F} {y : M},\n  y ∈ LinearMap.ker f ↔ f y = 0",
  "constCategory": "Theorem"},
 {"references":
  ["Ring.intCast_ofNat",
   "Ring.toNonAssocRing._proof_2",
   "Ring.toNonUnitalRing._proof_3",
   "Ring.toSub",
   "AddGroup.mk",
   "NonUnitalNonAssocSemiring.toMul",
   "Ring.zsmul_succ'",
   "Ring.toNonUnitalRing._proof_2",
   "Ring.toNonAssocRing._proof_4",
   "Ring.toNonUnitalRing._proof_1",
   "Ring.toNonUnitalRing._proof_4",
   "AddCommMonoid.toAddMonoid",
   "Ring.intCast_negSucc",
   "Ring.zsmul_zero'",
   "Ring.sub_eq_add_neg",
   "Semiring.toNatCast",
   "AddCommGroup.mk",
   "Ring.toNonUnitalRing._proof_5",
   "SubNegMonoid.mk",
   "Semiring.toNonUnitalSemiring",
   "Ring.toNeg",
   "Semiring.toOne",
   "Ring.zsmul",
   "Ring.toNonAssocRing._proof_3",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocRing",
   "Ring.zsmul_neg'",
   "Ring.neg_add_cancel",
   "NonUnitalNonAssocRing.mk",
   "Ring.toSemiring",
   "Ring.toIntCast",
   "Ring.toNonAssocRing._proof_1",
   "NonUnitalSemiring.toNonUnitalNonAssocSemiring",
   "NonAssocRing.mk",
   "Ring"],
  "name": "Ring.toNonAssocRing",
  "constType": "{α : Type u} → [Ring α] → NonAssocRing α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Nat",
   "Nat.instSuccAddOrder._proof_1",
   "Nat.instOne",
   "SuccAddOrder",
   "SuccAddOrder.mk",
   "Nat.instSuccOrder",
   "Nat.instPreorder"],
  "name": "Nat.instSuccAddOrder",
  "constType": "SuccAddOrder ℕ",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Decidable",
  "constType": "Prop → Type",
  "constCategory": "Other"},
 {"references":
  ["instLTNat",
   "Finset.range",
   "Finset.card",
   "Finset.card_range",
   "Fintype",
   "Finset.card_le_univ",
   "Nat.instPreorder",
   "Fintype.card",
   "Nat",
   "LE.le.not_gt",
   "Nat.succ",
   "Eq.symm",
   "Nat.lt_succ_self",
   "Infinite.of_not_fintype",
   "Infinite",
   "LT.lt.trans_eq"],
  "name": "instInfiniteNat",
  "constType": "Infinite ℕ",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "Submodule.toAddSubmonoid",
   "SemilinearMapClass",
   "RingHomSurjective",
   "Module",
   "AddCommMonoid.toAddMonoid",
   "DFunLike.coe",
   "Submodule.map._proof_4",
   "Submodule",
   "AddSubsemigroup.mk",
   "AddCommMonoid",
   "Submodule.map._proof_3",
   "Semiring.toNonAssocSemiring",
   "Submodule.map._proof_1",
   "FunLike",
   "AddSubmonoid.mk",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "Submodule.map._proof_2",
   "Set.image",
   "SetLike.coe",
   "AddSubmonoid",
   "Submodule.mk",
   "Submodule.setLike",
   "AddSubmonoid.map",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "Submodule.map",
  "constType":
  "{R : Type u_1} →\n  {R₂ : Type u_3} →\n    {M : Type u_5} →\n      {M₂ : Type u_7} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring R₂] →\n            [inst_2 : AddCommMonoid M] →\n              [inst_3 : AddCommMonoid M₂] →\n                [inst_4 : _root_.Module R M] →\n                  [inst_5 : _root_.Module R₂ M₂] →\n                    {σ₁₂ : R →+* R₂} →\n                      [RingHomSurjective σ₁₂] →\n                        {F : Type u_9} →\n                          [inst_7 : FunLike F M M₂] →\n                            [SemilinearMapClass F σ₁₂ M M₂] → F → Submodule R M → Submodule R₂ M₂",
  "constCategory": "Definition"},
 {"references":
  ["Lean.mkAtom",
   "Lean.Name.mkStr4",
   "Lean.Syntax.node",
   "Lean.Name.mkStr1",
   "Array.push",
   "Lean.Syntax",
   "Array.empty",
   "Lean.SourceInfo.none"],
  "name": "SubNegMonoid.zsmul_zero'._autoParam",
  "constType": "Syntax",
  "constCategory": "Definition"},
 {"references": ["Add", "LE"],
  "name": "CanonicallyOrderedAdd",
  "constType": "(α : Type u_1) → [Add α] → [LE α] → Prop",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Preorder.toLT",
   "SMulZeroClass.toSMul",
   "Subtype.val",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "DistribSMul.toSMulZeroClass",
   "rfl",
   "SetLike.instMembership",
   "Submodule.addCommGroup",
   "DistribMulAction.toDistribSMul",
   "Prod.snd",
   "LinearMap",
   "AddZeroClass.toAddZero",
   "Ring.toSemiring",
   "Prod",
   "Nontrivial",
   "HSMul.hSMul",
   "AddCommGroup.toAddCommMonoid",
   "AddZero.toZero",
   "Submodule.submoduleOf",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.hasQuotient",
   "Subtype",
   "HasQuotient.Quotient",
   "LinearMap.instFunLike",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "AddCommMonoid.toAddMonoid",
   "DFunLike.coe",
   "Prod.fst",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Eq",
   "Submodule.mkQ",
   "CommRing.toCommSemiring",
   "CommSemiring.toSemiring",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "CommRing",
   "LT.lt",
   "CommRing.toRing",
   "Module.toDistribMulAction",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.CP.f2._proof_2",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_1} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }) (x : R)\n  (x_1 : ↥(↑I).2),\n  (Submodule.submoduleOf (↑I).1 (↑I).2).mkQ (x • x_1) = (Submodule.submoduleOf (↑I).1 (↑I).2).mkQ (x • x_1)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Semistable.rec",
   "HarderNarasimhan.Semistable.mk",
   "CompleteSemilatticeInf.toPartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.Semistable.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.Semistable μ → Sort u} →\n                (t : HarderNarasimhan.Semistable μ) →\n                  ((semistable :\n                        ∀ (x : ℒ) (hx : x ≠ ⊥),\n                          ¬HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ > HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "And.intro",
   "funext",
   "forall_congr",
   "HarderNarasimhan.impl.prop2d6₀._simp_1_1",
   "Eq.symm",
   "HarderNarasimhan.impl.prop2d6₀._simp_1_2",
   "sInf_le_sInf",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Prod",
   "HasSubset.Subset",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "id",
   "Eq.mpr",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "congrArg",
   "congr",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Not",
   "Lattice.toSemilatticeInf",
   "Set",
   "lt_of_lt_of_le",
   "exists_prop_congr",
   "LT.lt",
   "Set.instHasSubset",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.μA",
   "le_of_lt",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop2d6₀",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (x y z : ℒ) (h : x < y ∧ y < z),\n  HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.hasQuotient",
   "PartialOrder.toPreorder",
   "HasQuotient.Quotient",
   "LinearMap.instFunLike",
   "Module",
   "LinearMap.mk",
   "Submodule.Quotient.module",
   "AddHom.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Submodule.map",
   "LinearEquiv",
   "DFunLike.coe",
   "Submodule",
   "LinearMap.semilinearMapClass",
   "Submodule.Quotient.addCommGroup",
   "Semiring.toNonAssocSemiring",
   "Submodule.quotientQuotientEquivQuotient._proof_2",
   "LinearMap.quotKerEquivRange._proof_6",
   "RingHom.id",
   "LinearEquiv.mk",
   "Submodule.quotientQuotientEquivQuotientAux._proof_1",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Submodule.quotientQuotientEquivQuotient._proof_5",
   "Preorder.toLE",
   "Submodule.mkQ",
   "Submodule.quotientQuotientEquivQuotientAux",
   "AddCommGroup",
   "LinearMap",
   "RingHomSurjective.ids",
   "Ring.toSemiring",
   "Submodule.quotientQuotientEquivQuotient._proof_4",
   "AddCommMonoid.toAddCommSemigroup",
   "LE.le",
   "RingHomInvPair.ids",
   "Submodule.mapQ",
   "Submodule.completeLattice",
   "AddCommGroup.toAddCommMonoid",
   "LinearMap.quotKerEquivRange._proof_3",
   "Submodule.quotientQuotientEquivQuotient._proof_3",
   "Submodule.quotientQuotientEquivQuotient._proof_1",
   "Ring"],
  "name": "Submodule.quotientQuotientEquivQuotient",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Ring R] →\n      [inst_1 : AddCommGroup M] →\n        [inst_2 : _root_.Module R M] → (S T : Submodule R M) → S ≤ T → ((M ⧸ S) ⧸ Submodule.map S.mkQ T) ≃ₗ[R] M ⧸ T",
  "constCategory": "Definition"},
 {"references": ["Exists", "And", "Eq", "propext", "exists_eq_right"],
  "name": "HarderNarasimhan.impl.lift_quot_not_bot._simp_1_4",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {a' : α}, (∃ a, p a ∧ a = a') = p a'",
  "constCategory": "Theorem"},
 {"references":
  ["SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "le_inf",
   "Min.min",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.instPartialOrderInterval",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.instLatticeInterval._proof_8",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (x x_1 x_2 : HarderNarasimhan.Interval z), x ≤ x_1 → x ≤ x_2 → ↑x ≤ ↑x_1 ⊓ ↑x_2",
  "constCategory": "Theorem"},
 {"references":
  ["MulOneClass.toMulOne",
   "RingHom",
   "MonoidHom.mk",
   "MulOne.toOne",
   "MulZeroOneClass.toMulOneClass",
   "RingHom.id._proof_2",
   "RingHom.id._proof_1",
   "OneHom.mk",
   "RingHom.id._proof_3",
   "RingHom.id._proof_4",
   "NonAssocSemiring",
   "id",
   "RingHom.mk",
   "NonAssocSemiring.toMulZeroOneClass"],
  "name": "RingHom.id",
  "constType": "(α : Type u_5) → [inst : NonAssocSemiring α] → α →+* α",
  "constCategory": "Definition"},
 {"references": ["rfl", "Eq.rec", "Eq"],
  "name": "Eq.symm",
  "constType": "∀ {α : Sort u} {a b : α}, a = b → b = a",
  "constCategory": "Theorem"},
 {"references": ["Add", "AddHom"],
  "name": "AddHom.toFun",
  "constType":
  "{M : Type u_10} → {N : Type u_11} → [inst : Add M] → [inst_1 : Add N] → (M →ₙ+ N) → M → N",
  "constCategory": "Definition"},
 {"references":
  ["CompleteSemilatticeInf.toInfSet",
   "Set.instHasSubset",
   "PartialOrder.toPreorder",
   "HasSubset.Subset",
   "Set",
   "LE.le",
   "InfSet.sInf",
   "CompleteSemilatticeInf.toPartialOrder",
   "IsGLB.mono",
   "Preorder.toLE",
   "isGLB_sInf",
   "CompleteSemilatticeInf"],
  "name": "sInf_le_sInf",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteSemilatticeInf α] {s t : Set α}, s ⊆ t → sInf t ≤ sInf s",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "GeneralizedCoheytingAlgebra.toLattice",
   "PartialOrder.toPreorder",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "SemilatticeSup.toPartialOrder",
   "OrderTop",
   "Preorder.toLE",
   "CoheytingAlgebra"],
  "name": "CoheytingAlgebra.toOrderTop",
  "constType": "{α : Type u_4} → [self : CoheytingAlgebra α] → OrderTop α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "HarderNarasimhan.SlopeLike",
   "Eq.trans",
   "HarderNarasimhan.Stable.mk",
   "HarderNarasimhan.instWeakSlopeLike₁OfSlopeLike",
   "HarderNarasimhan.impl.semistable_of_step_cond₂",
   "Classical.propDecidable",
   "Exists.intro",
   "HarderNarasimhan.impl.stable_of_step_cond₂._simp_1_1",
   "List.instGetElem?NatLtLength",
   "Subtype.val",
   "Subtype.coe_inj",
   "GetElem?.getElem?",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.μBstar",
   "Eq.symm",
   "Eq.ndrec",
   "instLTNat",
   "Exists",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.μmin_res_intvl",
   "HarderNarasimhan.instWellFoundedGTInterval",
   "Eq.mpr",
   "lt_top_iff_ne_top",
   "setOf",
   "AddMonoid.toAddZeroClass",
   "HarderNarasimhan.Semistable",
   "Nat.find",
   "HarderNarasimhan.impl.thm4d21",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.instSlopeLikeIntervalResμ",
   "HarderNarasimhan.Stable",
   "List",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "and_true",
   "HarderNarasimhan.instStrongDescendingChainConditionOfStrongDescendingChainCondition'",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "le_rfl",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "instOfNatNat",
   "congr",
   "WellFoundedGT",
   "HarderNarasimhan.WeakSlopeLike₁",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Nat.instAddMonoid",
   "lt_iff_le_not_ge",
   "Set",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "eq_self",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.μA",
   "inferInstance",
   "Ne",
   "CompleteLattice.toCompleteSemilatticeInf",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "bot_lt_top",
   "HarderNarasimhan.μA_res_intvl",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Membership.mem",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "Iff.mp",
   "HarderNarasimhan.μmax",
   "Nat.instAddCommMonoid",
   "And.intro",
   "HarderNarasimhan.proposition_4_1",
   "funext",
   "List.TFAE",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Nat.instIsOrderedAddMonoid",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "HarderNarasimhan.instStrongDescendingChainCondition'IntervalResμ",
   "Nat.instPartialOrder",
   "lt_of_le_of_lt",
   "And.right",
   "Nat.instStarRing",
   "And",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.instWeakAscendingChainConditionOfWellFoundedGT",
   "Nat",
   "Iff.of_eq",
   "Option",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "List.length",
   "HarderNarasimhan.lt_lt",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "lt_of_le_of_ne",
   "Nat.instAddCancelCommMonoid",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "HarderNarasimhan.μmin",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Not",
   "List.nil",
   "bot_lt_iff_ne_bot",
   "List.TFAE.out",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "exists_prop_congr",
   "sInf_le",
   "LT.lt",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "ne_of_lt",
   "One.toOfNat1",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "Subtype.mk",
   "instLENat",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.stable_of_step_cond₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) [HarderNarasimhan.SlopeLike μ]\n  [sdc : HarderNarasimhan.StrongDescendingChainCondition' μ] (filtration : ℕ → ℒ) (fin_len : ∃ N, filtration N = ⊥)\n  (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i),\n  (∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n      z < filtration i → μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩) →\n    ∀ (i : ℕ) (hi : i < Nat.find fin_len),\n      HarderNarasimhan.Stable (HarderNarasimhan.Resμ ⟨(filtration (i + 1), filtration i), ⋯⟩ μ)",
  "constCategory": "Theorem"},
 {"references": ["FunLike", "outParam"],
  "name": "EmbeddingLike",
  "constType":
  "(F : Sort u_1) → (α : outParam (Sort u_2)) → (β : outParam (Sort u_3)) → [FunLike F α β] → Prop",
  "constCategory": "Other"},
 {"references":
  ["GaloisConnection.lowerAdjoint",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Subtype.instLE",
   "LowerAdjoint.toFun",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "Equiv",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "Or",
   "OrderTheory.instIsTotalDedekindMacNeilleCompletionLe._simp_1",
   "funext",
   "Eq.symm",
   "Eq.rec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "OrderTheory.instIsTotalDedekindMacNeilleCompletionLe._simp_4",
   "Exists",
   "Set.not_subset_iff_exists_mem_notMem",
   "ClosureOperator.IsClosed",
   "CompleteLattice.toLattice",
   "And.right",
   "LinearOrder",
   "And",
   "Set.instMembership",
   "Exists.casesOn",
   "Classical.or_iff_not_imp_left",
   "OrderDual.instPreorder",
   "Iff.of_eq",
   "HasSubset.Subset",
   "Set.instCompleteAtomicBooleanAlgebra",
   "upperBounds",
   "Eq.refl",
   "Iff.mpr",
   "lowerBounds",
   "Classical.byContradiction",
   "id",
   "Eq.mpr",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "OrderDual.toDual",
   "OrderDual",
   "Equiv.instEquivLike",
   "Subtype",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "SemilatticeSup.toPartialOrder",
   "lowerBounds_mono",
   "IsTotal.mk",
   "DFunLike.coe",
   "OrderDual.ofDual",
   "congrArg",
   "instDistribLatticeOfLinearOrder",
   "OrderTheory.DedekindMacNeilleConnection",
   "congr",
   "EquivLike.toFunLike",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Not",
   "OrderTheory.instIsTotalDedekindMacNeilleCompletionLe._simp_3",
   "Lattice.toSemilatticeInf",
   "Set",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "exists_prop_congr",
   "Set.instHasSubset",
   "LT.lt",
   "eq_self",
   "LinearOrder.toPartialOrder",
   "IsTotal",
   "upperBounds_mono",
   "DistribLattice.toLattice",
   "of_eq_true",
   "le_of_lt",
   "LE.le",
   "False",
   "Subtype.mk",
   "Subtype.casesOn",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "OrderTheory.instIsTotalDedekindMacNeilleCompletionLe",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α], IsTotal (OrderTheory.DedekindMacNeilleCompletion α) LE.le",
  "constCategory": "Theorem"},
 {"references":
  ["Iff.trans",
   "inf_le_right._simp_1",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "True",
   "Eq.trans",
   "And",
   "le_inf_iff._simp_1",
   "and_true",
   "true_and",
   "congrArg",
   "SemilatticeInf",
   "le_antisymm_iff",
   "iff_self",
   "of_eq_true",
   "Min.min",
   "congr",
   "Iff",
   "LE.le",
   "Eq",
   "Preorder.toLE",
   "le_refl._simp_1",
   "SemilatticeInf.toPartialOrder"],
  "name": "inf_eq_right",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeInf α] {a b : α}, a ⊓ b = b ↔ b ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["AddRightCancelMonoid.toIsRightCancelAdd",
   "AddRightCancelSemigroup",
   "AddMonoid.toAddSemigroup",
   "AddRightCancelSemigroup.mk",
   "AddRightCancelMonoid",
   "AddRightCancelMonoid.toAddMonoid"],
  "name": "AddRightCancelMonoid.toAddRightCancelSemigroup",
  "constType":
  "{M : Type u} → [self : AddRightCancelMonoid M] → AddRightCancelSemigroup M",
  "constCategory": "Definition"},
 {"references": ["True", "eq_true", "Eq", "trivial"],
  "name": "implies_true",
  "constType": "∀ (α : Sort u), (∀ (a : α), True) = True",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "bot_le",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "PartialOrder",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Exists",
   "instHAdd",
   "lt_of_le_of_lt",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "StrictAnti",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition.wdcc",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : PartialOrder ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.StrongDescendingChainCondition μ]\n  (x : ℕ → ℒ) (saf : StrictAnti x), ∃ N, μ ⟨(⊥, x N), ⋯⟩ ≤ μ ⟨(x (N + 1), x N), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Nat.cast",
   "RelSeries.toFun",
   "Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "Fin",
   "RelSeries",
   "eq_true",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Fin.NatCast.instNatCast",
   "instOfNatNat",
   "RelSeries.length",
   "HarderNarasimhan.IntervalSemistableRel",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.impl.balabala2",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "instNeZeroNatHAdd_1",
   "OfNat.ofNat",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Lattice",
   "Nontrivial",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.balabala2._simp_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (s : RelSeries (HarderNarasimhan.IntervalSemistableRel μ))\n  {i : ℕ}, i + 1 < s.length → (s.toFun ↑(i + 1) < s.toFun ↑(i + 2)) = True",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "Exists",
   "instHAdd",
   "HarderNarasimhan.μA_DescendingChainCondition.rec",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.μA_DescendingChainCondition.mk",
   "StrictAnti",
   "Nat",
   "HarderNarasimhan.μA",
   "Lattice",
   "Nontrivial",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μA_DescendingChainCondition.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.μA_DescendingChainCondition μ → Sort u} →\n                (t : HarderNarasimhan.μA_DescendingChainCondition μ) →\n                  ((μ_dcc :\n                        ∀ (a : ℒ) (f : ℕ → ℒ) (h₁ : ∀ (n : ℕ), f n > a),\n                          StrictAnti f →\n                            ∃ N, ¬HarderNarasimhan.μA μ ⟨(a, f N), ⋯⟩ < HarderNarasimhan.μA μ ⟨(a, f (N + 1)), ⋯⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references": ["AddSemigroup", "AddMonoid"],
  "name": "AddMonoid.toAddSemigroup",
  "constType": "{M : Type u} → [self : AddMonoid M] → AddSemigroup M",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Iff",
  "constType": "Prop → Prop → Prop",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "Submodule.Quotient.module",
   "Membership.mem",
   "HarderNarasimhan.μ",
   "HarderNarasimhan.S",
   "Exists",
   "SetLike.instMembership",
   "Submodule.addCommGroup",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Set.instMembership",
   "Nat",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "ConditionallyCompleteLattice.toLattice",
   "CompleteLattice.toBoundedOrder",
   "Submodule.submoduleOf",
   "associatedPrimes",
   "Submodule.hasQuotient",
   "Subtype",
   "Submodule.instNontrivial",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "Submodule",
   "ExistsUnique.exists",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "CompleteLattice.toConditionallyCompleteLattice",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
   "CommRing.toCommSemiring",
   "Set",
   "instHAdd",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Submodule.setLike",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Submodule.completeLattice",
   "ExistsUnique",
   "HarderNarasimhan.S₀",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_8",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (HNFil : HarderNarasimhan.HarderNarasimhanFiltration (HarderNarasimhan.μ R M)) (n : ℕ),\n  (∃! p,\n      p ∈\n        associatedPrimes R\n          (↥(HNFil.filtration (n + 1 + 1)) ⧸\n            Submodule.submoduleOf (HNFil.filtration (n + 1)) (HNFil.filtration (n + 1 + 1)))) →\n    ∃ x,\n      x ∈\n        associatedPrimes R\n          (↥(HNFil.filtration (n + 1 + 1)) ⧸\n            Submodule.submoduleOf (HNFil.filtration (n + 1)) (HNFil.filtration (n + 1 + 1)))",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "Exists",
   "HarderNarasimhan.CoprimaryFiltration.filtration",
   "Module",
   "Submodule.instTop",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "CommRing",
   "Submodule",
   "IsNoetherianRing",
   "Nat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Nontrivial",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Eq",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.fin_len",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (self : HarderNarasimhan.CoprimaryFiltration R M), ∃ n, self.filtration n = ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["Int.instCommRing",
   "CommRing.toRing",
   "Nat",
   "Ring.toAddGroupWithOne",
   "AddGroupWithOne.toAddMonoidWithOne",
   "CharZero.mk",
   "CharZero",
   "Int.ofNat.inj",
   "Int"],
  "name": "Int.instCharZero",
  "constType": "CharZero ℤ",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Nat.rel_of_forall_rel_succ_of_le",
   "instHAdd",
   "OfNat.ofNat",
   "Nat.instPreorder",
   "HAdd.hAdd",
   "Preorder",
   "Nat",
   "Monotone",
   "instOfNatNat",
   "LE.le",
   "instIsReflLe",
   "instIsTransLe",
   "Preorder.toLE"],
  "name": "monotone_nat_of_le_succ",
  "constType":
  "∀ {α : Type u} [inst : Preorder α] {f : ℕ → α}, (∀ (n : ℕ), f n ≤ f (n + 1)) → Monotone f",
  "constCategory": "Theorem"},
 {"references": ["Lean.Syntax"],
  "name": "autoParam",
  "constType": "Sort u → Syntax → Sort u",
  "constCategory": "Definition"},
 {"references": ["Set", "Finite", "Set.Elem"],
  "name": "Set.Finite",
  "constType": "{α : Type u} → Set α → Prop",
  "constCategory": "Definition"},
 {"references":
  ["CommRing.toRing",
   "Semiring.toNonAssocSemiring",
   "RingHomSurjective",
   "RingHom.id",
   "CommRing",
   "Ring.toSemiring",
   "RingHomSurjective.ids"],
  "name": "HarderNarasimhan.impl.lift_quot._proof_1",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R], RingHomSurjective (RingHom.id R)",
  "constCategory": "Theorem"},
 {"references": ["Quotient", "Setoid", "Setoid.r", "Quot.out"],
  "name": "Quotient.out",
  "constType": "{α : Sort u_1} → {s : Setoid α} → Quotient s → α",
  "constCategory": "Definition"},
 {"references": ["MulOneClass", "MulOne"],
  "name": "MulOneClass.toMulOne",
  "constType": "{M : Type u} → [self : MulOneClass M] → MulOne M",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.SlopeLike",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.impl.thm4d21",
   "Preorder.toLT",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "HarderNarasimhan.μmax",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.μmin",
   "List.TFAE",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "CompleteLinearOrder",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Preorder.toLE",
   "Eq",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "List.nil",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.instBoundedOrderInterval",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "HarderNarasimhan.instNontrivialInterval",
   "BoundedOrder.toOrderBot",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "HarderNarasimhan.instPartialOrderInterval",
   "Ne",
   "Subtype.mk",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.NashEquil_equiv",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) [hμ : HarderNarasimhan.SlopeLike μ]\n  [h₁ : HarderNarasimhan.WeakAscendingChainCondition μ] [h₂ : HarderNarasimhan.StrongDescendingChainCondition μ],\n  [HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl,\n        HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl,\n        HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl,\n        HarderNarasimhan.NashEquilibrium μ].TFAE ∧\n    (HarderNarasimhan.Semistable μ → HarderNarasimhan.NashEquilibrium μ) ∧\n      ((∀ (x : ℒ) (hx : x ≠ ⊥), HarderNarasimhan.WeakAscendingChainCondition (HarderNarasimhan.Resμ ⟨(⊥, x), ⋯⟩ μ)) →\n        HarderNarasimhan.NashEquilibrium μ → HarderNarasimhan.Semistable μ)",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.μ_Admissible",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.μ_Admissible.mk",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "IsTotal",
   "Or",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "WellFoundedGT",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.μ_Admissible.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  ((IsTotal S fun x1 x2 ↦ x1 ≤ x2) ∨ ∀ (I : { p // p.1 < p.2 }), HarderNarasimhan.IsAttained μ I) →\n    HarderNarasimhan.μ_Admissible μ",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "lt_trans",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Membership.mem",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "Classical.propDecidable",
   "bot_le",
   "HarderNarasimhan.impl.HNFil_prop_of_def",
   "Subtype.val",
   "Nat.instAddCommMonoid",
   "And.intro",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Set.instMembership",
   "Prod",
   "HarderNarasimhan.impl.HNFil_of_fin_len",
   "Nat",
   "BoundedOrder.toOrderBot",
   "upperBounds",
   "Nat.instStarOrderedRing",
   "Iff.mpr",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "lt_top_iff_ne_top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "HarderNarasimhan.StI",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.impl.HNFil",
   "Nat.instAddCancelCommMonoid",
   "Prod.fst",
   "Nat.instPreorder",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "Nat.instOne",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "Not",
   "HarderNarasimhan.impl.prop3d7₂",
   "Nat.instAddMonoid",
   "le_top",
   "Lattice.toSemilatticeInf",
   "Set",
   "instHAdd",
   "HarderNarasimhan.μ_Admissible",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Nat.lt_of_succ_lt",
   "lt_add_one",
   "HarderNarasimhan.impl.HNFil_is_strict_mono",
   "One.toOfNat1",
   "HarderNarasimhan.μA",
   "le_of_lt",
   "HarderNarasimhan.Convex_of_Convex_large",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice",
   "Nat.find_min"],
  "name": "HarderNarasimhan.impl.HNFil_μA_pseudo_strict_anti",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (i : ℕ) (hi : i + 1 < Nat.find ⋯),\n  ¬HarderNarasimhan.μA μ ⟨(HarderNarasimhan.impl.HNFil μ i, HarderNarasimhan.impl.HNFil μ (i + 1)), ⋯⟩ ≤\n      HarderNarasimhan.μA μ ⟨(HarderNarasimhan.impl.HNFil μ (i + 1), HarderNarasimhan.impl.HNFil μ (i + 2)), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.Stable",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["Lean.mkAtom",
   "Lean.Name.mkStr4",
   "Lean.Syntax.node",
   "Lean.Name.mkStr1",
   "Array.push",
   "Lean.Syntax",
   "Array.empty",
   "Lean.SourceInfo.none"],
  "name": "LinearOrder.min_def._autoParam",
  "constType": "Syntax",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "OrderTop",
   "LT.lt",
   "PartialOrder",
   "Iff",
   "Top.top",
   "Preorder.toLE",
   "Eq",
   "lt_top_iff_ne_top",
   "Iff.not_left",
   "OrderTop.toTop"],
  "name": "not_lt_top_iff",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderTop α] {a : α}, ¬a < ⊤ ↔ a = ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["IsStrictOrderedRing",
   "Lattice.toSemilatticeInf",
   "Int.instSemiring",
   "Int.instNontrivial",
   "Int.instIsOrderedAddMonoid",
   "Int.mul_pos",
   "IsStrictOrderedRing.of_mul_pos",
   "Int.instZeroLEOneClass",
   "Int.instRing",
   "instLatticeInt",
   "SemilatticeInf.toPartialOrder",
   "Int"],
  "name": "Int.instIsStrictOrderedRing",
  "constType": "IsStrictOrderedRing ℤ",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Nat.find",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Exists",
   "Preorder.toLT",
   "Classical.propDecidable",
   "BoundedOrder",
   "HarderNarasimhan.impl.subseq._proof_2",
   "Bot.bot",
   "HarderNarasimhan.impl.subseq",
   "LT.lt",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.succ",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "OrderBot.toBot",
   "dite",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.subseq.eq_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f : ℕ → ℒ) (atf : ∃ k, f k = ⊥)\n  (n_1 : ℕ),\n  HarderNarasimhan.impl.subseq f atf n_1.succ =\n    if hcond : HarderNarasimhan.impl.subseq f atf n_1 = ⊥ then ⊥ else f (Nat.find ⋯)",
  "constCategory": "Theorem"},
 {"references":
  ["And.intro",
   "Exists",
   "_private.Init.PropLemmas.0.exists_and_left.match_1_1",
   "Iff",
   "And",
   "Exists.intro",
   "_private.Init.PropLemmas.0.exists_and_left.match_1_3",
   "Iff.intro"],
  "name": "exists_and_left",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {b : Prop}, (∃ x, b ∧ p x) ↔ b ∧ ∃ x, p x",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "And.intro",
   "sInf_le_sInf",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Exists",
   "lt_of_le_of_lt",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Exists.casesOn",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "Lattice",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "le_trans",
   "Prod.fst",
   "le_rfl",
   "Preorder.toLE",
   "Eq",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Set",
   "sInf_le",
   "LT.lt",
   "HarderNarasimhan.μA._proof_1",
   "ne_of_lt",
   "HarderNarasimhan.μA",
   "Min.min",
   "le_of_lt",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.lem2d4₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (x w : ℒ) (hxw : ¬x ≤ w) (u : ℒ) (huxw : u ≤ x ⊓ w),\n  HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩ ≤ HarderNarasimhan.μmax μ ⟨(x ⊓ w, x), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["OrderDual",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "Coe",
   "Coe.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "OrderDual.instLT",
   "PartialOrder",
   "HarderNarasimhan.impl.instCoeSubtypeProdLtFstSndOrderDualOfNontrivialOfBoundedOrder_harderNarasimhan._proof_1",
   "Nontrivial",
   "Subtype.mk",
   "Preorder.toLE"],
  "name":
  "HarderNarasimhan.impl.instCoeSubtypeProdLtFstSndOrderDualOfNontrivialOfBoundedOrder_harderNarasimhan",
  "constType":
  "{ℒ : Type u_1} → [Nontrivial ℒ] → [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → Coe { p // p.1 < p.2 } { p // p.1 < p.2 }",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "HarderNarasimhan.S₀_order",
   "Finset",
   "Eq.trans",
   "Submodule.Quotient.module",
   "Singleton.singleton",
   "Set.toFinset_subset_toFinset",
   "LinearMap.toAddHom",
   "Exists.intro",
   "SMulZeroClass.toSMul",
   "Subtype.val",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "AssociatePrimes.mem_iff",
   "RingHom.id",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "AddHom.toFun",
   "HarderNarasimhan.S",
   "LinearMap.ker",
   "Exists",
   "ClosureOperator.IsClosed",
   "Submodule.addCommGroup",
   "OrderTheory.coe'",
   "HarderNarasimhan.impl.prop3d11._simp_1",
   "Prod.snd",
   "LinearMap",
   "Ring.toSemiring",
   "Set.instMembership",
   "Prod",
   "Submodule.comap",
   "HarderNarasimhan.InIntvl",
   "Set.instCompleteAtomicBooleanAlgebra",
   "LinearMap.quotientInfEquivSupQuotient",
   "Eq.refl",
   "Iff",
   "RingHomInvPair.ids",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "Submodule.instMin",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "setOf",
   "DFinsupp.instEquivLikeLinearEquiv",
   "Submodule.hasQuotient",
   "RelEmbedding.toEmbedding",
   "LinearMap.instFunLike",
   "HarderNarasimhan._μ._proof_1",
   "HasQuotient.Quotient",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Submodule.Quotient.instZeroQuotient",
   "HarderNarasimhan.impl.prop3d11._simp_3",
   "AddCommMonoid.toAddMonoid",
   "and_true",
   "Prod.fst",
   "SemilinearEquivClass.instSemilinearMapClass",
   "Ideal.ext",
   "EquivLike.toFunLike",
   "AddCommMagma.toAdd",
   "HarderNarasimhan._μ",
   "map_zero",
   "LinearEquiv.instEquivLike",
   "Preorder.toLE",
   "Eq",
   "propext",
   "CompleteLattice.toConditionallyCompleteLattice",
   "inf_lt_left",
   "LinearExtension",
   "Set",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Set.toFinset",
   "LinearEquiv.toLinearMap",
   "AddCommGroup",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "eq_self",
   "CommRing.toRing",
   "Module.toDistribMulAction",
   "Max.max",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Submodule.completeLattice",
   "HarderNarasimhan.S₀",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "Module.Finite",
   "OrderTheory.DedekindMacNeilleCompletion",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.instLES₀",
   "HarderNarasimhan.ConvexI",
   "Ideal.IsPrime",
   "Prod.mk",
   "Subtype.instLE",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "HarderNarasimhan.μ",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "Subtype.preorder",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "HarderNarasimhan.impl.prop3d11._simp_2",
   "Submodule.subtype",
   "DistribMulActionSemiHomClass.toAddMonoidHomClass",
   "LinearMap.semilinearMapClass",
   "And.intro",
   "Semiring.toNonAssocSemiring",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "DistribSMul.toSMulZeroClass",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "SetLike.instMembership",
   "And.right",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "DistribMulAction.toDistribSMul",
   "And",
   "HarderNarasimhan.TotIntvl",
   "AddZeroClass.toAddZero",
   "Exists.casesOn",
   "LinearEquiv.instSemilinearEquivClass",
   "Finset.instSingleton",
   "Iff.of_eq",
   "HasSubset.Subset",
   "Iff.mpr",
   "HSMul.hSMul",
   "Nontrivial",
   "id",
   "ConditionallyCompleteLattice.toLattice",
   "AddZero.toZero",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "associatedPrimes",
   "Submodule.instNontrivial",
   "Subtype",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Eq.mp",
   "LinearEquiv.map_smul",
   "Submodule.module",
   "SemilatticeSup.toPartialOrder",
   "Function.Embedding.toFun",
   "RingHom.instFunLike",
   "HarderNarasimhan.ConvexI.mk",
   "LinearEquiv",
   "DFunLike.coe",
   "Iff.intro",
   "congrArg",
   "Submodule",
   "LinearEquiv.map_eq_zero_iff",
   "Submodule.Quotient.addCommGroup",
   "instDistribLatticeOfLinearOrder",
   "Ideal",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "AddCommSemigroup.toAddCommMagma",
   "Set.instLE",
   "Not",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "True",
   "CommSemiring.toSemiring",
   "AddMonoidHomClass.toZeroHomClass",
   "IsAssociatedPrime._proof_1",
   "Semiring.toMonoidWithZero",
   "Finset.instHasSubset",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "IsAssociatedPrime",
   "CommRing",
   "exists_prop_congr",
   "LT.lt",
   "Set.instHasSubset",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "of_eq_true",
   "AddCommMonoid.toAddCommSemigroup",
   "Min.min",
   "Submodule.setLike",
   "SemilatticeSup.toMax",
   "LE.le",
   "Subtype.mk",
   "Submodule.addCommMonoid",
   "SemilinearMapClass.distribMulActionSemiHomClass"],
  "name": "HarderNarasimhan.impl.prop3d11",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl (HarderNarasimhan.μ R M)",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Unique",
  "constType": "Sort u → Sort (max 1 u)",
  "constCategory": "Other"},
 {"references":
  ["Lattice.toSemilatticeInf",
   "Finset",
   "True",
   "Eq.trans",
   "Singleton.singleton",
   "Membership.mem",
   "LinearOrder",
   "Finset.singleton_nonempty",
   "congrArg",
   "eq_self",
   "instDistribLatticeOfLinearOrder",
   "DistribLattice.toLattice",
   "Finset.instSingleton",
   "Finset.min'",
   "of_eq_true",
   "Eq.refl",
   "Finset.instMembership",
   "id",
   "Finset.inf'_congr",
   "Eq.rec",
   "Eq",
   "Finset.Nonempty",
   "Finset.inf'"],
  "name": "Finset.min'_singleton",
  "constType":
  "∀ {α : Type u_2} [inst : LinearOrder α] (a : α), {a}.min' ⋯ = a",
  "constCategory": "Theorem"},
 {"references":
  ["Nat", "OfNat", "Nat.cast", "OfNat.mk", "Nat.AtLeastTwo", "NatCast"],
  "name": "instOfNatAtLeastTwo",
  "constType":
  "{R : Type u_1} → {n : ℕ} → [NatCast R] → [n.AtLeastTwo] → OfNat R n",
  "constCategory": "Definition"},
 {"references":
  ["rfl",
   "LT.lt",
   "instLTNat",
   "Nat",
   "Fin.val",
   "Fin.mk",
   "Fin",
   "_private.Init.Prelude.0.Fin.eq_of_val_eq.match_1_1",
   "Eq"],
  "name": "Fin.eq_of_val_eq",
  "constType": "∀ {n : ℕ} {i j : Fin n}, ↑i = ↑j → i = j",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Module",
   "LinearMap",
   "LinearEquiv",
   "RingHomInvPair",
   "Semiring"],
  "name": "LinearEquiv.toLinearMap",
  "constType":
  "{R : Type u_14} →\n  {S : Type u_15} →\n    [inst : Semiring R] →\n      [inst_1 : Semiring S] →\n        {σ : R →+* S} →\n          {σ' : S →+* R} →\n            [inst_2 : RingHomInvPair σ σ'] →\n              [inst_3 : RingHomInvPair σ' σ] →\n                {M : Type u_16} →\n                  {M₂ : Type u_17} →\n                    [inst_4 : AddCommMonoid M] →\n                      [inst_5 : AddCommMonoid M₂] →\n                        [inst_6 : _root_.Module R M] → [inst_7 : _root_.Module S M₂] → (M ≃ₛₗ[σ] M₂) → M →ₛₗ[σ] M₂",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.impl.prop2d8₁I",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.impl.prop2d8₂I",
   "GE.ge",
   "Prod.fst",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "And.intro",
   "Or",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "CompleteLattice.toConditionallyCompleteLattice",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "HarderNarasimhan.IsComparable",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "SemilatticeSup.toMax",
   "HarderNarasimhan.in_TotIntvl",
   "ConditionallyCompleteLattice.toLattice",
   "Subtype.mk",
   "lt_sup_of_lt_left",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_2_8",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Convex μ →\n    ∀ (x y u : ℒ) (h : u < x ∧ u < y),\n      HarderNarasimhan.μA μ ⟨(u, x ⊔ y), ⋯⟩ ≥ HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩ ⊓ HarderNarasimhan.μA μ ⟨(u, y), ⋯⟩ ∧\n        (HarderNarasimhan.IsComparable (HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩) (HarderNarasimhan.μA μ ⟨(u, y), ⋯⟩) ∨\n            HarderNarasimhan.IsAttained μ ⟨(u, x ⊔ y), ⋯⟩ →\n          HarderNarasimhan.μA μ ⟨(u, x ⊔ y), ⋯⟩ ≥ HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩ ∨\n            HarderNarasimhan.μA μ ⟨(u, x ⊔ y), ⋯⟩ ≥ HarderNarasimhan.μA μ ⟨(u, y), ⋯⟩)",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "Not",
   "instLTNat",
   "Nat.find",
   "Exists",
   "Eq.trans",
   "True",
   "DecidablePred",
   "congrArg",
   "LT.lt",
   "Nat.le_find_iff._simp_1",
   "Nat",
   "iff_self",
   "of_eq_true",
   "Nat.succ",
   "Eq.refl",
   "Iff",
   "forall_congr",
   "LE.le",
   "Nat.lt_find_iff._simp_1_1",
   "Nat.lt_find_iff._simp_1_2",
   "instLENat"],
  "name": "Nat.lt_find_iff",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (h : ∃ n, p n) (n : ℕ), n < Nat.find h ↔ ∀ m ≤ n, ¬p m",
  "constCategory": "Theorem"},
 {"references":
  ["not_le_of_gt",
   "LT.lt",
   "Preorder",
   "le_of_lt",
   "le_trans",
   "LE.le",
   "Preorder.toLT",
   "Preorder.toLE",
   "lt_of_le_not_ge"],
  "name": "lt_of_lt_of_le",
  "constType":
  "∀ {α : Type u_1} [inst : Preorder α] {a b c : α}, a < b → b ≤ c → a < c",
  "constCategory": "Theorem"},
 {"references":
  ["True",
   "Eq.trans",
   "instHAdd",
   "add_sub_cancel_right",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "congrArg",
   "HAdd.hAdd",
   "eq_self",
   "SubNegMonoid.toAddMonoid",
   "of_eq_true",
   "SubNegMonoid.toSub",
   "Eq.symm",
   "HSub.hSub",
   "AddGroup",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "instHSub",
   "AddMonoid.toAddZeroClass"],
  "name": "eq_sub_of_add_eq",
  "constType":
  "∀ {G : Type u_3} [inst : AddGroup G] {a b c : G}, a + c = b → a = b - c",
  "constCategory": "Theorem"},
 {"references": ["rfl", "True", "eq_true", "Eq"],
  "name": "eq_self",
  "constType": "∀ {α : Sort u_1} (a : α), (a = a) = True",
  "constCategory": "Theorem"},
 {"references": ["SDiff"],
  "name": "SDiff.sdiff",
  "constType": "{α : Type u} → [self : SDiff α] → α → α → α",
  "constCategory": "Definition"},
 {"references":
  ["implies_congr",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Singleton.singleton",
   "AddCommGroup.toAddGroup",
   "Membership.mem",
   "Submodule.span",
   "SMulZeroClass.toSMul",
   "Semiring.toNonAssocSemiring",
   "iff_self",
   "forall_congr",
   "funext",
   "AddGroup.toSubNegMonoid",
   "Semiring.toModule",
   "Submodule.annihilator",
   "DistribSMul.toSMulZeroClass",
   "Module.mem_support_iff_exists_annihilator._simp_1_2",
   "Exists",
   "SetLike.instMembership",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "DistribMulAction.toDistribSMul",
   "AddZeroClass.toAddZero",
   "Set.instMembership",
   "Eq.refl",
   "Iff",
   "Module.mem_support_iff_exists_annihilator._simp_1_3",
   "HSMul.hSMul",
   "id",
   "NegZeroClass.toZero",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "SetLike.instPartialOrder",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Module.mem_support_iff_exists_annihilator._simp_1_1",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "AddCommMonoid.toAddMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "Ideal",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "PrimeSpectrum.asIdeal",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Module.mem_support_iff'",
   "Not",
   "CommRing.toCommSemiring",
   "True",
   "Set",
   "Module.support",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "CommRing",
   "Set.instSingletonSet",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "Module.toDistribMulAction",
   "of_eq_true",
   "AddCommGroup.toDivisionAddCommMonoid",
   "SubNegMonoid.toAddMonoid",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Ne"],
  "name": "Module.mem_support_iff_exists_annihilator",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  {p : PrimeSpectrum R}, p ∈ Module.support R M ↔ ∃ m, (Submodule.span R {m}).annihilator ≤ p.asIdeal",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "And",
   "Preorder.toLT",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "le_rfl",
   "Prod",
   "LT.lt",
   "And.intro",
   "Subtype.prop",
   "le_of_lt",
   "Lattice",
   "LE.le",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.prop3d4₀func._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] (I : { p // p.1 < p.2 }), (↑I).1 ≤ (↑I).2 ∧ (↑I).2 ≤ (↑I).2",
  "constCategory": "Theorem"},
 {"references":
  ["Exists", "Exists.intro", "Eq", "forall_exists_index", "propext"],
  "name": "forall_exists_index._simp_1",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {q : (∃ x, p x) → Prop}, (∀ (h : ∃ x, p x), q h) = ∀ (x : α) (h : p x), q ⋯",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "PartialOrder",
   "LE.le",
   "Eq",
   "Preorder.toLE",
   "le_antisymm"],
  "name": "eq_of_le_of_ge",
  "constType":
  "∀ {α : Type u_1} [inst : PartialOrder α] {a b : α}, a ≤ b → b ≤ a → a = b",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.μB",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "And.intro",
   "SupSet.sSup",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "sSup_le",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.rec",
   "And.left",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Bot.bot",
   "Set.instMembership",
   "Prod",
   "Exists.casesOn",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "HarderNarasimhan.μmax._proof_1",
   "id",
   "Top.top",
   "HarderNarasimhan.in_TotIntvl",
   "lt_top_iff_ne_top",
   "setOf",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Ne.symm",
   "Subtype",
   "le_trans",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.impl.rmk4d10₀",
   "InfSet.sInf",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "bot_lt_iff_ne_bot",
   "Set",
   "sInf_le",
   "CompleteSemilatticeInf.toInfSet",
   "LT.lt",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.μA",
   "LE.le",
   "le_sSup",
   "CompleteSemilatticeSup.toPartialOrder",
   "le_sInf",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.prop4d11₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl →\n    HarderNarasimhan.μBstar μ ≤ HarderNarasimhan.μAstar μ",
  "constCategory": "Theorem"},
 {"references":
  ["Module",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "Eq",
   "DistribSMul.toSMulZeroClass",
   "Distrib.toAdd",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "AddZeroClass.toAddZero",
   "HAdd.hAdd",
   "Module.toDistribMulAction",
   "AddCommMonoid.toAddCommSemigroup",
   "HSMul.hSMul",
   "Module.add_smul",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "add_smul",
  "constType":
  "∀ {R : Type u_1} {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M] (r s : R)\n  (x : M), (r + s) • x = r • x + s • x",
  "constCategory": "Theorem"},
 {"references": ["Quotient", "Setoid", "Quotient.mk"],
  "name": "Quotient.mk''",
  "constType": "{α : Sort u_1} → {s₁ : Setoid α} → α → Quotient s₁",
  "constCategory": "Definition"},
 {"references":
  ["Quotient.mk''",
   "Submodule.hasQuotient",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.quotientRel",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "Submodule",
   "Ring.toSemiring",
   "Ring"],
  "name": "Submodule.Quotient.mk",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Ring R] → [inst_1 : AddCommGroup M] → [inst_2 : _root_.Module R M] → {p : Submodule R M} → M → M ⧸ p",
  "constCategory": "Definition"},
 {"references":
  ["OrderDual.toDual",
   "OrderDual",
   "Equiv.instEquivLike",
   "Exists",
   "EquivLike.toFunLike",
   "OrderDual.exists",
   "Eq",
   "DFunLike.coe",
   "Equiv",
   "propext"],
  "name": "HarderNarasimhan.impl.dualμAstar_eq_μBstar._simp_1_2",
  "constType":
  "∀ {α : Type u_1} {p : αᵒᵈ → Prop}, (∃ a, p a) = ∃ a, p (OrderDual.toDual a)",
  "constCategory": "Theorem"},
 {"references":
  ["FunLike",
   "RingHom",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Module",
   "outParam",
   "Semiring"],
  "name": "SemilinearMapClass",
  "constType":
  "(F : Type u_14) →\n  {R : outParam (Type u_15)} →\n    {S : outParam (Type u_16)} →\n      [inst : Semiring R] →\n        [inst_1 : Semiring S] →\n          outParam (R →+* S) →\n            (M : outParam (Type u_17)) →\n              (M₂ : outParam (Type u_18)) →\n                [inst_2 : AddCommMonoid M] →\n                  [inst_3 : AddCommMonoid M₂] → [_root_.Module R M] → [_root_.Module S M₂] → [FunLike F M M₂] → Prop",
  "constCategory": "Other"},
 {"references": ["LT.lt", "Eq.rec", "Eq", "LT"],
  "name": "lt_of_lt_of_eq",
  "constType":
  "∀ {α : Type u_1} {a b c : α} [inst : LT α], a < b → b = c → a < c",
  "constCategory": "Theorem"},
 {"references":
  ["Eq.trans",
   "CommSemiring",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "Semiring.toNonAssocSemiring",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "Distrib.toAdd",
   "True",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "CommSemiring.toSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "eq_self",
   "zero_add",
   "of_eq_true",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass"],
  "name": "Mathlib.Tactic.Ring.add_pf_zero_add",
  "constType": "∀ {R : Type u_1} [inst : CommSemiring R] (b : R), 0 + b = b",
  "constCategory": "Theorem"},
 {"references": ["Subtype", "LE.le", "LE.mk", "LE", "Subtype.val"],
  "name": "Subtype.instLE",
  "constType": "{α : Type u} → [LE α] → {P : α → Prop} → LE (Subtype P)",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "Eq.trans",
   "Eq.mp",
   "Membership.mem",
   "Subtype.val",
   "Set.range",
   "Set.Elem",
   "congrArg",
   "Subtype.property",
   "funext",
   "Subtype.exists._simp_1",
   "Finite",
   "Eq",
   "propext",
   "Exists",
   "Set",
   "Set.finite_range",
   "Set.instMembership",
   "exists_prop_congr",
   "Set.Finite.to_subtype",
   "Iff.of_eq",
   "Iff.mpr",
   "Eq.refl",
   "Subtype.mk",
   "Set.Finite",
   "setOf"],
  "name": "Set.Finite.dependent_image",
  "constType":
  "∀ {α : Type u} {β : Type v} {s : Set α},\n  s.Finite → ∀ (F : (i : α) → i ∈ s → β), {y | ∃ x, ∃ (hx : x ∈ s), F x hx = y}.Finite",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists",
   "Nat.instPartialOrder",
   "CompleteLattice.toLattice",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Prod",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.impl.cor3d3",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "HarderNarasimhan.μA",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.corollary_3_3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (S : Type u_2)\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ →\n    (∀ (f : ℕ → ℒ) (h : StrictAnti f), ∃ N, HarderNarasimhan.μA μ ⟨(f (N + 1), f N), ⋯⟩ = ⊤) →\n      HarderNarasimhan.μA_DescendingChainCondition μ",
  "constCategory": "Theorem"},
 {"references":
  ["MulOneClass.toMulOne",
   "StarRing",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Eq.mp",
   "HMul.hMul",
   "MulZeroOneClass.toMulOneClass",
   "StarMul.toInvolutiveStar",
   "AddCommMonoid.toAddMonoid",
   "StarOrderedRing",
   "StarRing.toStarAddMonoid",
   "congrArg",
   "MulOne.toMul",
   "Semiring.toNonAssocSemiring",
   "PartialOrder",
   "star_one",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Preorder.toLE",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "Semiring.toNonUnitalSemiring",
   "NonAssocSemiring.toMulZeroOneClass",
   "Star.star",
   "MulOne.toOne",
   "NonUnitalNonAssocSemiring.toDistrib",
   "StarAddMonoid.toInvolutiveStar",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "ZeroLEOneClass.mk",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Distrib.toMul",
   "mul_one",
   "star_mul_self_nonneg",
   "OfNat.ofNat",
   "ZeroLEOneClass",
   "One.toOfNat1",
   "StarRing.toStarMul",
   "MulZeroClass.toZero",
   "InvolutiveStar.toStar",
   "AddMonoidWithOne.toOne",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "LE.le",
   "NonUnitalSemiring.toNonUnitalNonAssocSemiring",
   "instHMul",
   "Semiring"],
  "name": "instZeroLEOneClass",
  "constType":
  "∀ {R : Type u_1} [inst : Semiring R] [inst_1 : PartialOrder R] [inst_2 : StarRing R] [StarOrderedRing R],\n  ZeroLEOneClass R",
  "constCategory": "Theorem"},
 {"references":
  ["Or.inr",
   "Or.rec",
   "Or.imp_right",
   "Or.inl",
   "Or",
   "Or.imp_left",
   "Iff",
   "Function.comp",
   "Iff.intro"],
  "name": "or_assoc",
  "constType": "∀ {a b c : Prop}, (a ∨ b) ∨ c ↔ a ∨ b ∨ c",
  "constCategory": "Theorem"},
 {"references":
  ["Exists",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "Eq",
   "Preorder.toLE",
   "OrderTop.toTop",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.HarderNarasimhanFiltration μ),\n  ∃ n, self.filtration n = ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "SemilinearMapClass",
   "LinearMap.instFunLike",
   "Module",
   "LinearMap.toAddHom",
   "RingHom.instFunLike",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "SemilinearMapClass.mk",
   "DFunLike.coe",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "MonoidWithZero.toMonoid",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "LinearMap.map_smul'",
   "DistribSMul.toSMulZeroClass",
   "outParam",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "LinearMap",
   "AddZeroClass.toAddZero",
   "Module.toDistribMulAction",
   "AddHom.map_add'",
   "AddCommMonoid.toAddCommSemigroup",
   "MulActionSemiHomClass.mk",
   "AddHomClass.mk",
   "AddZero.toZero",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "LinearMap.semilinearMapClass",
  "constType":
  "∀ {R : Type u_1} {S : Type u_5} {M : Type u_8} {M₃ : Type u_11} [inst : Semiring R] [inst_1 : Semiring S]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₃] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module S M₃]\n  {σ : R →+* S}, SemilinearMapClass (M →ₛₗ[σ] M₃) σ M M₃",
  "constCategory": "Theorem"},
 {"references":
  ["SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Finset",
   "instCommutativeMin_mathlib",
   "OrderTop",
   "instAssociativeMin_mathlib",
   "SemilatticeInf",
   "Min.min",
   "Finset.fold",
   "Top.top",
   "Preorder.toLE",
   "OrderTop.toTop",
   "SemilatticeInf.toPartialOrder"],
  "name": "Finset.inf",
  "constType":
  "{α : Type u_2} → {β : Type u_3} → [inst : SemilatticeInf α] → [OrderTop α] → Finset β → (β → α) → α",
  "constCategory": "Definition"},
 {"references":
  ["Semiring.natCast_succ",
   "Semiring.mul_one",
   "Semiring.natCast_zero",
   "Semiring.toNatCast",
   "Semiring.toOne",
   "NonAssocSemiring",
   "NonUnitalSemiring.toNonUnitalNonAssocSemiring",
   "NonAssocSemiring.mk",
   "Semiring.toNonUnitalSemiring",
   "Semiring.one_mul",
   "Semiring"],
  "name": "Semiring.toNonAssocSemiring",
  "constType": "{α : Type u} → [self : Semiring α] → NonAssocSemiring α",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Or",
  "constType": "Prop → Prop → Prop",
  "constCategory": "Other"},
 {"references": ["Sub"],
  "name": "Sub.mk",
  "constType": "{α : Type u} → (α → α → α) → Sub α",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "top_ne_bot",
   "BoundedOrder",
   "Bot.bot",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "eq_false",
   "Nontrivial",
   "Top.top",
   "False",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "OrderTop.toTop"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_5",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : BoundedOrder α] [Nontrivial α], (⊤ = ⊥) = False",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.find",
   "PartialOrder.toPreorder",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.impl.subseq",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Exists",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.impl.JHFil.match_1",
   "BoundedOrder",
   "HarderNarasimhan.impl.subseq._proof_2",
   "Bot.bot",
   "Unit",
   "LT.lt",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "dite",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.subseq._sunfold",
  "constType":
  "{ℒ : Type u_1} → [Nontrivial ℒ] → [inst : Lattice ℒ] → [inst_1 : BoundedOrder ℒ] → (f : ℕ → ℒ) → (∃ k, f k = ⊥) → ℕ → ℒ",
  "constCategory": "Definition"},
 {"references":
  ["AddLeftCancelSemigroup.mk",
   "AddLeftCancelMonoid",
   "AddMonoid.toAddSemigroup",
   "AddLeftCancelMonoid.toIsLeftCancelAdd",
   "AddLeftCancelSemigroup",
   "AddLeftCancelMonoid.toAddMonoid"],
  "name": "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
  "constType":
  "{M : Type u} → [self : AddLeftCancelMonoid M] → AddLeftCancelSemigroup M",
  "constCategory": "Definition"},
 {"references": ["SubNegMonoid", "AddGroup"],
  "name": "AddGroup.toSubNegMonoid",
  "constType": "{A : Type u} → [self : AddGroup A] → SubNegMonoid A",
  "constCategory": "Definition"},
 {"references": [],
  "name": "CompleteLinearOrder",
  "constType": "Type u_8 → Type u_8",
  "constCategory": "Other"},
 {"references": ["LT"],
  "name": "LT.mk",
  "constType": "{α : Type u} → (α → α → Prop) → LT α",
  "constCategory": "Other"},
 {"references":
  ["rfl",
   "Set",
   "Membership.mem",
   "Exists.intro",
   "Eq",
   "Set.range",
   "Set.instMembership"],
  "name": "Set.mem_range_self",
  "constType":
  "∀ {α : Type u} {ι : Sort u_1} {f : ι → α} (i : ι), f i ∈ Set.range f",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Iff.mp",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.μB",
   "Subtype.val",
   "Subtype.coe_inj",
   "And.intro",
   "SupSet.sSup",
   "PartialOrder",
   "funext",
   "Eq.symm",
   "Eq.rec",
   "And.left",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Exists.casesOn",
   "Prod",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "Eq.refl",
   "Nontrivial",
   "HarderNarasimhan.μmax._proof_1",
   "id",
   "Eq.mpr",
   "HarderNarasimhan.μmin_res_intvl",
   "HarderNarasimhan.lt_lt",
   "setOf",
   "Subtype",
   "le_trans",
   "and_true",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "HarderNarasimhan.Resμ",
   "Iff.intro",
   "Prod.fst",
   "congrArg",
   "Subtype.prop",
   "HarderNarasimhan.μmin",
   "congr",
   "HarderNarasimhan.Interval",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Not",
   "True",
   "Set",
   "HarderNarasimhan.μB_res_intvl._simp_1_2",
   "HarderNarasimhan.instBoundedOrderInterval",
   "exists_prop_congr",
   "LT.lt",
   "eq_self",
   "HarderNarasimhan.instNontrivialInterval",
   "SupSet",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "Ne",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μB_res_intvl",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {I : { p // p.1 < p.2 }}\n  {S : Type u_2} [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} {J : { p // p.1 < p.2 }},\n  HarderNarasimhan.μB (HarderNarasimhan.Resμ I μ) J = HarderNarasimhan.μB μ ⟨(↑(↑J).1, ↑(↑J).2), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["List.IsChain", "List", "List.cons"],
  "name": "List.IsChain.cons_cons",
  "constType":
  "∀ {α : Type u_1} {R : α → α → Prop} {a b : α} {l : List α},\n  R a b → List.IsChain R (b :: l) → List.IsChain R (a :: b :: l)",
  "constCategory": "Other"},
 {"references":
  ["RingHom",
   "LinearMap.instFunLike",
   "Module",
   "Membership.mem",
   "Iff.mp",
   "AddCommMonoid.toAddMonoid",
   "DFunLike.coe",
   "Submodule",
   "Iff.intro",
   "LinearMap.semilinearMapClass",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "LinearMap.ext",
   "Eq.symm",
   "Zero.toOfNat0",
   "Eq.rec",
   "Eq",
   "LinearMap.instZero",
   "LinearMap.ker",
   "SetLike.instMembership",
   "Submodule.instTop",
   "LinearMap",
   "AddZeroClass.toAddZero",
   "LinearMap.ker_zero",
   "OfNat.ofNat",
   "Submodule.setLike",
   "Iff",
   "Top.top",
   "trivial",
   "AddZero.toZero",
   "LinearMap.mem_ker",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "LinearMap.ker_eq_top",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_2} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {τ₁₂ : R →+* R₂} {f : M →ₛₗ[τ₁₂] M₂}, LinearMap.ker f = ⊤ ↔ f = 0",
  "constCategory": "Theorem"},
 {"references":
  ["NonUnitalNonAssocSemiring.toDistrib",
   "True",
   "Eq.trans",
   "Distrib.toMul",
   "CommSemiring",
   "MulZeroClass.toMul",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "CommSemiring.toSemiring",
   "HMul.hMul",
   "MulZeroClass.mul_zero",
   "OfNat.ofNat",
   "congrArg",
   "eq_self",
   "Semiring.toNonAssocSemiring",
   "of_eq_true",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "instHMul",
   "Zero.toOfNat0",
   "Eq"],
  "name": "Mathlib.Tactic.Ring.mul_zero",
  "constType": "∀ {R : Type u_1} [inst : CommSemiring R] (a : R), a * 0 = 0",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "HarderNarasimhan.CoprimaryFiltration.piecewise_coprimary",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "HarderNarasimhan.CoprimaryFiltration.filtration",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Submodule.addCommGroup",
   "PrimeSpectrum.mk",
   "LinearMap",
   "Set.instMembership",
   "Nat",
   "Nontrivial",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "HarderNarasimhan.CoprimaryFiltration.fin_len",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "Submodule.hasQuotient",
   "Nat.find",
   "associatedPrimes",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "ExistsUnique.exists",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "instDistribLatticeOfLinearOrder",
   "Ideal",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "instHAdd",
   "Set",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Submodule.instTop",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "CommRing",
   "Exists.choose",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "PrimeSpectrum",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.strict_mono_associated_prime",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (self : HarderNarasimhan.CoprimaryFiltration R M) (n : ℕ) (hn : n + 1 < Nat.find ⋯),\n  { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.impl.instμ_Admissible",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration",
   "Preorder.toLT",
   "Unique.mk",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "WellFoundedGT",
   "HarderNarasimhan.Convex",
   "CompleteLinearOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Unique",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "Lattice",
   "Nontrivial",
   "HarderNarasimhan.instUniqueHarderNarasimhanFiltration._proof_1"],
  "name": "HarderNarasimhan.instUniqueHarderNarasimhanFiltration",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        [WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [inst_4 : CompleteLinearOrder S] →\n              {μ : { p // p.1 < p.2 } → S} →\n                [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] →\n                  [hμcvx : HarderNarasimhan.Convex μ] → Unique (HarderNarasimhan.HarderNarasimhanFiltration μ)",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "LT.lt",
   "instLTNat",
   "Nat",
   "instOfNatNat",
   "instHAdd",
   "Nat.succ",
   "Nat.le_refl",
   "OfNat.ofNat"],
  "name": "Nat.lt_add_one",
  "constType": "∀ (n : ℕ), n < n + 1",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "Eq.trans",
   "HarderNarasimhan.semistableI",
   "Exists.intro",
   "Membership.mem.out",
   "HarderNarasimhan.S₂I",
   "Subtype.val",
   "HarderNarasimhan.S₁I",
   "SupSet.sSup",
   "HarderNarasimhan.S₁I._proof_1",
   "CompleteSemilatticeInf.toPartialOrder",
   "Subtype.coe_eta",
   "Eq.symm",
   "Eq.ndrec",
   "rfl",
   "Exists",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "implies_true",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Iff",
   "Eq.refl",
   "Lattice",
   "HarderNarasimhan.μmax._proof_1",
   "Top.top",
   "Set.ext",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "HarderNarasimhan.Semistable",
   "HarderNarasimhan.impl.semistableI_iff._simp_1_4",
   "setOf",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "le_rfl",
   "congr",
   "InfSet.sInf",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.impl.semistableI_iff._simp_1_10",
   "propext",
   "Set",
   "HarderNarasimhan.instBoundedOrderInterval",
   "lt_of_eq_of_lt",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.μA",
   "SupSet",
   "Ne",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice",
   "And.casesOn",
   "InfSet",
   "PartialOrder.toPreorder",
   "lt_of_lt_of_eq",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Iff.mp",
   "GT.gt",
   "HarderNarasimhan.μmax",
   "And.intro",
   "forall_congr",
   "funext",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "And.right",
   "And",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "Exists.casesOn",
   "Subtype.coe_eq_of_eq_mk",
   "Iff.of_eq",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "HarderNarasimhan.lt_lt",
   "HarderNarasimhan.StI",
   "Subtype",
   "Eq.mp",
   "le_trans",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "Iff.intro",
   "congrArg",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.semistable_iff",
   "Not",
   "Lattice.toSemilatticeInf",
   "True",
   "Prod.mk.eta",
   "exists_prop_congr",
   "LT.lt",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.instNontrivialInterval",
   "of_eq_true",
   "ne_of_lt",
   "le_of_lt",
   "HarderNarasimhan.μA.congr_simp",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "Subtype.mk",
   "OrderTop.toTop",
   "Subtype.coe_ne_coe"],
  "name": "HarderNarasimhan.impl.semistableI_iff",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.semistableI μ I ↔ HarderNarasimhan.Semistable (HarderNarasimhan.Resμ I μ)",
  "constCategory": "Theorem"},
 {"references": ["Unique", "Unique.toInhabited", "Eq", "Inhabited.default"],
  "name": "Unique.uniq",
  "constType": "∀ {α : Sort u} (self : Unique α) (a : α), a = default",
  "constCategory": "Theorem"},
 {"references": ["Exists", "Exists.rec", "Exists.intro"],
  "name": "Exists.casesOn",
  "constType":
  "∀ {α : Sort u} {p : α → Prop} {motive : Exists p → Prop} (t : Exists p), (∀ (w : α) (h : p w), motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "Subtype.property",
   "Subtype.ext",
   "Subtype.mk",
   "Eq.rec",
   "Eq",
   "Subtype.val"],
  "name": "Subtype.coe_eq_of_eq_mk",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {a : { a // p a }} {b : α} (h : ↑a = b), a = ⟨b, ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Multiset.instSingleton",
   "Finset.mk",
   "Finset",
   "Singleton.singleton",
   "Singleton.mk",
   "Multiset.nodup_singleton",
   "Multiset",
   "Singleton"],
  "name": "Finset.instSingleton",
  "constType": "{α : Type u_1} → Singleton α (Finset α)",
  "constCategory": "Definition"},
 {"references":
  ["True",
   "LE.le",
   "LE",
   "bot_le",
   "eq_true",
   "OrderBot.toBot",
   "Eq",
   "Bot.bot",
   "OrderBot"],
  "name": "HarderNarasimhan.impl.subseq_prop3._simp_1_6",
  "constType":
  "∀ {α : Type u} [inst : LE α] [inst_1 : OrderBot α] {a : α}, (⊥ ≤ a) = True",
  "constCategory": "Theorem"},
 {"references":
  ["Real.instMonoidWithZero",
   "Real",
   "MonoidWithZero.toMonoid",
   "Monoid",
   "inferInstance"],
  "name": "Real.instMonoid",
  "constType": "Monoid ℝ",
  "constCategory": "Definition"},
 {"references":
  ["Submodule.hasQuotient",
   "Submodule.Quotient.mk",
   "SetLike.instMembership",
   "HasQuotient.Quotient",
   "Module",
   "Membership.mem",
   "Submodule.Quotient.instZeroQuotient",
   "AddCommGroup",
   "Submodule.Quotient.mk_eq_zero",
   "OfNat.ofNat",
   "Ring.toSemiring",
   "Submodule",
   "Submodule.setLike",
   "AddCommGroup.toAddCommMonoid",
   "Zero.toOfNat0",
   "Eq",
   "propext",
   "Ring"],
  "name": "HarderNarasimhan.impl.annihilator_lift._simp_1_2",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} {x : M} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M), (Submodule.Quotient.mk x = 0) = (x ∈ p)",
  "constCategory": "Theorem"},
 {"references":
  ["LE.le.ge_iff_eq'",
   "PartialOrder.toPreorder",
   "Iff",
   "PartialOrder",
   "LE.le",
   "bot_le",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Bot.bot",
   "OrderBot"],
  "name": "le_bot_iff",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderBot α] {a : α}, a ≤ ⊥ ↔ a = ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["Lean.mkAtom",
   "Lean.Name.mkStr4",
   "Lean.Syntax.node",
   "Lean.Name.mkStr1",
   "Array.push",
   "Lean.Syntax",
   "Array.empty",
   "Lean.SourceInfo.none"],
  "name": "SubNegMonoid.sub_eq_add_neg._autoParam",
  "constType": "Syntax",
  "constCategory": "Definition"},
 {"references":
  ["instLTNat",
   "Iff.mp",
   "Nat.le_pred_iff_lt",
   "Nat.pred",
   "OfNat.ofNat",
   "LT.lt",
   "Nat",
   "instSubNat",
   "instOfNatNat",
   "LE.le",
   "HSub.hSub",
   "instHSub",
   "instLENat"],
  "name": "Nat.lt_of_le_sub_one",
  "constType": "∀ {m n : ℕ}, 0 < m → n ≤ m - 1 → n < m",
  "constCategory": "Theorem"},
 {"references":
  ["DivInvMonoid.toInv",
   "GroupWithZero.toDivisionMonoid._proof_1",
   "GroupWithZero.toDivInvMonoid",
   "GroupWithZero.toDiv",
   "GroupWithZero.zpow_zero'",
   "GroupWithZero",
   "GroupWithZero.zpow_succ'",
   "GroupWithZero.zpow_neg'",
   "GroupWithZero.toDivisionMonoid._proof_2",
   "DivInvMonoid.mk",
   "DivisionMonoid",
   "_private.Mathlib.Algebra.GroupWithZero.Basic.0.inv_eq_of_mul",
   "GroupWithZero.zpow",
   "MonoidWithZero.toMonoid",
   "GroupWithZero.toMonoidWithZero",
   "DivisionMonoid.mk",
   "GroupWithZero.div_eq_mul_inv"],
  "name": "GroupWithZero.toDivisionMonoid",
  "constType": "{G₀ : Type u_2} → [GroupWithZero G₀] → DivisionMonoid G₀",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "And.intro",
   "instDecidableAnd._proof_2",
   "Decidable.isFalse",
   "Decidable",
   "And",
   "instDecidableAnd._proof_1",
   "instDecidableAnd.match_1",
   "Decidable.isTrue"],
  "name": "instDecidableAnd",
  "constType":
  "{p q : Prop} → [dp : Decidable p] → [dq : Decidable q] → Decidable (p ∧ q)",
  "constCategory": "Definition"},
 {"references": ["Nat", "NatCast.natCast", "NatCast"],
  "name": "Nat.cast",
  "constType": "{R : Type u} → [NatCast R] → ℕ → R",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "LT.lt",
   "instLTNat",
   "Nat.find",
   "Nat",
   "Exists",
   "LE.le",
   "DecidablePred",
   "Eq",
   "Nat.lt_find_iff",
   "instLENat",
   "propext"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_25",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (h : ∃ n, p n) (n : ℕ), (n < Nat.find h) = ∀ m ≤ n, ¬p m",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Preorder.toLT",
   "bot_le",
   "Subtype.val",
   "IsGreatest",
   "And.intro",
   "Or",
   "HarderNarasimhan.impl.prop3d8₁'",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "HarderNarasimhan.StI",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "Prod.fst",
   "Or.inl",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Lattice.toSemilatticeInf",
   "le_top",
   "HarderNarasimhan.μ_Admissible",
   "HarderNarasimhan.impl.HNFil._proof_1",
   "HarderNarasimhan.μ_Admissible.μ_adm",
   "LT.lt",
   "Or.casesOn",
   "IsTotal",
   "Nat.succ",
   "HarderNarasimhan.Convex_of_Convex_large",
   "Nat.below",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil._proof_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (n : ℕ) (x : Nat.below n.succ) (htop : ¬x.1 = ⊤),\n  ∃ s, IsGreatest (HarderNarasimhan.StI μ ⟨(x.1, ⊤), ⋯⟩) s",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.impl.prop3d4₀func",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "WellFoundedGT",
   "Eq.rec",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.prop3d4₀func.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [h : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S),\n  μ = μ_1 →\n    ∀ (I : { p // p.1 < p.2 }) (k k_1 : ℕ),\n      k = k_1 → HarderNarasimhan.impl.prop3d4₀func μ I k = HarderNarasimhan.impl.prop3d4₀func μ_1 I k_1",
  "constCategory": "Theorem"},
 {"references":
  ["HAdd.hAdd",
   "Neg.neg",
   "instHAdd",
   "AddMonoid.toAddSemigroup",
   "Neg",
   "AddMonoid",
   "AddSemigroup.toAdd"],
  "name": "SubNegMonoid.sub'",
  "constType": "{G : Type u} → [AddMonoid G] → [Neg G] → G → G → G",
  "constCategory": "Definition"},
 {"references":
  ["le_refl",
   "Nat.find",
   "Exists",
   "Nat.find_le_iff",
   "And",
   "DecidablePred",
   "Exists.intro",
   "Nat.instPreorder",
   "And.intro",
   "Nat",
   "Iff.mpr",
   "LE.le",
   "instLENat"],
  "name": "Nat.find_le",
  "constType":
  "∀ {n : ℕ} {p : ℕ → Prop} [inst : DecidablePred p] {h : ∃ n, p n}, p n → Nat.find h ≤ n",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.find",
   "Subtype",
   "PartialOrder.toPreorder",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "LT.lt",
   "Prod",
   "Nat",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "instLENat",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.strict_mono",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.HarderNarasimhanFiltration μ)\n  (i j : ℕ), i < j → j ≤ Nat.find ⋯ → self.filtration i < self.filtration j",
  "constCategory": "Theorem"},
 {"references":
  ["Distrib.toAdd",
   "True",
   "Eq.trans",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "CommSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "CommSemiring.toSemiring",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "HAdd.hAdd",
   "eq_self",
   "Semiring.toNonAssocSemiring",
   "of_eq_true",
   "add_assoc",
   "AddMonoid.toAddSemigroup",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "AddSemigroup.toAdd"],
  "name": "Mathlib.Tactic.Ring.add_pf_add_lt",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {a₂ b c : R} (a₁ : R), a₂ + b = c → a₁ + a₂ + b = a₁ + c",
  "constCategory": "Theorem"},
 {"references": ["WellFounded", "IsWellFounded"],
  "name": "IsWellFounded.wf",
  "constType":
  "∀ {α : Type u} {r : α → α → Prop} [self : IsWellFounded α r], WellFounded r",
  "constCategory": "Theorem"},
 {"references": ["SMul", "CommSemiring", "Algebra", "Semiring"],
  "name": "Algebra.toSMul",
  "constType":
  "{R : Type u} → {A : Type v} → {inst : CommSemiring R} → {inst_1 : Semiring A} → [self : Algebra R A] → SMul R A",
  "constCategory": "Definition"},
 {"references":
  ["FunLike",
   "EmbeddingLike.apply_eq_iff_eq",
   "EmbeddingLike",
   "Eq",
   "DFunLike.coe",
   "propext"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_1",
  "constType":
  "∀ {F : Sort u_1} {α : Sort u_2} {β : Sort u_3} [inst : FunLike F α β] [i : EmbeddingLike F α β] (f : F) {x y : α},\n  (f x = f y) = (x = y)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "CompleteSemilatticeInf.toPartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.Semistable.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x : ℒ) (hx : x ≠ ⊥), ¬HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ > HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩) →\n    HarderNarasimhan.Semistable μ",
  "constCategory": "Other"},
 {"references": ["LE.le", "LE"],
  "name": "IsMax",
  "constType": "{α : Type u_1} → [LE α] → α → Prop",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "instLTNat",
   "_private.Init.Data.Nat.Basic.0.Nat.zero_lt_of_lt.match_1_1",
   "instHAdd",
   "Nat.brecOn",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_trans",
   "Nat",
   "instOfNatNat",
   "Nat.succ",
   "Nat.below",
   "Nat.lt_succ_self"],
  "name": "Nat.zero_lt_of_lt",
  "constType": "∀ {a b : ℕ}, a < b → 0 < b",
  "constCategory": "Theorem"},
 {"references":
  ["PrimeSpectrum", "Ideal", "CommSemiring.toSemiring", "CommSemiring"],
  "name": "PrimeSpectrum.asIdeal",
  "constType":
  "{R : Type u_1} → [inst : CommSemiring R] → PrimeSpectrum R → Ideal R",
  "constCategory": "Definition"},
 {"references":
  ["PosSMulStrictMono",
   "smul_lt_smul_of_pos_left",
   "Preorder.toLT",
   "OfNat.ofNat",
   "Iff.intro",
   "LT.lt",
   "SMul",
   "Preorder",
   "Iff",
   "PosSMulReflectLT",
   "HSMul.hSMul",
   "instHSMul",
   "Zero.toOfNat0",
   "Zero",
   "lt_of_smul_lt_smul_left",
   "LT.lt.le"],
  "name": "smul_lt_smul_iff_of_pos_left",
  "constType":
  "∀ {α : Type u_1} {β : Type u_2} {a : α} {b₁ b₂ : β} [inst : SMul α β] [inst_1 : Preorder α] [inst_2 : Preorder β]\n  [inst_3 : Zero α] [PosSMulStrictMono α β] [PosSMulReflectLT α β], 0 < a → (a • b₁ < a • b₂ ↔ b₁ < b₂)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "lt_trans",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "bot_le",
   "Subtype.val",
   "Equiv",
   "Or",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "Eq.rec",
   "Exists",
   "lt_of_le_of_lt",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.impl.prop4d1₂",
   "Bot.bot",
   "Nat.lt_add_one",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "OrderDual.instBoundedOrder",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "OrderDual",
   "OrderDual.toDual",
   "Subtype",
   "Equiv.instEquivLike",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.impl.dualμAstar_eq_μBstar",
   "DFunLike.coe",
   "Nat.instPreorder",
   "Prod.fst",
   "OrderDual.instNontrivial",
   "Subtype.prop",
   "instOfNatNat",
   "OrderDual.instLT",
   "OrderDual.instCompleteLattice",
   "EquivLike.toFunLike",
   "OrderBot.toBot",
   "OrderDual.instPartialOrder",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.impl.h₁_dual_of_h₁",
   "instHAdd",
   "HarderNarasimhan.impl.dualμBstar_eq_μAstar",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "StrictAnti",
   "HarderNarasimhan.impl.h₂_dual_of_h₂",
   "LE.le",
   "Subtype.mk",
   "CompleteLattice",
   "HarderNarasimhan.impl.instCoeSubtypeProdOrderDualLtFstSndOfNontrivialOfBoundedOrder_harderNarasimhan._proof_1"],
  "name": "HarderNarasimhan.impl.prop4d3₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (∀ (x : ℕ → ℒ) (saf : StrictAnti x), ∃ N, μ ⟨(⊥, x N), ⋯⟩ ≤ μ ⟨(x (N + 1), x N), ⋯⟩) →\n    (∀ (z : { p // p.1 < p.2 }) (hz : ⊥ < (↑z).1),\n        μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ z ∨ μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ ⟨(⊥, (↑z).1), hz⟩) →\n      HarderNarasimhan.μAstar μ ≤ HarderNarasimhan.μBstar μ",
  "constCategory": "Theorem"},
 {"references": ["False"],
  "name": "Not",
  "constType": "Prop → Prop",
  "constCategory": "Definition"},
 {"references": ["List"],
  "name": "List.nil",
  "constType": "{α : Type u} → List α",
  "constCategory": "Other"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.Stable.mk",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.Stable",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "HarderNarasimhan.Stable.rec",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.Stable.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.Stable μ → Sort u} →\n                (t : HarderNarasimhan.Stable μ) →\n                  ([toSemistable : HarderNarasimhan.Semistable μ] →\n                      (stable :\n                          ∀ (x : ℒ) (hx : x ≠ ⊥),\n                            x ≠ ⊤ → HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ ≠ HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩) →\n                        motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["Submodule.Quotient.mk",
   "Submodule.hasQuotient",
   "HasQuotient.Quotient",
   "Module",
   "LinearMap.mk",
   "Submodule.Quotient.module",
   "AddHom.mk",
   "AddCommGroup",
   "LinearMap",
   "Submodule.mkQ._proof_1",
   "Ring.toSemiring",
   "Submodule",
   "Submodule.mkQ._proof_2",
   "Submodule.Quotient.addCommGroup",
   "Semiring.toNonAssocSemiring",
   "AddCommMonoid.toAddCommSemigroup",
   "RingHom.id",
   "AddCommGroup.toAddCommMonoid",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Ring"],
  "name": "Submodule.mkQ",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Ring R] → [inst_1 : AddCommGroup M] → [inst_2 : _root_.Module R M] → (p : Submodule R M) → M →ₗ[R] M ⧸ p",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "Exists",
   "Nat.instPartialOrder",
   "CompleteLattice.toLattice",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Prod",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition'.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) →\n    HarderNarasimhan.StrongDescendingChainCondition' μ",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "Eq.trans",
   "_private.Init.Data.Nat.Basic.0.Nat.add_le_of_le_sub.match_1_1",
   "congrArg",
   "Nat.eq_add_of_sub_eq",
   "congr",
   "HSub.hSub",
   "Eq.symm",
   "Eq",
   "Nat.le.intro",
   "Exists",
   "True",
   "instHAdd",
   "Nat.add_comm",
   "HAdd.hAdd",
   "eq_self",
   "Nat",
   "instSubNat",
   "of_eq_true",
   "Nat.le.dest",
   "LE.le",
   "id",
   "Eq.mpr",
   "instHSub",
   "instLENat",
   "Nat.add_left_comm"],
  "name": "Nat.add_le_of_le_sub",
  "constType": "∀ {a b c : ℕ}, b ≤ c → a ≤ c - b → a + b ≤ c",
  "constCategory": "Theorem"},
 {"references":
  ["ZeroHomClass",
   "FunLike",
   "AddZero",
   "outParam",
   "AddMonoidHomClass",
   "AddZero.toZero"],
  "name": "AddMonoidHomClass.toZeroHomClass",
  "constType":
  "∀ {F : Type u_10} {M : outParam (Type u_11)} {N : outParam (Type u_12)} {inst : AddZero M} {inst_1 : AddZero N}\n  {inst_2 : FunLike F M N} [self : AddMonoidHomClass F M N], ZeroHomClass F M N",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.cast",
   "Eq.trans",
   "CommSemiring",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "Semiring.toNonAssocSemiring",
   "congr",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "Distrib.toAdd",
   "True",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "CommSemiring.toSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Mathlib.Tactic.Ring.cast_pos.match_1_1",
   "add_zero",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "eq_self",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "of_eq_true",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "Nat.rawCast",
   "AddZero.toZero",
   "Mathlib.Meta.NormNum.IsNat",
   "AddMonoid.toAddZeroClass"],
  "name": "Mathlib.Tactic.Ring.cast_pos",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {a : R} {n : ℕ}, Mathlib.Meta.NormNum.IsNat a n → a = n.rawCast + 0",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.CoprimaryFiltration.noConfusion",
   "instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Submodule.instBot",
   "Nontrivial",
   "HarderNarasimhan.CoprimaryFiltration.mk",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Submodule",
   "Nat.instPreorder",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "HarderNarasimhan.CoprimaryFiltration",
   "instOfNatNat",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Submodule.instTop",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.mk.noConfusion",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] →\n                (P : Sort u) →\n                  (filtration : ℕ → Submodule R M) →\n                    (monotone : Monotone filtration) →\n                      (first_eq_bot : filtration 0 = ⊥) →\n                        (fin_len : ∃ n, filtration n = ⊤) →\n                          (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                            (piecewise_coprimary :\n                                ∀ n < Nat.find fin_len,\n                                  HarderNarasimhan.Coprimary R\n                                    (↥(filtration (n + 1)) ⧸ (filtration n).submoduleOf (filtration (n + 1)))) →\n                              (strict_mono_associated_prime :\n                                  ∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len),\n                                    { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }) →\n                                (filtration' : ℕ → Submodule R M) →\n                                  (monotone' : Monotone filtration') →\n                                    (first_eq_bot' : filtration' 0 = ⊥) →\n                                      (fin_len' : ∃ n, filtration' n = ⊤) →\n                                        (strict_mono' :\n                                            ∀ (i j : ℕ),\n                                              i < j → j ≤ Nat.find fin_len' → filtration' i < filtration' j) →\n                                          (piecewise_coprimary' :\n                                              ∀ n < Nat.find fin_len',\n                                                HarderNarasimhan.Coprimary R\n                                                  (↥(filtration' (n + 1)) ⧸\n                                                    (filtration' n).submoduleOf (filtration' (n + 1)))) →\n                                            (strict_mono_associated_prime' :\n                                                ∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len'),\n                                                  { asIdeal := ⋯.choose, isPrime := ⋯ } <\n                                                    { asIdeal := ⋯.choose, isPrime := ⋯ }) →\n                                              { filtration := filtration, monotone := monotone,\n                                                    first_eq_bot := first_eq_bot, fin_len := fin_len,\n                                                    strict_mono := strict_mono,\n                                                    piecewise_coprimary := piecewise_coprimary,\n                                                    strict_mono_associated_prime := strict_mono_associated_prime } =\n                                                  { filtration := filtration', monotone := monotone',\n                                                    first_eq_bot := first_eq_bot', fin_len := fin_len',\n                                                    strict_mono := strict_mono',\n                                                    piecewise_coprimary := piecewise_coprimary',\n                                                    strict_mono_associated_prime := strict_mono_associated_prime' } →\n                                                (filtration = filtration' → P) → P",
  "constCategory": "Definition"},
 {"references":
  ["LinearMap.toSpanSingleton",
   "CommRing.toCommSemiring",
   "Exists",
   "LinearMap.ker",
   "LinearMap.instFunLike",
   "Module",
   "Ideal.IsPrime",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "IsAssociatedPrime._proof_1",
   "And",
   "AddCommGroup",
   "LinearMap",
   "CommRing",
   "Semiring.toNonAssocSemiring",
   "Ideal",
   "RingHom.id",
   "AddCommGroup.toAddCommMonoid",
   "Semiring.toModule",
   "Eq"],
  "name": "IsAssociatedPrime",
  "constType":
  "{R : Type u_1} → [inst : CommRing R] → Ideal R → (M : Type u_2) → [inst_1 : AddCommGroup M] → [_root_.Module R M] → Prop",
  "constCategory": "Definition"},
 {"references":
  ["Set.mem_singleton_iff",
   "Set",
   "Singleton.singleton",
   "Membership.mem",
   "Eq",
   "Set.instSingletonSet",
   "propext",
   "Set.instMembership"],
  "name": "HarderNarasimhan.impl.associated_primes_quot_koqcl._simp_1_1",
  "constType": "∀ {α : Type u} {a b : α}, (a ∈ {b}) = (a = b)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.Stable.mk",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.Stable",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "HarderNarasimhan.Stable.rec",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.Stable.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.Stable μ → Sort u} →\n                (t : HarderNarasimhan.Stable μ) →\n                  ([toSemistable : HarderNarasimhan.Semistable μ] →\n                      (stable :\n                          ∀ (x : ℒ) (hx : x ≠ ⊥),\n                            x ≠ ⊤ → HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ ≠ HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩) →\n                        motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["Real.instCommSemiring",
   "Real",
   "CommSemiring.toSemiring",
   "inferInstance",
   "Semiring"],
  "name": "Real.semiring",
  "constType": "Semiring ℝ",
  "constCategory": "Definition"},
 {"references":
  ["CompleteSemilatticeInf.toInfSet",
   "PartialOrder.toPreorder",
   "CompleteSemilatticeInf.sInf_le",
   "Set",
   "InfSet.sInf",
   "CompleteSemilatticeInf.toPartialOrder",
   "LE.le",
   "Membership.mem",
   "Preorder.toLE",
   "Set.instMembership",
   "CompleteSemilatticeInf"],
  "name": "sInf_le",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteSemilatticeInf α] {s : Set α} {a : α}, a ∈ s → sInf s ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Not",
   "not_lt_of_ge",
   "LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "Iff",
   "le_of_not_gt",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Preorder.toLE",
   "Iff.intro"],
  "name": "not_lt",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, ¬a < b ↔ b ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.Quotient.mk",
   "Submodule.hasQuotient",
   "PartialOrder.toPreorder",
   "HasQuotient.Quotient",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Membership.mem",
   "Submodule.Quotient.instZeroQuotient",
   "Preorder.toLT",
   "Exists.intro",
   "congrArg",
   "Submodule",
   "SetLike.exists_of_lt",
   "Zero.toOfNat0",
   "Eq",
   "Nontrivial.mk",
   "Not",
   "SetLike.instMembership",
   "Exists",
   "Submodule.Quotient.mk_eq_zero._simp_1",
   "Submodule.instTop",
   "And",
   "AddCommGroup",
   "OfNat.ofNat",
   "Ring.toSemiring",
   "LT.lt",
   "Exists.casesOn",
   "Submodule.setLike",
   "Nontrivial",
   "id",
   "Top.top",
   "Submodule.completeLattice",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "Ne",
   "And.casesOn",
   "Ring"],
  "name": "Submodule.Quotient.nontrivial_of_lt_top",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M],\n  ∀ p < ⊤, Nontrivial (M ⧸ p)",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Module",
   "Eq.refl",
   "Nontrivial",
   "CommSemiring.toSemiring",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "Eq",
   "CommRing",
   "Module.Finite"],
  "name": "HarderNarasimhan.ℒ.congr_simp",
  "constType":
  "∀ (R : Type u_1) [inst : CommRing R] [inst_1 : IsNoetherianRing R] (M : Type u_2) [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  HarderNarasimhan.ℒ R M = HarderNarasimhan.ℒ R M",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "And.intro",
   "Or.inl",
   "Or",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "And.left",
   "Not",
   "bot_lt_iff_ne_bot",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Bot.bot",
   "not_le_of_gt",
   "Or.casesOn",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "lt_top_iff_ne_top",
   "OrderTop.toTop",
   "HarderNarasimhan.SlopeLike.slopelike",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.rmk4d15",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.SlopeLike μ →\n    ∀ (x : ℒ) (hx : x ≠ ⊥ ∧ x ≠ ⊤),\n      μ ⟨(⊥, x), ⋯⟩ ≤ μ HarderNarasimhan.TotIntvl ∨ ¬μ HarderNarasimhan.TotIntvl ≤ μ ⟨(x, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Ring.toNonAssocRing",
   "IsOrderedRing.toIsOrderedAddMonoid",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "PartialOrder",
   "SubNegMonoid.toSub",
   "HSub.hSub",
   "Zero.toOfNat0",
   "AddGroup.toSubNegMonoid",
   "Preorder.toLE",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "IsOrderedAddMonoid.toAddLeftMono",
   "OfNat.ofNat",
   "Ring.toSemiring",
   "IsOrderedRing",
   "AddGroupWithOne.toAddGroup",
   "AddCommMonoid.toAddCommSemigroup",
   "sub_nonpos_of_le",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "LE.le",
   "covariant_swap_add_of_covariant_add",
   "instHSub",
   "Ring"],
  "name": "Mathlib.Tactic.Linarith.sub_nonpos_of_le",
  "constType":
  "∀ {α : Type u} [inst : Ring α] [inst_1 : PartialOrder α] [IsOrderedRing α] {a b : α}, a ≤ b → a - b ≤ 0",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.StI",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "Prod.fst",
   "IsGreatest",
   "HarderNarasimhan.impl.HNFil._proof_3",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.impl.HNFil._proof_4",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Exists.choose",
   "LT.lt",
   "Prod",
   "Nat",
   "Nat.succ",
   "Eq.refl",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Subtype.mk",
   "dite",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil.eq_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (n : ℕ),\n  HarderNarasimhan.impl.HNFil μ n.succ =\n    if htop : HarderNarasimhan.impl.HNFil μ n = ⊤ then ⊤\n    else\n      let I' := ⟨(HarderNarasimhan.impl.HNFil μ n, ⊤), ⋯⟩;\n      ⋯.choose",
  "constCategory": "Theorem"},
 {"references": ["Lattice"],
  "name": "IsModularLattice",
  "constType": "(α : Type u_2) → [Lattice α] → Prop",
  "constCategory": "Other"},
 {"references":
  ["LT.lt",
   "Preorder",
   "False.elim",
   "lt_irrefl",
   "Iff",
   "Preorder.toLT",
   "False",
   "Iff.intro"],
  "name": "lt_self_iff_false",
  "constType": "∀ {α : Type u_2} [inst : Preorder α] (x : α), x < x ↔ False",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.Stable",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "HarderNarasimhan.Semistable",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.Stable.toSemistable",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.Stable μ],\n  HarderNarasimhan.Semistable μ",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Exists",
   "False",
   "_private.Init.PropLemmas.0.exists_false.match_1_1"],
  "name": "exists_false",
  "constType": "∀ {α : Sort u_1}, ¬∃ _a, False",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "HAdd.hAdd",
   "instHAdd",
   "Add",
   "CovariantClass",
   "Function.swap",
   "LT"],
  "name": "AddRightStrictMono",
  "constType": "(M : Type u_1) → [Add M] → [LT M] → Prop",
  "constCategory": "Definition"},
 {"references":
  ["le_top",
   "True",
   "LE.le",
   "Top.top",
   "LE",
   "eq_true",
   "OrderTop",
   "Eq",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_8",
  "constType":
  "∀ {α : Type u} [inst : LE α] [inst_1 : OrderTop α] {a : α}, (a ≤ ⊤) = True",
  "constCategory": "Theorem"},
 {"references":
  ["Finset",
   "Set.mem_toFinset",
   "Set",
   "Membership.mem",
   "Finset.instMembership",
   "Set.toFinset",
   "Eq",
   "Fintype",
   "propext",
   "Set.Elem",
   "Set.instMembership"],
  "name": "HarderNarasimhan.impl.prop3d12p1._simp_1_1",
  "constType":
  "∀ {α : Type u_1} {s : Set α} [inst : Fintype ↑s] {a : α}, (a ∈ s.toFinset) = (a ∈ s)",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "Eq.trans",
   "Exists.intro",
   "Subtype.val",
   "HarderNarasimhan.impl.smart_helper",
   "HarderNarasimhan.NashEquilibrium",
   "SupSet.sSup",
   "HarderNarasimhan.μBstar",
   "Eq.symm",
   "HarderNarasimhan.impl.prop4d1₁",
   "Exists",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Lattice",
   "HarderNarasimhan.μmax._proof_1",
   "Top.top",
   "Set.ext",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "HarderNarasimhan.Semistable",
   "setOf",
   "Ne.symm",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "congr",
   "InfSet.sInf",
   "HarderNarasimhan.WeakSlopeLike₁",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice.toConditionallyCompleteLattice",
   "propext",
   "HarderNarasimhan.NashEquilibrium.nash_eq",
   "Set",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "HarderNarasimhan.instBoundedOrderInterval",
   "eq_self",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.μA",
   "SupSet",
   "Ne",
   "CompleteLattice.toCompleteSemilatticeInf",
   "bot_lt_top",
   "CompleteLattice",
   "InfSet",
   "HarderNarasimhan.WeakSlopeLike₁.wsl₁",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Iff.mp",
   "bot_le",
   "HarderNarasimhan.μB",
   "HarderNarasimhan.μmax",
   "And.intro",
   "HarderNarasimhan.WeakAscendingChainCondition.wacc",
   "funext",
   "forall_congr",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.impl.prop4d20._simp_1_1",
   "And.right",
   "And",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "Exists.casesOn",
   "Iff.of_eq",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "HarderNarasimhan.lt_lt",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "Iff.intro",
   "congrArg",
   "LE.le.not_gt",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Semistable.mk",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "exists_prop_congr",
   "LT.lt",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.instNontrivialInterval",
   "of_eq_true",
   "LE.le",
   "le_sSup",
   "HarderNarasimhan.instPartialOrderInterval",
   "Subtype.mk",
   "ConditionallyCompleteLattice.toSupSet",
   "OrderTop.toTop",
   "Subtype.coe_ne_coe"],
  "name": "HarderNarasimhan.impl.prop4d20",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (∀ (x : ℒ) (hx : x ≠ ⊥), HarderNarasimhan.WeakAscendingChainCondition (HarderNarasimhan.Resμ ⟨(⊥, x), ⋯⟩ μ)) →\n    (∀ (x : ℒ) (hx : x ≠ ⊥), HarderNarasimhan.WeakSlopeLike₁ (HarderNarasimhan.Resμ ⟨(⊥, x), ⋯⟩ μ)) →\n      HarderNarasimhan.NashEquilibrium μ → HarderNarasimhan.Semistable μ",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "List.rec",
   "List.getLastD",
   "List.getLastD_mem_cons",
   "List.Mem.head",
   "Eq.trans",
   "Eq.mp",
   "Iff.mp",
   "eq_true",
   "List.tfae_singleton._simp_1",
   "List",
   "and_true",
   "List.getLast?",
   "Iff.intro",
   "congrArg",
   "And.intro",
   "congr",
   "forall_congr",
   "List.TFAE",
   "List.IsChain.singleton._simp_1",
   "Eq",
   "List.getLastD_cons",
   "List.cons",
   "List.getLastD_eq_getLast?",
   "List.tfae_of_cycle._simp_1_2",
   "List.nil",
   "List.IsChain",
   "True",
   "And.right",
   "And",
   "Option.getD",
   "Function.comp",
   "implies_true",
   "and_self",
   "List.tfae_of_cycle._simp_1_1",
   "of_eq_true",
   "Iff",
   "Eq.refl",
   "List.tfae_of_cycle._simp_1_3",
   "id",
   "Eq.mpr",
   "implies_congr_ctx",
   "List.isChain_cons_cons._simp_1",
   "And.casesOn"],
  "name": "List.tfae_of_cycle",
  "constType":
  "∀ {a b : Prop} {l : List Prop},\n  List.IsChain (fun x1 x2 ↦ x1 → x2) (a :: b :: l) → (l.getLastD b → a) → (a :: b :: l).TFAE",
  "constCategory": "Theorem"},
 {"references": ["And.intro", "forall_and_index", "And", "Eq", "propext"],
  "name": "forall_and_index._simp_1",
  "constType":
  "∀ {p q : Prop} {r : p ∧ q → Prop}, (∀ (h : p ∧ q), r h) = ∀ (hp : p) (hq : q), r ⋯",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "And.right",
   "OmegaCompletePartialOrder.toPartialOrder",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Or",
   "PartialOrder",
   "LE.le",
   "Nontrivial",
   "HarderNarasimhan.SlopeLike.mk",
   "Subtype.mk",
   "Preorder.toLE",
   "CompleteLattice",
   "And.left"],
  "name": "HarderNarasimhan.SlopeLike.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.SlopeLike μ → Sort u} →\n                ((slopelike :\n                      ∀ (x y z : ℒ) (h : x < y ∧ y < z),\n                        (μ ⟨(x, y), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ < μ ⟨(x, z), ⋯⟩) ∧\n                          (μ ⟨(x, y), ⋯⟩ < μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩) ∧\n                            (μ ⟨(x, z), ⋯⟩ < μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(y, z), ⋯⟩) ∧\n                              (μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ < μ ⟨(y, z), ⋯⟩)) →\n                    motive ⋯) →\n                  (t : HarderNarasimhan.SlopeLike μ) → motive t",
  "constCategory": "Other"},
 {"references": ["Eq.symm", "Eq.rec", "Eq"],
  "name": "HarderNarasimhan.impl.smart_helper",
  "constType": "∀ {α : Type u_1} {a b c d : α}, a = b → b = c → c = d → a = d",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "And.intro",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "HarderNarasimhan.WeakSlopeLike₂.wsl₂",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.impl.prop4d3₂",
   "HarderNarasimhan.impl.prop4d3₁",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.StrongDescendingChainCondition.wdcc",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.WeakSlopeLike₂",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_4_3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.StrongDescendingChainCondition μ →\n    HarderNarasimhan.WeakSlopeLike₂ μ →\n      HarderNarasimhan.μBstar μ = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl ∧\n        HarderNarasimhan.μAstar μ ≤ HarderNarasimhan.μBstar μ",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI.convex",
   "HarderNarasimhan.ConvexI",
   "HarderNarasimhan.Convex.convex",
   "Preorder.toLT",
   "HarderNarasimhan.ConvexI.mk",
   "Prod.fst",
   "Iff.intro",
   "HarderNarasimhan.Convex.mk",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "Iff",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.in_TotIntvl",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ ↔ HarderNarasimhan.Convex μ",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "HEq.refl",
   "HarderNarasimhan.CoprimaryFiltration.filtration",
   "Module",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "CommRing",
   "Eq.casesOn",
   "Submodule",
   "Iff.intro",
   "HarderNarasimhan.CoprimaryFiltration.ext",
   "IsNoetherianRing",
   "Nat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Iff",
   "Eq.refl",
   "Nontrivial",
   "Eq.symm",
   "HEq",
   "AddCommGroup.toAddCommMonoid",
   "Eq.ndrec",
   "Eq",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.ext_iff",
  "constType":
  "∀ {R : Type u_1} {inst : CommRing R} {inst_1 : IsNoetherianRing R} {M : Type u_2} {inst_2 : Nontrivial M}\n  {inst_3 : AddCommGroup M} {inst_4 : _root_.Module R M} {inst_5 : Module.Finite R M}\n  {x y : HarderNarasimhan.CoprimaryFiltration R M}, x = y ↔ x.filtration = y.filtration",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.le_trans", "Nat", "Nat.le_succ", "Nat.succ", "LE.le", "instLENat"],
  "name": "Nat.le_succ_of_le",
  "constType": "∀ {n m : ℕ}, n ≤ m → n ≤ m.succ",
  "constCategory": "Theorem"},
 {"references": ["Set", "SupSet"],
  "name": "SupSet.sSup",
  "constType": "{α : Type u_1} → [self : SupSet α] → Set α → α",
  "constCategory": "Definition"},
 {"references":
  ["Nat.cast",
   "Eq.trans",
   "CommSemiring",
   "HMul.hMul",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "Mathlib.Tactic.Ring.add_overlap_pf_zero._simp_1_3",
   "Semiring.toNonAssocSemiring",
   "instOfNatNat",
   "congr",
   "MonoidWithZero.toMonoid",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "instHPow",
   "Distrib.toAdd",
   "True",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "Mathlib.Meta.NormNum.IsNat.mk",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "CommSemiring.toSemiring",
   "Distrib.toMul",
   "Semiring.toMonoidWithZero",
   "MulZeroClass.mul_zero",
   "AddZeroClass.toAddZero",
   "HPow.hPow",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "eq_self",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "of_eq_true",
   "Monoid.toNatPow",
   "MulZeroClass.toZero",
   "Nat.cast_zero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "instHMul",
   "Mathlib.Tactic.Ring.add_overlap_pf_zero.match_1_1",
   "Distrib.leftDistribClass",
   "AddZero.toZero",
   "Mathlib.Meta.NormNum.IsNat",
   "AddMonoid.toAddZeroClass"],
  "name": "Mathlib.Tactic.Ring.add_overlap_pf_zero",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {a b : R} (x : R) (e : ℕ),\n  Mathlib.Meta.NormNum.IsNat (a + b) 0 → Mathlib.Meta.NormNum.IsNat (x ^ e * a + x ^ e * b) 0",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Submodule.instNontrivial",
   "Module",
   "HarderNarasimhan.μ",
   "HarderNarasimhan.HarderNarasimhanFiltration.first_eq_bot",
   "instOfNatNat",
   "OrderBot.toBot",
   "Preorder.toLE",
   "HarderNarasimhan.S",
   "Eq",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
   "CompleteLattice.toConditionallyCompleteLattice",
   "SemilatticeInf.toPartialOrder",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "Bot.bot",
   "OfNat.ofNat",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat",
   "IsNoetherianRing",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.S₀",
   "CompleteLattice.toBoundedOrder",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_4",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_1} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (HNFil : HarderNarasimhan.HarderNarasimhanFiltration (HarderNarasimhan.μ R M)), HNFil.filtration 0 = ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "Nat.casesOn",
   "Nat.succ",
   "instOfNatNat",
   "Unit.unit",
   "OfNat.ofNat",
   "Unit"],
  "name": "HarderNarasimhan.impl.HNFil.match_1",
  "constType":
  "(motive : ℕ → Sort u_1) → (k : ℕ) → (Unit → motive 0) → ((n : ℕ) → motive n.succ) → motive k",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Iff.trans",
   "PartialOrder.toPreorder",
   "or_comm",
   "Or",
   "Iff",
   "PartialOrder",
   "LE.le",
   "Preorder.toLT",
   "Eq",
   "Preorder.toLE",
   "le_iff_lt_or_eq"],
  "name": "le_iff_eq_or_lt",
  "constType":
  "∀ {α : Type u_2} [inst : PartialOrder α] {a b : α}, a ≤ b ↔ a = b ∨ a < b",
  "constCategory": "Theorem"},
 {"references": ["HEq.refl", "HEq.rec", "HEq"],
  "name": "HEq.casesOn",
  "constType":
  "{α : Sort u} →\n  {a : α} →\n    {motive : {β : Sort u} → (a_1 : β) → a ≍ a_1 → Sort u_1} →\n      {β : Sort u} → {a_1 : β} → (t : a ≍ a_1) → motive a ⋯ → motive a_1 t",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "Subtype.val",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "HarderNarasimhan.Affine.mk",
   "HarderNarasimhan.Interval",
   "HarderNarasimhan.Affine",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.Affine.affine",
   "Lattice.toSemilatticeInf",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.instNontrivialInterval",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instAffineIntervalResμ",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} [haff : HarderNarasimhan.Affine μ] {I : { p // p.1 < p.2 }},\n  HarderNarasimhan.Affine (HarderNarasimhan.Resμ I μ)",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "Module",
   "LinearMap.instZero._proof_1",
   "LinearMap.mk",
   "AddHom.mk",
   "LinearMap.instZero._proof_2",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "LinearMap",
   "OfNat.ofNat",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Zero.mk",
   "AddCommMonoid.toAddCommSemigroup",
   "Zero.toOfNat0",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "Zero",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Pi.instZero",
   "Semiring"],
  "name": "LinearMap.instZero",
  "constType":
  "{R₁ : Type u_2} →\n  {R₂ : Type u_3} →\n    {M : Type u_8} →\n      {M₂ : Type u_10} →\n        [inst : Semiring R₁] →\n          [inst_1 : Semiring R₂] →\n            [inst_2 : AddCommMonoid M] →\n              [inst_3 : AddCommMonoid M₂] →\n                [inst_4 : _root_.Module R₁ M] →\n                  [inst_5 : _root_.Module R₂ M₂] → {σ₁₂ : R₁ →+* R₂} → Zero (M →ₛₗ[σ₁₂] M₂)",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Preorder.toLT",
   "Classical.propDecidable",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "Fin",
   "Exists.intro",
   "And.intro",
   "Fin.val",
   "HarderNarasimhan.JordanHolderFiltration",
   "CompleteLinearOrder",
   "RelSeries.mk",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.JordanHolderFiltration.strict_anti",
   "Exists",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "HarderNarasimhan.instNonemptyJordanHolderFiltrationOfWellFoundedGTOfFiniteTotalPayoffOfSlopeLikeOfSemistableOfStrongDescendingChainCondition'",
   "Fin.castSucc",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.JordanHolderFiltration.step_cond₂",
   "Nonempty",
   "Prod.snd",
   "Bot.bot",
   "Nat.lt_add_one",
   "Prod",
   "Nat.find_spec",
   "RelSeries.last",
   "Nat",
   "BoundedOrder.toOrderBot",
   "RelSeries.head",
   "HarderNarasimhan.JordanHolderRel",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.JordanHolderFiltration.step_cond₁",
   "Fin.succ",
   "HarderNarasimhan.Semistable",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "RelSeries",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "Fin.is_le",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "WellFoundedGT",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "Fin.toNat",
   "HarderNarasimhan.JordanHolderFiltration.first_eq_top",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.JordanHolderRel._proof_1",
   "Nonempty.some",
   "OfNat.ofNat",
   "CompletelyDistribLattice.toCompleteLattice",
   "LT.lt",
   "HAdd.hAdd",
   "inferInstance",
   "Subtype.mk",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "Fin.isLt",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.exists_JordanHolderSeries",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S} [hftp : HarderNarasimhan.FiniteTotalPayoff μ]\n  [hsl : HarderNarasimhan.SlopeLike μ] [hst : HarderNarasimhan.Semistable μ]\n  [hwdcc' : HarderNarasimhan.StrongDescendingChainCondition' μ], ∃ s, s.head = ⊤ ∧ s.last = ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["Neg.neg",
   "instHAdd",
   "SubNegMonoid.toNeg",
   "add_neg_cancel",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "congrArg",
   "sub_eq_add_neg",
   "HAdd.hAdd",
   "SubNegMonoid.toAddMonoid",
   "Eq.refl",
   "SubNegMonoid.toSub",
   "id",
   "HSub.hSub",
   "AddGroup",
   "Eq.mpr",
   "Zero.toOfNat0",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "instHSub",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass"],
  "name": "sub_self",
  "constType": "∀ {G : Type u_1} [inst : AddGroup G] (a : G), a - a = 0",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "lt_sup_of_lt_right",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Subtype.instLE",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "sup_le",
   "Membership.mem.out",
   "Subtype.val",
   "HarderNarasimhan.S₂I",
   "Set.Elem",
   "HarderNarasimhan.S₁I",
   "And.intro",
   "Or",
   "Eq.symm",
   "IsTotal.total",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Exists",
   "Exists.choose_spec",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.IsComparable",
   "Set.instMembership",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "Subtype",
   "HarderNarasimhan.StI",
   "OmegaCompletePartialOrder.toPartialOrder",
   "SemilatticeSup.toPartialOrder",
   "IsTotal.mk",
   "lt_of_le_of_ne",
   "HarderNarasimhan.impl.prop2d8₂I",
   "Prod.fst",
   "le_rfl",
   "Subtype.prop",
   "Or.inl",
   "WellFoundedGT",
   "sup_le_iff",
   "Eq",
   "Preorder.toLE",
   "Lattice.toSemilatticeInf",
   "eq_of_le_of_not_lt",
   "Set",
   "Exists.choose",
   "le_sup_of_le_left",
   "Or.casesOn",
   "LT.lt",
   "IsTotal",
   "Max.max",
   "ne_of_lt",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "SemilatticeSup.toMax",
   "Ne",
   "Subtype.mk",
   "Subtype.casesOn",
   "lt_sup_of_lt_left",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d8₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.ConvexI I μ →\n    ((IsTotal S fun x1 x2 ↦ x1 ≤ x2) ∨\n        ∀ (z : ℒ) (hzI : HarderNarasimhan.InIntvl I z) (hz : (↑I).1 ≠ z),\n          HarderNarasimhan.IsAttained μ ⟨((↑I).1, z), ⋯⟩) →\n      IsTotal ↑(HarderNarasimhan.StI μ I) fun x1 x2 ↦ x1 ≤ x2",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Decidable",
   "GetElem.getElem",
   "Option.some",
   "congrArg",
   "LawfulGetElem",
   "GetElem?.getElem?",
   "dif_pos",
   "Option.none",
   "Option",
   "GetElem?",
   "id",
   "GetElem?.toGetElem",
   "LawfulGetElem.getElem?_def",
   "Eq.mpr",
   "Eq",
   "dite",
   "Decidable.isTrue"],
  "name": "getElem?_pos",
  "constType":
  "∀ {cont : Type u_1} {idx : Type u_2} {elem : Type u_3} {dom : cont → idx → Prop} [inst : GetElem? cont idx elem dom]\n  [LawfulGetElem cont idx elem dom] (c : cont) (i : idx) (h : dom c i), c[i]? = some c[i]",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "BoundedOrder",
   "Bot.bot",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "eq_false",
   "Nontrivial",
   "Top.top",
   "False",
   "OrderBot.toBot",
   "bot_ne_top",
   "Preorder.toLE",
   "Eq",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.semistable_iff._simp_1_7",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : BoundedOrder α] [Nontrivial α], (⊥ = ⊤) = False",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Subtype",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Subtype.instLE",
   "OrderTheory.coe'._proof_1",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "PartialOrder",
   "Preorder.toLE",
   "Set.instLE",
   "OrderTheory.coe'._proof_3",
   "Function.Embedding.mk",
   "RelEmbedding.mk",
   "Set",
   "ClosureOperator.IsClosed",
   "OrderTheory.coe'._proof_2",
   "OrderEmbedding",
   "Set.Iic",
   "Set.instCompleteAtomicBooleanAlgebra",
   "LE.le",
   "Subtype.mk",
   "Function.Injective",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "OrderTheory.coe'",
  "constType":
  "{α : Type u_1} → [inst : PartialOrder α] → α ↪o OrderTheory.DedekindMacNeilleCompletion α",
  "constCategory": "Definition"},
 {"references": ["Not", "Set", "Set.Finite"],
  "name": "Set.Infinite",
  "constType": "{α : Type u} → Set α → Prop",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Prod",
  "constType": "Type u → Type v → Type (max u v)",
  "constCategory": "Other"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "HarderNarasimhan.FiniteTotalPayoff.mk",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "CompleteLattice.toLattice",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "HarderNarasimhan.FiniteTotalPayoff.rec",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toBoundedOrder",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.FiniteTotalPayoff.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.FiniteTotalPayoff μ → Sort u} →\n                (t : HarderNarasimhan.FiniteTotalPayoff μ) →\n                  ((fin_tot_payoff : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "Exists",
   "SetLike.instMembership",
   "RingHomSurjective",
   "SemilinearMapClass",
   "Module",
   "Submodule.map",
   "Membership.mem",
   "And",
   "Iff.rfl",
   "DFunLike.coe",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "Iff",
   "Eq",
   "Semiring"],
  "name": "Submodule.mem_map",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} [inst_6 : RingHomSurjective σ₁₂] {F : Type u_9} [inst_7 : FunLike F M M₂]\n  [inst_8 : SemilinearMapClass F σ₁₂ M M₂] {f : F} {p : Submodule R M} {x : M₂},\n  x ∈ Submodule.map f p ↔ ∃ y ∈ p, f y = x",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "HMod.hMod",
   "Nat",
   "Nat.succ",
   "Nat.mod_eq_iff_lt",
   "Iff",
   "Nat.succ_ne_zero",
   "instHMod",
   "Eq",
   "Nat.instMod"],
  "name": "Nat.mod_succ_eq_iff_lt",
  "constType": "∀ {m n : ℕ}, m % n.succ = m ↔ m < n.succ",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Singleton.singleton",
   "AddSubmonoid.closure",
   "eq_top_mono",
   "Membership.mem",
   "Nat.instMulOneClass",
   "HMul.hMul",
   "Exists.intro",
   "StarOrderedRing",
   "StarRing.toStarAddMonoid",
   "iff_self",
   "funext",
   "CompleteSemilatticeInf.toPartialOrder",
   "AddSubmonoid.instCompleteLattice",
   "SetLike.instMembership",
   "AddSubmonoid.instTop",
   "Exists",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Nat.instPartialOrder",
   "StarAddMonoid.toInvolutiveStar",
   "AddSubmonoid.instSetLike",
   "Nat.instStarRing",
   "And",
   "Nat.instNonUnitalSemiring",
   "true_and",
   "Nat.instStarOrderedRing._simp_1",
   "Set.instMembership",
   "Nat.instCanonicallyOrderedAdd",
   "Nat",
   "HasSubset.Subset",
   "Iff.mpr",
   "Iff",
   "InvolutiveStar.toStar",
   "Top.top",
   "instHMul",
   "CompleteLattice.toBoundedOrder",
   "one_mul",
   "AddMonoid.toAddZeroClass",
   "StarOrderedRing.mk",
   "AddCommMonoid.toAddMonoid",
   "Set.range",
   "Submonoid.mem_top._simp_4",
   "congrArg",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "congr",
   "instMulNat",
   "Preorder.toLE",
   "Eq",
   "Star.star",
   "Distrib.toAdd",
   "Nat.instAddMonoid",
   "True",
   "instHAdd",
   "Set",
   "TrivialStar.star_trivial",
   "Distrib.toMul",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Nat.instTrivialStar",
   "Set.instSingletonSet",
   "Set.singleton_subset_iff",
   "OfNat.ofNat",
   "Nat.addSubmonoidClosure_one",
   "HAdd.hAdd",
   "Set.instHasSubset",
   "of_eq_true",
   "AddSubmonoid",
   "AddSubmonoid.closure_mono",
   "LE.le",
   "NonUnitalSemiring.toNonUnitalNonAssocSemiring",
   "CompleteLattice.toCompleteSemilatticeInf",
   "Set.mem_range"],
  "name": "Nat.instStarOrderedRing",
  "constType": "StarOrderedRing ℕ",
  "constCategory": "Theorem"},
 {"references":
  ["Set", "LE.le", "Membership.mem", "LE", "Set.instMembership", "setOf"],
  "name": "lowerBounds",
  "constType": "{α : Type u_1} → [LE α] → Set α → Set α",
  "constCategory": "Definition"},
 {"references":
  ["Not", "Or", "Iff", "Classical.propDecidable", "Decidable.imp_iff_not_or"],
  "name": "imp_iff_not_or",
  "constType": "∀ {a b : Prop}, a → b ↔ ¬a ∨ b",
  "constCategory": "Theorem"},
 {"references":
  ["Set",
   "Iff",
   "funext",
   "Membership.mem",
   "Eq",
   "propext",
   "Set.instMembership"],
  "name": "Set.ext",
  "constType":
  "∀ {α : Type u} {a b : Set α}, (∀ (x : α), x ∈ a ↔ x ∈ b) → a = b",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "bot_le",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "PartialOrder",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "OrderBot.toBot",
   "HarderNarasimhan.StrongDescendingChainCondition.mk",
   "Preorder.toLE",
   "Exists",
   "instHAdd",
   "lt_of_le_of_lt",
   "BoundedOrder",
   "HarderNarasimhan.StrongDescendingChainCondition.rec",
   "Prod.snd",
   "Bot.bot",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "StrictAnti",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.StrongDescendingChainCondition μ → Sort u} →\n                (t : HarderNarasimhan.StrongDescendingChainCondition μ) →\n                  ((wdcc : ∀ (x : ℕ → ℒ) (saf : StrictAnti x), ∃ N, μ ⟨(⊥, x N), ⋯⟩ ≤ μ ⟨(x (N + 1), x N), ⋯⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["HAdd.hAdd",
   "instHAdd",
   "Add",
   "LE.le",
   "LE",
   "Function.swap",
   "ContravariantClass"],
  "name": "AddRightReflectLE",
  "constType": "(M : Type u_1) → [Add M] → [LE M] → Prop",
  "constCategory": "Definition"},
 {"references": ["Or"],
  "name": "Or.inr",
  "constType": "∀ {a b : Prop}, b → a ∨ b",
  "constCategory": "Other"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "True",
   "Membership.mem",
   "eq_true",
   "SetLike",
   "SetLike.coe_mem",
   "Eq",
   "Subtype.val"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_17",
  "constType":
  "∀ {A : Type u_1} {B : Type u_2} [i : SetLike A B] {p : A} (x : ↥p), (↑x ∈ p) = True",
  "constCategory": "Theorem"},
 {"references":
  ["_private.Mathlib.Algebra.Module.LocalizedModule.Basic.0.LocalizedModule.add_comm'",
   "Module",
   "LocalizedModule.instAdd",
   "CommSemiring",
   "MulZeroOneClass.toMulOneClass",
   "LocalizedModule.instZero",
   "_private.Mathlib.Algebra.Module.LocalizedModule.Basic.0.LocalizedModule.zero_add'",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "_private.Mathlib.Algebra.Module.LocalizedModule.Basic.0.LocalizedModule.add_assoc'",
   "instHSMul",
   "Zero.toOfNat0",
   "_private.Mathlib.Algebra.Module.LocalizedModule.Basic.0.LocalizedModule.nsmul_zero'",
   "AddSemigroup.mk",
   "NonAssocSemiring.toMulZeroOneClass",
   "LocalizedModule",
   "instHAdd",
   "CommSemiring.toSemiring",
   "AddCommMonoid.mk",
   "OfNat.ofNat",
   "AddMonoid.mk",
   "Submonoid",
   "HAdd.hAdd",
   "Nat",
   "Zero.mk",
   "_private.Mathlib.Algebra.Module.LocalizedModule.Basic.0.LocalizedModule.nsmul_succ'",
   "HSMul.hSMul",
   "Add.mk",
   "_private.Mathlib.Algebra.Module.LocalizedModule.Basic.0.LocalizedModule.add_zero'",
   "LocalizedModule.hasNatSMul"],
  "name": "LocalizedModule.instAddCommMonoid",
  "constType":
  "{R : Type u} →\n  [inst : CommSemiring R] →\n    {S : Submonoid R} →\n      {M : Type v} → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → AddCommMonoid (LocalizedModule S M)",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "GeneralizedCoheytingAlgebra.mk",
   "PartialOrder.toPreorder",
   "CompleteLattice.toLattice",
   "SemilatticeSup.toPartialOrder",
   "Order.Coframe.toSDiff",
   "Order.Coframe.toHNot",
   "Order.Coframe.toCompleteLattice",
   "BoundedOrder.toOrderBot",
   "CoheytingAlgebra.mk",
   "BoundedOrder.toOrderTop",
   "Order.Coframe",
   "Order.Coframe.top_sdiff",
   "Order.Coframe.sdiff_le_iff",
   "Preorder.toLE",
   "CompleteLattice.toBoundedOrder",
   "CoheytingAlgebra"],
  "name": "Order.Coframe.toCoheytingAlgebra",
  "constType": "{α : Type u_1} → [self : Order.Coframe α] → CoheytingAlgebra α",
  "constCategory": "Definition"},
 {"references":
  ["Nat.find",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "HarderNarasimhan.impl.HNFil_of_fin_len",
   "LT.lt",
   "Prod",
   "Nat",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNlen",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        [inst_3 : WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [inst_4 : CompleteLattice S] →\n              (μ : { p // p.1 < p.2 } → S) →\n                [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] →\n                  [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ] →\n                    [h : HarderNarasimhan.μ_Admissible μ] → ℕ",
  "constCategory": "Definition"},
 {"references": ["EmptyCollection"],
  "name": "EmptyCollection.emptyCollection",
  "constType": "{α : Type u} → [self : EmptyCollection α] → α",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "HarderNarasimhan.impl.μ_nonempty._simp_1_1",
   "Ideal.IsPrime",
   "Submodule.Quotient.module",
   "Membership.mem",
   "associatedPrimes.nonempty",
   "Iff.mp",
   "Preorder.toLT",
   "Exists.intro",
   "Membership.mem.out",
   "Subtype.val",
   "Submodule.subtype",
   "LinearMap.semilinearMapClass",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "CompleteSemilatticeInf.toPartialOrder",
   "Semiring.toModule",
   "Finset.Nonempty",
   "And.left",
   "rfl",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "Prod.snd",
   "LinearMap",
   "Set.instMembership",
   "Ring.toSemiring",
   "Exists.casesOn",
   "Prod",
   "Submodule.comap",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "Classical.byContradiction",
   "AddCommGroup.toAddCommMonoid",
   "id",
   "Top.top",
   "Eq.mpr",
   "setOf",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Submodule.hasQuotient",
   "Subtype",
   "HarderNarasimhan._μ._proof_1",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "Submodule",
   "Set.mem_setOf",
   "Submodule.comap_subtype_eq_top",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "not_lt_top_iff",
   "Subtype.prop",
   "HarderNarasimhan._μ",
   "Preorder.toLE",
   "Eq",
   "Submodule.instOrderTop",
   "Not",
   "CommRing.toCommSemiring",
   "Set.Nonempty",
   "LinearExtension",
   "Set",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "IsAssociatedPrime._proof_1",
   "Set.toFinset",
   "AddCommGroup",
   "IsAssociatedPrime",
   "CommRing",
   "lt_of_lt_of_le",
   "PrimeSpectrum",
   "LT.lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Submodule.Quotient.nontrivial_of_lt_top",
   "ne_of_lt",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "CompleteLattice.toCompleteSemilatticeInf",
   "Submodule.addCommMonoid",
   "OrderTop.toTop",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.μ_nonempty",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  (HarderNarasimhan._μ R M I).toFinset.Nonempty",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Nat.find",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_3",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "HarderNarasimhan.impl.instConvexITotIntvl",
   "WellFoundedGT",
   "HarderNarasimhan.Convex",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "HarderNarasimhan.impl.HNFil_of_fin_len",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "HarderNarasimhan.impl.HNFil_is_strict_mono",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "OrderTop.toTop",
   "Nat.find_min",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_9",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (i : ℕ),\n  i + 1 < Nat.find ⋯ → HarderNarasimhan.impl.HNFil μ (i + 1) < HarderNarasimhan.impl.HNFil μ (i + 1 + 1)",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.cast",
   "Mathlib.Tactic.Ring.add_pf_zero_add",
   "add_add_add_comm",
   "CommSemiring",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "Semiring.toNonAssocSemiring",
   "instOfNatNat",
   "Mathlib.Meta.NormNum.IsNat.out",
   "Zero.toOfNat0",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq.ndrec",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "Distrib.toAdd",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "AddCommMonoid.toAddCommSemigroup",
   "MulZeroClass.toZero",
   "Eq.refl",
   "Nat.cast_zero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "id",
   "Eq.mpr",
   "AddZero.toZero",
   "Mathlib.Meta.NormNum.IsNat",
   "AddMonoid.toAddZeroClass"],
  "name": "Mathlib.Tactic.Ring.add_pf_add_overlap_zero",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {a₁ a₂ b₁ b₂ c : R},\n  Mathlib.Meta.NormNum.IsNat (a₁ + b₁) 0 → a₂ + b₂ = c → a₁ + a₂ + (b₁ + b₂) = c",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "Nat.instPreorder",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "PartialOrder",
   "Preorder.toLE",
   "le_top",
   "Exists",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "StrictMono"],
  "name": "HarderNarasimhan.WeakAscendingChainCondition.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩) →\n    HarderNarasimhan.WeakAscendingChainCondition μ",
  "constCategory": "Other"},
 {"references": ["LT.lt", "instLTNat", "Nat", "Fin"],
  "name": "Fin.mk",
  "constType": "{n : ℕ} → (val : ℕ) → val < n → Fin n",
  "constCategory": "Other"},
 {"references":
  ["CompleteLattice.le_sInf",
   "OrderDual",
   "CompleteLattice.le_sSup",
   "PartialOrder.toPreorder",
   "CompleteLattice.mk",
   "OrderDual.instLattice",
   "CompleteLattice.toLattice",
   "BoundedOrder",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "CompleteSemilatticeInf.toInfSet",
   "OrderDual.supSet",
   "OrderDual.infSet",
   "CompleteLattice.sSup_le",
   "CompleteSemilatticeInf.toPartialOrder",
   "OrderDual.instLE",
   "OrderDual.instBoundedOrder",
   "Preorder.toLE",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice.toBoundedOrder",
   "CompleteLattice",
   "CompleteLattice.sInf_le"],
  "name": "OrderDual.instCompleteLattice",
  "constType": "{α : Type u_1} → [CompleteLattice α] → CompleteLattice αᵒᵈ",
  "constCategory": "Definition"},
 {"references":
  ["ConditionallyCompleteLinearOrder.compare_eq_compareOfLessAndEq",
   "Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "Lattice.toSemilatticeInf",
   "ConditionallyCompleteLinearOrder.toDecidableLE",
   "ConditionallyCompleteLinearOrder",
   "LinearOrder",
   "SemilatticeSup.toPartialOrder",
   "LinearOrder.mk",
   "ConditionallyCompleteLinearOrder.le_total",
   "ConditionallyCompleteLinearOrder.toDecidableEq",
   "ConditionallyCompleteLinearOrder.toLinearOrder._proof_1",
   "ConditionallyCompleteLinearOrder.toDecidableLT",
   "ConditionallyCompleteLinearOrder.toOrd",
   "ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice",
   "SemilatticeSup.toMax",
   "ConditionallyCompleteLattice.toLattice",
   "ConditionallyCompleteLinearOrder.toLinearOrder._proof_2"],
  "name": "ConditionallyCompleteLinearOrder.toLinearOrder",
  "constType":
  "{α : Type u_1} → [ConditionallyCompleteLinearOrder α] → LinearOrder α",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "HarderNarasimhan.instCoeIntervalMkProdLtFstSndMkBotTop._proof_1",
   "Prod.mk",
   "Coe",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Coe.mk",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "bot_lt_top"],
  "name": "HarderNarasimhan.instCoeIntervalMkProdLtFstSndMkBotTop",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] → [inst_2 : BoundedOrder ℒ] → Coe ℒ (HarderNarasimhan.Interval ⟨(⊥, ⊤), ⋯⟩)",
  "constCategory": "Definition"},
 {"references":
  ["Eq.trans",
   "CommSemiring",
   "HMul.hMul",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "Semiring.toNonAssocSemiring",
   "congr",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "Eq.ndrec",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "Distrib.toAdd",
   "True",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "mul_add",
   "CommSemiring.toSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Distrib.toMul",
   "add_zero",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "eq_self",
   "of_eq_true",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "instHMul",
   "Distrib.leftDistribClass",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass"],
  "name": "Mathlib.Tactic.Ring.mul_add",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {a b₁ b₂ c₁ c₂ d : R},\n  a * b₁ = c₁ → a * b₂ = c₂ → c₁ + 0 + c₂ = d → a * (b₁ + b₂) = d",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name":
  "HarderNarasimhan.impl.CoprimaryFiltration.toHarderNarasimhanFiltration._simp_1_2",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "Submodule.instNontrivial",
   "Module",
   "CommSemiring.toSemiring",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "CommRing",
   "Submodule"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] {M : Type u_1} [Nontrivial M] [inst_2 : AddCommGroup M]\n  [inst_3 : _root_.Module R M], Nontrivial (Submodule R M)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Nat.add_sub_assoc",
   "Eq.mp",
   "Nat.le_add_left",
   "congrArg",
   "Nat.eq_add_of_sub_eq",
   "Or",
   "HSub.hSub",
   "Eq.symm",
   "_private.Init.Data.Nat.Basic.0.Nat.le_add_of_sub_le.match_1_1",
   "Eq",
   "Nat.le.intro",
   "Nat.le_trans",
   "Exists",
   "instHAdd",
   "Nat.add_comm",
   "HAdd.hAdd",
   "Nat",
   "instSubNat",
   "Eq.refl",
   "Nat.le.dest",
   "LE.le",
   "id",
   "Nat.le_total",
   "Eq.mpr",
   "instHSub",
   "instLENat"],
  "name": "Nat.le_add_of_sub_le",
  "constType": "∀ {a b c : ℕ}, a - b ≤ c → a ≤ c + b",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "HarderNarasimhan.ConvexI.mk",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "le_rfl",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.impl.lem2d4₂I",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "SemilatticeSup.toMax",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.rmk2d5₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ → HarderNarasimhan.ConvexI I (HarderNarasimhan.μmax μ)",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Prod",
   "Subtype",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "Nontrivial",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Preorder.toLE",
   "CompleteLattice",
   "Prod.fst"],
  "name": "HarderNarasimhan.WeakAscendingChainCondition",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references": [],
  "name": "AddCommGroup",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "CommRing.toCommSemiring",
   "PartialOrder.toPreorder",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CommSemiring.toSemiring",
   "Preorder.toLT",
   "AddCommGroup",
   "CommRing",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "wellFoundedGT",
   "isNoetherian_of_isNoetherianRing_of_finite",
   "Nontrivial",
   "Submodule.completeLattice",
   "AddCommGroup.toAddCommMonoid",
   "WellFoundedGT",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.prop3d13₁",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  WellFoundedGT (HarderNarasimhan.ℒ R M)",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Or.inr",
   "Decidable",
   "ite",
   "Decidable.em",
   "congrArg",
   "Or.casesOn",
   "if_neg",
   "Or",
   "Or.inl",
   "Eq.refl",
   "Eq.symm",
   "id",
   "Eq.mpr",
   "Eq",
   "Eq.ndrec",
   "if_pos"],
  "name": "ite_congr",
  "constType":
  "∀ {α : Sort u_1} {b c : Prop} {x y u v : α} {s : Decidable b} [inst : Decidable c],\n  b = c → (c → x = u) → (¬c → y = v) → (if b then x else y) = if c then u else v",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_defprop3._simp_1_6",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references": ["CommSemiring"],
  "name": "PrimeSpectrum",
  "constType": "(R : Type u_1) → [CommSemiring R] → Type u_1",
  "constCategory": "Other"},
 {"references":
  ["AddGroupWithOne.zsmul_succ'",
   "AddGroupWithOne.sub_eq_add_neg",
   "AddGroupWithOne.zsmul",
   "AddGroup.mk",
   "AddGroupWithOne.toAddMonoidWithOne",
   "AddGroupWithOne",
   "AddMonoidWithOne.toAddMonoid",
   "AddGroupWithOne.toSub",
   "AddGroupWithOne.zsmul_neg'",
   "AddGroupWithOne.toNeg",
   "AddGroupWithOne.neg_add_cancel",
   "AddGroup",
   "AddGroupWithOne.zsmul_zero'",
   "SubNegMonoid.mk"],
  "name": "AddGroupWithOne.toAddGroup",
  "constType": "{R : Type u} → [self : AddGroupWithOne R] → AddGroup R",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat",
   "Nat.cast",
   "Iff.mpr",
   "Int.instLTInt",
   "Int.ofNat_lt",
   "instNatCastInt",
   "Int"],
  "name": "Lean.Omega.Int.ofNat_lt_of_lt",
  "constType": "∀ {x y : ℕ}, x < y → ↑x < ↑y",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.find_eq_zero",
   "Nat.find",
   "Nat",
   "Exists",
   "instOfNatNat",
   "DecidablePred",
   "Eq",
   "OfNat.ofNat",
   "propext"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_4",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (h : ∃ n, p n), (Nat.find h = 0) = p 0",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "SupSet",
  "constType": "Type u_1 → Type u_1",
  "constCategory": "Other"},
 {"references":
  ["AddMonoid.toZero",
   "NonUnitalNonAssocSemiring.toMul",
   "MulZeroClass",
   "NonUnitalNonAssocSemiring.zero_mul",
   "NonUnitalNonAssocSemiring.mul_zero",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "MulZeroClass.mk",
   "AddCommMonoid.toAddMonoid",
   "NonUnitalNonAssocSemiring"],
  "name": "NonUnitalNonAssocSemiring.toMulZeroClass",
  "constType":
  "{α : Type u} → [self : NonUnitalNonAssocSemiring α] → MulZeroClass α",
  "constCategory": "Definition"},
 {"references":
  ["NormedCommRing",
   "Int.instCommRing",
   "NormedAddCommGroup.toMetricSpace",
   "NormedAddCommGroup.dist_eq",
   "CommRing",
   "NormedCommRing.mk",
   "Int",
   "CommRing.toRing",
   "NormedRing.mk",
   "NormedAddCommGroup",
   "NormedAddCommGroup.toNorm",
   "Int.instNormedCommRing._proof_1",
   "CommRing.mul_comm",
   "Int.instNormedAddCommGroup"],
  "name": "Int.instNormedCommRing",
  "constType": "NormedCommRing ℤ",
  "constCategory": "Definition"},
 {"references": ["Exists", "And", "Eq"],
  "name": "ExistsUnique",
  "constType": "{α : Sort u_1} → (α → Prop) → Prop",
  "constCategory": "Definition"},
 {"references": [],
  "name": "inferInstance",
  "constType": "{α : Sort u} → [i : α] → α",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.SlopeLike",
   "Exists.intro",
   "List.instGetElem?NatLtLength",
   "Subtype.val",
   "GetElem?.getElem?",
   "HarderNarasimhan.NashEquilibrium",
   "SupSet.sSup",
   "Eq.symm",
   "CoheytingAlgebra.toOrderTop",
   "instLTNat",
   "Exists",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "Prod.snd",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Lattice",
   "HarderNarasimhan.μmax._proof_1",
   "Top.top",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "lt_top_iff_ne_top",
   "CompleteLattice.toBoundedOrder",
   "HarderNarasimhan.Semistable",
   "setOf",
   "Ne.symm",
   "HarderNarasimhan.impl.thm4d21",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "List",
   "HarderNarasimhan.Resμ",
   "HarderNarasimhan.instStrongDescendingChainConditionOfStrongDescendingChainCondition'",
   "Prod.fst",
   "instOfNatNat",
   "WellFoundedGT",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Eq",
   "Preorder.toLE",
   "propext",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "HarderNarasimhan.instBoundedOrderInterval",
   "OfNat.ofNat",
   "not_le_of_gt",
   "CompletelyDistribLattice.toCompleteLattice",
   "inferInstance",
   "Ne",
   "bot_lt_top",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Iff.mp",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "And.intro",
   "funext",
   "List.TFAE",
   "CompleteLinearOrder",
   "Eq.rec",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "CompleteLattice.toLattice",
   "And.right",
   "And",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "HarderNarasimhan.instWeakAscendingChainConditionOfWellFoundedGT",
   "Nat",
   "Iff.of_eq",
   "Iff.mpr",
   "Option",
   "Nontrivial",
   "id",
   "HarderNarasimhan.FiniteTotalPayoff.fin_tot_payoff",
   "CompleteDistribLattice.toCoframe",
   "HarderNarasimhan.lt_lt",
   "List.length",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "SemilatticeSup.toPartialOrder",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "congrArg",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.FiniteTotalPayoff.mk",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "List.nil",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "List.TFAE.out",
   "exists_prop_congr",
   "LT.lt",
   "HarderNarasimhan.instNontrivialInterval",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "le_sSup",
   "Subtype.mk",
   "OrderTop.toTop"],
  "name":
  "HarderNarasimhan.instFiniteTotalPayoffIntervalMkProdLtFstSndMkBotResμOfWellFoundedGTOfSlopeLikeOfSemistableOfStrongDescendingChainCondition'",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S} [hftp : HarderNarasimhan.FiniteTotalPayoff μ]\n  [hsl : HarderNarasimhan.SlopeLike μ] [hst : HarderNarasimhan.Semistable μ]\n  [hwdcc' : HarderNarasimhan.StrongDescendingChainCondition' μ] {x : ℒ} {hx : ⊥ < x},\n  HarderNarasimhan.FiniteTotalPayoff (HarderNarasimhan.Resμ ⟨(⊥, x), hx⟩ μ)",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "Or",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "And.left",
   "Not",
   "HarderNarasimhan.impl.prop4d12",
   "bot_lt_iff_ne_bot",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Iff.mpr",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "lt_top_iff_ne_top",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_4_12",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (∀ (x : ℒ) (hx : x ≠ ⊥ ∧ x ≠ ⊤),\n      ¬μ ⟨(⊥, x), ⋯⟩ ≤ μ HarderNarasimhan.TotIntvl ∨ μ HarderNarasimhan.TotIntvl ≤ μ ⟨(x, ⊤), ⋯⟩) →\n    HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl →\n      HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.ConvexI.mk",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "HarderNarasimhan.InIntvl",
   "Min.min",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "Lattice",
   "LE.le",
   "HarderNarasimhan.ConvexI.rec",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.ConvexI.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Lattice ℒ] →\n    {S : Type u_2} →\n      [inst_1 : CompleteLattice S] →\n        {I : { p // p.1 < p.2 }} →\n          {μ : { p // p.1 < p.2 } → S} →\n            {motive : HarderNarasimhan.ConvexI I μ → Sort u} →\n              (t : HarderNarasimhan.ConvexI I μ) →\n                ((convex :\n                      ∀ (x y : ℒ),\n                        HarderNarasimhan.InIntvl I x →\n                          HarderNarasimhan.InIntvl I y → ∀ (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩) →\n                    motive ⋯) →\n                  motive t",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "LT.lt",
   "instLTNat",
   "Nat.find",
   "Nat",
   "Exists",
   "Subtype.property",
   "And.right",
   "And",
   "Nat.findX",
   "DecidablePred",
   "Subtype.val"],
  "name": "Nat.find_min",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (H : ∃ n, p n) {m : ℕ}, m < Nat.find H → ¬p m",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Preorder.toLT",
   "BoundedOrder",
   "Bot.bot",
   "LT.lt",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "Iff.mpr",
   "Nontrivial",
   "Top.top",
   "Ne",
   "OrderBot.toBot",
   "bot_ne_top",
   "lt_top_iff_ne_top",
   "Preorder.toLE",
   "OrderTop.toTop"],
  "name": "bot_lt_top",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : BoundedOrder α] [Nontrivial α], ⊥ < ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "And",
   "Preorder.toLT",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "le_rfl",
   "Prod",
   "LT.lt",
   "And.intro",
   "Subtype.prop",
   "le_of_lt",
   "PartialOrder",
   "LE.le",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.instBoundedOrderInterval._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] {z : { p // p.1 < p.2 }}, (↑z).1 ≤ (↑z).2 ∧ (↑z).2 ≤ (↑z).2",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Prod",
   "OrderDual",
   "PartialOrder.toPreorder",
   "Subtype",
   "Subtype.prop",
   "OrderDual.instLT",
   "PartialOrder",
   "Preorder.toLT",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst"],
  "name":
  "HarderNarasimhan.impl.instCoeSubtypeProdOrderDualLtFstSndOfNontrivialOfBoundedOrder_harderNarasimhan._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] (p : { p // p.1 < p.2 }), (↑p).1 < (↑p).2",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "Module",
   "HarderNarasimhan.CoprimaryFiltration.filtration",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "CommRing",
   "Bot.bot",
   "OfNat.ofNat",
   "Submodule",
   "Nat",
   "IsNoetherianRing",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "Submodule.instBot",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Eq",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.first_eq_bot",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (self : HarderNarasimhan.CoprimaryFiltration R M), self.filtration 0 = ⊥",
  "constCategory": "Theorem"},
 {"references": ["Lattice", "SemilatticeSup"],
  "name": "Lattice.toSemilatticeSup",
  "constType": "{α : Type u} → [self : Lattice α] → SemilatticeSup α",
  "constCategory": "Definition"},
 {"references":
  ["AddCancelCommMonoid",
   "AddCancelMonoid",
   "SubNegMonoid.toAddMonoid",
   "AddGroup.toAddCancelMonoid",
   "AddCommGroup.add_comm",
   "AddCommGroup.toAddGroup",
   "AddCommGroup.toAddCancelCommMonoid._proof_1",
   "AddCommMonoid.mk",
   "AddCommGroup",
   "AddGroup.toSubNegMonoid",
   "AddCancelCommMonoid.mk"],
  "name": "AddCommGroup.toAddCancelCommMonoid",
  "constType": "{G : Type u_1} → [AddCommGroup G] → AddCancelCommMonoid G",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Ideal.IsPrime",
   "Submodule.Quotient.module",
   "Membership.mem",
   "HarderNarasimhan.μ",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "Semiring.toModule",
   "HarderNarasimhan.S",
   "And.left",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Submodule.addCommGroup",
   "LinearMap",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Set.instMembership",
   "Nat",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_8",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "ConditionallyCompleteLattice.toLattice",
   "CompleteLattice.toBoundedOrder",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "associatedPrimes",
   "Submodule.hasQuotient",
   "Submodule.instNontrivial",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "ExistsUnique.exists",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "Eq",
   "CompleteLattice.toConditionallyCompleteLattice",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
   "CommRing.toCommSemiring",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Submodule.setLike",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Submodule.completeLattice",
   "ExistsUnique",
   "HarderNarasimhan.S₀",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_9",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (HNFil : HarderNarasimhan.HarderNarasimhanFiltration (HarderNarasimhan.μ R M)) (n : ℕ)\n  (pcnp1 :\n    ∃! p,\n      p ∈\n        associatedPrimes R\n          (↥(HNFil.filtration (n + 1 + 1)) ⧸\n            Submodule.submoduleOf (HNFil.filtration (n + 1)) (HNFil.filtration (n + 1 + 1)))),\n  ⋯.choose.IsPrime",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt", "Subtype.instLT", "Subtype", "Iff", "Subtype.mk", "Iff.rfl", "LT"],
  "name": "Subtype.mk_lt_mk",
  "constType":
  "∀ {α : Type u_2} [inst : LT α] {p : α → Prop} {x y : α} {hx : p x} {hy : p y}, ⟨x, hx⟩ < ⟨y, hy⟩ ↔ x < y",
  "constCategory": "Theorem"},
 {"references":
  ["OrderDual",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "Coe",
   "Coe.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "OrderDual.instLT",
   "PartialOrder",
   "Nontrivial",
   "Subtype.mk",
   "Preorder.toLE",
   "CompleteLattice",
   "HarderNarasimhan.impl.instCoeSubtypeProdOrderDualLtFstSndOfNontrivialOfBoundedOrder_harderNarasimhan._proof_1"],
  "name":
  "HarderNarasimhan.impl.instCoeForallSubtypeProdLtFstSndForallOrderDualOfNontrivialOfBoundedOrderOfCompleteLattice_harderNarasimhan",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] →\n      [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → Coe ({ p // p.1 < p.2 } → S) ({ p // p.1 < p.2 } → Sᵒᵈ)",
  "constCategory": "Definition"},
 {"references":
  ["Finset", "Set", "Membership.mem", "Finset.instMembership", "setOf"],
  "name": "Finset.toSet",
  "constType": "{α : Type u_1} → Finset α → Set α",
  "constCategory": "Definition"},
 {"references":
  ["HAdd.hAdd",
   "AddRightMono",
   "rel_iff_cov",
   "instHAdd",
   "Add",
   "Iff",
   "LE.le",
   "LE",
   "Function.swap",
   "AddRightReflectLE"],
  "name": "add_le_add_iff_right",
  "constType":
  "∀ {α : Type u_1} [inst : Add α] [inst_1 : LE α] [AddRightMono α] [AddRightReflectLE α] (a : α) {b c : α},\n  b + a ≤ c + a ↔ b ≤ c",
  "constCategory": "Theorem"},
 {"references": ["And"],
  "name": "And.intro",
  "constType": "∀ {a b : Prop}, a → b → a ∧ b",
  "constCategory": "Other"},
 {"references":
  ["CommRing.toCommSemiring",
   "IsNoetherianRing",
   "Module",
   "CommSemiring.toSemiring",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "CommRing"],
  "name": "HarderNarasimhan.Coprimary",
  "constType":
  "(R : Type u_1) →\n  [inst : CommRing R] → [IsNoetherianRing R] → (M : Type u_2) → [inst_2 : AddCommGroup M] → [_root_.Module R M] → Prop",
  "constCategory": "Other"},
 {"references":
  ["HarderNarasimhan.JordanHolderFiltration.ext",
   "Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "Prod.fst",
   "Iff.intro",
   "HarderNarasimhan.JordanHolderFiltration",
   "Eq.symm",
   "Preorder.toLE",
   "Eq",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "BoundedOrder",
   "Prod.snd",
   "Eq.casesOn",
   "LT.lt",
   "Prod",
   "Nat",
   "Iff",
   "Eq.refl",
   "Lattice",
   "Nontrivial",
   "HEq",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.ext_iff",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} {x y : HarderNarasimhan.JordanHolderFiltration μ},\n  x = y ↔ x.filtration = y.filtration",
  "constCategory": "Theorem"},
 {"references":
  ["Exists", "Subtype", "Subtype.exists", "Subtype.mk", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.lift_quot_middle._simp_1_3",
  "constType":
  "∀ {α : Sort u} {p : α → Prop} {q : { a // p a } → Prop}, (∃ x, q x) = ∃ a, ∃ (b : p a), q ⟨a, b⟩",
  "constCategory": "Theorem"},
 {"references":
  ["HAdd",
   "Int.add_assoc",
   "Eq.trans",
   "instHAdd",
   "Lean.Omega.LinearCombo",
   "Lean.Omega.Coeffs",
   "congrArg",
   "Int",
   "Lean.Omega.LinearCombo.mk",
   "HAdd.hAdd",
   "Lean.Omega.Coeffs.dot_distrib_left",
   "Eq.refl",
   "congr",
   "Lean.Omega.IntList.instAdd",
   "Int.instAdd",
   "id",
   "Lean.Omega.LinearCombo.eval",
   "Eq.mpr",
   "Eq.rec",
   "Int.add_left_comm",
   "Lean.Omega.LinearCombo.casesOn",
   "Eq",
   "Lean.Omega.LinearCombo.instAdd",
   "Lean.Omega.Coeffs.dot"],
  "name": "Lean.Omega.LinearCombo.add_eval",
  "constType":
  "∀ (l₁ l₂ : Omega.LinearCombo) (v : Omega.Coeffs), (l₁ + l₂).eval v = l₁.eval v + l₂.eval v",
  "constCategory": "Theorem"},
 {"references":
  ["IsOrderedAddMonoid.mk",
   "PartialOrder.toPreorder",
   "Nat.instPartialOrder",
   "instHAdd",
   "Nat.add_le_add_left",
   "Nat.instAddCommMonoid",
   "congrArg",
   "HAdd.hAdd",
   "Nat",
   "AddCommMonoid.toAddCommSemigroup",
   "IsOrderedAddMonoid",
   "LE.le",
   "id",
   "Eq.mpr",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "Eq",
   "Preorder.toLE",
   "add_comm"],
  "name": "Nat.instIsOrderedAddMonoid",
  "constType": "IsOrderedAddMonoid ℕ",
  "constCategory": "Theorem"},
 {"references":
  ["LinearMap.toSpanSingleton",
   "CommRing.toCommSemiring",
   "Exists",
   "LinearMap.ker",
   "LinearMap.instFunLike",
   "Module",
   "Ideal.IsPrime",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "LinearMap",
   "CommRing",
   "IsAssociatedPrime",
   "Semiring.toNonAssocSemiring",
   "Ideal",
   "RingHom.id",
   "AddCommGroup.toAddCommMonoid",
   "Semiring.toModule",
   "Eq",
   "And.left"],
  "name": "IsAssociatedPrime.isPrime",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] {I : Ideal R} {M : Type u_2} [inst_1 : AddCommGroup M]\n  [inst_2 : _root_.Module R M], IsAssociatedPrime I M → I.IsPrime",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "bot_le",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "PartialOrder",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Exists",
   "instHAdd",
   "lt_of_le_of_lt",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "StrictAnti",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x : ℕ → ℒ) (saf : StrictAnti x), ∃ N, μ ⟨(⊥, x N), ⋯⟩ ≤ μ ⟨(x (N + 1), x N), ⋯⟩) →\n    HarderNarasimhan.StrongDescendingChainCondition μ",
  "constCategory": "Other"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "HarderNarasimhan.Convex.mk",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "Lattice",
   "LE.le",
   "SemilatticeSup.toMax",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Convex.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Lattice ℒ] →\n    {S : Type u_2} →\n      [inst_1 : CompleteLattice S] →\n        {μ : { p // p.1 < p.2 } → S} →\n          {motive : HarderNarasimhan.Convex μ → Sort u} →\n            ((convex : ∀ (x y : ℒ) (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩) → motive ⋯) →\n              (t : HarderNarasimhan.Convex μ) → motive t",
  "constCategory": "Other"},
 {"references":
  ["NonUnitalNonAssocSemiring.right_distrib",
   "NonUnitalNonAssocSemiring.toMul",
   "AddMonoid.toAddSemigroup",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Distrib",
   "AddCommMonoid.toAddMonoid",
   "NonUnitalNonAssocSemiring.left_distrib",
   "Distrib.mk",
   "NonUnitalNonAssocSemiring",
   "AddSemigroup.toAdd"],
  "name": "NonUnitalNonAssocSemiring.toDistrib",
  "constType":
  "{α : Type u} → [self : NonUnitalNonAssocSemiring α] → Distrib α",
  "constCategory": "Definition"},
 {"references":
  ["Exists", "Exists.intro", "Eq", "forall_exists_index", "propext"],
  "name": "HarderNarasimhan.impl.prop4d20._simp_1_1",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {q : (∃ x, p x) → Prop}, (∀ (h : ∃ x, p x), q h) = ∀ (x : α) (h : p x), q ⋯",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "instAddNat",
   "HAdd.hAdd",
   "instLTNat",
   "Nat",
   "instOfNatNat",
   "instHAdd",
   "Iff",
   "LE.le",
   "Iff.rfl",
   "instLENat",
   "OfNat.ofNat"],
  "name": "Nat.add_one_le_iff",
  "constType": "∀ {n m : ℕ}, n + 1 ≤ m ↔ n < m",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Not",
   "PartialOrder.toPreorder",
   "not_bot_lt_iff",
   "PartialOrder",
   "Preorder.toLT",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Bot.bot",
   "propext",
   "OrderBot"],
  "name": "HarderNarasimhan.impl.rmk4d14₂._simp_1_1",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderBot α] {a : α}, (¬⊥ < a) = (a = ⊥)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.impl.JHFil._proof_2",
   "CompleteLinearOrder",
   "SemilatticeInf.toPartialOrder",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteDistribLattice.toCoframe",
   "HarderNarasimhan.Semistable",
   "Subtype",
   "GeneralizedCoheytingAlgebra.toLattice",
   "SemilatticeSup.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "Nat.instPreorder",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Nat.instOne",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.JHFil._proof_1",
   "Preorder.toLE",
   "Eq",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "OfNat.ofNat",
   "LT.lt",
   "CompletelyDistribLattice.toCompleteLattice",
   "HAdd.hAdd",
   "StrictAnti",
   "One.toOfNat1",
   "HarderNarasimhan.impl.JHFil",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.JHFil.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [hacc : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) (hμ : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤)\n  (hμsl : HarderNarasimhan.SlopeLike μ) (hst : HarderNarasimhan.Semistable μ)\n  (hdc : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤),\n  HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc 0 = ⊤",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Fintype",
  "constType": "Type u_4 → Type u_4",
  "constCategory": "Other"},
 {"references":
  ["not_lt._simp_1",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "IsGreatest",
   "HarderNarasimhan.impl.HNFil._proof_3",
   "Nat.instLinearOrder",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Nat.decLt",
   "Prod",
   "HarderNarasimhan.impl.HNFil_of_fin_len",
   "Nat",
   "Decidable.byContradiction",
   "Nat.find_spec",
   "Iff",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "Subtype",
   "HarderNarasimhan.StI",
   "Eq.mp",
   "HarderNarasimhan.impl.HNFil",
   "HarderNarasimhan.impl.HNlen",
   "congrArg",
   "Iff.intro",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "Not",
   "Nat.le_induction",
   "HarderNarasimhan.impl.HNFil._proof_4",
   "Lattice.toSemilatticeInf",
   "True",
   "HarderNarasimhan.μ_Admissible",
   "Exists.choose",
   "LT.lt",
   "LinearOrder.toPartialOrder",
   "eq_self",
   "dite_cond_eq_true",
   "of_eq_true",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "dite",
   "OrderTop.toTop",
   "instLENat",
   "Nat.find_min",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil_ne_top_iff_lt_len",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (n : ℕ), HarderNarasimhan.impl.HNFil μ n ≠ ⊤ ↔ n < HarderNarasimhan.impl.HNlen μ",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt", "instLTNat", "Nat", "Decidable", "Nat.succ", "Nat.decLe"],
  "name": "Nat.decLt",
  "constType": "(n m : ℕ) → Decidable (n < m)",
  "constCategory": "Definition"},
 {"references":
  ["Finset",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "LinearOrder",
   "Finset.Nonempty.mono",
   "Finset.instHasSubset",
   "instDistribLatticeOfLinearOrder",
   "DistribLattice.toLattice",
   "HasSubset.Subset",
   "Finset.min'",
   "LE.le",
   "Preorder.toLE",
   "Finset.Nonempty",
   "Finset.min'_mem",
   "Finset.min'_le",
   "SemilatticeInf.toPartialOrder"],
  "name": "Finset.min'_subset",
  "constType":
  "∀ {α : Type u_2} [inst : LinearOrder α] {s t : Finset α} (H : s.Nonempty) (hst : s ⊆ t), t.min' ⋯ ≤ s.min' H",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "IsWellOrder",
  "constType": "(α : Type u) → (α → α → Prop) → Prop",
  "constCategory": "Other"},
 {"references":
  ["OrderDual",
   "Subtype",
   "PartialOrder.toPreorder",
   "Equiv.instEquivLike",
   "Prod.mk",
   "Preorder.toLT",
   "DFunLike.coe",
   "Subtype.val",
   "Equiv",
   "Prod.fst",
   "OrderDual.ofDual",
   "Subtype.prop",
   "OrderDual.instLT",
   "PartialOrder",
   "EquivLike.toFunLike",
   "Preorder.toLE",
   "Eq",
   "rfl",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "Subtype.mk",
   "CompleteLattice",
   "HarderNarasimhan.impl.instCoeSubtypeProdOrderDualLtFstSndOfNontrivialOfBoundedOrder_harderNarasimhan._proof_1"],
  "name": "HarderNarasimhan.impl.fine",
  "constType":
  "∀ {ℒ : Type u_1} [Nontrivial ℒ] [inst : PartialOrder ℒ] [BoundedOrder ℒ] {S : Type u_2} [CompleteLattice S]\n  (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  μ ⟨(OrderDual.ofDual (↑I).2, OrderDual.ofDual (↑I).1), ⋯⟩ = OrderDual.ofDual ((fun p ↦ μ ⟨((↑p).2, (↑p).1), ⋯⟩) I)",
  "constCategory": "Theorem"},
 {"references": ["outParam", "HSMul"],
  "name": "HSMul.hSMul",
  "constType":
  "{α : Type u} → {β : Type v} → {γ : outParam (Type w)} → [self : HSMul α β γ] → α → β → γ",
  "constCategory": "Definition"},
 {"references":
  ["Equiv.left_inv",
   "Equiv.invFun",
   "Equiv.right_inv",
   "Equiv.instEquivLike._proof_1",
   "EquivLike.mk",
   "Equiv.toFun",
   "EquivLike",
   "Equiv"],
  "name": "Equiv.instEquivLike",
  "constType": "{α : Sort u} → {β : Sort v} → EquivLike (α ≃ β) α β",
  "constCategory": "Definition"},
 {"references":
  ["Lean.mkAtom",
   "Lean.Name.mkStr4",
   "Lean.Syntax.node",
   "Lean.Name.mkStr1",
   "Array.push",
   "Lean.Syntax",
   "Array.empty",
   "Lean.SourceInfo.none"],
  "name": "AddMonoid.nsmul_zero._autoParam",
  "constType": "Syntax",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat",
   "Fin.val",
   "Fin.ext_iff",
   "Iff",
   "Fin.mk",
   "Fin",
   "Eq"],
  "name": "Fin.eq_mk_iff_val_eq",
  "constType":
  "∀ {n : ℕ} {a : Fin n} {k : ℕ} {hk : k < n}, a = ⟨k, hk⟩ ↔ ↑a = k",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.Quotient.isScalarTower",
   "Submodule.hasQuotient",
   "Ring.toNonAssocRing",
   "HasQuotient.Quotient",
   "Submodule.Quotient.instSMul._proof_1",
   "IsScalarTower",
   "Module",
   "Submodule.Quotient.module",
   "AddCommGroup.toAddGroup",
   "AddGroupWithOne.toAddMonoidWithOne",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "instDistribSMul",
   "AddMonoidWithOne.toAddMonoid",
   "Submodule",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "MulAction.toSMul",
   "Submodule.Quotient.addCommGroup",
   "SMul",
   "Semiring.toNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "RingHom.id",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "AddGroup.toSubNegMonoid",
   "LinearMap.restrictScalars",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "DistribSMul.toSMulZeroClass",
   "Submodule.mkQ",
   "Submodule.Quotient.module'",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "AddZeroClass.toAddZero",
   "Submodule.mkQ_surjective",
   "RingHomSurjective.ids",
   "Ring.toSemiring",
   "Module.Finite.of_surjective",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "LinearMap.IsScalarTower.compatibleSMul",
   "AddCommGroup.toAddCommMonoid",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Ring",
   "Semiring",
   "Module.Finite"],
  "name": "Module.Finite.quotient",
  "constType":
  "∀ (R : Type u_6) {A : Type u_7} {M : Type u_8} [inst : Semiring R] [inst_1 : AddCommGroup M] [inst_2 : Ring A]\n  [inst_3 : _root_.Module A M] [inst_4 : _root_.Module R M] [inst_5 : SMul R A] [inst_6 : IsScalarTower R A M]\n  [Module.Finite R M] (N : Submodule A M), Module.Finite R (M ⧸ N)",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "Classical.propDecidable",
   "eq_true",
   "List.instGetElem?NatLtLength",
   "HarderNarasimhan.impl.JHFil_prop₂._simp_1_7",
   "GetElem?.getElem?",
   "Eq.symm",
   "Nat.sub_one_add_one",
   "CoheytingAlgebra.toOrderTop",
   "instLTNat",
   "Exists",
   "ne_of_gt",
   "Or.resolve_left",
   "BoundedOrder",
   "HarderNarasimhan.InIntvl",
   "eq_false",
   "HarderNarasimhan.μmax._proof_1",
   "Top.top",
   "Eq.mpr",
   "Exists.choose.congr_simp",
   "HarderNarasimhan.Semistable",
   "instDecidableTrue",
   "HarderNarasimhan.impl.thm4d21",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Classical.not_and_iff_not_or_not",
   "List",
   "HarderNarasimhan.instStrongDescendingChainConditionOfStrongDescendingChainCondition'",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Or.inl",
   "Nat.instSemiring",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Eq",
   "Set",
   "AddZero.toAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "eq_self",
   "dite_cond_eq_true",
   "HarderNarasimhan.impl.JHFil",
   "HarderNarasimhan.impl.JHFil_prop₂._simp_1_9",
   "Ne",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instHSub",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "WellFounded.has_min",
   "Membership.mem",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "GT.gt",
   "HarderNarasimhan.μmax",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.impl.JHFil.congr_simp",
   "Or",
   "forall_congr",
   "List.TFAE",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Eq.rec",
   "List.cons",
   "HarderNarasimhan.impl.JHFil_prop₁",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Nat.instPartialOrder",
   "And.right",
   "lt_of_le_of_lt",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.impl.JHFil_prop₂._simp_1_12",
   "Nat",
   "Iff.of_eq",
   "Option",
   "HarderNarasimhan.impl.JHFil._proof_4",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Eq.mp",
   "Or.resolve_right",
   "lt_of_le_of_ne",
   "Nat.instAddCancelCommMonoid",
   "dite_congr",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "IsWellFounded.wf",
   "dite_cond_eq_false",
   "List.nil",
   "Not",
   "Set.Nonempty",
   "instHAdd",
   "HarderNarasimhan.impl.JHFil_prop₂._simp_1_10",
   "Eq.mpr_prop",
   "LT.lt",
   "lt_add_one",
   "One.toOfNat1",
   "ne_of_lt",
   "of_eq_true",
   "instSubNat",
   "HarderNarasimhan.instPartialOrderInterval",
   "False",
   "Subtype.mk",
   "OrderTop.toTop",
   "instAddNat",
   "HarderNarasimhan.SlopeLike",
   "Eq.trans",
   "HarderNarasimhan.impl.JHFil_prop₂._simp_1_6",
   "Exists.intro",
   "Membership.mem.out",
   "Subtype.val",
   "False.elim",
   "HarderNarasimhan.NashEquilibrium",
   "SupSet.sSup",
   "Eq.ndrec",
   "Exists.choose_spec",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "Lattice",
   "HarderNarasimhan.in_TotIntvl",
   "AddMonoid.toAddZeroClass",
   "setOf",
   "Ne.symm",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "EmptyCollection.emptyCollection",
   "Nat.instPreorder",
   "instOfNatNat",
   "congr",
   "WellFoundedGT",
   "not_true_eq_false",
   "Preorder.toLE",
   "propext",
   "not_lt_of_gt",
   "Nat.instAddMonoid",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "HarderNarasimhan.instBoundedOrderInterval",
   "HarderNarasimhan.impl.prop4d6",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "HarderNarasimhan.impl.JHFil_anti_mono",
   "inferInstance",
   "instDecidableEqNat",
   "dite",
   "bot_lt_top",
   "lt_trans",
   "Lattice.toSemilatticeSup",
   "Prod.mk",
   "Iff.mp",
   "bot_le",
   "And.intro",
   "Set.not_nonempty_iff_eq_empty",
   "funext",
   "HSub.hSub",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.impl.JHFil_prop₂._simp_1_5",
   "Set.eq_empty_iff_forall_notMem",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "And",
   "Nat.instStarRing",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "HarderNarasimhan.instWeakAscendingChainConditionOfWellFoundedGT",
   "Decidable.byContradiction",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "HarderNarasimhan.impl.JHFil_prop₂._simp_1_8",
   "CompleteDistribLattice.toCoframe",
   "List.length",
   "Subtype",
   "GeneralizedCoheytingAlgebra.toLattice",
   "SemilatticeSup.toPartialOrder",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "Set.instEmptyCollection",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Nat.instOne",
   "HarderNarasimhan.Interval",
   "instDecidableFalse",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.JHFil._proof_1",
   "Set.not_nonempty_iff_eq_empty._simp_1",
   "bot_lt_iff_ne_bot",
   "List.TFAE.out",
   "Lattice.toSemilatticeInf",
   "True",
   "Exists.choose",
   "exists_prop_congr",
   "HarderNarasimhan.instNontrivialInterval",
   "StrictAnti",
   "HarderNarasimhan.impl.JHFil_prop₂._simp_1_11",
   "LE.le",
   "le_sSup"],
  "name": "HarderNarasimhan.impl.JHFil_prop₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [hacc : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S)\n  [hwdcc' : HarderNarasimhan.StrongDescendingChainCondition' μ] (hμ : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤)\n  (hμsl : HarderNarasimhan.SlopeLike μ) (hst : HarderNarasimhan.Semistable μ)\n  (hdc : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) (k : ℕ)\n  (hk : HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc k > ⊥) (z : ℒ)\n  (h' : HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc (k + 1) < z),\n  z < HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc k →\n    μ ⟨(HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc (k + 1), z), h'⟩ <\n      μ ⟨(HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc (k + 1), HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc k), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["LinearMap.instZero",
   "RingHom",
   "LinearMap.ker",
   "LinearMap.instFunLike",
   "Module",
   "LinearMap.ker_eq_top",
   "Submodule.instTop",
   "LinearMap",
   "OfNat.ofNat",
   "Submodule",
   "LinearMap.semilinearMapClass",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Top.top",
   "Zero.toOfNat0",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_12",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_2} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {τ₁₂ : R →+* R₂} {f : M →ₛₗ[τ₁₂] M₂}, (LinearMap.ker f = ⊤) = (f = 0)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype.coe_injective",
   "Subtype",
   "PartialOrder",
   "PartialOrder.lift",
   "Subtype.val"],
  "name": "Subtype.partialOrder",
  "constType":
  "{α : Type u_2} → [PartialOrder α] → (p : α → Prop) → PartialOrder (Subtype p)",
  "constCategory": "Definition"},
 {"references": ["Iff"],
  "name": "Iff.intro",
  "constType": "∀ {a b : Prop}, (a → b) → (b → a) → (a ↔ b)",
  "constCategory": "Other"},
 {"references":
  ["Fintype.card", "Nat", "Fin", "List.length_finRange", "Eq", "Fin.fintype"],
  "name": "Fintype.card_fin",
  "constType": "∀ (n : ℕ), Fintype.card (Fin n) = n",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "bot_lt_iff_ne_bot",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "Bot.bot",
   "LT.lt",
   "PartialOrder",
   "Iff",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "Iff.not_left",
   "OrderBot"],
  "name": "not_bot_lt_iff",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderBot α] {a : α}, ¬⊥ < a ↔ a = ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Set",
   "Ideal.IsPrime",
   "CommSemiring",
   "CommSemiring.toSemiring",
   "OmegaCompletePartialOrder.toPartialOrder",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "And",
   "Minimal",
   "Semiring.toNonAssocSemiring",
   "Ideal",
   "LE.le",
   "Submodule.completeLattice",
   "Semiring.toModule",
   "Preorder.toLE",
   "setOf"],
  "name": "Ideal.minimalPrimes",
  "constType":
  "{R : Type u_1} → [inst : CommSemiring R] → Ideal R → Set (Ideal R)",
  "constCategory": "Definition"},
 {"references":
  ["AddZeroClass",
   "True",
   "LE",
   "CanonicallyOrderedAdd",
   "eq_true",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "zero_le",
   "LE.le",
   "Zero.toOfNat0",
   "Eq",
   "AddZero.toZero"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_31",
  "constType":
  "∀ {α : Type u} [inst : AddZeroClass α] [inst_1 : LE α] [CanonicallyOrderedAdd α] (a : α), (0 ≤ a) = True",
  "constCategory": "Theorem"},
 {"references": ["SMul", "HSMul", "SMul.smul", "HSMul.mk"],
  "name": "instHSMul",
  "constType": "{α : Type u_1} → {β : Type u_2} → [SMul α β] → HSMul α β β",
  "constCategory": "Definition"},
 {"references":
  ["RelEmbedding.toEmbedding",
   "EmbeddingLike",
   "Function.Embedding.inj'",
   "RelEmbedding",
   "RelEmbedding.instFunLike",
   "EmbeddingLike.mk"],
  "name": "RelEmbedding.instEmbeddingLike",
  "constType":
  "∀ {α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop}, EmbeddingLike (r ↪r s) α β",
  "constCategory": "Theorem"},
 {"references": ["OrderDual", "LE.le", "LE.mk", "LE"],
  "name": "OrderDual.instLE",
  "constType": "(α : Type u_5) → [LE α] → LE αᵒᵈ",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.Affine",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references": ["Nat", "Fin.val", "Fin"],
  "name": "Fin.toNat",
  "constType": "{n : ℕ} → Fin n → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Set",
   "CompleteSemilatticeSup",
   "Membership.mem",
   "isLUB_sSup",
   "CompleteSemilatticeSup.toSupSet",
   "Set.instMembership",
   "SupSet.sSup",
   "Iff",
   "isLUB_le_iff",
   "LE.le",
   "CompleteSemilatticeSup.toPartialOrder",
   "Preorder.toLE"],
  "name": "sSup_le_iff",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteSemilatticeSup α] {s : Set α} {a : α}, sSup s ≤ a ↔ ∀ b ∈ s, b ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Preorder.toLT",
   "bot_le",
   "Subtype.val",
   "IsGreatest",
   "HarderNarasimhan.impl.HNFil._proof_3",
   "And.intro",
   "Or",
   "HarderNarasimhan.impl.prop3d8₁'",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "HarderNarasimhan.StI",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.impl.HNFil",
   "lt_of_le_of_ne",
   "Prod.fst",
   "Or.inl",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Lattice.toSemilatticeInf",
   "le_top",
   "HarderNarasimhan.μ_Admissible",
   "HarderNarasimhan.μ_Admissible.μ_adm",
   "LT.lt",
   "Or.casesOn",
   "IsTotal",
   "HarderNarasimhan.Convex_of_Convex_large",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil._proof_4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (n : ℕ) (htop : ¬HarderNarasimhan.impl.HNFil μ n = ⊤),\n  ∃ s, IsGreatest (HarderNarasimhan.StI μ ⟨(HarderNarasimhan.impl.HNFil μ n, ⊤), ⋯⟩) s",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "HarderNarasimhan.impl.prop4d14._simp_1_1",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "And.intro",
   "Or",
   "PartialOrder",
   "sSup_le",
   "Eq.symm",
   "Eq.ndrec",
   "Eq.rec",
   "And.left",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "Set.instMembership",
   "Prod",
   "Exists.casesOn",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "HarderNarasimhan.μmax._proof_1",
   "id",
   "Top.top",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "lt_top_iff_ne_top",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Classical.not_not",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Or.resolve_right",
   "CompleteLattice.toCompleteSemilatticeSup",
   "congrArg",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.impl.rmk4d10₀",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Not",
   "bot_lt_iff_ne_bot",
   "True",
   "Set",
   "sInf_le",
   "LT.lt",
   "HarderNarasimhan.μA._proof_1",
   "of_eq_true",
   "LE.le",
   "CompleteSemilatticeSup.toPartialOrder",
   "False",
   "Ne",
   "eq_of_le_of_ge",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "dite",
   "OrderTop.toTop",
   "CompleteLattice",
   "And.casesOn"],
  "name": "HarderNarasimhan.impl.prop4d14",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (∀ (x : ℒ) (hx : x ≠ ⊥ ∧ x ≠ ⊤),\n      μ ⟨(⊥, x), ⋯⟩ ≤ μ HarderNarasimhan.TotIntvl ∨ ¬μ HarderNarasimhan.TotIntvl ≤ μ ⟨(x, ⊤), ⋯⟩) →\n    HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = μ HarderNarasimhan.TotIntvl →\n      HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["Prod",
   "Fin.castSucc",
   "RelSeries.toFun",
   "Prod.mk",
   "RelSeries.length",
   "Membership.mem",
   "Fin",
   "RelSeries",
   "SetRel",
   "Fin.succ",
   "Set.instMembership"],
  "name": "RelSeries.step",
  "constType":
  "∀ {α : Type u_1} {r : SetRel α α} (self : RelSeries r) (i : Fin self.length),\n  (self.toFun i.castSucc, self.toFun i.succ) ∈ r",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "HarderNarasimhan.semistableI",
   "Membership.mem",
   "Preorder.toLT",
   "Classical.propDecidable",
   "Iff.mp",
   "instZeroLEOneClass",
   "HarderNarasimhan.impl.HNFil_prop_of_def",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Set.instMembership",
   "HarderNarasimhan.impl.semistableI_iff",
   "Prod",
   "HarderNarasimhan.impl.HNFil_of_fin_len",
   "Nat",
   "upperBounds",
   "Iff.mpr",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "lt_top_iff_ne_top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "Nat.find",
   "HarderNarasimhan.StI",
   "Subtype",
   "HarderNarasimhan.impl.HNFil",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "WellFoundedGT",
   "HarderNarasimhan.Interval",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "Set",
   "HarderNarasimhan.μ_Admissible",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "HarderNarasimhan.impl.HNFil_is_strict_mono'",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "Ne",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "Nat.find_min",
   "HarderNarasimhan.impl.prop3d7₁",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil_piecewise_semistable",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (i : ℕ) (h_1 : i < Nat.find ⋯),\n  HarderNarasimhan.Semistable\n    (HarderNarasimhan.Resμ ⟨(HarderNarasimhan.impl.HNFil μ i, HarderNarasimhan.impl.HNFil μ (i + 1)), ⋯⟩ μ)",
  "constCategory": "Theorem"},
 {"references": ["Eq.refl", "Eq.rec", "Eq"],
  "name": "Eq.casesOn",
  "constType":
  "{α : Sort u_1} →\n  {a : α} → {motive : (a_1 : α) → a = a_1 → Sort u} → {a_1 : α} → (t : a = a_1) → motive a ⋯ → motive a_1 t",
  "constCategory": "Definition"},
 {"references":
  ["Int.instSub",
   "instHAdd",
   "Neg.neg",
   "Eq.mp",
   "Int.instNegInt",
   "OfNat.ofNat",
   "Int",
   "congrArg",
   "Int.add_right_neg",
   "HAdd.hAdd",
   "Int.add_le_add_right",
   "instOfNat",
   "LE.le",
   "Int.instAdd",
   "HSub.hSub",
   "Int.instLEInt",
   "instHSub"],
  "name": "Int.sub_nonneg_of_le",
  "constType": "∀ {a b : ℤ}, b ≤ a → 0 ≤ a - b",
  "constCategory": "Theorem"},
 {"references":
  ["Unique",
   "CommRing.toCommSemiring",
   "Module",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "CommRing",
   "HarderNarasimhan.impl.instUniqueCoprimaryFiltration",
   "IsNoetherianRing",
   "HarderNarasimhan.CoprimaryFiltration",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "inferInstance",
   "Module.Finite"],
  "name": "HarderNarasimhan.theorem_3_15₂",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] → Unique (HarderNarasimhan.CoprimaryFiltration R M)",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.JordanHolderFiltration",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.JordanHolderFiltration.ctorIdx",
  "constType":
  "{ℒ : Type u_1} →\n  {inst : Nontrivial ℒ} →\n    {inst_1 : Lattice ℒ} →\n      {inst_2 : BoundedOrder ℒ} →\n        {S : Type u_2} →\n          {inst_3 : CompleteLattice S} → {μ : { p // p.1 < p.2 } → S} → HarderNarasimhan.JordanHolderFiltration μ → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Int.instSub",
   "True",
   "Eq.trans",
   "instHAdd",
   "Neg.neg",
   "Lean.Omega.LinearCombo",
   "Lean.Omega.Coeffs",
   "Int.instNegInt",
   "congrArg",
   "Int",
   "Lean.Omega.LinearCombo.neg_eval",
   "Lean.Omega.LinearCombo.instSub",
   "HAdd.hAdd",
   "eq_self",
   "Lean.Omega.LinearCombo.sub_eq_add_neg",
   "Lean.Omega.LinearCombo.instNeg",
   "of_eq_true",
   "Int.instAdd",
   "HSub.hSub",
   "Lean.Omega.LinearCombo.add_eval",
   "Lean.Omega.LinearCombo.eval",
   "Lean.Omega.LinearCombo.instAdd",
   "Eq",
   "instHSub"],
  "name": "Lean.Omega.LinearCombo.sub_eval",
  "constType":
  "∀ (l₁ l₂ : Omega.LinearCombo) (v : Omega.Coeffs), (l₁ - l₂).eval v = l₁.eval v - l₂.eval v",
  "constCategory": "Theorem"},
 {"references":
  ["AddCommMonoid",
   "AddCommSemigroup.mk",
   "AddMonoid.toAddSemigroup",
   "AddCommMonoid.add_comm",
   "AddCommMonoid.toAddMonoid",
   "AddCommSemigroup"],
  "name": "AddCommMonoid.toAddCommSemigroup",
  "constType": "{M : Type u} → [self : AddCommMonoid M] → AddCommSemigroup M",
  "constCategory": "Definition"},
 {"references":
  ["AddCommMonoid",
   "Submodule.nontrivial_iff",
   "Module",
   "Nontrivial",
   "Eq",
   "propext",
   "Submodule",
   "Semiring"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_5",
  "constType":
  "∀ (R : Type u_1) {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M],\n  Nontrivial (Submodule R M) = Nontrivial M",
  "constCategory": "Theorem"},
 {"references": ["PartialOrder", "CompleteSemilatticeSup"],
  "name": "CompleteSemilatticeSup.toPartialOrder",
  "constType":
  "{α : Type u_8} → [self : CompleteSemilatticeSup α] → PartialOrder α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "rfl",
   "Nat",
   "Nat.cast",
   "instHAdd",
   "Int.instAdd",
   "Eq",
   "instNatCastInt",
   "Int"],
  "name": "Int.natCast_add",
  "constType": "∀ (n m : ℕ), ↑(n + m) = ↑n + ↑m",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Int.instSub",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "le_of_le_of_eq",
   "Classical.propDecidable",
   "Eq.symm",
   "Int.instLEInt",
   "HSub.hSub",
   "Lean.Omega.tidy_sat",
   "Lean.Omega.LinearCombo.add_eval",
   "Int.add_one_le_of_lt",
   "Bool.true",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Lean.Omega.combo_sat'",
   "Neg.neg",
   "Lean.Omega.Constraint.addInequality_sat",
   "BoundedOrder",
   "Lean.Omega.LinearCombo.coordinate",
   "Int.instNegInt",
   "instDecidableEqBool",
   "Nat",
   "instOfNat",
   "Eq.refl",
   "Nat.lt_of_not_le",
   "Lattice",
   "Top.top",
   "id",
   "Lean.Omega.Int.sub_congr",
   "Lean.Omega.LinearCombo.instAdd",
   "Nat.find",
   "Lean.Omega.LinearCombo.coordinate_eval_2",
   "Bool",
   "Nat.cast",
   "Lean.Omega.LinearCombo.coordinate_eval_0",
   "Option.some",
   "Lean.Omega.Constraint.combine_sat'",
   "Decidable.decide",
   "Lean.Omega.LinearCombo.mk",
   "Lean.Omega.LinearCombo.instSub",
   "Lean.Omega.Coeffs.ofList",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "Int.instAdd",
   "Lean.Omega.Constraint.not_sat'_of_isImpossible",
   "Preorder.toLE",
   "Eq",
   "of_decide_eq_true",
   "instNatCastInt",
   "Not",
   "List.nil",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "Lean.Omega.LinearCombo",
   "Lean.Omega.Int.add_congr",
   "Lean.Omega.Constraint.isImpossible",
   "Int.sub_nonneg_of_le",
   "OfNat.ofNat",
   "Int",
   "Lean.Omega.LinearCombo.coordinate_eval_1",
   "HAdd.hAdd",
   "LT.lt",
   "Lean.Omega.LinearCombo.sub_eval",
   "Lean.Omega.Int.ofNat_lt_of_lt",
   "Option.none",
   "LE.le",
   "Int.natCast_add",
   "False",
   "Lean.Omega.LinearCombo.eval",
   "Lean.Omega.Constraint.mk",
   "instHSub",
   "instLENat",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.theorem3d10._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] [inst_1 : BoundedOrder ℒ] (f : ℕ → ℒ) (hffin : ∃ n, f n = ⊤) (i j : ℕ),\n  i < j → j < Nat.find hffin → ¬i + 1 ≤ Nat.find hffin → False",
  "constCategory": "Theorem"},
 {"references":
  ["Max.max",
   "PartialOrder.toPreorder",
   "SemilatticeSup.toMax",
   "LE.le",
   "And",
   "SemilatticeSup.toPartialOrder",
   "SemilatticeSup",
   "Eq",
   "sup_le_iff",
   "Preorder.toLE",
   "propext"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_26",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b c : α}, (a ⊔ b ≤ c) = (a ≤ c ∧ b ≤ c)",
  "constCategory": "Theorem"},
 {"references": ["rfl", "Eq.rec", "Eq"],
  "name": "implies_congr",
  "constType":
  "∀ {p₁ p₂ : Sort u} {q₁ q₂ : Sort v}, p₁ = p₂ → q₁ = q₂ → (p₁ → q₁) = (p₂ → q₂)",
  "constCategory": "Theorem"},
 {"references":
  ["AddCommMonoid",
   "SetLike.instMembership",
   "Submodule.setLike",
   "Module",
   "Iff",
   "Membership.mem",
   "Eq",
   "SetLike.ext",
   "Submodule",
   "Semiring"],
  "name": "Submodule.ext",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  {p q : Submodule R M}, (∀ (x : M), x ∈ p ↔ x ∈ q) → p = q",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "SetLike.coe_eq_coe",
   "Membership.mem",
   "SetLike",
   "Eq",
   "Subtype.val",
   "propext"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_9",
  "constType":
  "∀ {A : Type u_1} {B : Type u_2} [i : SetLike A B] {p : A} {x y : ↥p}, (↑x = ↑y) = (x = y)",
  "constCategory": "Theorem"},
 {"references":
  ["of_decide_eq_self_eq_true",
   "instBEqOfDecidableEq",
   "ReflBEq.mk",
   "LawfulBEq",
   "DecidableEq",
   "LawfulBEq.mk",
   "Eq",
   "of_decide_eq_true"],
  "name": "instLawfulBEq",
  "constType": "∀ {α : Type u_1} [inst : DecidableEq α], LawfulBEq α",
  "constCategory": "Theorem"},
 {"references": ["AddGroup", "AddCommGroup"],
  "name": "AddCommGroup.toAddGroup",
  "constType": "{G : Type u} → [self : AddCommGroup G] → AddGroup G",
  "constCategory": "Definition"},
 {"references":
  ["Submodule.hasQuotient",
   "Ring.toNonAssocRing",
   "Submodule.Quotient.module'",
   "HasQuotient.Quotient",
   "Submodule.Quotient.instSMul._proof_1",
   "Module",
   "AddGroupWithOne.toAddMonoidWithOne",
   "AddCommGroup",
   "SMulZeroClass.toSMul",
   "instDistribSMul",
   "AddZeroClass.toAddZero",
   "AddMonoidWithOne.toAddMonoid",
   "Ring.toSemiring",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "AddCommGroup.toAddCommMonoid",
   "AddZero.toZero",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "DistribSMul.toSMulZeroClass",
   "Ring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.Quotient.module",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Ring R] →\n      [inst_1 : AddCommGroup M] → [inst_2 : _root_.Module R M] → (P : Submodule R M) → _root_.Module R (M ⧸ P)",
  "constCategory": "Definition"},
 {"references": ["Unique", "Eq", "Inhabited", "Inhabited.default"],
  "name": "Unique.mk",
  "constType":
  "{α : Sort u} → (toInhabited : Inhabited α) → (∀ (a : α), a = default) → Unique α",
  "constCategory": "Other"},
 {"references":
  ["LocalizedModule.r.setoid",
   "Subtype",
   "SetLike.instMembership",
   "LocalizedModule",
   "Prod.mk",
   "Module",
   "Submonoid.instSetLike",
   "CommSemiring",
   "CommSemiring.toSemiring",
   "Membership.mem",
   "MulZeroOneClass.toMulOneClass",
   "Prod",
   "Submonoid",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Quotient.mk'",
   "NonAssocSemiring.toMulZeroOneClass"],
  "name": "LocalizedModule.mk",
  "constType":
  "{R : Type u} →\n  [inst : CommSemiring R] →\n    {S : Submonoid R} →\n      {M : Type v} → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → M → ↥S → LocalizedModule S M",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.S₀_order",
   "Finset",
   "Eq.trans",
   "Singleton.singleton",
   "Set.toFinset_subset_toFinset",
   "HarderNarasimhan.impl.prop3d12",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "Finset.min'",
   "CompleteSemilatticeInf.toPartialOrder",
   "HarderNarasimhan.S",
   "ClosureOperator.IsClosed",
   "OrderTheory.coe'",
   "Prod.snd",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Iff",
   "Submodule.instBot",
   "AddCommGroup.toAddCommMonoid",
   "Top.top",
   "Eq.mpr",
   "CompleteLattice.toBoundedOrder",
   "HarderNarasimhan.Semistable",
   "RelEmbedding.toEmbedding",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.impl.μ_nonempty",
   "Prod.fst",
   "HarderNarasimhan.impl.prop3d13₂._simp_3",
   "HarderNarasimhan._μ",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice.toConditionallyCompleteLattice",
   "LinearExtension",
   "Set",
   "Submodule.instTop",
   "Set.toFinset",
   "AddCommGroup",
   "lt_of_lt_of_le",
   "PrimeSpectrum",
   "LinearOrder.toPartialOrder",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.instPartialOrderS₀",
   "Submodule.completeLattice",
   "Ne",
   "eq_of_le_of_ge",
   "HarderNarasimhan.S₀",
   "CompleteLattice.toCompleteSemilatticeInf",
   "bot_lt_top",
   "OrderTheory.DedekindMacNeilleCompletion",
   "Module.Finite",
   "le_refl",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.instLES₀",
   "Subtype.instLE",
   "Prod.mk",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Membership.mem",
   "HarderNarasimhan.μ",
   "Subtype.preorder",
   "Preorder.toLT",
   "Iff.mp",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "GT.gt",
   "RelEmbedding.instFunLike",
   "HarderNarasimhan.impl.prop3d13₂._simp_2",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "SemilatticeInf.toPartialOrder",
   "SetLike.instMembership",
   "And.right",
   "True.intro",
   "Bot.bot",
   "HarderNarasimhan.impl._μ_mono_right",
   "Finset.min'_subset",
   "Finset.instSingleton",
   "HasSubset.Subset",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "HarderNarasimhan.impl.rmk4d14₁._simp_1_4",
   "ConditionallyCompleteLattice.toLattice",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.instNontrivial",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Eq.mp",
   "Function.Embedding.toFun",
   "DFunLike.coe",
   "Submodule",
   "Iff.intro",
   "congrArg",
   "instDistribLatticeOfLinearOrder",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.instLinearOrderS₀",
   "HarderNarasimhan.Semistable.mk",
   "RelEmbedding.instEmbeddingLike",
   "OrderBot.toBot",
   "Submodule.instOrderBot",
   "RelEmbedding",
   "HarderNarasimhan.impl.rmk4d14₁._simp_1_2",
   "Set.instLE",
   "HarderNarasimhan.impl.rmk4d14₁._simp_1_1",
   "Not",
   "HarderNarasimhan.impl.rmk4d14₁._simp_1_3",
   "CommRing.toCommSemiring",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "CommSemiring.toSemiring",
   "HarderNarasimhan.Semistable.semistable",
   "Finset.instHasSubset",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "Set.instHasSubset",
   "LT.lt",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Subtype.mk",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.rmk4d14₁",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  HarderNarasimhan.Semistable (HarderNarasimhan.μ R M) ↔\n    ∀ (N : HarderNarasimhan.ℒ R M) (hN : ⊥ < N),\n      HarderNarasimhan.μA (HarderNarasimhan.μ R M) ⟨(⊥, N), hN⟩ =\n        OrderTheory.coe'.toFun {(HarderNarasimhan._μ R M ⟨(⊥, ⊤), ⋯⟩).toFinset.min' ⋯}",
  "constCategory": "Theorem"},
 {"references":
  ["Real.instZero",
   "Real",
   "NNReal",
   "LE.le",
   "Subtype.instLinearOrder",
   "LinearOrder",
   "Zero.toOfNat0",
   "Real.linearOrder",
   "OfNat.ofNat",
   "Real.instLE"],
  "name": "NNReal.instLinearOrder",
  "constType": "LinearOrder NNReal",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Real.instPreorder",
   "PartialOrder.toPreorder",
   "Module",
   "AddCommGroup.toAddGroup",
   "MulAction.toSMul",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.casesOn",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "Preorder.toLE",
   "AddSemigroup.toAdd",
   "PosSMulStrictMono",
   "Real",
   "instHAdd",
   "AddCommGroup.add_comm",
   "LinearOrder",
   "AddCommMonoid.mk",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "Real.semiring",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "Real.instZero",
   "AddMonoid.toAddSemigroup",
   "LE.le",
   "HEq"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.noConfusionType",
  "constType":
  "{V : Type u_1} →\n  Sort u → HarderNarasimhan.TotallyOrderedRealVectorSpace V → HarderNarasimhan.TotallyOrderedRealVectorSpace V → Sort u",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "LinearMap.instFunLike",
   "Module",
   "Submodule.module",
   "Membership.mem",
   "Submodule.map",
   "eq_true",
   "Submodule",
   "Submodule.subtype",
   "LinearMap.semilinearMapClass",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq",
   "Preorder.toLE",
   "SetLike.instMembership",
   "True",
   "LinearMap",
   "RingHomSurjective.ids",
   "Submodule.setLike",
   "Submodule.map_subtype_le",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "CompleteLattice.toCompleteSemilatticeInf",
   "Semiring"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_10",
  "constType":
  "∀ {R : Type u_1} {M : Type u_5} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M) (p' : Submodule R ↥p), (Submodule.map p.subtype p' ≤ p) = True",
  "constCategory": "Theorem"},
 {"references": ["Preorder", "LE.le", "Preorder.toLE"],
  "name": "Preorder.le_refl",
  "constType": "∀ {α : Type u_2} [self : Preorder α] (a : α), a ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Real.instPreorder",
   "PartialOrder.toPreorder",
   "Module",
   "AddCommGroup.toAddGroup",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.noConfusionType",
   "MulAction.toSMul",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.casesOn",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "AddGroup.toSubNegMonoid",
   "Preorder.toLE",
   "Eq.ndrec",
   "Eq",
   "AddSemigroup.toAdd",
   "PosSMulStrictMono",
   "HEq.refl",
   "Real",
   "instHAdd",
   "AddCommGroup.add_comm",
   "AddCommMonoid.mk",
   "LinearOrder",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "Real.semiring",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "Real.instZero",
   "Eq.refl",
   "AddMonoid.toAddSemigroup",
   "LE.le",
   "HEq"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.noConfusion",
  "constType":
  "{V : Type u_1} →\n  {P : Sort u} →\n    {x1 x2 : HarderNarasimhan.TotallyOrderedRealVectorSpace V} →\n      x1 = x2 → HarderNarasimhan.TotallyOrderedRealVectorSpace.noConfusionType P x1 x2",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.μB",
   "Prod.snd",
   "Bot.bot",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "Nontrivial",
   "Top.top",
   "OrderBot.toBot",
   "Subtype.mk",
   "Preorder.toLE",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μBstar",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → S",
  "constCategory": "Definition"},
 {"references": ["OrderDual", "Top", "Bot", "Top.mk", "Bot.bot"],
  "name": "OrderDual.instTop",
  "constType": "(α : Type u) → [Bot α] → Top αᵒᵈ",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "instHAdd",
   "Nat.recAux",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "absurd",
   "Nat",
   "instSubNat",
   "instOfNatNat",
   "Eq.refl",
   "HSub.hSub",
   "Ne",
   "Eq",
   "instHSub"],
  "name": "Nat.sub_one_add_one",
  "constType": "∀ {a : ℕ}, a ≠ 0 → a - 1 + 1 = a",
  "constCategory": "Theorem"},
 {"references": ["Not", "Classical.not_not", "Eq", "propext"],
  "name": "Classical.not_not._simp_3",
  "constType": "∀ {a : Prop}, (¬¬a) = a",
  "constCategory": "Theorem"},
 {"references":
  ["Set.image",
   "Set.Nonempty",
   "Set",
   "Membership.mem",
   "Exists.intro",
   "Set.mem_image_of_mem",
   "Set.Nonempty.image.match_1_1",
   "Set.instMembership"],
  "name": "Set.Nonempty.image",
  "constType":
  "∀ {α : Type u_1} {β : Type u_2} (f : α → β) {s : Set α}, s.Nonempty → (f '' s).Nonempty",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name":
  "HarderNarasimhan.impl.not_top_of_Nontrivial_TotallyOrderedRealVectorSpace._simp_1_1",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "FunLike",
   "SetLike.instMembership",
   "SemilinearMapClass",
   "Submodule.mem_comap",
   "Module",
   "Membership.mem",
   "DFunLike.coe",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.comap",
   "Submodule.setLike",
   "Eq",
   "propext",
   "Semiring"],
  "name": "HarderNarasimhan.impl.lift_quot_middle._simp_1_2",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} {x : M} {F : Type u_9} [inst_6 : FunLike F M M₂] [inst_7 : SemilinearMapClass F σ₁₂ M M₂] {f : F}\n  {p : Submodule R₂ M₂}, (x ∈ Submodule.comap f p) = (f x ∈ p)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "True",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "instOfNatAtLeastTwo",
   "Preorder.toLT",
   "eq_true",
   "OfNat.ofNat",
   "Nat.ofNat_pos",
   "LT.lt",
   "IsOrderedRing",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "Semiring.toNonAssocSemiring",
   "Nat.AtLeastTwo",
   "MulZeroClass.toZero",
   "PartialOrder",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "Nontrivial",
   "Zero.toOfNat0",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "Semiring"],
  "name": "Nat.ofNat_pos._simp_1",
  "constType":
  "∀ {α : Type u_3} [inst : Semiring α] [inst_1 : PartialOrder α] [IsOrderedRing α] [Nontrivial α] {n : ℕ}\n  [inst_4 : n.AtLeastTwo], (0 < OfNat.ofNat n) = True",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_11",
   "Finset",
   "Eq.trans",
   "Singleton.singleton",
   "Submodule.Quotient.module",
   "Classical.propDecidable",
   "HarderNarasimhan.impl.prop3d12",
   "Membership.mem.out",
   "Subtype.val",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "Finset.min'",
   "RingHom.id",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_5",
   "Eq.symm",
   "Eq.ndrec",
   "HarderNarasimhan.S",
   "HarderNarasimhan.Coprimary.coprimary",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "Exists.choose_spec",
   "ClosureOperator.IsClosed",
   "Submodule.addCommGroup",
   "OrderTheory.coe'",
   "HarderNarasimhan.S₀_order'",
   "Prod.snd",
   "LinearMap",
   "HarderNarasimhan.impl.piecewise_coprimary",
   "Set.instMembership",
   "Prod",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_7",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_8",
   "Finset.instMembership",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "Nat.find",
   "Submodule.hasQuotient",
   "RelEmbedding.toEmbedding",
   "HarderNarasimhan._μ._proof_1",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "CommSemiring",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.impl.μ_nonempty",
   "ExistsUnique.exists",
   "Prod.fst",
   "Nat.instPreorder",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "instOfNatNat",
   "HarderNarasimhan._μ",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
   "CompleteLattice.toConditionallyCompleteLattice",
   "lt_of_not_ge",
   "Nat.instAddMonoid",
   "Set.mem_toFinset",
   "LinearExtension",
   "Finset.val",
   "Set",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Submodule.instTop",
   "Set.toFinset",
   "AddCommGroup",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "HAdd.hAdd",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_10",
   "eq_self",
   "Nat.lt_of_succ_lt",
   "LinearOrder.toPartialOrder",
   "CommRing.toRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.instPartialOrderS₀",
   "Nat.le_of_succ_le",
   "Submodule.completeLattice",
   "ExistsUnique",
   "HarderNarasimhan.S₀",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTheory.DedekindMacNeilleCompletion",
   "Module.Finite",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_9",
   "Subtype.instLE",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Prod.mk",
   "HarderNarasimhan.μ",
   "Membership.mem",
   "Subtype.preorder",
   "Iff.mp",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.impl.prop3d13₂._simp_2",
   "Semiring.toNonAssocSemiring",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Eq.rec",
   "Semiring.toModule",
   "Nat.instIsOrderedAddMonoid",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "SetLike.instMembership",
   "Nat.instPartialOrder",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Nat.instStarRing",
   "IsOrderedAddMonoid.toAddLeftMono",
   "AddZeroClass.toAddZero",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat.lt_add_one",
   "Exists.casesOn",
   "Nat",
   "Finset.instSingleton",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "ConditionallyCompleteLattice.toLattice",
   "Multiset.instMembership",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Submodule.instNontrivial",
   "Subtype",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Eq.mp",
   "Submodule.module",
   "Function.Embedding.toFun",
   "Nat.instAddCancelCommMonoid",
   "congrArg",
   "Submodule",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "HarderNarasimhan.HarderNarasimhanFiltration.strict_mono",
   "Nat.instOne",
   "Ideal",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.instLinearOrderS₀",
   "Finset.min'_mem",
   "OrderTheory.instLinearOrderDedekindMacNeilleCompletion",
   "Set.instLE",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "HarderNarasimhan.HarderNarasimhanFiltration.μA_pseudo_strict_anti",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "Multiset",
   "LT.lt",
   "IsNoetherianRing",
   "lt_add_one",
   "DistribLattice.toLattice",
   "of_eq_true",
   "le_of_lt",
   "Submodule.setLike",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "LE.le",
   "ExistsUnique.unique",
   "Subtype.mk",
   "Submodule.addCommMonoid",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_12",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_1} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (HNFil : HarderNarasimhan.HarderNarasimhanFiltration (HarderNarasimhan.μ R M)) (n : ℕ) (hn : n + 1 < Nat.find ⋯),\n  have pcnp1 := ⋯;\n  { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Exists",
  "constType": "{α : Sort u} → (α → Prop) → Prop",
  "constCategory": "Other"},
 {"references":
  ["Quotient",
   "LocalizedModule.r.setoid",
   "Subtype",
   "SetLike.instMembership",
   "Submonoid.instSetLike",
   "Module",
   "CommSemiring",
   "CommSemiring.toSemiring",
   "Membership.mem",
   "MulZeroOneClass.toMulOneClass",
   "Submonoid",
   "Prod",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "NonAssocSemiring.toMulZeroOneClass"],
  "name": "LocalizedModule",
  "constType":
  "{R : Type u} →\n  [inst : CommSemiring R] →\n    Submonoid R → (M : Type v) → [inst_1 : AddCommMonoid M] → [_root_.Module R M] → Type (max u v)",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.μ_Admissible.rec",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.μ_Admissible",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.μ_Admissible.mk",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "IsTotal",
   "Or",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "WellFoundedGT",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.μ_Admissible.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        [inst_3 : WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [inst_4 : CompleteLattice S] →\n              {μ : { p // p.1 < p.2 } → S} →\n                {motive : HarderNarasimhan.μ_Admissible μ → Sort u} →\n                  (t : HarderNarasimhan.μ_Admissible μ) →\n                    ((μ_adm :\n                          (IsTotal S fun x1 x2 ↦ x1 ≤ x2) ∨\n                            ∀ (I : { p // p.1 < p.2 }), HarderNarasimhan.IsAttained μ I) →\n                        motive ⋯) →\n                      motive t",
  "constCategory": "Definition"},
 {"references": ["LE"],
  "name": "BoundedOrder",
  "constType": "(α : Type u) → [LE α] → Type u",
  "constCategory": "Other"},
 {"references": ["Preorder", "Set", "LE.le", "Preorder.toLE", "setOf"],
  "name": "Set.Iic",
  "constType": "{α : Type u_1} → [Preorder α] → α → Set α",
  "constCategory": "Definition"},
 {"references":
  ["DivInvMonoid.toInv",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "GroupWithZero.toDivInvMonoid",
   "MulZeroClass.toMul",
   "Preorder.toLT",
   "HMul.hMul",
   "MonoidWithZero.toMulZeroOneClass",
   "not_false_eq_true",
   "PartialOrder",
   "Eq.rec",
   "inv_mul_cancel₀",
   "InvOneClass.toInv",
   "MulOne.toOne",
   "InvolutiveInv.toInv",
   "MulZeroClass.zero_mul",
   "lt_of_mul_lt_mul_right",
   "MulZeroOneClass.toMulZeroClass",
   "Iff",
   "eq_false",
   "id",
   "instHMul",
   "Eq.mpr",
   "one_mul",
   "DivisionMonoid.toDivInvOneMonoid",
   "GroupWithZero.toDivisionMonoid",
   "MulOneClass.toMulOne",
   "DivisionMonoid.toInvolutiveInv",
   "MulZeroOneClass.toMulOneClass",
   "congrArg",
   "Iff.intro",
   "LT.lt.ne'",
   "congr",
   "GroupWithZero.toMonoidWithZero",
   "Zero.toOfNat0",
   "Eq",
   "LT.lt.le",
   "Not",
   "Inv.inv",
   "True",
   "GroupWithZero",
   "MulPosReflectLT",
   "OfNat.ofNat",
   "LT.lt",
   "inv_inv",
   "DivInvOneMonoid.toInvOneClass",
   "One.toOfNat1",
   "of_eq_true",
   "MulZeroClass.toZero",
   "False"],
  "name": "Right.inv_pos",
  "constType":
  "∀ {G₀ : Type u_3} [inst : GroupWithZero G₀] [inst_1 : PartialOrder G₀] [MulPosReflectLT G₀] {a : G₀}, 0 < a⁻¹ ↔ 0 < a",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Prod",
   "PartialOrder.toPreorder",
   "Subtype",
   "PartialOrder",
   "LE.le",
   "And",
   "Preorder.toLT",
   "Prod.snd",
   "Preorder.toLE",
   "Subtype.val",
   "Prod.fst"],
  "name": "HarderNarasimhan.InIntvl",
  "constType":
  "{ℒ : Type u_1} → [inst : PartialOrder ℒ] → { p // p.1 < p.2 } → ℒ → Prop",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "Decidable",
   "Subsingleton.elim",
   "Eq.refl",
   "instSubsingletonDecidable",
   "Eq.rec",
   "dite",
   "Eq",
   "Eq.ndrec"],
  "name": "dite.congr_simp",
  "constType":
  "∀ {α : Sort u} (c : Prop) {h : Decidable c} [h_1 : Decidable c] (t t_1 : c → α),\n  t = t_1 → ∀ (e e_1 : ¬c → α), e = e_1 → dite c t e = dite c t_1 e_1",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "Subtype.ext_iff",
   "Iff",
   "Membership.mem",
   "SetLike",
   "Eq",
   "Subtype.val",
   "Iff.symm"],
  "name": "SetLike.coe_eq_coe",
  "constType":
  "∀ {A : Type u_1} {B : Type u_2} [i : SetLike A B] {p : A} {x y : ↥p}, ↑x = ↑y ↔ x = y",
  "constCategory": "Theorem"},
 {"references": ["Preorder", "LE.le", "Preorder.toLE"],
  "name": "Antitone",
  "constType":
  "{α : Type u} → {β : Type v} → [Preorder α] → [Preorder β] → (α → β) → Prop",
  "constCategory": "Definition"},
 {"references":
  ["SetLike.instMembership",
   "Set.mem_singleton_iff",
   "Module",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "OfNat.ofNat",
   "Submodule",
   "AddCommMonoid",
   "Submodule.setLike",
   "Iff",
   "Submodule.instBot",
   "Zero.toOfNat0",
   "Eq",
   "AddZero.toZero",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.mem_bot",
  "constType":
  "∀ (R : Type u_1) {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M] {x : M},\n  x ∈ ⊥ ↔ x = 0",
  "constCategory": "Theorem"},
 {"references":
  ["HEq.refl",
   "Ideal.IsPrime",
   "CommSemiring",
   "CommSemiring.toSemiring",
   "PrimeSpectrum.mk",
   "Eq.casesOn",
   "PrimeSpectrum",
   "Ideal",
   "Eq.refl",
   "Eq.symm",
   "HEq",
   "PrimeSpectrum.ext.match_1",
   "PrimeSpectrum.asIdeal",
   "Eq",
   "Eq.ndrec"],
  "name": "PrimeSpectrum.ext",
  "constType":
  "∀ {R : Type u_1} {inst : CommSemiring R} {x y : PrimeSpectrum R}, x.asIdeal = y.asIdeal → x = y",
  "constCategory": "Theorem"},
 {"references":
  ["instHAdd",
   "CovariantClass",
   "covariant_flip_iff",
   "AddCommSemigroup",
   "CovariantClass.elim",
   "Function.swap",
   "AddCommMagma.to_isCommutative",
   "flip",
   "HAdd.hAdd",
   "Iff.mpr",
   "Covariant",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "CovariantClass.mk"],
  "name": "covariant_swap_add_of_covariant_add",
  "constType":
  "∀ (N : Type u_2) (r : N → N → Prop) [inst : AddCommSemigroup N] [CovariantClass N N (fun x1 x2 ↦ x1 + x2) r],\n  CovariantClass N N (Function.swap fun x1 x2 ↦ x1 + x2) r",
  "constCategory": "Theorem"},
 {"references": ["Mod.mod", "HMod", "Mod", "HMod.mk"],
  "name": "instHMod",
  "constType": "{α : Type u_1} → [Mod α] → HMod α α α",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.Semistable",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["Set",
   "Subtype.eq",
   "Membership.mem",
   "Eq",
   "Subtype.val",
   "Set.Elem",
   "Set.instMembership"],
  "name": "SetCoe.ext",
  "constType": "∀ {α : Type u} {s : Set α} {a b : ↑s}, ↑a = ↑b → a = b",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "LT.lt",
   "instLTNat",
   "Nat",
   "Exists",
   "And",
   "Nat.findX",
   "DecidablePred",
   "Subtype.val"],
  "name": "Nat.find",
  "constType": "{p : ℕ → Prop} → [DecidablePred p] → (∃ n, p n) → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Set",
   "isGLB_sInf",
   "CompleteSemilatticeInf",
   "CompleteSemilatticeInf.toInfSet",
   "IsGreatest.mono",
   "CompleteSemilatticeInf.toPartialOrder",
   "lowerBounds",
   "InfSet.sInf",
   "LE.le",
   "lowerBounds_mono_of_isCoinitialFor",
   "IsCoinitialFor",
   "Preorder.toLE"],
  "name": "sInf_le_sInf_of_isCoinitialFor",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteSemilatticeInf α] {s t : Set α}, IsCoinitialFor s t → sInf t ≤ sInf s",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.hasQuotient",
   "Subtype",
   "PartialOrder.toPreorder",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.Quotient.module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Membership.mem",
   "Preorder.toLT",
   "DFunLike.coe",
   "Subtype.val",
   "Submodule",
   "Prod.fst",
   "Submodule.Quotient.addCommGroup",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Eq",
   "rfl",
   "Submodule.mkQ",
   "CommRing.toCommSemiring",
   "SetLike.instMembership",
   "instHAdd",
   "Submodule.addCommGroup",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "Prod.snd",
   "LinearMap",
   "CommRing",
   "Ring.toSemiring",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "CommRing.toRing",
   "IsNoetherianRing",
   "AddCommMonoid.toAddCommSemigroup",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Submodule.submoduleOf",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.CP.f2._proof_1",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_1} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 })\n  (x x_1 : ↥(↑I).2),\n  (Submodule.submoduleOf (↑I).1 (↑I).2).mkQ (x + x_1) = (Submodule.submoduleOf (↑I).1 (↑I).2).mkQ (x + x_1)",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.SlopeLike",
   "Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "Subtype.val",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "And.intro",
   "PartialOrder",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "And.left",
   "Not",
   "lt_iff_le_not_ge",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.instNontrivialInterval",
   "Iff.mpr",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "HarderNarasimhan.SlopeLike.mk",
   "CompleteLattice",
   "HarderNarasimhan.SlopeLike.slopelike"],
  "name": "HarderNarasimhan.instSlopeLikeIntervalResμ",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} [hsl : HarderNarasimhan.SlopeLike μ]\n  {z : { p // p.1 < p.2 }}, HarderNarasimhan.SlopeLike (HarderNarasimhan.Resμ z μ)",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "List",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references": ["Finset.univ", "Nat", "Finset.card", "Fintype"],
  "name": "Fintype.card",
  "constType": "(α : Type u_4) → [Fintype α] → ℕ",
  "constCategory": "Definition"},
 {"references": ["Preorder", "PartialOrder", "LE.le", "Eq", "Preorder.toLE"],
  "name": "PartialOrder.mk",
  "constType":
  "{α : Type u_2} → [toPreorder : Preorder α] → (∀ (a b : α), a ≤ b → b ≤ a → a = b) → PartialOrder α",
  "constCategory": "Other"},
 {"references":
  ["ConditionallyCompleteLinearOrderBot",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot._proof_3",
   "CompleteLinearOrder.toDecidableLE",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot._proof_1",
   "Lattice.toSemilatticeSup",
   "CompleteLinearOrder.toDecidableEq",
   "PartialOrder.toPreorder",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot._proof_2",
   "ConditionallyCompleteLinearOrder.mk",
   "CompleteLattice.toLattice",
   "SemilatticeSup.toPartialOrder",
   "CompleteLinearOrder.toDecidableLT",
   "CompleteLinearOrder.compare_eq_compareOfLessAndEq",
   "ConditionallyCompleteLinearOrderBot.mk",
   "CompleteLinearOrder.le_total",
   "BoundedOrder.toOrderBot",
   "ConditionallyCompleteLattice",
   "CompleteLinearOrder.toCompleteLattice",
   "CompleteLinearOrder",
   "Preorder.toLE",
   "CompleteLinearOrder.toOrd",
   "CompleteLattice.toBoundedOrder",
   "CompleteLattice.toConditionallyCompleteLattice"],
  "name": "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
  "constType":
  "{α : Type u_5} → [h : CompleteLinearOrder α] → ConditionallyCompleteLinearOrderBot α",
  "constCategory": "Definition"},
 {"references": ["Subtype", "Subtype.val"],
  "name": "Subtype.property",
  "constType": "∀ {α : Sort u} {p : α → Prop} (self : Subtype p), p ↑self",
  "constCategory": "Theorem"},
 {"references":
  ["SMulZeroClass.mk",
   "MulActionWithZero.zero_smul",
   "MonoidWithZero.toMulZeroOneClass",
   "MonoidWithZero",
   "MulActionWithZero.smul_zero",
   "MulAction.toSMul",
   "MulZeroOneClass.toMulZeroClass",
   "MulZeroClass.toZero",
   "MulActionWithZero",
   "MonoidWithZero.toMonoid",
   "Zero",
   "SMulWithZero",
   "SMulWithZero.mk",
   "MulActionWithZero.toMulAction"],
  "name": "MulActionWithZero.toSMulWithZero",
  "constType":
  "(M₀ : Type u_12) →\n  (A : Type u_13) → {x : MonoidWithZero M₀} → {x_1 : Zero A} → [m : MulActionWithZero M₀ A] → SMulWithZero M₀ A",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Or",
   "Eq.refl",
   "PartialOrder",
   "LE.le",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.IsComparable"],
  "name": "HarderNarasimhan.IsComparable.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] (x y : ℒ), HarderNarasimhan.IsComparable x y = (x ≤ y ∨ y ≤ x)",
  "constCategory": "Theorem"},
 {"references": ["AddCommMonoid", "NonUnitalNonAssocSemiring"],
  "name": "NonUnitalNonAssocSemiring.toAddCommMonoid",
  "constType":
  "{α : Type u} → [self : NonUnitalNonAssocSemiring α] → AddCommMonoid α",
  "constCategory": "Definition"},
 {"references":
  ["Nat",
   "Nat.mul.match_1",
   "Nat.succ",
   "instOfNatNat",
   "Nat.below",
   "Nat.brecOn",
   "Nat.pred",
   "OfNat.ofNat"],
  "name": "Nat.sub",
  "constType": "ℕ → ℕ → ℕ",
  "constCategory": "Definition"},
 {"references": ["Iff.mpr", "Iff", "Iff.mp", "Iff.intro"],
  "name": "Iff.symm",
  "constType": "∀ {a b : Prop}, (a ↔ b) → (b ↔ a)",
  "constCategory": "Theorem"},
 {"references":
  ["Iff.trans",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "True",
   "Eq.trans",
   "And",
   "le_inf_iff._simp_1",
   "true_and",
   "congrArg",
   "SemilatticeInf",
   "le_antisymm_iff",
   "iff_self",
   "of_eq_true",
   "Min.min",
   "congr",
   "Iff",
   "LE.le",
   "inf_le_left._simp_1",
   "Eq",
   "Preorder.toLE",
   "le_refl._simp_1",
   "SemilatticeInf.toPartialOrder"],
  "name": "inf_eq_left",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeInf α] {a b : α}, a ⊓ b = a ↔ a ≤ b",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "Prod.fst",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "And.intro",
   "HarderNarasimhan.impl.lem2d4₁",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "lt_of_le_of_lt'",
   "inf_lt_left",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Lattice.toSemilatticeInf",
   "lt_of_le_of_lt",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "HarderNarasimhan.impl.lem2d4₂I",
   "HarderNarasimhan.μA",
   "Min.min",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "SemilatticeSup.toMax",
   "HarderNarasimhan.in_TotIntvl",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice",
   "HarderNarasimhan.impl.lem2d4₃I"],
  "name": "HarderNarasimhan.lemma_2_4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Convex μ →\n    ∀ (x w : ℒ) (hxw : ¬x ≤ w) (u t : ℒ) (huxw : u ≤ x ⊓ w) (hxwt : x ⊔ w ≤ t),\n      (HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩ ≤ HarderNarasimhan.μmax μ ⟨(x ⊓ w, x), ⋯⟩ ∧\n          HarderNarasimhan.μmax μ ⟨(x ⊓ w, x), ⋯⟩ ≤ HarderNarasimhan.μmax μ ⟨(w, t), ⋯⟩) ∧\n        HarderNarasimhan.μA μ ⟨(u, x), ⋯⟩ ≤ HarderNarasimhan.μA μ ⟨(w, x ⊔ w), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HarderNarasimhan.StI",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "Membership.mem",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil_prop_of_def",
   "lt_of_le_of_ne",
   "HarderNarasimhan.impl.HNFil",
   "Subtype.val",
   "Prod.fst",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "Preorder.toLE",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "Set",
   "instHAdd",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "OfNat.ofNat",
   "Set.instMembership",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "Nat",
   "upperBounds",
   "Iff.mpr",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "lt_top_iff_ne_top",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil_is_strict_mono",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (n : ℕ),\n  HarderNarasimhan.impl.HNFil μ n ≠ ⊤ → HarderNarasimhan.impl.HNFil μ n < HarderNarasimhan.impl.HNFil μ (n + 1)",
  "constCategory": "Theorem"},
 {"references":
  ["_private.Mathlib.Data.Real.Basic.0.Real.zero", "Real", "Zero.mk", "Zero"],
  "name": "Real.instZero",
  "constType": "Zero ℝ",
  "constCategory": "Definition"},
 {"references": ["PUnit", "Nat", "Nat.rec", "PProd"],
  "name": "Nat.below",
  "constType": "{motive : ℕ → Sort u} → ℕ → Sort (max 1 u)",
  "constCategory": "Definition"},
 {"references": ["GetElem", "outParam", "GetElem?"],
  "name": "GetElem?.toGetElem",
  "constType":
  "{coll : Type u} →\n  {idx : Type v} →\n    {elem : outParam (Type w)} →\n      {valid : outParam (coll → idx → Prop)} → [self : GetElem? coll idx elem valid] → GetElem coll idx elem valid",
  "constCategory": "Definition"},
 {"references": ["Not", "Eq"],
  "name": "Ne",
  "constType": "{α : Sort u} → α → α → Prop",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "HarderNarasimhan.Affine.rec",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "HarderNarasimhan.Affine.mk",
   "HarderNarasimhan.Affine",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Affine.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.Affine μ → Sort u} →\n                (t : HarderNarasimhan.Affine μ) →\n                  ((affine : ∀ (a b : ℒ) (h : ¬a ≤ b), μ ⟨(a ⊓ b, a), ⋯⟩ = μ ⟨(b, a ⊔ b), ⋯⟩) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["Finset",
   "Ring.toNonAssocRing",
   "Submodule.Quotient.module",
   "HarderNarasimhan.impl.prop3d12p1._simp_1_1",
   "Exists.intro",
   "AddGroupWithOne.toAddMonoidWithOne",
   "SMulZeroClass.toSMul",
   "Membership.mem.out",
   "instDistribSMul",
   "Subtype.val",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "Minimal",
   "Finset.min'",
   "RingHom.id",
   "Eq.symm",
   "Module.IsNoetherian.finite",
   "Finset.min'_le",
   "LinearMap.ker",
   "Exists",
   "Submodule.addCommGroup",
   "Prod.snd",
   "LinearMap",
   "Set.instMembership",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "HarderNarasimhan.AdmittedResults.min_associated_prime_iff_min_supp",
   "Finset.instMembership",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "AddMonoid.toAddZeroClass",
   "Submodule.hasQuotient",
   "HarderNarasimhan._μ._proof_1",
   "HasQuotient.Quotient",
   "LinearMap.instFunLike",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.impl.μ_nonempty",
   "Prod.fst",
   "HarderNarasimhan._μ",
   "Eq",
   "Preorder.toLE",
   "propext",
   "LinearExtension",
   "Set",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "toLinearExtension",
   "Set.toFinset",
   "AddCommGroup",
   "PrimeSpectrum",
   "CommRing.toRing",
   "HarderNarasimhan.impl.exists_minimal_prime_contained_supp",
   "HarderNarasimhan.ℒ",
   "Submodule.completeLattice",
   "Module.Finite",
   "And.casesOn",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Membership.mem",
   "Preorder.toLT",
   "HarderNarasimhan.impl.support_quotient_mono",
   "AddMonoidWithOne.toAddMonoid",
   "GE.ge",
   "Semiring.toNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "Semiring.toModule",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "DistribSMul.toSMulZeroClass",
   "SetLike.instMembership",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "And",
   "AddZeroClass.toAddZero",
   "Exists.casesOn",
   "isNoetherian_submodule'",
   "Nontrivial",
   "id",
   "AddZero.toZero",
   "Submodule.submoduleOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "LinearMap.toSpanSingleton",
   "associatedPrimes",
   "Subtype",
   "Eq.mp",
   "Module.Finite.quotient",
   "Submodule.Quotient.instSMul._proof_1",
   "Submodule.module",
   "le_trans",
   "congrArg",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "instDistribLatticeOfLinearOrder",
   "Ideal",
   "isNoetherian_of_isNoetherianRing_of_finite",
   "OrderHom.monotone'",
   "PrimeSpectrum.asIdeal",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "Module.support",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "HarderNarasimhan.impl.mem_support_of_mem_associatedPrimes",
   "CommRing",
   "IsAssociatedPrime",
   "LT.lt",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.addCommMonoid"],
  "name": "HarderNarasimhan.impl.prop3d12p1",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 })\n  (N'' : HarderNarasimhan.ℒ R M),\n  HarderNarasimhan.InIntvl I N'' →\n    ∀ (q : Ideal R) (hq : q ∈ associatedPrimes R (↥(↑I).2 ⧸ Submodule.submoduleOf N'' (↑I).2)),\n      { asIdeal := q, isPrime := ⋯ } ≥ (HarderNarasimhan._μ R M I).toFinset.min' ⋯",
  "constCategory": "Theorem"},
 {"references": ["Preorder", "LE.le", "Preorder.toLE"],
  "name": "Preorder.le_trans",
  "constType":
  "∀ {α : Type u_2} [self : Preorder α] (a b c : α), a ≤ b → b ≤ c → a ≤ c",
  "constCategory": "Theorem"},
 {"references":
  ["InfSet",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Iff.mp",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "Subtype.coe_inj",
   "And.intro",
   "PartialOrder",
   "funext",
   "Eq.symm",
   "HarderNarasimhan.μmax_res_intvl",
   "Eq.rec",
   "And.left",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Exists.casesOn",
   "Prod",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "Eq.refl",
   "Nontrivial",
   "id",
   "Eq.mpr",
   "HarderNarasimhan.lt_lt",
   "setOf",
   "Subtype",
   "le_trans",
   "and_true",
   "HarderNarasimhan.Resμ",
   "Iff.intro",
   "Prod.fst",
   "congrArg",
   "Subtype.prop",
   "congr",
   "InfSet.sInf",
   "HarderNarasimhan.Interval",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Not",
   "True",
   "Set",
   "HarderNarasimhan.instBoundedOrderInterval",
   "exists_prop_congr",
   "LT.lt",
   "CompleteSemilatticeInf.toInfSet",
   "eq_self",
   "HarderNarasimhan.instNontrivialInterval",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.μA",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice",
   "HarderNarasimhan.μA_res_intvl._simp_1_2"],
  "name": "HarderNarasimhan.μA_res_intvl",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {I : { p // p.1 < p.2 }}\n  {S : Type u_2} [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} {J : { p // p.1 < p.2 }},\n  HarderNarasimhan.μA (HarderNarasimhan.Resμ I μ) J = HarderNarasimhan.μA μ ⟨(↑(↑J).1, ↑(↑J).2), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Or",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₁.wsl₁",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : PartialOrder ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.WeakSlopeLike₁ μ]\n  (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤), μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "GT.gt",
   "HarderNarasimhan.impl.JHFil._proof_2",
   "CompleteLinearOrder",
   "SemilatticeInf.toPartialOrder",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Set.instMembership",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.impl.JHFil._proof_4",
   "CompleteDistribLattice.toCoframe",
   "setOf",
   "HarderNarasimhan.Semistable",
   "Subtype",
   "GeneralizedCoheytingAlgebra.toLattice",
   "SemilatticeSup.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "Nat.instPreorder",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Nat.instOne",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.JHFil._proof_1",
   "Preorder.toLE",
   "Eq",
   "Not",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "Set",
   "instHAdd",
   "Exists.choose",
   "OfNat.ofNat",
   "LT.lt",
   "CompletelyDistribLattice.toCompleteLattice",
   "HAdd.hAdd",
   "StrictAnti",
   "One.toOfNat1",
   "Nat.succ",
   "HarderNarasimhan.impl.JHFil",
   "Ne",
   "Subtype.mk",
   "dite",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.JHFil.eq_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [hacc : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) (hμ : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤)\n  (hμsl : HarderNarasimhan.SlopeLike μ) (hst : HarderNarasimhan.Semistable μ)\n  (hdc : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) (n : ℕ),\n  HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc n.succ =\n    if h𝒮 :\n        {p |\n            ∃ (h : ⊥ < p),\n              p < HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc n ∧ μ ⟨(⊥, p), h⟩ = μ ⟨(⊥, ⊤), ⋯⟩}.Nonempty then\n      ⋯.choose\n    else ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["not_imp_not",
   "WellFounded",
   "Not",
   "Set.Nonempty",
   "Exists",
   "Set",
   "Membership.mem",
   "And",
   "Iff.mp",
   "Exists.intro",
   "Set.instMembership",
   "WellFounded.has_min.match_1_1",
   "Acc",
   "And.intro",
   "Acc.recOn",
   "WellFounded.apply"],
  "name": "WellFounded.has_min",
  "constType":
  "∀ {α : Type u_4} {r : α → α → Prop}, WellFounded r → ∀ (s : Set α), s.Nonempty → ∃ a ∈ s, ∀ x ∈ s, ¬r x a",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "PartialOrder.toPreorder",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Eq.refl",
   "PartialOrder",
   "Nontrivial",
   "Eq.rec",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μAstar.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S),\n  μ = μ_1 → HarderNarasimhan.μAstar μ = HarderNarasimhan.μAstar μ_1",
  "constCategory": "Theorem"},
 {"references": ["semiOutParam"],
  "name": "Coe",
  "constType": "semiOutParam (Sort u) → Sort v → Sort (max (max 1 u) v)",
  "constCategory": "Other"},
 {"references": ["SMul.mk", "SMul", "Mul", "instHMul", "HMul.hMul"],
  "name": "Mul.toSMul",
  "constType": "(α : Type u_9) → [Mul α] → SMul α α",
  "constCategory": "Definition"},
 {"references": ["Nat"],
  "name": "Fin",
  "constType": "ℕ → Type",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.impl.JHFil.eq_2",
   "Prod.mk",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "_private.HarderNarasimhan.JordanHolderFiltration.Impl.0.HarderNarasimhan.impl.JHFil.match_1.splitter",
   "GT.gt",
   "Eq.symm",
   "HarderNarasimhan.impl.JHFil._proof_2",
   "CompleteLinearOrder",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.impl.JHFil.eq_1",
   "Prod.snd",
   "Bot.bot",
   "Set.instMembership",
   "Unit",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "id",
   "Top.top",
   "HarderNarasimhan.impl.JHFil._proof_4",
   "CompleteDistribLattice.toCoframe",
   "setOf",
   "HarderNarasimhan.Semistable",
   "Subtype",
   "GeneralizedCoheytingAlgebra.toLattice",
   "SemilatticeSup.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "Nat.instPreorder",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Nat.instOne",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "WellFoundedGT",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.JHFil._proof_1",
   "Preorder.toLE",
   "Eq",
   "Not",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "Set",
   "instHAdd",
   "HarderNarasimhan.impl.JHFil.match_1",
   "Exists.choose",
   "OfNat.ofNat",
   "LT.lt",
   "CompletelyDistribLattice.toCompleteLattice",
   "HAdd.hAdd",
   "StrictAnti",
   "One.toOfNat1",
   "Nat.succ",
   "HarderNarasimhan.impl.JHFil",
   "Ne",
   "Subtype.mk",
   "dite",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.JHFil.eq_def",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [hacc : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) (hμ : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤)\n  (hμsl : HarderNarasimhan.SlopeLike μ) (hst : HarderNarasimhan.Semistable μ)\n  (hdc : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤) (k : ℕ),\n  HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc k =\n    match k with\n    | 0 => ⊤\n    | n.succ =>\n      let 𝒮 := {p | ∃ (h : ⊥ < p), p < HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc n ∧ μ ⟨(⊥, p), h⟩ = μ ⟨(⊥, ⊤), ⋯⟩};\n      if h𝒮 : 𝒮.Nonempty then ⋯.choose else ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Submodule.instNontrivial",
   "Module",
   "HarderNarasimhan.μ",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "And.intro",
   "WellFoundedGT",
   "HarderNarasimhan.S",
   "CompleteLattice.toConditionallyCompleteLattice",
   "CommRing.toCommSemiring",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "CommSemiring.toSemiring",
   "And",
   "HarderNarasimhan.impl.prop3d13₂",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "HarderNarasimhan.impl.prop3d13₁",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "inferInstance",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.S₀",
   "CompleteLattice.toBoundedOrder",
   "Module.Finite"],
  "name": "HarderNarasimhan.proposition_3_13",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  WellFoundedGT (HarderNarasimhan.ℒ R M) ∧ HarderNarasimhan.μA_DescendingChainCondition (HarderNarasimhan.μ R M)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "Nat.instPreorder",
   "HarderNarasimhan.WeakAscendingChainCondition.mk",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "PartialOrder",
   "Preorder.toLE",
   "le_top",
   "Exists",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.WeakAscendingChainCondition.rec",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "StrictMono"],
  "name": "HarderNarasimhan.WeakAscendingChainCondition.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.WeakAscendingChainCondition μ → Sort u} →\n                (t : HarderNarasimhan.WeakAscendingChainCondition μ) →\n                  ((wacc : ∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.mp",
   "eq_comm",
   "Preorder.toLT",
   "or_assoc",
   "HarderNarasimhan.IsComparable",
   "congrArg",
   "LT.lt",
   "or_self",
   "or_comm",
   "Or",
   "PartialOrder",
   "LE.le",
   "Eq.symm",
   "Eq",
   "Preorder.toLE",
   "le_iff_eq_or_lt",
   "propext"],
  "name": "HarderNarasimhan.impl.comparable_iff",
  "constType":
  "∀ {L : Type u_3} [inst : PartialOrder L] (x y : L), HarderNarasimhan.IsComparable x y → x < y ∨ y ≤ x",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "Nat.cast",
   "Int.ofNat_le",
   "Iff.mpr",
   "LE.le",
   "Int.instLEInt",
   "instLENat",
   "instNatCastInt",
   "Int"],
  "name": "Lean.Omega.Int.ofNat_le_of_le",
  "constType": "∀ {x y : ℕ}, x ≤ y → ↑x ≤ ↑y",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom", "Semiring.toNonAssocSemiring", "outParam", "Semiring"],
  "name": "RingHomCompTriple",
  "constType":
  "{R₁ : Type u_1} →\n  {R₂ : Type u_2} →\n    {R₃ : Type u_3} →\n      [inst : Semiring R₁] →\n        [inst_1 : Semiring R₂] → [inst_2 : Semiring R₃] → (R₁ →+* R₂) → (R₂ →+* R₃) → outParam (R₁ →+* R₃) → Prop",
  "constCategory": "Other"},
 {"references":
  ["Nat.find",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.impl.subseq._proof_1",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Exists",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.impl.JHFil.match_1",
   "BoundedOrder",
   "Nat.brecOn",
   "Bot.bot",
   "OfNat.ofNat",
   "Unit",
   "LT.lt",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.succ",
   "Lattice",
   "Nontrivial",
   "Nat.below",
   "Top.top",
   "dite",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.subseq",
  "constType":
  "{ℒ : Type u_1} → [Nontrivial ℒ] → [inst : Lattice ℒ] → [inst_1 : BoundedOrder ℒ] → (f : ℕ → ℒ) → (∃ k, f k = ⊥) → ℕ → ℒ",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "SetLike.instMembership",
   "Module",
   "LinearMap.mk",
   "Submodule.module",
   "AddHom.mk",
   "Membership.mem",
   "LinearMap",
   "Subtype.val",
   "Submodule.subtype._proof_1",
   "Submodule",
   "Submodule.subtype._proof_2",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "AddCommMonoid.toAddCommSemigroup",
   "RingHom.id",
   "Submodule.setLike",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Submodule.addCommMonoid",
   "Semiring"],
  "name": "Submodule.subtype",
  "constType":
  "{R : Type u} →\n  {M : Type v} →\n    [inst : Semiring R] → [inst_1 : AddCommMonoid M] → {module_M : _root_.Module R M} → (p : Submodule R M) → ↥p →ₗ[R] M",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Preorder",
   "LE.le",
   "Preorder.toLT",
   "OrderEmbedding.lt_iff_lt",
   "Eq",
   "Preorder.toLE",
   "OrderEmbedding",
   "DFunLike.coe",
   "RelEmbedding.instFunLike",
   "propext"],
  "name": "HarderNarasimhan.impl.prop3d13₂._simp_2",
  "constType":
  "∀ {α : Type u_2} {β : Type u_3} [inst : Preorder α] [inst_1 : Preorder β] (f : α ↪o β) {a b : α}, (f a < f b) = (a < b)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "instLTNat",
   "instHAdd",
   "Nat.lt_succ_of_le",
   "OfNat.ofNat",
   "Iff.intro",
   "LT.lt",
   "HAdd.hAdd",
   "Nat",
   "instOfNatNat",
   "Iff",
   "Nat.le_of_lt_succ",
   "LE.le",
   "instLENat"],
  "name": "Nat.lt_add_one_iff",
  "constType": "∀ {m n : ℕ}, m < n + 1 ↔ m ≤ n",
  "constCategory": "Theorem"},
 {"references":
  ["Finset.instSingleton",
   "Finset",
   "Set",
   "Singleton.singleton",
   "Finset.coe_singleton._proof_1_1",
   "Finset.toSet",
   "Set.instSingletonSet",
   "Eq"],
  "name": "Finset.coe_singleton",
  "constType": "∀ {α : Type u_1} (a : α), ↑{a} = {a}",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_6",
   "instAddNat",
   "Nat.find",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_3",
   "Prod.mk",
   "Classical.propDecidable",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_5",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.impl.instConvexITotIntvl",
   "WellFoundedGT",
   "HarderNarasimhan.Interval",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.μ_Admissible",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "HarderNarasimhan.instBoundedOrderInterval",
   "Prod.snd",
   "HarderNarasimhan.impl.HNFil_piecewise_semistable",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "Nat",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_7",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (i : ℕ) (h_1 : i < Nat.find ⋯),\n  HarderNarasimhan.Semistable\n    (HarderNarasimhan.Resμ ⟨(HarderNarasimhan.impl.HNFil μ i, HarderNarasimhan.impl.HNFil μ (i + 1)), ⋯⟩ μ)",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Prod",
   "PartialOrder.toPreorder",
   "Subtype",
   "Subtype.prop",
   "PartialOrder",
   "Preorder.toLT",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst"],
  "name":
  "HarderNarasimhan.impl.instCoeSubtypeProdLtFstSndOrderDualOfNontrivialOfBoundedOrder_harderNarasimhan._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : PartialOrder ℒ] (p : { p // p.1 < p.2 }), (↑p).1 < (↑p).2",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "instAddNat",
   "Eq.trans",
   "Classical.propDecidable",
   "Exists.intro",
   "HarderNarasimhan.S₂I",
   "Subtype.val",
   "HarderNarasimhan.S₁I",
   "HarderNarasimhan.S₁I._proof_1",
   "CompleteSemilatticeInf.toPartialOrder",
   "Nat.decreasingInduction",
   "Nat.sub_one_add_one",
   "Eq.symm",
   "Subtype.coe_eta",
   "Eq.ndrec",
   "instIsIrreflLt",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists",
   "HarderNarasimhan.impl.prop3d4₀func_defprop3₀",
   "HarderNarasimhan.impl.prop3d4₀func_defprop1",
   "inf_eq_right",
   "ne_of_gt",
   "Nat.recAux",
   "BoundedOrder",
   "HarderNarasimhan.impl.prop3d4₀func_helper",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "instNonemptyOfInhabited",
   "HarderNarasimhan.InIntvl",
   "eq_false",
   "Eq.refl",
   "HarderNarasimhan.impl.prop3d4₀func_fin_len",
   "Lattice",
   "Nat.add_lt_of_lt_sub",
   "Nat.find",
   "Nat.le_add_left",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.impl.prop3d4₀func_defprop2",
   "Nat.le_refl",
   "Nat.one_le_iff_ne_zero",
   "Prod.fst",
   "Nat.instPreorder",
   "le_rfl",
   "instOfNatNat",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "sup_le_iff",
   "CompleteLattice.toConditionallyCompleteLattice",
   "lt_of_le_of_lt'",
   "Set",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "HAdd.hAdd",
   "eq_self",
   "Max.max",
   "HarderNarasimhan.μA",
   "Nat.le_of_succ_le",
   "Ne",
   "CompleteLattice.toCompleteSemilatticeInf",
   "instHSub",
   "dite",
   "right_lt_sup",
   "HarderNarasimhan.impl.prop3d4._simp_1_4",
   "CompleteLattice",
   "Nat.find_min",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.impl.prop2d8₁I",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Nat.sub_one_lt",
   "Iff.mp",
   "GT.gt",
   "GE.ge",
   "And.intro",
   "not_false_eq_true",
   "Nat.sub_add_cancel",
   "forall_congr",
   "HSub.hSub",
   "Eq.rec",
   "Nat.zero_lt_of_ne_zero",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "lt_of_le_of_lt",
   "And.right",
   "And",
   "HarderNarasimhan.impl.prop3d4₀func_strict_decreasing",
   "Nat",
   "Decidable.byContradiction",
   "ge_of_eq",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "ConditionallyCompleteLattice.toLattice",
   "Nat.lt_of_le_sub_one",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "Subtype",
   "HarderNarasimhan.StI",
   "Eq.mp",
   "le_trans",
   "SemilatticeSup.toPartialOrder",
   "lt_of_le_of_ne",
   "congrArg",
   "HarderNarasimhan.impl.prop3d4₀func_len_nonzero",
   "irrefl",
   "Subtype.prop",
   "HarderNarasimhan.impl.prop3d4₀func_len",
   "Not",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "True",
   "HarderNarasimhan.impl.prop3d4₀func_defprop3",
   "Prod.mk.eta",
   "instHAdd",
   "HarderNarasimhan.impl.prop3d4₀func",
   "LT.lt",
   "of_eq_true",
   "instSubNat",
   "ne_of_lt",
   "Min.min",
   "HarderNarasimhan.impl.prop3d4._simp_1_3",
   "le_of_lt",
   "HarderNarasimhan.μA.congr_simp",
   "LE.le",
   "SemilatticeSup.toMax",
   "False",
   "Subtype.mk",
   "ge_trans",
   "instLENat",
   "instInhabitedTrue",
   "HarderNarasimhan.impl.prop3d4._simp_1_1"],
  "name": "HarderNarasimhan.impl.prop3d4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.μA_DescendingChainCondition μ →\n    ∀ (I : { p // p.1 < p.2 }), HarderNarasimhan.ConvexI I μ → (HarderNarasimhan.StI μ I).Nonempty",
  "constCategory": "Theorem"},
 {"references": ["Int.le", "LE.mk", "LE", "Int"],
  "name": "Int.instLEInt",
  "constType": "LE ℤ",
  "constCategory": "Definition"},
 {"references": ["Eq.refl", "Eq"],
  "name": "Eq.rec",
  "constType":
  "{α : Sort u_1} →\n  {a : α} → {motive : (a_1 : α) → a = a_1 → Sort u} → motive a ⋯ → {a_1 : α} → (t : a = a_1) → motive a_1 t",
  "constCategory": "Other"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Subtype.val",
   "Prod.fst",
   "And.intro",
   "Or.inl",
   "Or",
   "Subtype.prop",
   "PartialOrder",
   "CompleteLinearOrder",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "And.left",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "Or.casesOn",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.WeakSlopeLike₂.mk",
   "le_of_lt",
   "Eq.refl",
   "LE.le",
   "Nontrivial",
   "HarderNarasimhan.WeakSlopeLike₂",
   "Subtype.mk",
   "HarderNarasimhan.SlopeLike.slopelike"],
  "name": "HarderNarasimhan.instWeakSlopeLike₂OfSlopeLike",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S} [hμ : HarderNarasimhan.SlopeLike μ],\n  HarderNarasimhan.WeakSlopeLike₂ μ",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "binderNameHint",
  "constType": "{α : Sort u} → {β : Sort v} → {γ : Sort w} → α → β → γ → γ",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "Subtype", "LT.mk", "Subtype.val", "LT"],
  "name": "Subtype.instLT",
  "constType": "{α : Type u} → [LT α] → {P : α → Prop} → LT (Subtype P)",
  "constCategory": "Definition"},
 {"references":
  ["NeZero",
   "Nat",
   "Fin.val",
   "Nat.cast",
   "Zero.ofOfNat0",
   "Fin.NatCast.instNatCast",
   "instOfNatNat",
   "Fin",
   "Eq",
   "Fin.ext",
   "Fin.isLt",
   "Fin.val_cast_of_lt"],
  "name": "Fin.cast_val_eq_self",
  "constType": "∀ {n : ℕ} [inst : NeZero n] (a : Fin n), ↑↑a = a",
  "constCategory": "Theorem"},
 {"references":
  ["PrimeSpectrum",
   "Ideal",
   "Ideal.IsPrime",
   "CommSemiring.toSemiring",
   "CommSemiring"],
  "name": "PrimeSpectrum.mk",
  "constType":
  "{R : Type u_1} → [inst : CommSemiring R] → (asIdeal : Ideal R) → asIdeal.IsPrime → PrimeSpectrum R",
  "constCategory": "Other"},
 {"references":
  ["instDecidableAnd",
   "Nat.instMod",
   "instOfNatNat",
   "Eq.symm",
   "HSub.hSub",
   "Eq.rec",
   "Eq",
   "_private.Init.Data.Nat.Div.Basic.0.Nat.mod_eq_of_lt.match_1_1",
   "Not",
   "Nat.not_le_of_gt",
   "instLTNat",
   "HMod.hMod",
   "ite",
   "Nat.decLe",
   "And",
   "OfNat.ofNat",
   "Nat.decLt",
   "LT.lt",
   "absurd",
   "Nat",
   "Nat.mod_eq",
   "instSubNat",
   "if_neg",
   "LE.le",
   "False",
   "instHMod",
   "instHSub",
   "instLENat"],
  "name": "Nat.mod_eq_of_lt",
  "constType": "∀ {a b : ℕ}, a < b → a % b = a",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "sup_le",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Max.max",
   "SemilatticeSup.toMax",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.instPartialOrderInterval",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.instLatticeInterval._proof_4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (x x_1 x_2 : HarderNarasimhan.Interval z), x ≤ x_2 → x_1 ≤ x_2 → ↑x ⊔ ↑x_1 ≤ ↑x_2",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Classical.propDecidable",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "HarderNarasimhan.JordanHolderFiltration.strict_anti",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "Subtype.mk",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.step_cond₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.JordanHolderFiltration μ) (i : ℕ)\n  (hi : i < Nat.find ⋯) (z : ℒ) (h' : self.filtration (i + 1) < z),\n  z < self.filtration i → μ ⟨(self.filtration (i + 1), z), h'⟩ < μ ⟨(self.filtration (i + 1), self.filtration i), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["Prod", "Set"],
  "name": "SetRel",
  "constType": "Type u_6 → Type u_7 → Type (max u_7 u_6)",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "Decidable",
   "Eq.trans",
   "True",
   "ite",
   "congrArg",
   "ite_congr",
   "eq_self",
   "of_eq_true",
   "Eq.refl",
   "False",
   "instDecidableFalse",
   "Eq"],
  "name": "ite_cond_eq_false",
  "constType":
  "∀ {α : Sort u} {c : Prop} {x : Decidable c} (a b : α), c = False → (if c then a else b) = b",
  "constCategory": "Theorem"},
 {"references":
  ["Unique",
   "CommRing.toCommSemiring",
   "HarderNarasimhan.impl.instUniqueCoprimaryFiltration._proof_1",
   "Module",
   "CommSemiring.toSemiring",
   "Unique.mk",
   "AddCommGroup",
   "CommRing",
   "IsNoetherianRing",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration",
   "HarderNarasimhan.CoprimaryFiltration",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instUniqueCoprimaryFiltration",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] → Unique (HarderNarasimhan.CoprimaryFiltration R M)",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Nat.exists_eq_add_of_le",
   "Nat",
   "CanonicallyOrderedAdd.mk",
   "Nat.le_add_left",
   "ExistsAddOfLE.mk",
   "CanonicallyOrderedAdd",
   "Nat.le_add_right",
   "instLENat"],
  "name": "Nat.instCanonicallyOrderedAdd",
  "constType": "CanonicallyOrderedAdd ℕ",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "AddZeroClass",
   "CanonicallyOrderedAdd",
   "nonpos_iff_eq_zero",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "PartialOrder",
   "LE.le",
   "Zero.toOfNat0",
   "Preorder.toLE",
   "Eq",
   "AddZero.toZero",
   "propext"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_3",
  "constType":
  "∀ {α : Type u} [inst : AddZeroClass α] [inst_1 : PartialOrder α] [CanonicallyOrderedAdd α] {a : α}, (a ≤ 0) = (a = 0)",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "IsNoetherian",
   "PartialOrder.toPreorder",
   "Subtype",
   "SetLike.instMembership",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Membership.mem",
   "IsNoetherian.noetherian",
   "Submodule.FG",
   "Submodule",
   "AddCommMonoid",
   "Submodule.setLike",
   "Iff.mpr",
   "LE.le",
   "Submodule.completeLattice",
   "Preorder.toLE",
   "Submodule.addCommMonoid",
   "isNoetherian_submodule",
   "Semiring"],
  "name": "isNoetherian_submodule'",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  [IsNoetherian R M] (N : Submodule R M), IsNoetherian R ↥N",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "Module",
   "Subtype.ext_iff",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "Submodule",
   "AddCommMonoid",
   "Submodule.setLike",
   "Iff",
   "Zero.toOfNat0",
   "Subtype.mk",
   "Submodule.zero",
   "Eq",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "Submodule.mk_eq_zero",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] {module_M : _root_.Module R M}\n  (p : Submodule R M) {x : M} (h : x ∈ p), ⟨x, h⟩ = 0 ↔ x = 0",
  "constCategory": "Theorem"},
 {"references":
  ["Fin.last", "RelSeries.toFun", "RelSeries.length", "RelSeries", "SetRel"],
  "name": "RelSeries.last",
  "constType": "{α : Type u_1} → {r : SetRel α α} → RelSeries r → α",
  "constCategory": "Definition"},
 {"references": ["HasSubset"],
  "name": "HasSubset.Subset",
  "constType": "{α : Type u} → [self : HasSubset α] → α → α → Prop",
  "constCategory": "Definition"},
 {"references":
  ["ContravariantClass.mk",
   "Subtype",
   "PartialOrder.toPreorder",
   "mulPosReflectLT_iff_contravariant_pos",
   "Eq.mp",
   "MulZeroClass.toMul",
   "Preorder.toLT",
   "HMul.hMul",
   "Subtype.val",
   "False.elim",
   "PartialOrder",
   "le_of_mul_le_mul_of_pos_right",
   "Subtype.property",
   "MulPosReflectLE",
   "lt_self_iff_false._simp_1",
   "Zero.toOfNat0",
   "Eq",
   "Eq.ndrec",
   "LT.lt.le",
   "MulZeroClass",
   "LE.le.lt_of_ne",
   "MulPosReflectLT",
   "OfNat.ofNat",
   "ContravariantClass",
   "LT.lt",
   "MulZeroClass.toZero",
   "Iff.mpr",
   "False",
   "instHMul"],
  "name": "MulPosReflectLE.toMulPosReflectLT",
  "constType":
  "∀ {α : Type u_1} [inst : MulZeroClass α] [inst_1 : PartialOrder α] [MulPosReflectLE α], MulPosReflectLT α",
  "constCategory": "Theorem"},
 {"references": ["Add"],
  "name": "Add.mk",
  "constType": "{α : Type u} → (α → α → α) → Add α",
  "constCategory": "Other"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Real.instPreorder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Membership.mem",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Set.Elem",
   "Set.range",
   "Prod.fst",
   "Monotone",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "Real.instLT",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "HarderNarasimhan.StrongDescendingChainCondition.mk",
   "Preorder.toLE",
   "Eq",
   "Subtype.instLT",
   "Real",
   "Set",
   "CompleteLattice.toLattice",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "IsWellOrder",
   "HarderNarasimhan.impl.rmk4d4",
   "Nontrivial",
   "Top.top",
   "CompleteLattice.toBoundedOrder",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.remark_4_4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (r : ℒ → ℝ),\n  Monotone r →\n    (IsWellOrder ↑(Set.range r) fun x1 x2 ↦ x1 < x2) →\n      (∀ (z : { p // p.1 < p.2 }), r (↑z).1 = r (↑z).2 → μ z = ⊤) → HarderNarasimhan.StrongDescendingChainCondition μ",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "Monotone",
   "HarderNarasimhan.Coprimary",
   "RingHom.id",
   "Eq.symm",
   "PrimeSpectrum.instPartialOrder",
   "Eq.ndrec",
   "Semiring.toModule",
   "And.left",
   "HarderNarasimhan.Coprimary.coprimary",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "Submodule.addCommGroup",
   "LinearMap",
   "Bot.bot",
   "Set.instMembership",
   "Nat",
   "Eq.refl",
   "Submodule.instBot",
   "Nontrivial",
   "HEq",
   "HarderNarasimhan.CoprimaryFiltration.mk",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Nat.find",
   "Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "ExistsUnique.exists",
   "Submodule",
   "Nat.instPreorder",
   "Eq.propIntro",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "HarderNarasimhan.CoprimaryFiltration",
   "instOfNatNat",
   "Eq",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "LinearExtension",
   "Set",
   "instHAdd",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Submodule.instTop",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "HarderNarasimhan.CoprimaryFiltration.mk.noConfusion",
   "AddCommGroup",
   "IsAssociatedPrime",
   "Exists.choose",
   "CommRing",
   "Eq.casesOn",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "LT.lt",
   "HAdd.hAdd",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "instLENat",
   "Module.Finite"],
  "name": "HarderNarasimhan.CoprimaryFiltration.mk.injEq",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (filtration : ℕ → Submodule R M)\n  (monotone : Monotone filtration) (first_eq_bot : filtration 0 = ⊥) (fin_len : ∃ n, filtration n = ⊤)\n  (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j)\n  (piecewise_coprimary :\n    ∀ n < Nat.find fin_len,\n      HarderNarasimhan.Coprimary R (↥(filtration (n + 1)) ⧸ (filtration n).submoduleOf (filtration (n + 1))))\n  (strict_mono_associated_prime :\n    ∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len),\n      { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ })\n  (filtration_1 : ℕ → Submodule R M) (monotone_1 : Monotone filtration_1) (first_eq_bot_1 : filtration_1 0 = ⊥)\n  (fin_len_1 : ∃ n, filtration_1 n = ⊤)\n  (strict_mono_1 : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len_1 → filtration_1 i < filtration_1 j)\n  (piecewise_coprimary_1 :\n    ∀ n < Nat.find fin_len_1,\n      HarderNarasimhan.Coprimary R (↥(filtration_1 (n + 1)) ⧸ (filtration_1 n).submoduleOf (filtration_1 (n + 1))))\n  (strict_mono_associated_prime_1 :\n    ∀ (n : ℕ) (hn : n + 1 < Nat.find fin_len_1),\n      { asIdeal := ⋯.choose, isPrime := ⋯ } < { asIdeal := ⋯.choose, isPrime := ⋯ }),\n  ({ filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot, fin_len := fin_len,\n        strict_mono := strict_mono, piecewise_coprimary := piecewise_coprimary,\n        strict_mono_associated_prime := strict_mono_associated_prime } =\n      { filtration := filtration_1, monotone := monotone_1, first_eq_bot := first_eq_bot_1, fin_len := fin_len_1,\n        strict_mono := strict_mono_1, piecewise_coprimary := piecewise_coprimary_1,\n        strict_mono_associated_prime := strict_mono_associated_prime_1 }) =\n    (filtration = filtration_1)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Subtype.mk_lt_mk",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Subtype.coe_lt_coe",
   "Subtype.prop",
   "PartialOrder",
   "Subtype.property",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "Not",
   "Subtype.instLT",
   "lt_iff_le_not_ge",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Iff.mpr",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "Subtype.mk"],
  "name": "HarderNarasimhan.lt_lt",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  {p : { p // p.1 < p.2 }}, (↑(↑p).1, ↑(↑p).2).1 < (↑(↑p).1, ↑(↑p).2).2",
  "constCategory": "Theorem"},
 {"references":
  ["LinearMap.smulRight",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "Module",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "LinearMap",
   "Semiring.toModule",
   "LinearMap.id",
   "LinearMap.toSpanSingleton._proof_1",
   "Semiring"],
  "name": "LinearMap.toSpanSingleton",
  "constType":
  "(R : Type u_1) →\n  (M : Type u_4) → [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → M → R →ₗ[R] M",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "CompleteSemilatticeSup.toSupSet",
   "OmegaCompletePartialOrder",
   "CompleteLattice.instOmegaCompletePartialOrder._proof_2",
   "CompleteLattice.toCompleteSemilatticeSup",
   "DFunLike.coe",
   "Nat",
   "iSup",
   "CompleteSemilatticeInf.toPartialOrder",
   "OmegaCompletePartialOrder.Chain.instFunLikeNat",
   "OmegaCompletePartialOrder.Chain",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OmegaCompletePartialOrder.mk",
   "CompleteLattice",
   "CompleteLattice.instOmegaCompletePartialOrder._proof_1"],
  "name": "CompleteLattice.instOmegaCompletePartialOrder",
  "constType":
  "{α : Type u_2} → [CompleteLattice α] → OmegaCompletePartialOrder α",
  "constCategory": "Definition"},
 {"references": ["WithTop", "Option.some"],
  "name": "WithTop.some",
  "constType": "{α : Type u_1} → α → WithTop α",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "HarderNarasimhan.InIntvl",
   "Min.min",
   "Iff.mpr",
   "Lattice",
   "LE.le",
   "SemilatticeSup.toMax",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.ConvexI.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] {S : Type u_2} [inst_1 : CompleteLattice S] {I : { p // p.1 < p.2 }}\n  {μ : { p // p.1 < p.2 } → S},\n  (∀ (x y : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        HarderNarasimhan.InIntvl I y → ∀ (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩) →\n    HarderNarasimhan.ConvexI I μ",
  "constCategory": "Other"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Lattice.toSemilatticeSup",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Eq.mp",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "SemilatticeSup.toPartialOrder",
   "congrArg",
   "Prod.fst",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "BoundedOrder.toOrderTop",
   "Eq.symm",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "Eq",
   "propext",
   "HarderNarasimhan.impl.prop3d2",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "CompleteLattice.toLattice",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.μA",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "HarderNarasimhan.in_TotIntvl",
   "Subtype.mk",
   "CompleteLattice.toBoundedOrder",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_3_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Convex μ →\n    ∀ (x z : ℒ) (h : x < z),\n      HarderNarasimhan.μA μ ⟨(x, z), h⟩ = ⊤ →\n        ∀ (a : ℒ) (hax : a < x), HarderNarasimhan.μA μ ⟨(a, x), hax⟩ ≤ HarderNarasimhan.μA μ ⟨(a, z), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Subtype.prop",
   "PartialOrder",
   "LE.le",
   "Nontrivial",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "And.left"],
  "name": "HarderNarasimhan.instBoundedOrderInterval._proof_4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (a : HarderNarasimhan.Interval z), (↑z).1 ≤ ↑a",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "Module",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "LinearEquiv",
   "DFunLike.coe",
   "LinearEquiv.toAddEquiv",
   "OfNat.ofNat",
   "AddEquiv.map_eq_zero_iff",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Iff",
   "EquivLike.toFunLike",
   "Zero.toOfNat0",
   "LinearEquiv.instEquivLike",
   "RingHomInvPair",
   "Eq",
   "AddZero.toZero",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "LinearEquiv.map_eq_zero_iff",
  "constType":
  "∀ {R : Type u_1} {S : Type u_6} {M : Type u_7} {M₂ : Type u_9} [inst : Semiring R] [inst_1 : Semiring S]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] {module_M : _root_.Module R M}\n  {module_S_M₂ : _root_.Module S M₂} {σ : R →+* S} {σ' : S →+* R} {re₁ : RingHomInvPair σ σ'}\n  {re₂ : RingHomInvPair σ' σ} (e : M ≃ₛₗ[σ] M₂) {x : M}, e x = 0 ↔ x = 0",
  "constCategory": "Theorem"},
 {"references":
  ["LinearOrder",
   "instDistribLatticeOfLinearOrder._proof_4",
   "DistribLattice.mk",
   "DistribLattice",
   "LinearOrder.toLattice"],
  "name": "instDistribLatticeOfLinearOrder",
  "constType": "{α : Type u} → [LinearOrder α] → DistribLattice α",
  "constCategory": "Definition"},
 {"references":
  ["le_refl", "Preorder", "True", "LE.le", "eq_true", "Eq", "Preorder.toLE"],
  "name": "HarderNarasimhan.impl.subseq_prop2._simp_1_5",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), (a ≤ a) = True",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "SetLike.coe",
   "Set",
   "Iff",
   "Membership.mem",
   "SetLike",
   "Iff.rfl",
   "Set.instMembership"],
  "name": "SetLike.mem_coe",
  "constType":
  "∀ {A : Type u_1} {B : Type u_2} [i : SetLike A B] {p : A} {x : B}, x ∈ ↑p ↔ x ∈ p",
  "constCategory": "Theorem"},
 {"references": ["Not", "Or", "Iff", "And", "False", "or_imp"],
  "name": "not_or",
  "constType": "∀ {p q : Prop}, ¬(p ∨ q) ↔ ¬p ∧ ¬q",
  "constCategory": "Theorem"},
 {"references":
  ["le_refl", "Preorder", "True", "LE.le", "eq_true", "Eq", "Preorder.toLE"],
  "name": "HarderNarasimhan.impl.theorem3d10._simp_1_6",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), (a ≤ a) = True",
  "constCategory": "Theorem"},
 {"references":
  ["Finset",
   "PartialOrder.toPreorder",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Singleton.singleton",
   "instDistribLatticeOfLinearOrder",
   "HarderNarasimhan.instLinearOrderS₀._proof_1",
   "PrimeSpectrum.instPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "LinearExtension",
   "CommSemiring.toSemiring",
   "And",
   "LinearOrder",
   "Finset.instHasSubset",
   "Exists.choose",
   "CommRing",
   "PrimeSpectrum",
   "LinearOrder.toPartialOrder",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Finset.instSingleton",
   "HasSubset.Subset",
   "Iff",
   "LE.le",
   "HarderNarasimhan.S₀"],
  "name": "HarderNarasimhan.instLinearOrderS₀",
  "constType":
  "{R : Type u_1} → [inst : CommRing R] → [inst_1 : IsNoetherianRing R] → LinearOrder (HarderNarasimhan.S₀ R)",
  "constCategory": "Definition"},
 {"references":
  ["Quotient",
   "Setoid",
   "Exists",
   "Setoid.r",
   "Quotient.mk",
   "Quot.exists_rep",
   "Eq"],
  "name": "Quotient.exists_rep",
  "constType": "∀ {α : Sort u} {s : Setoid α} (q : Quotient s), ∃ a, ⟦a⟧ = q",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Classical.propDecidable",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "Nat.find",
   "Subtype",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "HarderNarasimhan.HarderNarasimhanFiltration.strict_mono",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "HarderNarasimhan.Interval",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.piecewise_semistable",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.HarderNarasimhanFiltration μ)\n  (i : ℕ) (h : i < Nat.find ⋯),\n  HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(self.filtration i, self.filtration (i + 1)), ⋯⟩ μ)",
  "constCategory": "Theorem"},
 {"references":
  ["absurd",
   "Not",
   "Bool",
   "Decidable",
   "_private.Init.Prelude.0.of_decide_eq_true.match_1_1",
   "Eq",
   "decide_eq_false",
   "Bool.true",
   "Decidable.decide",
   "ne_true_of_eq_false"],
  "name": "of_decide_eq_true",
  "constType": "∀ {p : Prop} [inst : Decidable p], decide p = true → p",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "RelSeries.toFun",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "Fin",
   "Fin.val",
   "HarderNarasimhan.impl.balabala2._simp_1_1",
   "NatCast.natCast",
   "RelSeries.length",
   "eq_of_heq",
   "Eq.symm",
   "HarderNarasimhan.IntervalSemistableRel",
   "Eq.ndrec",
   "HEq.casesOn",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Nat.lt_add_right",
   "Fin.castSucc",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "SetRel",
   "instNeZeroNatHAdd_1",
   "Prod",
   "Nat",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "id",
   "HEq",
   "Eq.mpr",
   "Fin.succ",
   "HarderNarasimhan.Semistable",
   "Subtype",
   "Nat.cast",
   "RelSeries",
   "Fin.val_cast_of_lt",
   "HarderNarasimhan.IntervalSemistableRel._proof_1",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "instOfNatNat",
   "Fin.NatCast.instNatCast",
   "Fin.mk",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "Eq",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "instHAdd",
   "RelSeries.step",
   "HarderNarasimhan.instBoundedOrderInterval",
   "Exists.choose",
   "Eq.casesOn",
   "OfNat.ofNat",
   "Nat.lt.step",
   "HAdd.hAdd",
   "LT.lt",
   "Nat.succ_lt_succ",
   "Subtype.mk",
   "Fin.isLt",
   "LT",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.balabala2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (s : RelSeries (HarderNarasimhan.IntervalSemistableRel μ))\n  {i : ℕ}, i + 1 < s.length → s.toFun ↑(i + 1) < s.toFun ↑(i + 2)",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "LT.lt",
   "LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "lt_iff_not_ge",
   "Iff",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Preorder.toLE",
   "Iff.symm"],
  "name": "not_le",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, ¬a ≤ b ↔ b < a",
  "constCategory": "Theorem"},
 {"references": ["Inv"],
  "name": "Inv.inv",
  "constType": "{α : Type u} → [self : Inv α] → α → α",
  "constCategory": "Definition"},
 {"references":
  ["OrderTop.le_top", "LE.le", "Top.top", "LE", "OrderTop", "OrderTop.toTop"],
  "name": "le_top",
  "constType":
  "∀ {α : Type u} [inst : LE α] [inst_1 : OrderTop α] {a : α}, a ≤ ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Preorder.toLT",
   "BoundedOrder",
   "Bot.bot",
   "LT.lt",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "OrderBot.toBot",
   "Preorder.toLE",
   "OrderTop.toTop",
   "bot_lt_top",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.JordanHolderRel._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [Nontrivial ℒ] [inst : Lattice ℒ] [inst_1 : BoundedOrder ℒ], ⊥ < ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["HAdd.hAdd",
   "Distrib.toAdd",
   "Semiring.toNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toDistrib",
   "instHAdd",
   "Eq.refl",
   "CommSemiring.toSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "CommSemiring",
   "Eq.symm",
   "Eq.ndrec",
   "Eq"],
  "name": "Mathlib.Tactic.Ring.add_congr",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {a a' b b' c : R}, a = a' → b = b' → a' + b' = c → a + b = c",
  "constCategory": "Theorem"},
 {"references": ["LT"],
  "name": "LT.lt",
  "constType": "{α : Type u} → [self : LT α] → α → α → Prop",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "And.right",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Subtype.prop",
   "PartialOrder",
   "LE.le",
   "Nontrivial",
   "HarderNarasimhan.Interval",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.instBoundedOrderInterval._proof_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (a : HarderNarasimhan.Interval z), ↑a ≤ (↑z).2",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "Prod.fst",
   "Iff.intro",
   "HarderNarasimhan.HarderNarasimhanFiltration.ext",
   "Eq.symm",
   "Preorder.toLE",
   "Eq",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "HEq.refl",
   "BoundedOrder",
   "Prod.snd",
   "Eq.casesOn",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "LT.lt",
   "Prod",
   "Nat",
   "Iff",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Eq.refl",
   "Lattice",
   "Nontrivial",
   "HEq",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.ext_iff",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} {x y : HarderNarasimhan.HarderNarasimhanFiltration μ},\n  x = y ↔ x.filtration = y.filtration",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "Bool",
   "BEq",
   "Subtype.val",
   "LawfulBEq.toReflBEq",
   "Subtype.instReflBEq",
   "LawfulBEq",
   "Subtype.eq",
   "LawfulBEq.mk",
   "LawfulBEq.eq_of_beq",
   "Subtype.instBEq",
   "Eq",
   "BEq.beq",
   "Bool.true"],
  "name": "Subtype.instLawfulBEq",
  "constType":
  "∀ {α : Type u} {p : α → Prop} [inst : BEq α] [LawfulBEq α], LawfulBEq { x // p x }",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "SetLike.instMembership",
   "ZeroMemClass.coe_eq_zero",
   "Membership.mem",
   "Subtype.val",
   "OfNat.ofNat",
   "ZeroMemClass",
   "SetLike",
   "Zero.toOfNat0",
   "ZeroMemClass.zero",
   "Zero",
   "Eq",
   "propext"],
  "name": "HarderNarasimhan.impl.rmk4d14₂._simp_1_6",
  "constType":
  "∀ {A : Type u_3} {M₁ : Type u_4} [inst : SetLike A M₁] [inst_1 : Zero M₁] [hA : ZeroMemClass A M₁] {S' : A} {x : ↥S'},\n  (↑x = 0) = (x = 0)",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.instPartialOrderInterval._proof_3",
   "Not",
   "HarderNarasimhan.instPartialOrderInterval._proof_2",
   "PartialOrder.toPreorder",
   "Subtype",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "PartialOrder.mk",
   "HarderNarasimhan.instPartialOrderInterval._proof_1",
   "PartialOrder",
   "LE.le",
   "LE.mk",
   "Nontrivial",
   "HarderNarasimhan.Interval",
   "LT.mk",
   "Preorder.mk",
   "HarderNarasimhan.instPartialOrderInterval._proof_4",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.instPartialOrderInterval",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] → {z : { p // p.1 < p.2 }} → PartialOrder (HarderNarasimhan.Interval z)",
  "constCategory": "Definition"},
 {"references":
  ["OrderDual.toDual",
   "OrderDual",
   "Equiv.instEquivLike",
   "Exists",
   "Iff",
   "EquivLike.toFunLike",
   "Iff.rfl",
   "DFunLike.coe",
   "Equiv"],
  "name": "OrderDual.exists",
  "constType":
  "∀ {α : Type u_1} {p : αᵒᵈ → Prop}, (∃ a, p a) ↔ ∃ a, p (OrderDual.toDual a)",
  "constCategory": "Theorem"},
 {"references": ["True", "True.intro"],
  "name": "trivial",
  "constType": "True",
  "constCategory": "Theorem"},
 {"references": ["Preorder", "le_trans", "LE.le", "Preorder.toLE"],
  "name": "ge_trans",
  "constType":
  "∀ {α : Type u_1} [inst : Preorder α] {a b c : α}, b ≤ a → c ≤ b → c ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["Exists",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.JordanHolderFiltration",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.JordanHolderFiltration.fin_len",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.JordanHolderFiltration μ),\n  ∃ N, self.filtration N = ⊥",
  "constCategory": "Theorem"},
 {"references": ["Not", "Classical.not_not", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._simp_6",
  "constType": "∀ {a : Prop}, (¬¬a) = a",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "LT",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references":
  ["FunLike",
   "EmbeddingLike.apply_eq_iff_eq",
   "EmbeddingLike",
   "Eq",
   "DFunLike.coe",
   "propext"],
  "name": "HarderNarasimhan.impl.prop4d8._simp_1_7",
  "constType":
  "∀ {F : Sort u_1} {α : Sort u_2} {β : Sort u_3} [inst : FunLike F α β] [i : EmbeddingLike F α β] (f : F) {x y : α},\n  (f x = f y) = (x = y)",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Nat",
   "Nat.succ",
   "Iff",
   "LE.le",
   "Iff.rfl",
   "instLENat"],
  "name": "Nat.succ_le",
  "constType": "∀ {n m : ℕ}, n.succ ≤ m ↔ n < m",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "And.intro",
   "Eq.symm",
   "HarderNarasimhan.impl.rmk2d5₂",
   "sInf_le_sInf",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Exists.casesOn",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "id",
   "Eq.mpr",
   "setOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "Prod.fst",
   "congrArg",
   "le_rfl",
   "Preorder.toLE",
   "Eq",
   "Lattice.toSemilatticeInf",
   "Set",
   "LT.lt",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.Convex_of_Convex_large",
   "LE.le",
   "eq_of_le_of_ge",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.rmk2d5₃",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ → HarderNarasimhan.μA μ I = HarderNarasimhan.μA (HarderNarasimhan.μmax μ) I",
  "constCategory": "Theorem"},
 {"references":
  ["Iff.trans",
   "PartialOrder.toPreorder",
   "True",
   "Eq.trans",
   "And",
   "SemilatticeSup.toPartialOrder",
   "le_sup_left._simp_1",
   "and_true",
   "true_and",
   "sup_le_iff._simp_1",
   "congrArg",
   "Max.max",
   "le_antisymm_iff",
   "iff_self",
   "of_eq_true",
   "congr",
   "Iff",
   "SemilatticeSup.toMax",
   "LE.le",
   "SemilatticeSup",
   "Eq",
   "Preorder.toLE",
   "le_refl._simp_1"],
  "name": "sup_eq_left",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, a ⊔ b = a ↔ b ≤ a",
  "constCategory": "Theorem"},
 {"references": ["SMul"],
  "name": "IsScalarTower",
  "constType":
  "(M : Type u_9) → (N : Type u_10) → (α : Type u_11) → [SMul M N] → [SMul N α] → [SMul M α] → Prop",
  "constCategory": "Other"},
 {"references":
  ["LT.lt",
   "Nat.succ_le_succ",
   "instLTNat",
   "Nat",
   "Nat.succ",
   "LE.le",
   "instLENat"],
  "name": "Nat.lt_succ_of_le",
  "constType": "∀ {n m : ℕ}, n ≤ m → n < m.succ",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "LE",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.S₂I",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Ne",
   "Eq.ndrec",
   "Eq.rec",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.S₂I.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S),\n  μ = μ_1 →\n    ∀ (I I_1 : { p // p.1 < p.2 }) (e_I : I = I_1) (x x_1 : ℒ) (e_x : x = x_1) (hxI : HarderNarasimhan.InIntvl I x)\n      (hx : (↑I).1 ≠ x), HarderNarasimhan.S₂I μ I x hxI hx = HarderNarasimhan.S₂I μ_1 I_1 x_1 ⋯ ⋯",
  "constCategory": "Theorem"},
 {"references": ["Subtype"],
  "name": "Subtype.val",
  "constType": "{α : Sort u} → {p : α → Prop} → Subtype p → α",
  "constCategory": "Definition"},
 {"references": ["outParam"],
  "name": "Membership",
  "constType": "outParam (Type u) → Type v → Type (max u v)",
  "constCategory": "Other"},
 {"references":
  ["Not",
   "decidable_of_iff",
   "DecidableLE",
   "decidableLTOfDecidableLE._proof_1",
   "instDecidableAnd",
   "DecidableLT",
   "Preorder.toLT",
   "And",
   "LT.lt",
   "Preorder",
   "LE.le",
   "Preorder.toLE",
   "instDecidableNot"],
  "name": "decidableLTOfDecidableLE",
  "constType":
  "{α : Type u_1} → [inst : Preorder α] → [DecidableLE α] → DecidableLT α",
  "constCategory": "Definition"},
 {"references":
  ["HAdd.hAdd",
   "SubNegMonoid.toAddMonoid",
   "instHAdd",
   "AddMonoid.toAddSemigroup",
   "AddGroup",
   "AddCommGroup",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "AddSemigroup.toAdd"],
  "name": "AddCommGroup.mk",
  "constType":
  "{G : Type u} → [toAddGroup : AddGroup G] → (∀ (a b : G), a + b = b + a) → AddCommGroup G",
  "constCategory": "Other"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "sub_self",
   "AddZeroClass.toAddZero",
   "SubNegZeroMonoid.toNegZeroClass",
   "OfNat.ofNat",
   "AddGroup.toSubtractionMonoid",
   "congrArg",
   "Iff.intro",
   "SubNegMonoid.toAddMonoid",
   "eq_of_sub_eq_zero",
   "Eq.refl",
   "Iff.mpr",
   "SubNegMonoid.toSub",
   "id",
   "HSub.hSub",
   "NegZeroClass.toZero",
   "AddGroup",
   "Eq.mpr",
   "Zero.toOfNat0",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "instHSub",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass"],
  "name": "sub_eq_zero_of_eq",
  "constType":
  "∀ {G : Type u_3} [inst : AddGroup G] {a b : G}, a = b → a - b = 0",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "IsIrrefl.mk",
   "IsIrrefl",
   "Preorder",
   "lt_irrefl",
   "Preorder.toLT"],
  "name": "instIsIrreflLt",
  "constType":
  "∀ {α : Type u} [inst : Preorder α], IsIrrefl α fun x1 x2 ↦ x1 < x2",
  "constCategory": "Theorem"},
 {"references":
  ["AddCommMonoid",
   "SetLike.instMembership",
   "Subtype",
   "Ideal",
   "Submodule.setLike",
   "Module",
   "Submodule.module",
   "Membership.mem",
   "Module.annihilator",
   "Submodule.addCommMonoid",
   "Submodule",
   "Semiring"],
  "name": "Submodule.annihilator",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → Submodule R M → Ideal R",
  "constCategory": "Definition"},
 {"references": ["Set", "SDiff", "Set.diff", "SDiff.mk"],
  "name": "Set.instSDiff",
  "constType": "{α : Type u} → SDiff (Set α)",
  "constCategory": "Definition"},
 {"references":
  ["associatedPrimes",
   "CommRing.toCommSemiring",
   "Module",
   "Set",
   "CommSemiring.toSemiring",
   "Membership.mem",
   "AddCommGroup",
   "CommRing",
   "Set.instMembership",
   "IsNoetherianRing",
   "HarderNarasimhan.Coprimary",
   "Ideal",
   "AddCommGroup.toAddCommMonoid",
   "ExistsUnique"],
  "name": "HarderNarasimhan.Coprimary.coprimary",
  "constType":
  "∀ {R : Type u_1} {inst : CommRing R} {inst_1 : IsNoetherianRing R} {M : Type u_2} {inst_2 : AddCommGroup M}\n  {inst_3 : _root_.Module R M} [self : HarderNarasimhan.Coprimary R M], ∃! p, p ∈ associatedPrimes R M",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "le_sInf_iff",
   "Set",
   "Membership.mem",
   "CompleteSemilatticeInf",
   "Set.instMembership",
   "CompleteSemilatticeInf.toInfSet",
   "LE.le",
   "CompleteSemilatticeInf.toPartialOrder",
   "InfSet.sInf",
   "Preorder.toLE",
   "Eq",
   "propext"],
  "name": "HarderNarasimhan.impl.rmk4d10₁._simp_1_2",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteSemilatticeInf α] {s : Set α} {a : α}, (a ≤ sInf s) = ∀ b ∈ s, a ≤ b",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "SubtractionMonoid",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references": ["Iff", "Eq.comm", "Eq"],
  "name": "eq_comm",
  "constType": "∀ {α : Sort u_1} {a b : α}, a = b ↔ b = a",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "Submodule.setLike",
   "Module",
   "AddSubgroup.toAddCommGroup",
   "Membership.mem",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "Submodule.toAddSubgroup",
   "Submodule",
   "Ring.toSemiring",
   "Ring"],
  "name": "Submodule.addCommGroup",
  "constType":
  "{R : Type u} →\n  {M : Type v} →\n    [inst : Ring R] → [inst_1 : AddCommGroup M] → {module_M : _root_.Module R M} → (p : Submodule R M) → AddCommGroup ↥p",
  "constCategory": "Definition"},
 {"references":
  ["Nat",
   "Exists",
   "instOfNatNat",
   "Nontrivial",
   "Exists.intro",
   "Ne",
   "Nontrivial.mk",
   "OfNat.ofNat",
   "Nat.zero_ne_one"],
  "name": "Nat.instNontrivial",
  "constType": "Nontrivial ℕ",
  "constCategory": "Theorem"},
 {"references":
  ["GroupWithZero.mk",
   "DivisionSemiring.mul_inv_cancel",
   "Semiring.mul_one",
   "AddMonoid.toZero",
   "DivisionSemiring.inv_zero",
   "NonUnitalNonAssocSemiring.toMul",
   "NonUnitalNonAssocSemiring.zero_mul",
   "DivisionSemiring.zpow_succ'",
   "AddCommMonoid.toAddMonoid",
   "DivisionSemiring.toDiv",
   "DivisionSemiring.div_eq_mul_inv",
   "Semigroup.mk",
   "MonoidWithZero.mk",
   "DivisionSemiring.zpow_neg'",
   "Semiring.npow_zero",
   "Semiring.toNonUnitalSemiring",
   "NonUnitalSemiring.mul_assoc",
   "Semiring.toOne",
   "NonUnitalNonAssocSemiring.mul_zero",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "DivisionSemiring.zpow",
   "GroupWithZero",
   "DivisionSemiring.toSemiring",
   "DivisionSemiring.toInv",
   "Semiring.one_mul",
   "DivisionSemiring",
   "Semiring.npow_succ",
   "DivisionSemiring.toNontrivial",
   "DivisionSemiring.zpow_zero'",
   "NonUnitalSemiring.toNonUnitalNonAssocSemiring",
   "Monoid.mk",
   "Semiring.npow"],
  "name": "DivisionSemiring.toGroupWithZero",
  "constType": "{K : Type u_2} → [self : DivisionSemiring K] → GroupWithZero K",
  "constCategory": "Definition"},
 {"references": ["Prod"],
  "name": "Prod.snd",
  "constType": "{α : Type u} → {β : Type v} → α × β → β",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "Set",
   "HasCompl.mk",
   "Membership.mem",
   "HasCompl",
   "Set.instMembership",
   "setOf"],
  "name": "Set.instHasCompl",
  "constType": "{α : Type u} → HasCompl (Set α)",
  "constCategory": "Definition"},
 {"references":
  ["_private.Init.SimpLemmas.0.or_self.match_1_1",
   "Or.inl",
   "Or",
   "Eq",
   "propext",
   "Iff.intro"],
  "name": "or_self",
  "constType": "∀ (p : Prop), (p ∨ p) = p",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "HarderNarasimhan.impl.μ_nonempty",
   "Prod.fst",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "HarderNarasimhan._μ",
   "Finset.Nonempty",
   "CommRing.toCommSemiring",
   "LinearExtension",
   "CommSemiring.toSemiring",
   "Set.toFinset",
   "AddCommGroup",
   "Prod.snd",
   "CommRing",
   "Prod",
   "LT.lt",
   "PrimeSpectrum",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "Module.Finite"],
  "name": "HarderNarasimhan.μ_nonempty",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  (HarderNarasimhan._μ R M I).toFinset.Nonempty",
  "constCategory": "Theorem"},
 {"references": ["Zero"],
  "name": "Zero.mk",
  "constType": "{α : Type u} → α → Zero α",
  "constCategory": "Other"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Set.instCompleteAtomicBooleanAlgebra._proof_8",
   "Membership.mem",
   "BooleanAlgebra.toDistribLattice",
   "SemilatticeSup.toPartialOrder",
   "Set.instCompleteAtomicBooleanAlgebra._proof_4",
   "BoundedOrder.mk",
   "Set.instCompleteAtomicBooleanAlgebra._proof_12",
   "BooleanAlgebra.toHImp",
   "Set.instCompleteAtomicBooleanAlgebra._proof_11",
   "InfSet.sInf",
   "BooleanAlgebra.toTop",
   "Set.instCompleteAtomicBooleanAlgebra._proof_10",
   "Preorder.toLE",
   "OrderBot.mk",
   "Set.instBooleanAlgebra",
   "OrderTop.mk",
   "Set.instSupSet",
   "BooleanAlgebra",
   "CompleteLattice.mk",
   "Set",
   "Set.instCompleteAtomicBooleanAlgebra._proof_9",
   "BooleanAlgebra.toBot",
   "CompleteBooleanAlgebra.mk",
   "BooleanAlgebra.toSDiff",
   "Set.instCompleteAtomicBooleanAlgebra._proof_2",
   "Set.instMembership",
   "CompleteAtomicBooleanAlgebra.mk",
   "CompleteAtomicBooleanAlgebra",
   "DistribLattice.toLattice",
   "LE.le",
   "Set.instCompleteAtomicBooleanAlgebra._proof_13",
   "Set.instCompleteAtomicBooleanAlgebra._proof_1",
   "Set.instInfSet",
   "Set.instCompleteAtomicBooleanAlgebra._proof_3",
   "BooleanAlgebra.toHasCompl"],
  "name": "Set.instCompleteAtomicBooleanAlgebra",
  "constType": "{α : Type u_1} → CompleteAtomicBooleanAlgebra (Set α)",
  "constCategory": "Definition"},
 {"references":
  ["Membership.mk",
   "Finset",
   "Finset.val",
   "Membership.mem",
   "Membership",
   "Multiset",
   "Multiset.instMembership"],
  "name": "Finset.instMembership",
  "constType": "{α : Type u_1} → Membership α (Finset α)",
  "constCategory": "Definition"},
 {"references":
  ["AddCommMonoid",
   "SubNegMonoid.toAddMonoid",
   "AddCommGroup.add_comm",
   "AddCommGroup.toAddGroup",
   "AddCommMonoid.mk",
   "AddCommGroup",
   "AddGroup.toSubNegMonoid"],
  "name": "AddCommGroup.toAddCommMonoid",
  "constType": "{G : Type u} → [self : AddCommGroup G] → AddCommMonoid G",
  "constCategory": "Definition"},
 {"references":
  ["le_top",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "bot_le",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "And.intro",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "Nontrivial",
   "LE.le",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.in_TotIntvl",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] (x : ℒ),\n  HarderNarasimhan.InIntvl HarderNarasimhan.TotIntvl x",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Set",
   "IsLeast.mono",
   "CompleteSemilatticeSup",
   "IsCofinalFor",
   "isLUB_sSup",
   "CompleteSemilatticeSup.toSupSet",
   "upperBounds_mono_of_isCofinalFor",
   "upperBounds",
   "SupSet.sSup",
   "LE.le",
   "CompleteSemilatticeSup.toPartialOrder",
   "Preorder.toLE"],
  "name": "sSup_le_sSup_of_isCofinalFor",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteSemilatticeSup α] {s t : Set α}, IsCofinalFor s t → sSup s ≤ sSup t",
  "constCategory": "Theorem"},
 {"references":
  ["Fintype.ofFinset",
   "Finset.instSingleton",
   "Finset",
   "Set",
   "Singleton.singleton",
   "Fintype",
   "Set.instSingletonSet",
   "Set.Elem",
   "Set.fintypeSingleton._proof_1"],
  "name": "Set.fintypeSingleton",
  "constType": "{α : Type u} → (a : α) → Fintype ↑{a}",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.semistableI_iff._simp_1_4",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "HarderNarasimhan.FiniteTotalPayoff.mk",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "CompleteLattice.toLattice",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "HarderNarasimhan.FiniteTotalPayoff.rec",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toBoundedOrder",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.FiniteTotalPayoff.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.FiniteTotalPayoff μ → Sort u} →\n                (t : HarderNarasimhan.FiniteTotalPayoff μ) →\n                  ((fin_tot_payoff : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references": ["Exists", "Nontrivial", "Ne"],
  "name": "Nontrivial.exists_pair_ne",
  "constType": "∀ {α : Type u_3} [self : Nontrivial α], ∃ x y, x ≠ y",
  "constCategory": "Theorem"},
 {"references":
  ["Int.instSub",
   "Eq.trans",
   "Classical.propDecidable",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "HarderNarasimhan.JordanHolderFiltration",
   "Lean.Omega.tidy_sat",
   "Eq.symm",
   "Int.add_one_le_of_lt",
   "Bool.true",
   "instLTNat",
   "Lean.Omega.combo_sat'",
   "BoundedOrder",
   "Prod.snd",
   "Lean.Omega.LinearCombo.coordinate",
   "Prod",
   "BoundedOrder.toOrderBot",
   "instOfNat",
   "Eq.refl",
   "Lattice",
   "Lean.Omega.Constraint.addEquality_sat",
   "Lean.Omega.Int.sub_congr",
   "Or.elim",
   "Nat.find",
   "Bool",
   "Lean.Omega.LinearCombo.coordinate_eval_2",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Option.some",
   "Nat.lt_or_gt_of_ne",
   "Prod.fst",
   "Lean.Omega.LinearCombo.mk",
   "Lean.Omega.LinearCombo.instSub",
   "instOfNatNat",
   "Lean.Omega.Int.ofNat_sub_dichotomy",
   "Int.instAdd",
   "Preorder.toLE",
   "Eq",
   "instNatCastInt",
   "Lean.Omega.Int.add_congr",
   "OfNat.ofNat",
   "Int",
   "CompletelyDistribLattice.toCompleteLattice",
   "HAdd.hAdd",
   "Option.none",
   "Lean.Omega.Int.ofNat_lt_of_lt",
   "Ne",
   "instHSub",
   "PartialOrder.toPreorder",
   "le_of_le_of_eq",
   "Lean.Omega.LinearCombo.coordinate_eval_3",
   "Preorder.toLT",
   "GT.gt",
   "Lean.Omega.Int.ofNat_le_of_le",
   "HSub.hSub",
   "Int.instLEInt",
   "Lean.Omega.LinearCombo.add_eval",
   "CompleteLinearOrder",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Neg.neg",
   "And.right",
   "And",
   "Lean.Omega.Constraint.addInequality_sat",
   "Bot.bot",
   "Int.instNegInt",
   "instDecidableEqBool",
   "Nat",
   "Nontrivial",
   "id",
   "Lean.Omega.LinearCombo.instAdd",
   "Nat.cast",
   "Subtype",
   "Lean.Omega.Constraint.combine_sat'",
   "Int.sub_eq_zero_of_eq",
   "Decidable.decide",
   "Lean.Omega.Coeffs.ofList",
   "OrderBot.toBot",
   "Lean.Omega.Constraint.not_sat'_of_isImpossible",
   "of_decide_eq_true",
   "Not",
   "List.nil",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "Lean.Omega.LinearCombo",
   "Lean.Omega.Constraint.isImpossible",
   "Int.ofNat_nonneg",
   "Int.sub_nonneg_of_le",
   "LT.lt",
   "Nat.le_of_not_lt",
   "Lean.Omega.LinearCombo.sub_eval",
   "instSubNat",
   "LE.le",
   "False",
   "Lean.Omega.Constraint.mk",
   "Lean.Omega.LinearCombo.eval",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "instLENat"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_8",
  "constType":
  "∀ (n : ℕ) (ℒ : Type u_1) (ntl : Nontrivial ℒ) (l : Lattice ℒ) (bo : BoundedOrder ℒ) (S : Type u_2)\n  (clo : CompleteLinearOrder S) (μ : { p // p.1 < p.2 } → S) (JHy JHx : HarderNarasimhan.JordanHolderFiltration μ),\n  ¬Nat.find ⋯ = 1 → Nat.find ⋯ ≠ 0 → ¬0 < Nat.find ⋯ - 1 → False",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Preorder",
   "eq_false",
   "Preorder.toLT",
   "False",
   "not_lt_bot",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Bot.bot",
   "OrderBot"],
  "name":
  "HarderNarasimhan.instNonemptyJordanHolderFiltrationOfWellFoundedGTOfFiniteTotalPayoffOfSlopeLikeOfSemistableOfStrongDescendingChainCondition'._simp_1",
  "constType":
  "∀ {α : Type u} [inst : Preorder α] [inst_1 : OrderBot α] {a : α}, (a < ⊥) = False",
  "constCategory": "Theorem"},
 {"references":
  ["LinearOrder.toPartialOrder",
   "Nat",
   "Preorder",
   "PartialOrder.toPreorder",
   "inferInstance",
   "Nat.instLinearOrder"],
  "name": "Nat.instPreorder",
  "constType": "Preorder ℕ",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "SemilinearMapClass",
   "Module",
   "RingHom.instFunLike",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "SemilinearEquivClass.map_smulₛₗ",
   "SemilinearMapClass.mk",
   "DFunLike.coe",
   "SemilinearEquivClass",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "MonoidWithZero.toMonoid",
   "EquivLike.toFunLike",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "EquivLike",
   "DistribSMul.toSMulZeroClass",
   "outParam",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "AddEquivClass.map_add",
   "SemilinearEquivClass.toAddEquivClass",
   "AddZeroClass.toAddZero",
   "Module.toDistribMulAction",
   "AddCommMonoid.toAddCommSemigroup",
   "MulActionSemiHomClass.mk",
   "RingHomInvPair",
   "AddHomClass.mk",
   "AddZero.toZero",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "SemilinearEquivClass.instSemilinearMapClass",
  "constType":
  "∀ {R : Type u_1} {S : Type u_6} {M : Type u_7} {M₂ : Type u_9} (F : Type u_14) [inst : Semiring R] [inst_1 : Semiring S]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module S M₂]\n  {σ : R →+* S} {σ' : S →+* R} [inst_6 : RingHomInvPair σ σ'] [inst_7 : RingHomInvPair σ' σ] [inst_8 : EquivLike F M M₂]\n  [s : SemilinearEquivClass F σ M M₂], SemilinearMapClass F σ M M₂",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "SizeOf",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat.lt_add_one",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.HarderNarasimhanFiltration._sizeOf_inst",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "SizeOf.sizeOf",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "instSizeOfDefault",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.mk.sizeOf_spec",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} [inst_4 : SizeOf ℒ] [inst_5 : SizeOf S] (filtration : ℕ → ℒ)\n  (monotone : Monotone filtration) (first_eq_bot : filtration 0 = ⊥) (fin_len : ∃ n, filtration n = ⊤)\n  (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j)\n  (piecewise_semistable :\n    ∀ (i : ℕ) (h : i < Nat.find fin_len),\n      HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(filtration i, filtration (i + 1)), ⋯⟩ μ))\n  (μA_pseudo_strict_anti :\n    ∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len),\n      ¬HarderNarasimhan.μA μ ⟨(filtration i, filtration (i + 1)), ⋯⟩ ≤\n          HarderNarasimhan.μA μ ⟨(filtration (i + 1), filtration (i + 2)), ⋯⟩),\n  sizeOf\n      { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot, fin_len := fin_len,\n        strict_mono := strict_mono, piecewise_semistable := piecewise_semistable,\n        μA_pseudo_strict_anti := μA_pseudo_strict_anti } =\n    1 + sizeOf first_eq_bot + sizeOf fin_len",
  "constCategory": "Theorem"},
 {"references":
  ["Exists",
   "PartialOrder.toPreorder",
   "Set",
   "Membership.mem",
   "And",
   "Preorder.toLT",
   "isGLB_sInf",
   "Set.instMembership",
   "isGLB_lt_iff",
   "CompleteSemilatticeInf.toInfSet",
   "LT.lt",
   "Iff",
   "CompleteSemilatticeInf.toPartialOrder",
   "InfSet.sInf",
   "CompleteLinearOrder.toCompleteLattice",
   "CompleteLinearOrder",
   "CompleteLinearOrder.toLinearOrder",
   "CompleteLattice.toCompleteSemilatticeInf"],
  "name": "sInf_lt_iff",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteLinearOrder α] {s : Set α} {b : α}, sInf s < b ↔ ∃ a ∈ s, a < b",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "SemilatticeSup",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references":
  ["LT.lt",
   "HasSSubset.SSubset",
   "DistribLattice.toLattice",
   "Lattice.toSemilatticeInf",
   "PartialOrder.toPreorder",
   "Set",
   "Preorder.toLT",
   "Iff.mp",
   "Set.instDistribLattice",
   "Iff.rfl",
   "Set.instHasSSubset",
   "SemilatticeInf.toPartialOrder"],
  "name": "LT.lt.ssubset",
  "constType": "∀ {α : Type u} {s t : Set α}, s < t → s ⊂ t",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "le_of_not_ge",
   "Not",
   "LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "LE.le",
   "Preorder.toLT",
   "LinearOrder",
   "Preorder.toLE",
   "lt_of_le_not_ge"],
  "name": "lt_of_not_ge",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrder α] {a b : α}, ¬b ≤ a → a < b",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "HarderNarasimhan.Affine",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "SemilatticeSup.toMax",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Affine.affine",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.Affine μ] (a b : ℒ) (h : ¬a ≤ b),\n  μ ⟨(a ⊓ b, a), ⋯⟩ = μ ⟨(b, a ⊔ b), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "Nat",
   "Nat.le_succ_of_le",
   "instOfNatNat",
   "instHAdd",
   "Nat.leRec",
   "LE.le",
   "Nat.le_refl",
   "instLENat",
   "OfNat.ofNat"],
  "name": "Nat.le_induction",
  "constType":
  "∀ {m : ℕ} {P : (n : ℕ) → m ≤ n → Prop},\n  P m ⋯ → (∀ (n : ℕ) (hmn : m ≤ n), P n hmn → P (n + 1) ⋯) → ∀ (n : ℕ) (hmn : m ≤ n), P n hmn",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "LT.lt",
   "Preorder",
   "Preorder.lt_iff_le_not_ge",
   "Iff",
   "LE.le",
   "And",
   "Preorder.toLT",
   "Preorder.toLE"],
  "name": "lt_iff_le_not_ge",
  "constType":
  "∀ {α : Type u_1} [inst : Preorder α] {a b : α}, a < b ↔ a ≤ b ∧ ¬b ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "FunLike",
   "SetLike.instMembership",
   "SemilinearMapClass",
   "Module",
   "Membership.mem",
   "Iff.rfl",
   "DFunLike.coe",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.comap",
   "Submodule.setLike",
   "Iff",
   "Semiring"],
  "name": "Submodule.mem_comap",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_3} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {σ₁₂ : R →+* R₂} {x : M} {F : Type u_9} [inst_6 : FunLike F M M₂] [inst_7 : SemilinearMapClass F σ₁₂ M M₂] {f : F}\n  {p : Submodule R₂ M₂}, x ∈ Submodule.comap f p ↔ f x ∈ p",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteSemilatticeInf.toInfSet",
   "PartialOrder.toPreorder",
   "Set",
   "InfSet.sInf",
   "le_trans",
   "CompleteSemilatticeInf.toPartialOrder",
   "LE.le",
   "Membership.mem",
   "Preorder.toLE",
   "sInf_le",
   "Set.instMembership",
   "CompleteSemilatticeInf"],
  "name": "sInf_le_of_le",
  "constType":
  "∀ {α : Type u_1} [inst : CompleteSemilatticeInf α] {s : Set α} {a b : α}, b ∈ s → b ≤ a → sInf s ≤ a",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Int",
  "constType": "Type",
  "constCategory": "Other"},
 {"references": ["DecidableEq", "LinearOrder"],
  "name": "LinearOrder.toDecidableEq",
  "constType": "{α : Type u_2} → [self : LinearOrder α] → DecidableEq α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "WellFounded.has_min",
   "Membership.mem",
   "Preorder.toLT",
   "GT.gt",
   "Subtype.val",
   "Prod.fst",
   "IsWellFounded.wf",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Set.Nonempty",
   "Exists",
   "Lattice.toSemilatticeInf",
   "Set",
   "HarderNarasimhan.impl.ℒₛ",
   "And",
   "HarderNarasimhan.impl.prop3d4₀func",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "Lattice",
   "Nontrivial",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func._proof_5",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [h : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (n : ℕ)\n  (hbot : ¬(↑I).1 = ↑(HarderNarasimhan.impl.prop3d4₀func μ I n)),\n  (HarderNarasimhan.impl.ℒₛ μ I (HarderNarasimhan.impl.prop3d4₀func μ I n) hbot).Nonempty →\n    ∃ a ∈ HarderNarasimhan.impl.ℒₛ μ I (HarderNarasimhan.impl.prop3d4₀func μ I n) hbot,\n      ∀ x ∈ HarderNarasimhan.impl.ℒₛ μ I (HarderNarasimhan.impl.prop3d4₀func μ I n) hbot, ¬x > a",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.hasQuotient",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Submodule.map",
   "Submodule.subtype",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "HarderNarasimhan.impl.lift_quot._proof_3",
   "Submodule.mkQ",
   "CommRing.toCommSemiring",
   "SetLike.instMembership",
   "CommSemiring.toSemiring",
   "Submodule.addCommGroup",
   "HarderNarasimhan.impl.lift_quot._proof_2",
   "AddCommGroup",
   "LinearMap",
   "CommRing",
   "Ring.toSemiring",
   "CommRing.toRing",
   "IsNoetherianRing",
   "Submodule.comap",
   "Submodule.setLike",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "HarderNarasimhan.impl.lift_quot._proof_1",
   "Submodule.addCommMonoid",
   "Module.Finite",
   "Submodule.submoduleOf"],
  "name": "HarderNarasimhan.impl.lift_quot",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [IsNoetherianRing R] →\n      {M : Type u_2} →\n        [Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [Module.Finite R M] → (N₁ N₂ : Submodule R M) → Submodule R (↥N₂ ⧸ N₁.submoduleOf N₂) → Submodule R M",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "Nat.instPartialOrder",
   "CompleteLattice.toLattice",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Prod",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "Subtype",
   "SemilatticeSup.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.StrongDescendingChainCondition'.wdcc'",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.StrongDescendingChainCondition' μ]\n  (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "Module",
   "AddCommGroup.toAddGroup",
   "Membership.mem",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "Submodule",
   "sub_eq_add_neg",
   "SubNegMonoid.toSub",
   "HSub.hSub",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "propext",
   "SetLike.instMembership",
   "instHAdd",
   "Neg.neg",
   "SubNegMonoid.toNeg",
   "AddCommGroup",
   "Iff.rfl",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "Ring.toSemiring",
   "HAdd.hAdd",
   "NegZeroClass.toNeg",
   "AddCommGroup.toDivisionAddCommMonoid",
   "Submodule.add_mem_iff_right",
   "AddCommMonoid.toAddCommSemigroup",
   "SubNegMonoid.toAddMonoid",
   "Submodule.neg_mem_iff",
   "Submodule.setLike",
   "Iff",
   "AddCommGroup.toAddCommMonoid",
   "id",
   "Eq.mpr",
   "instHSub",
   "Ring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.sub_mem_iff_right",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Ring R] [inst_1 : AddCommGroup M] {module_M : _root_.Module R M} (p : Submodule R M)\n  {x y : M}, x ∈ p → (x - y ∈ p ↔ y ∈ p)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Coe",
   "Preorder.toLT",
   "Coe.mk",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "PartialOrder",
   "Nontrivial",
   "HarderNarasimhan.instPartialOrderInterval",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "CompleteLattice"],
  "name":
  "HarderNarasimhan.instCoeForallSubtypeProdLtFstSndForallIntervalOfCompleteLattice",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {z : { p // p.1 < p.2 }} →\n          {S : Type u_2} → [CompleteLattice S] → Coe ({ p // p.1 < p.2 } → S) ({ p // p.1 < p.2 } → S)",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.StI",
   "Prod.mk",
   "HarderNarasimhan.semistableI",
   "le_trans",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "lt_of_le_of_ne",
   "Membership.mem.out",
   "HarderNarasimhan.S₂I",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.S₁I",
   "le_rfl",
   "And.intro",
   "HarderNarasimhan.S₁I._proof_1",
   "Eq",
   "Preorder.toLE",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "Exists",
   "Exists.choose_spec",
   "Set",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Exists.choose",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "Exists.casesOn",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.InIntvl",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "CompleteLattice",
   "And.casesOn"],
  "name": "HarderNarasimhan.impl.prop3d7₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (x : ℒ)\n  (hxSt : x ∈ HarderNarasimhan.StI μ I), HarderNarasimhan.semistableI μ ⟨((↑I).1, x), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["AddCommMonoid", "Module", "Semiring"],
  "name": "Module.Finite",
  "constType":
  "(R : Type u_1) → (M : Type u_4) → [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [_root_.Module R M] → Prop",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Exists",
   "BoundedOrder",
   "Bot.bot",
   "OfNat.ofNat",
   "HarderNarasimhan.impl.subseq",
   "Nat",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "OrderTop.toTop",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.subseq.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f : ℕ → ℒ) (atf : ∃ k, f k = ⊥),\n  HarderNarasimhan.impl.subseq f atf 0 = ⊤",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "InfSet",
  "constType": "Type u_1 → Type u_1",
  "constCategory": "Other"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "SetLike.coe_eq_coe",
   "Membership.mem",
   "SetLike",
   "Eq",
   "Subtype.val",
   "propext"],
  "name": "HarderNarasimhan.impl.lift_quot_not_bot._simp_1_3",
  "constType":
  "∀ {A : Type u_1} {B : Type u_2} [i : SetLike A B] {p : A} {x y : ↥p}, (↑x = ↑y) = (x = y)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.FiniteTotalPayoff",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "Eq.trans",
   "True",
   "instHAdd",
   "List",
   "Lean.Omega.IntList.get",
   "Lean.Omega.LinearCombo.coordinate",
   "OfNat.ofNat",
   "congrArg",
   "Int",
   "HAdd.hAdd",
   "eq_self",
   "Lean.Omega.LinearCombo.coordinate_eval",
   "Nat",
   "Lean.Omega.IntList.get_cons_succ",
   "of_eq_true",
   "Lean.Omega.Coeffs.ofList",
   "Lean.Omega.Coeffs.get",
   "instOfNatNat",
   "Lean.Omega.LinearCombo.eval",
   "Lean.Omega.IntList.get_cons_zero",
   "Eq",
   "List.cons"],
  "name": "Lean.Omega.LinearCombo.coordinate_eval_3",
  "constType":
  "∀ {a0 a1 a2 a3 : ℤ} {t : List ℤ},\n  (Omega.LinearCombo.coordinate 3).eval (Omega.Coeffs.ofList (a0 :: a1 :: a2 :: a3 :: t)) = a3",
  "constCategory": "Theorem"},
 {"references": ["HAdd.hAdd", "instHAdd", "Add", "AddHom", "Eq"],
  "name": "AddHom.mk",
  "constType":
  "{M : Type u_10} →\n  {N : Type u_11} →\n    [inst : Add M] → [inst_1 : Add N] → (toFun : M → N) → (∀ (x y : M), toFun (x + y) = toFun x + toFun y) → M →ₙ+ N",
  "constCategory": "Other"},
 {"references":
  ["Ring.toNonAssocRing",
   "Classical.propDecidable",
   "eq_true",
   "AddGroupWithOne.toAddMonoidWithOne",
   "Int.instCommSemiring",
   "le_of_not_gt",
   "Int.instLTInt",
   "Eq.symm",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "instLatticeInt",
   "instLTNat",
   "Exists",
   "AddRightCancelMonoid.toAddRightCancelSemigroup",
   "BoundedOrder",
   "true_and",
   "Ring.toSemiring",
   "Nat.le_succ",
   "instOfNat",
   "eq_false",
   "Antitone",
   "AddMonoid.toAddSemigroup",
   "Top.top",
   "Int.negOfNat",
   "Eq.mpr",
   "covariant_swap_add_of_covariant_add",
   "Nat.find",
   "Mathlib.Tactic.Linarith.lt_irrefl",
   "Mathlib.Tactic.Ring.neg_one_mul",
   "Int.instIsStrictOrderedRing",
   "Eq",
   "instNatCastInt",
   "Mathlib.Tactic.Ring.neg_zero",
   "Int.instIsOrderedAddMonoid",
   "HPow.hPow",
   "lt_of_lt_of_le",
   "Nat.cast_add",
   "eq_self",
   "and_self",
   "dite_cond_eq_true",
   "Monoid.toNatPow",
   "instHSub",
   "contravariant_swap_add_of_contravariant_add",
   "PartialOrder.toPreorder",
   "Mathlib.Meta.NormNum.IsNat.of_raw",
   "Mathlib.Meta.NormNum.IsInt.of_raw",
   "Mathlib.Tactic.Ring.add_pf_zero_add",
   "Preorder.toLT",
   "GT.gt",
   "Nat.instAddCommMonoid",
   "GE.ge",
   "HarderNarasimhan.impl.subseq",
   "IsRightCancelAdd.addRightReflectLE_of_addRightReflectLT",
   "Semiring.toNonAssocSemiring",
   "Int.instLEInt",
   "AddGroup.toSubNegMonoid",
   "Eq.rec",
   "Int.ofNat",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "of_eq_false",
   "Nat.instPartialOrder",
   "And.right",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Bot.bot",
   "Exists.casesOn",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "Mathlib.Tactic.Ring.atom_pf",
   "NonUnitalNormedCommRing.toNonUnitalCommRing",
   "HarderNarasimhan.impl.subseq_prop0'._simp_1_5",
   "le_bot_iff",
   "Nat.cast",
   "Eq.mp",
   "DecidablePred",
   "lt_of_le_of_ne",
   "Nat.instAddCancelCommMonoid",
   "BoundedOrder.toOrderTop",
   "Mathlib.Tactic.Ring.add_pf_add_lt",
   "AddCommSemigroup.toAddCommMagma",
   "dite_cond_eq_false",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Not",
   "instHAdd",
   "Distrib.toMul",
   "Mathlib.Tactic.Ring.cast_pos",
   "Mathlib.Tactic.Ring.add_congr",
   "LT.lt",
   "of_eq_true",
   "One.toOfNat1",
   "Mathlib.Tactic.Ring.neg_add",
   "Mathlib.Tactic.Ring.add_pf_add_zero",
   "le_of_lt",
   "Mathlib.Tactic.Ring.neg_congr",
   "Mathlib.Tactic.Linarith.sub_nonpos_of_le",
   "False",
   "lt_self_iff_false",
   "OrderTop.toTop",
   "NormedCommRing.toNonUnitalNormedCommRing",
   "instAddNat",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Mathlib.Tactic.Linarith.add_lt_of_neg_of_le",
   "Eq.trans",
   "Nat.instAddCommSemigroup",
   "Exists.intro",
   "AddCancelMonoid.toAddRightCancelMonoid",
   "Mathlib.Meta.NormNum.IsInt.to_raw_eq",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring",
   "SubNegMonoid.toSub",
   "Mathlib.Tactic.Ring.add_overlap_pf_zero",
   "Eq.ndrec",
   "Mathlib.Tactic.Ring.sub_pf",
   "HarderNarasimhan.impl.subseq_prop0'._simp_1_6",
   "NonUnitalCommRing.toNonUnitalNonAssocCommRing",
   "Nat.recAux",
   "Nat.find_spec",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Lattice",
   "AddMonoidWithOne.toOne",
   "Nat.rawCast",
   "Mathlib.Meta.NormNum.IsNat.to_isInt",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "Int.add_one_le_iff",
   "Int.instRing",
   "Nat.instPreorder",
   "Mathlib.Tactic.Ring.add_pf_add_overlap_zero",
   "Int.instAddCommGroup",
   "contravariant_lt_of_covariant_le",
   "instOfNatNat",
   "congr",
   "Int.instAdd",
   "AddCommMagma.toAdd",
   "Preorder.toLE",
   "AddRightCancelSemigroup.toIsRightCancelAdd",
   "Distrib.toAdd",
   "IsStrictOrderedRing.toIsOrderedRing",
   "Mathlib.Tactic.Zify.natCast_lt._simp_1",
   "OfNat.ofNat",
   "Int",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "AddGroupWithOne.toAddGroup",
   "AddCommGroup.toDivisionAddCommMonoid",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "instDecidableEqNat",
   "Int.instNormedCommRing",
   "dite",
   "neg_neg_of_pos",
   "Nat.cast_one",
   "Iff.mp",
   "HMul.hMul",
   "Int.rawCast",
   "AddMonoidWithOne.toAddMonoid",
   "And.intro",
   "Ring.toAddGroupWithOne",
   "funext",
   "HSub.hSub",
   "Nat.find.congr_simp",
   "Mathlib.Meta.NormNum.IsInt.to_isNat",
   "Nat.instIsOrderedAddMonoid",
   "Mathlib.Tactic.Linarith.zero_lt_one",
   "Nat.instLinearOrder",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "AddSemigroup.toAdd",
   "instHPow",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Neg.neg",
   "And",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Nat.decLt",
   "NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring",
   "HarderNarasimhan.impl.subseq_prop0'._simp_1_7",
   "Decidable.byContradiction",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "instHMul",
   "Mathlib.Meta.NormNum.isNat_ofNat",
   "Mathlib.Tactic.Ring.neg_mul",
   "Mathlib.Meta.NormNum.isInt_add",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "Mathlib.Tactic.Ring.instCommSemiringNat",
   "MonoidWithZero.toMonoid",
   "AddCancelCommMonoid.toAddCancelMonoid",
   "Zero.toOfNat0",
   "Mathlib.Tactic.Ring.sub_congr",
   "OrderBot.toBot",
   "Mathlib.Tactic.Ring.cast_zero",
   "Mathlib.Meta.NormNum.isInt_mul",
   "Mathlib.Tactic.Ring.of_eq",
   "Lattice.toSemilatticeInf",
   "True",
   "CommSemiring.toSemiring",
   "Mathlib.Tactic.Zify.natCast_le._simp_1",
   "Semiring.toMonoidWithZero",
   "HarderNarasimhan.impl.subseq._proof_2",
   "NegZeroClass.toNeg",
   "Int.instSemiring",
   "LE.le",
   "Mathlib.Tactic.Ring.add_pf_add_gt",
   "instLENat",
   "Int.instAddMonoid"],
  "name": "HarderNarasimhan.impl.subseq_prop0'",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f : ℕ → ℒ) (atf : ∃ k, f k = ⊥),\n  Antitone f → f 0 = ⊤ → ∀ (i : ℕ), ∃ j ≥ i, HarderNarasimhan.impl.subseq f atf i = f j",
  "constCategory": "Theorem"},
 {"references": ["HMul", "outParam"],
  "name": "HMul.hMul",
  "constType":
  "{α : Type u} → {β : Type v} → {γ : outParam (Type w)} → [self : HMul α β γ] → α → β → γ",
  "constCategory": "Definition"},
 {"references": ["Quotient", "Setoid", "Setoid.r", "Quot.mk"],
  "name": "Quotient.mk",
  "constType": "{α : Sort u} → (s : Setoid α) → α → Quotient s",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Preorder",
   "Iff",
   "RelEmbedding.map_rel_iff",
   "LE.le",
   "Preorder.toLT",
   "OrderEmbedding.ltEmbedding",
   "Preorder.toLE",
   "OrderEmbedding",
   "DFunLike.coe",
   "RelEmbedding.instFunLike"],
  "name": "OrderEmbedding.lt_iff_lt",
  "constType":
  "∀ {α : Type u_2} {β : Type u_3} [inst : Preorder α] [inst_1 : Preorder β] (f : α ↪o β) {a b : α}, f a < f b ↔ a < b",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Real.instPreorder",
   "PartialOrder.toPreorder",
   "Module",
   "AddCommGroup.toAddGroup",
   "MulAction.toSMul",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "AddGroup.toSubNegMonoid",
   "Preorder.toLE",
   "AddSemigroup.toAdd",
   "PosSMulStrictMono",
   "Real",
   "AddCommGroup.add_comm",
   "instHAdd",
   "LinearOrder",
   "AddCommMonoid.mk",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "Real.semiring",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.mk",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "Real.instZero",
   "AddMonoid.toAddSemigroup",
   "LE.le"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.rec",
  "constType":
  "{V : Type u_1} →\n  {motive : HarderNarasimhan.TotallyOrderedRealVectorSpace V → Sort u} →\n    ([toAddCommGroup : AddCommGroup V] →\n        [toModule : _root_.Module ℝ V] →\n          [toLinearOrder : LinearOrder V] →\n            [toPosSMulStrictMono : PosSMulStrictMono ℝ V] →\n              (elim_AddLeftMono : ∀ {y z : V} (x : V), y ≤ z → x + y ≤ x + z) →\n                motive\n                  { toAddCommGroup := toAddCommGroup, toModule := toModule, toLinearOrder := toLinearOrder,\n                    toPosSMulStrictMono := toPosSMulStrictMono, elim_AddLeftMono := elim_AddLeftMono }) →\n      (t : HarderNarasimhan.TotallyOrderedRealVectorSpace V) → motive t",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.impl.instConvexOfConvexITotIntvl._simp_1",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "id",
   "inferInstance",
   "HarderNarasimhan.Convex",
   "Eq.mpr",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.instConvexOfConvexITotIntvl",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} [HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ],\n  HarderNarasimhan.Convex μ",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "not_lt._simp_1",
   "Eq.trans",
   "AddCommGroup.toAddGroup",
   "eq_true",
   "ite_cond_eq_true",
   "HarderNarasimhan.impl.not_top_of_Nontrivial_TotallyOrderedRealVectorSpace._simp_1_2",
   "AddCancelMonoid.toAddRightCancelMonoid",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion",
   "AddGroup.toSubtractionMonoid",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "SubNegMonoid.toSub",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toLinearOrder",
   "HarderNarasimhan.impl.not_top_of_Nontrivial_TotallyOrderedRealVectorSpace._simp_1_1",
   "CoheytingAlgebra.toOrderTop",
   "lt_add_of_pos_right",
   "Exists",
   "AddGroup.toAddCancelMonoid",
   "ClosureOperator.IsClosed",
   "OrderTheory.coe'",
   "Or.resolve_left",
   "AddRightCancelMonoid.toAddRightCancelSemigroup",
   "LinearOrder.toDecidableLT",
   "Set.instCompleteAtomicBooleanAlgebra",
   "eq_false",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "covariant_swap_add_of_covariant_add",
   "AddMonoid.toAddZeroClass",
   "Nontrivial.exists_pair_ne",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "Preorder.toLE",
   "Eq",
   "AddRightCancelSemigroup.toIsRightCancelAdd",
   "HarderNarasimhan.instAddLeftMono_harderNarasimhan",
   "ite",
   "Set",
   "OrderEmbedding",
   "AddZero.toAdd",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toAddCommGroup",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "AddCommGroup.toDivisionAddCommMonoid",
   "Ne",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instHSub",
   "dite",
   "OrderTheory.DedekindMacNeilleCompletion",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Lattice.toSemilatticeSup",
   "AddCommGroup.toAddCancelCommMonoid",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Subtype.instLE",
   "Iff.mp",
   "Preorder.toLT",
   "Subtype.preorder",
   "OrderEmbedding.lt_iff_lt",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "IsRightCancelAdd.addRightStrictMono_of_addRightMono",
   "GT.gt",
   "RelEmbedding.instFunLike",
   "HSub.hSub",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "AddGroup.toSubNegMonoid",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder",
   "Subtype.instLT",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "AddZeroClass.toAddZero",
   "ite_cond_eq_false",
   "Exists.casesOn",
   "Decidable.byContradiction",
   "Iff.mpr",
   "Nontrivial",
   "NegZeroClass.toZero",
   "id",
   "CompleteDistribLattice.toCoframe",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "GeneralizedCoheytingAlgebra.toLattice",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Eq.mp",
   "SemilatticeSup.toPartialOrder",
   "Subtype.partialOrder",
   "DFunLike.coe",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "instDistribLatticeOfLinearOrder",
   "not_top_lt",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Zero.toOfNat0",
   "OrderTheory.instLinearOrderDedekindMacNeilleCompletion",
   "Set.instLE",
   "Not",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "LT.lt",
   "DistribLattice.toLattice",
   "of_eq_true",
   "SubNegMonoid.toAddMonoid",
   "AddCommMonoid.toAddCommSemigroup",
   "eq_or_gt_of_not_lt",
   "LE.le",
   "top_le_iff",
   "OrderTop.toTop"],
  "name":
  "HarderNarasimhan.impl.not_top_of_Nontrivial_TotallyOrderedRealVectorSpace",
  "constType":
  "∀ {V : Type u_1} [inst : HarderNarasimhan.TotallyOrderedRealVectorSpace V] [hnt : Nontrivial V] (v : V),\n  OrderTheory.coe' v < ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "instLTNat",
   "instHAdd",
   "Nat.zero_lt_succ",
   "OfNat.ofNat",
   "LT.lt",
   "absurd",
   "HAdd.hAdd",
   "Nat",
   "instOfNatNat",
   "Eq.refl",
   "Ne",
   "_private.Init.Data.Nat.Basic.0.Nat.zero_lt_of_ne_zero.match_1_1",
   "Eq"],
  "name": "Nat.zero_lt_of_ne_zero",
  "constType": "∀ {a : ℕ}, a ≠ 0 → 0 < a",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.SlopeLike",
   "Classical.propDecidable",
   "Exists.intro",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "List.instGetElem?NatLtLength",
   "Subtype.val",
   "GetElem?.getElem?",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.μ_res_intvl",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "HarderNarasimhan.JordanHolderFiltration",
   "instLTNat",
   "Exists",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "HarderNarasimhan.impl.μ_bot_JH_eq_μ_tot",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Nat.find_spec",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.instWellFoundedGTInterval",
   "Eq.mpr",
   "HarderNarasimhan.μmin_res_intvl",
   "HarderNarasimhan.in_TotIntvl",
   "lt_top_iff_ne_top",
   "HarderNarasimhan.Semistable",
   "setOf",
   "Nat.find",
   "HarderNarasimhan.impl.thm4d21",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.instSlopeLikeIntervalResμ",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "List",
   "HarderNarasimhan.Resμ",
   "HarderNarasimhan.instStrongDescendingChainConditionOfStrongDescendingChainCondition'",
   "Nat.instPreorder",
   "Prod.fst",
   "le_rfl",
   "instOfNatNat",
   "InfSet.sInf",
   "WellFoundedGT",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Set",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "HarderNarasimhan.instBoundedOrderInterval",
   "HarderNarasimhan.seesaw'",
   "OfNat.ofNat",
   "CompletelyDistribLattice.toCompleteLattice",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.impl.JH_pos_len",
   "inferInstance",
   "eq_of_le_of_ge",
   "Ne",
   "instHSub",
   "CompleteLattice.toCompleteSemilatticeInf",
   "Nat.find_min",
   "bot_lt_top",
   "lt_trans",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Membership.mem",
   "Nat.sub_one_lt",
   "Preorder.toLT",
   "Iff.mp",
   "GT.gt",
   "GE.ge",
   "HarderNarasimhan.μmax",
   "And.intro",
   "funext",
   "HSub.hSub",
   "List.TFAE",
   "CompleteLinearOrder",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.JordanHolderFiltration.strict_anti",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "HarderNarasimhan.instStrongDescendingChainCondition'IntervalResμ",
   "And.right",
   "And",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "HarderNarasimhan.instWeakAscendingChainConditionOfWellFoundedGT",
   "Exists.casesOn",
   "Decidable.byContradiction",
   "Nat",
   "Iff.of_eq",
   "Iff.mpr",
   "Option",
   "Nontrivial",
   "id",
   "List.length",
   "HarderNarasimhan.lt_lt",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "congrArg",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.impl.semistable_resμ_of_jordanHolderFiltration._simp_1_1",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "HarderNarasimhan.Affine",
   "Not",
   "List.nil",
   "bot_lt_iff_ne_bot",
   "le_top",
   "Lattice.toSemilatticeInf",
   "List.TFAE.out",
   "sInf_le",
   "exists_prop_congr",
   "LT.lt",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.instNontrivialInterval",
   "instSubNat",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "le_sInf",
   "Subtype.mk",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.semistable_resμ_of_jordanHolderFiltration",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S} [HarderNarasimhan.FiniteTotalPayoff μ]\n  [HarderNarasimhan.SlopeLike μ] [HarderNarasimhan.Semistable μ] [HarderNarasimhan.StrongDescendingChainCondition' μ]\n  [HarderNarasimhan.Affine μ] (JH : HarderNarasimhan.JordanHolderFiltration μ) (h : JH.filtration (Nat.find ⋯ - 1) < ⊤),\n  HarderNarasimhan.Semistable (HarderNarasimhan.Resμ ⟨(JH.filtration (Nat.find ⋯ - 1), ⊤), h⟩ μ)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat.lt_add_one",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.mk",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              (filtration : ℕ → ℒ) →\n                Monotone filtration →\n                  filtration 0 = ⊥ →\n                    (fin_len : ∃ n, filtration n = ⊤) →\n                      (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                        (∀ (i : ℕ) (h : i < Nat.find fin_len),\n                            HarderNarasimhan.Semistable\n                              (HarderNarasimhan.Resμ ⟨(filtration i, filtration (i + 1)), ⋯⟩ μ)) →\n                          (∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len),\n                              ¬HarderNarasimhan.μA μ ⟨(filtration i, filtration (i + 1)), ⋯⟩ ≤\n                                  HarderNarasimhan.μA μ ⟨(filtration (i + 1), filtration (i + 2)), ⋯⟩) →\n                            HarderNarasimhan.HarderNarasimhanFiltration μ",
  "constCategory": "Other"},
 {"references":
  ["implies_congr",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "And.intro",
   "False.elim",
   "SupSet.sSup",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "funext",
   "forall_congr",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "Eq.rec",
   "HarderNarasimhan.impl.rmk4d10₁._simp_1_2",
   "rfl",
   "Exists",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.impl.rmk4d10₁._simp_1_3",
   "Prod.snd",
   "Bot.bot",
   "Set.instMembership",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Iff",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "HarderNarasimhan.μmax._proof_1",
   "id",
   "Top.top",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "lt_top_iff_ne_top",
   "setOf",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "congrArg",
   "Prod.fst",
   "Iff.intro",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "InfSet.sInf",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Not",
   "sSup_le_iff",
   "bot_lt_iff_ne_bot",
   "le_sInf_iff",
   "Set",
   "exists_prop_congr",
   "LT.lt",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.μA._proof_1",
   "ne_of_lt",
   "LE.le",
   "CompleteSemilatticeSup.toPartialOrder",
   "False",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top",
   "And.casesOn"],
  "name": "HarderNarasimhan.impl.rmk4d10₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.μBstar μ ≤ HarderNarasimhan.μAstar μ ↔\n    ∀ (x : ℒ) (hx : x ≠ ⊤) (y : ℒ) (hy : ⊥ < y),\n      HarderNarasimhan.μmin μ ⟨(⊥, y), hy⟩ ≤ HarderNarasimhan.μmax μ ⟨(x, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Membership.mk",
   "SetLike.coe",
   "Set",
   "Membership.mem",
   "SetLike",
   "Membership",
   "Set.instMembership"],
  "name": "SetLike.instMembership",
  "constType":
  "{A : Type u_1} → {B : Type u_2} → [i : SetLike A B] → Membership B A",
  "constCategory": "Definition"},
 {"references": ["Lattice", "CompleteLattice"],
  "name": "CompleteLattice.toLattice",
  "constType": "{α : Type u_8} → [self : CompleteLattice α] → Lattice α",
  "constCategory": "Definition"},
 {"references":
  ["Exists", "Subtype", "Subtype.exists", "Subtype.mk", "Eq", "propext"],
  "name": "HarderNarasimhan.instWellFoundedGTInterval._simp_2",
  "constType":
  "∀ {α : Sort u} {p : α → Prop} {q : { a // p a } → Prop}, (∃ x, q x) = ∃ a, ∃ (b : p a), q ⟨a, b⟩",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.StI",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Set",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.St",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Set ℒ",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.Stable.mk",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.Stable",
   "GT.gt",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Semistable.mk",
   "CompleteSemilatticeInf.toPartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Stable.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x : ℒ) (hx : x ≠ ⊥), ¬HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ > HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩) →\n    (∀ (x : ℒ) (hx : x ≠ ⊥), x ≠ ⊤ → HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ ≠ HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩) →\n      HarderNarasimhan.Stable μ",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "HarderNarasimhan.Convex.mk",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "HarderNarasimhan.Convex.rec",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "Lattice",
   "LE.le",
   "SemilatticeSup.toMax",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Convex.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Lattice ℒ] →\n    {S : Type u_2} →\n      [inst_1 : CompleteLattice S] →\n        {μ : { p // p.1 < p.2 } → S} →\n          {motive : HarderNarasimhan.Convex μ → Sort u} →\n            (t : HarderNarasimhan.Convex μ) →\n              ((convex : ∀ (x y : ℒ) (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["not_and_of_not_or_not",
   "Not",
   "And.intro",
   "Or.inr",
   "Or.inl",
   "Or",
   "Decidable",
   "Iff",
   "And",
   "dite",
   "Iff.intro"],
  "name": "Decidable.not_and_iff_not_or_not'",
  "constType": "∀ {b a : Prop} [Decidable b], ¬(a ∧ b) ↔ ¬a ∨ ¬b",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.HarderNarasimhanFiltration.monotone",
   "PartialOrder.toPreorder",
   "Submodule.instNontrivial",
   "Module",
   "HarderNarasimhan.μ",
   "Nat.instPreorder",
   "Monotone",
   "HarderNarasimhan.S",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
   "CompleteLattice.toConditionallyCompleteLattice",
   "SemilatticeInf.toPartialOrder",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "IsNoetherianRing",
   "Nat",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "ConditionallyCompleteLattice.toLattice",
   "HarderNarasimhan.S₀",
   "CompleteLattice.toBoundedOrder",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_3",
  "constType":
  "∀ {R : Type u_2} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_1} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (HNFil : HarderNarasimhan.HarderNarasimhanFiltration (HarderNarasimhan.μ R M)), Monotone HNFil.filtration",
  "constCategory": "Theorem"},
 {"references":
  ["Exists",
   "Set",
   "Membership.mem",
   "And",
   "Eq",
   "Set.instMembership",
   "setOf"],
  "name": "Set.image",
  "constType": "{α : Type u} → {β : Type v} → (α → β) → Set α → Set β",
  "constCategory": "Definition"},
 {"references": ["Not"],
  "name": "mt",
  "constType": "∀ {a b : Prop}, (a → b) → ¬b → ¬a",
  "constCategory": "Theorem"},
 {"references":
  ["Set", "LE.le", "Membership.mem", "LE", "Set.instMembership", "setOf"],
  "name": "upperBounds",
  "constType": "{α : Type u_1} → [LE α] → Set α → Set α",
  "constCategory": "Definition"},
 {"references":
  ["Submodule.ext",
   "Subtype",
   "Eq.trans",
   "LinearMap.instFunLike",
   "Eq.mp",
   "Module",
   "Submodule.module",
   "Membership.mem",
   "Submodule.map",
   "Exists.intro",
   "and_true",
   "Subtype.val",
   "DFunLike.coe",
   "congrArg",
   "Submodule",
   "Submodule.subtype",
   "Iff.intro",
   "LinearMap.semilinearMapClass",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "congr",
   "Eq.rec",
   "Eq",
   "HarderNarasimhan.impl.submoduleOf_map_subtype._simp_1_2",
   "CommRing.toCommSemiring",
   "SetLike.instMembership",
   "True",
   "Set",
   "CommSemiring.toSemiring",
   "And",
   "AddCommGroup",
   "CommRing",
   "LinearMap",
   "Set.instMembership",
   "RingHomSurjective.ids",
   "Exists.casesOn",
   "eq_self",
   "SetLike.coe",
   "Submodule.setLike",
   "Nontrivial",
   "id",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "Submodule.addCommMonoid",
   "And.casesOn",
   "HarderNarasimhan.impl.submoduleOf_map_subtype._simp_1_1",
   "Submodule.submoduleOf"],
  "name": "HarderNarasimhan.impl.submoduleOf_map_subtype",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] {M : Type u_2} [Nontrivial M] [inst_2 : AddCommGroup M]\n  [inst_3 : _root_.Module R M] (N : Submodule R M) (N' : Submodule R ↥N),\n  N' = (Submodule.map N.subtype N').submoduleOf N",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Nontrivial",
  "constType": "Type u_3 → Prop",
  "constCategory": "Other"},
 {"references": ["HMul", "HMul.mk", "Mul", "Mul.mul"],
  "name": "instHMul",
  "constType": "{α : Type u_1} → [Mul α] → HMul α α α",
  "constCategory": "Definition"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "Subtype.property",
   "Membership.mem",
   "SetLike",
   "Subtype.val"],
  "name": "SetLike.coe_mem",
  "constType":
  "∀ {A : Type u_1} {B : Type u_2} [i : SetLike A B] {p : A} (x : ↥p), ↑x ∈ p",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.μ_Admissible.rec",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.μ_Admissible",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.μ_Admissible.mk",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "IsTotal",
   "Or",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "WellFoundedGT",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.μ_Admissible.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        [inst_3 : WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [inst_4 : CompleteLattice S] →\n              {μ : { p // p.1 < p.2 } → S} →\n                {motive : HarderNarasimhan.μ_Admissible μ → Sort u} →\n                  (t : HarderNarasimhan.μ_Admissible μ) →\n                    ((μ_adm :\n                          (IsTotal S fun x1 x2 ↦ x1 ≤ x2) ∨\n                            ∀ (I : { p // p.1 < p.2 }), HarderNarasimhan.IsAttained μ I) →\n                        motive ⋯) →\n                      motive t",
  "constCategory": "Definition"},
 {"references":
  ["SetLike.instMembership",
   "True",
   "Module",
   "Membership.mem",
   "Submodule.instTop",
   "eq_true",
   "Submodule.mem_top",
   "Submodule",
   "AddCommMonoid",
   "Submodule.setLike",
   "Top.top",
   "Eq",
   "Semiring"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_13",
  "constType":
  "∀ {R : Type u_1} {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M] {x : M},\n  (x ∈ ⊤) = True",
  "constCategory": "Theorem"},
 {"references": ["Membership.mk", "Membership", "Multiset", "Multiset.Mem"],
  "name": "Multiset.instMembership",
  "constType": "{α : Type u_1} → Membership α (Multiset α)",
  "constCategory": "Definition"},
 {"references":
  ["Finset.instSingleton",
   "Finset",
   "Finset.singleton_inj",
   "Singleton.singleton",
   "Eq",
   "propext"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_3",
  "constType": "∀ {α : Type u_1} {a b : α}, ({a} = {b}) = (a = b)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.μA",
   "PartialOrder",
   "Nontrivial",
   "Top.top",
   "OrderBot.toBot",
   "Subtype.mk",
   "Preorder.toLE",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μAstar",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → S",
  "constCategory": "Definition"},
 {"references": ["Lean.Name"],
  "name": "Lean.Name.anonymous",
  "constType": "Name",
  "constCategory": "Other"},
 {"references":
  ["RingHom",
   "Module",
   "RingHom.instFunLike",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "LinearEquiv",
   "DFunLike.coe",
   "SemilinearEquivClass.instSemilinearMapClass",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "MonoidWithZero.toMonoid",
   "EquivLike.toFunLike",
   "instHSMul",
   "Eq",
   "LinearEquiv.instEquivLike",
   "DistribSMul.toSMulZeroClass",
   "SemilinearMapClass.toMulActionSemiHomClass",
   "outParam",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "AddZeroClass.toAddZero",
   "LinearEquiv.instSemilinearEquivClass",
   "MulActionSemiHomClass.map_smulₛₗ",
   "Module.toDistribMulAction",
   "HSMul.hSMul",
   "RingHomInvPair.ids",
   "AddZero.toZero",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "LinearEquiv.map_smul",
  "constType":
  "∀ {R₁ : Type u_2} {N₁ : Type u_12} {N₂ : Type u_13} [inst : Semiring R₁] [inst_1 : AddCommMonoid N₁]\n  [inst_2 : AddCommMonoid N₂] {module_N₁ : _root_.Module R₁ N₁} {module_N₂ : _root_.Module R₁ N₂} (e : N₁ ≃ₗ[R₁] N₂)\n  (c : R₁) (x : N₁), e (c • x) = c • e x",
  "constCategory": "Theorem"},
 {"references":
  ["Exists", "Exists.intro", "Eq", "forall_exists_index", "propext"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_23",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {q : (∃ x, p x) → Prop}, (∀ (h : ∃ x, p x), q h) = ∀ (x : α) (h : p x), q ⋯",
  "constCategory": "Theorem"},
 {"references": ["rfl", "Eq.rec", "Eq"],
  "name": "congrArg",
  "constType":
  "∀ {α : Sort u} {β : Sort v} {a₁ a₂ : α} (f : α → β), a₁ = a₂ → f a₁ = f a₂",
  "constCategory": "Theorem"},
 {"references": ["outParam", "SetLike", "Zero"],
  "name": "ZeroMemClass",
  "constType":
  "(S : Type u_3) → (M : outParam (Type u_4)) → [Zero M] → [SetLike S M] → Prop",
  "constCategory": "Other"},
 {"references":
  ["Not",
   "binderNameHint",
   "Exists",
   "Mathlib.Tactic.Push.not_exists",
   "Eq",
   "propext"],
  "name": "Mathlib.Tactic.Push.not_exists._simp_1",
  "constType":
  "∀ {α : Sort u_1} (s : α → Prop), (¬∃ x, s x) = ∀ (x : α), binderNameHint x s ¬s x",
  "constCategory": "Theorem"},
 {"references":
  ["HAdd.hAdd",
   "Function.Injective.eq_iff",
   "IsLeftCancelAdd",
   "instHAdd",
   "Add",
   "Iff",
   "add_right_injective",
   "Eq"],
  "name": "add_right_inj",
  "constType":
  "∀ {G : Type u_1} [inst : Add G] [IsLeftCancelAdd G] (a : G) {b c : G}, a + b = a + c ↔ b = c",
  "constCategory": "Theorem"},
 {"references":
  ["Ring.toNonAssocRing",
   "HarderNarasimhan.impl.subseq_prop5",
   "Classical.propDecidable",
   "AddGroupWithOne.toAddMonoidWithOne",
   "Int.instCommSemiring",
   "le_of_not_gt",
   "Nat.sub_one_add_one",
   "Int.instLTInt",
   "Eq.symm",
   "HarderNarasimhan.impl.subseq_prop6._simp_1_5",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "instLatticeInt",
   "instLTNat",
   "HarderNarasimhan.impl.subseq_prop1",
   "Exists",
   "BoundedOrder",
   "Ring.toSemiring",
   "not_lt_of_ge",
   "instOfNat",
   "AddMonoid.toAddSemigroup",
   "Antitone",
   "eq_false",
   "Top.top",
   "Int.negOfNat",
   "Eq.mpr",
   "Nat.sub_eq_iff_eq_add",
   "Nat.find",
   "Mathlib.Tactic.Linarith.lt_irrefl",
   "Prod.fst",
   "Mathlib.Tactic.Ring.neg_one_mul",
   "Int.instIsStrictOrderedRing",
   "Nat.lt_succ_self",
   "Eq",
   "instNatCastInt",
   "Mathlib.Tactic.Ring.neg_zero",
   "Int.instIsOrderedAddMonoid",
   "Nat.sub",
   "HPow.hPow",
   "lt_of_lt_of_le",
   "Nat.cast_add",
   "Monoid.toNatPow",
   "Ne",
   "instHSub",
   "Nat.find_min'",
   "PartialOrder.toPreorder",
   "lt_of_lt_of_eq",
   "Mathlib.Meta.NormNum.IsNat.of_raw",
   "Mathlib.Meta.NormNum.IsInt.of_raw",
   "Mathlib.Tactic.Ring.add_pf_zero_add",
   "Preorder.toLT",
   "GE.ge",
   "HarderNarasimhan.impl.subseq",
   "Semiring.toNonAssocSemiring",
   "Ne.bot_lt'",
   "Int.instLEInt",
   "AddGroup.toSubNegMonoid",
   "Int.ofNat",
   "Eq.rec",
   "SemilatticeInf.toPartialOrder",
   "of_eq_false",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "lt_of_le_of_lt",
   "Bot.bot",
   "Exists.casesOn",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "Mathlib.Tactic.Ring.atom_pf",
   "NonUnitalNormedCommRing.toNonUnitalCommRing",
   "Nat.cast",
   "Eq.mp",
   "DecidablePred",
   "lt_of_le_of_ne",
   "neg_eq_zero",
   "BoundedOrder.toOrderTop",
   "Mathlib.Tactic.Ring.add_pf_add_lt",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "dite_cond_eq_false",
   "Not",
   "le_top",
   "instHAdd",
   "Distrib.toMul",
   "Mathlib.Tactic.Ring.cast_pos",
   "HarderNarasimhan.impl.subseq_prop6._simp_1_6",
   "Mathlib.Tactic.Ring.add_congr",
   "LT.lt",
   "One.toOfNat1",
   "Mathlib.Tactic.Ring.neg_add",
   "Mathlib.Tactic.Ring.add_pf_add_zero",
   "instSubNat",
   "Nat.succ",
   "Mathlib.Tactic.Ring.neg_congr",
   "Mathlib.Tactic.Linarith.sub_nonpos_of_le",
   "False",
   "Subtype.mk",
   "lt_self_iff_false",
   "OrderTop.toTop",
   "Nat.le_add_right_of_le",
   "NormedCommRing.toNonUnitalNormedCommRing",
   "Nat.succ_le",
   "instAddNat",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Mathlib.Tactic.Linarith.add_lt_of_neg_of_le",
   "Eq.trans",
   "Exists.intro",
   "Mathlib.Meta.NormNum.IsInt.to_raw_eq",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "False.elim",
   "sub_eq_zero_of_eq",
   "SubNegMonoid.toSub",
   "NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring",
   "Mathlib.Tactic.Ring.add_overlap_pf_zero",
   "Mathlib.Tactic.Ring.sub_pf",
   "Eq.ndrec",
   "Int.instAddGroup",
   "rfl",
   "NonUnitalCommRing.toNonUnitalNonAssocCommRing",
   "Prod.snd",
   "Prod",
   "Nat.find_spec",
   "BoundedOrder.toOrderBot",
   "Eq.refl",
   "Classical.byContradiction",
   "AddMonoidWithOne.toOne",
   "Lattice",
   "Nat.rawCast",
   "Mathlib.Meta.NormNum.IsNat.to_isInt",
   "Nat.le_of_pred_lt",
   "Ne.symm",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "not_le._simp_1",
   "Int.instRing",
   "Int.add_one_le_iff",
   "Nat.instPreorder",
   "Mathlib.Tactic.Ring.add_pf_add_overlap_zero",
   "Int.instAddCommGroup",
   "instOfNatNat",
   "congr",
   "Int.instAdd",
   "Preorder.toLE",
   "lt_of_not_ge",
   "Nat.le_induction",
   "Distrib.toAdd",
   "IsStrictOrderedRing.toIsOrderedRing",
   "Mathlib.Tactic.Zify.natCast_lt._simp_1",
   "OfNat.ofNat",
   "Int",
   "not_le_of_gt",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "AddGroupWithOne.toAddGroup",
   "AddCommGroup.toDivisionAddCommMonoid",
   "MulZeroClass.toZero",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "Int.instNormedCommRing",
   "neg_neg_of_pos",
   "dite",
   "And.casesOn",
   "Nat.cast_one",
   "Mathlib.Meta.NormNum.IsNat.to_raw_eq",
   "Mathlib.Tactic.Linarith.lt_of_lt_of_eq",
   "Prod.mk",
   "HarderNarasimhan.impl.subseq_prop0'",
   "Iff.mp",
   "bot_le",
   "HMul.hMul",
   "Int.rawCast",
   "AddMonoidWithOne.toAddMonoid",
   "Ring.toAddGroupWithOne",
   "funext",
   "HSub.hSub",
   "Mathlib.Meta.NormNum.IsInt.to_isNat",
   "Nat.find.congr_simp",
   "Mathlib.Tactic.Linarith.zero_lt_one",
   "Nat.instLinearOrder",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "AddSemigroup.toAdd",
   "instHPow",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Neg.neg",
   "And",
   "NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring",
   "Decidable.byContradiction",
   "Mathlib.Meta.NormNum.instAddMonoidWithOne",
   "Iff.mpr",
   "Nontrivial",
   "NegZeroClass.toZero",
   "id",
   "instHMul",
   "Mathlib.Meta.NormNum.isNat_ofNat",
   "Subtype",
   "Mathlib.Tactic.Zify.natCast_eq._simp_1",
   "Mathlib.Tactic.Ring.neg_mul",
   "Mathlib.Meta.NormNum.isInt_add",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "Mathlib.Tactic.Ring.instCommSemiringNat",
   "MonoidWithZero.toMonoid",
   "Zero.toOfNat0",
   "Mathlib.Tactic.Ring.sub_congr",
   "OrderBot.toBot",
   "Mathlib.Tactic.Ring.cast_zero",
   "Mathlib.Meta.NormNum.isInt_mul",
   "Mathlib.Tactic.Ring.of_eq",
   "Lattice.toSemilatticeInf",
   "CommSemiring.toSemiring",
   "Nat.decLe",
   "Semiring.toMonoidWithZero",
   "Mathlib.Tactic.Zify.natCast_le._simp_1",
   "HarderNarasimhan.impl.subseq._proof_2",
   "NegZeroClass.toNeg",
   "Int.instSemiring",
   "LE.le",
   "Mathlib.Tactic.Ring.add_pf_add_gt",
   "Int.instAddMonoid",
   "instLENat"],
  "name": "HarderNarasimhan.impl.subseq_prop6",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (f : ℕ → ℒ) (hf0 : f 0 = ⊤)\n  (atf : ∃ k, f k = ⊥) (hfat : Antitone f) (P : { z // z.1 < z.2 } → Prop),\n  (∀ i < Nat.find atf, ∀ (hfi : f (i + 1) < f i), P ⟨(f (i + 1), f i), hfi⟩) →\n    ∀ (i : ℕ) (hi : i < Nat.find ⋯),\n      P ⟨(HarderNarasimhan.impl.subseq f atf (i + 1), HarderNarasimhan.impl.subseq f atf i), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["Subtype", "Subtype.property", "Subtype.val"],
  "name": "Subtype.prop",
  "constType": "∀ {α : Sort u_1} {p : α → Prop} (x : Subtype p), p ↑x",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Iff.trans",
   "Module",
   "not_iff_not",
   "Iff.mp",
   "Iff.symm",
   "Submodule",
   "not_nontrivial_iff_subsingleton",
   "AddCommMonoid",
   "Subsingleton",
   "Submodule.subsingleton_iff",
   "Iff",
   "Nontrivial",
   "Semiring"],
  "name": "Submodule.nontrivial_iff",
  "constType":
  "∀ (R : Type u_1) {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M],\n  Nontrivial (Submodule R M) ↔ Nontrivial M",
  "constCategory": "Theorem"},
 {"references":
  ["Nat", "Nat.instCommSemiring", "CommSemiring", "inferInstance"],
  "name": "Mathlib.Tactic.Ring.instCommSemiringNat",
  "constType": "CommSemiring ℕ",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Preorder.toLT",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "PartialOrder",
   "Nontrivial",
   "LE.le",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.Interval",
  "constType":
  "{ℒ : Type u_1} → [Nontrivial ℒ] → [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → { p // p.1 < p.2 } → Type (max 0 u_1)",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Preorder.toLT",
   "BoundedOrder",
   "Bot.bot",
   "LT.lt",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "OrderBot.toBot",
   "Preorder.toLE",
   "OrderTop.toTop",
   "bot_lt_top",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.JHFil._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [Nontrivial ℒ] [inst : Lattice ℒ] [inst_1 : BoundedOrder ℒ], ⊥ < ⊤",
  "constCategory": "Theorem"},
 {"references": ["LE"],
  "name": "OrderBot",
  "constType": "(α : Type u) → [LE α] → Type u",
  "constCategory": "Other"},
 {"references":
  ["Not",
   "Set.not_nonempty_iff_eq_empty",
   "Set.Nonempty",
   "Set",
   "Set.instEmptyCollection",
   "EmptyCollection.emptyCollection",
   "Eq",
   "propext"],
  "name": "Set.not_nonempty_iff_eq_empty._simp_1",
  "constType": "∀ {α : Type u} {s : Set α}, (¬s.Nonempty) = (s = ∅)",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "HarderNarasimhan.semistableI",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "GT.gt",
   "HarderNarasimhan.S₂I",
   "Subtype.val",
   "HarderNarasimhan.S₁I",
   "HarderNarasimhan.impl.semistable_iff._simp_1_6",
   "not_false_eq_true",
   "HarderNarasimhan.S₁I._proof_1",
   "forall_congr",
   "funext",
   "CompleteSemilatticeInf.toPartialOrder",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "Exists.choose_spec",
   "HarderNarasimhan.impl.semistable_iff._simp_1_7",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "True.intro",
   "Bot.bot",
   "Set.instMembership",
   "Prod",
   "implies_true",
   "BoundedOrder.toOrderBot",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Iff",
   "Iff.mpr",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "id",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "setOf",
   "HarderNarasimhan.Semistable",
   "Ne.symm",
   "Subtype",
   "and_true",
   "Iff.intro",
   "Prod.fst",
   "congrArg",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Semistable.mk",
   "HarderNarasimhan.impl.semistable_iff._simp_1_8",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "True",
   "Set",
   "HarderNarasimhan.Semistable.semistable",
   "HarderNarasimhan.impl.semistable_iff._simp_1_4",
   "exists_prop_congr",
   "LT.lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "False",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.semistable_iff",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Semistable μ ↔ HarderNarasimhan.semistableI μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references": ["SMul"],
  "name": "SMul.mk",
  "constType": "{M : Type u} → {α : Type v} → (M → α → α) → SMul M α",
  "constCategory": "Other"},
 {"references":
  ["Not",
   "LT.lt",
   "not_le_of_gt",
   "Preorder",
   "LE.le",
   "Preorder.toLT",
   "Preorder.toLE"],
  "name": "LT.lt.not_ge",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] {a b : α}, a < b → ¬b ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toRing",
   "CommSemiring",
   "CommRing.mul_comm",
   "CommSemiring.mk",
   "CommRing",
   "Ring.toSemiring"],
  "name": "CommRing.toCommSemiring",
  "constType": "{α : Type u} → [s : CommRing α] → CommSemiring α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.JordanHolderFiltration",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Antitone",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.JordanHolderFiltration.rec",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.JordanHolderFiltration.mk",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "lt_add_one",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instLENat",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice"],
  "name": "HarderNarasimhan.JordanHolderFiltration.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.JordanHolderFiltration μ → Sort u} →\n                (t : HarderNarasimhan.JordanHolderFiltration μ) →\n                  ((filtration : ℕ → ℒ) →\n                      (antitone : Antitone filtration) →\n                        (fin_len : ∃ N, filtration N = ⊥) →\n                          (strict_anti : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration j < filtration i) →\n                            (first_eq_top : filtration 0 = ⊤) →\n                              (step_cond₁ :\n                                  ∀ (k : ℕ) (hk : k < Nat.find fin_len),\n                                    μ ⟨(filtration (k + 1), filtration k), ⋯⟩ = μ ⟨(⊥, ⊤), ⋯⟩) →\n                                (step_cond₂ :\n                                    ∀ (i : ℕ) (hi : i < Nat.find fin_len) (z : ℒ) (h' : filtration (i + 1) < z),\n                                      z < filtration i →\n                                        μ ⟨(filtration (i + 1), z), h'⟩ < μ ⟨(filtration (i + 1), filtration i), ⋯⟩) →\n                                  motive\n                                    { filtration := filtration, antitone := antitone, fin_len := fin_len,\n                                      strict_anti := strict_anti, first_eq_top := first_eq_top,\n                                      step_cond₁ := step_cond₁, step_cond₂ := step_cond₂ }) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "lt_trans",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "bot_le",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "Equiv",
   "Or",
   "SupSet.sSup",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "funext",
   "Eq.symm",
   "HarderNarasimhan.impl.prop4d1₁",
   "HarderNarasimhan.impl.prop4d3_helper",
   "ConditionallyCompleteLattice.toInfSet",
   "Exists",
   "HarderNarasimhan.impl.prop4d3₁._simp_1_1",
   "lt_of_le_of_lt",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Bot.bot",
   "Nat.lt_add_one",
   "Set.instMembership",
   "Exists.casesOn",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Iff.of_eq",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "Top.top",
   "id",
   "Set.ext",
   "Eq.mpr",
   "OrderDual.instBoundedOrder",
   "HarderNarasimhan.impl.prop4d1_helper",
   "setOf",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "OrderDual",
   "OrderDual.toDual",
   "Subtype",
   "Equiv.instEquivLike",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.impl.dualμAstar_eq_μBstar",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "DFunLike.coe",
   "Iff.intro",
   "congrArg",
   "Nat.instPreorder",
   "Prod.fst",
   "OrderDual.instNontrivial",
   "HarderNarasimhan.μmin",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "OrderDual.instLT",
   "InfSet.sInf",
   "OrderDual.instCompleteLattice",
   "EquivLike.toFunLike",
   "OrderBot.toBot",
   "OrderDual.instPartialOrder",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.impl.h₁_dual_of_h₁",
   "propext",
   "CompleteLattice.toConditionallyCompleteLattice",
   "Set",
   "instHAdd",
   "OfNat.ofNat",
   "exists_prop_congr",
   "LT.lt",
   "HAdd.hAdd",
   "StrictAnti",
   "HarderNarasimhan.impl.h₂_dual_of_h₂",
   "LE.le",
   "Subtype.mk",
   "ConditionallyCompleteLattice.toSupSet",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop4d3₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (∀ (x : ℕ → ℒ) (saf : StrictAnti x), ∃ N, μ ⟨(⊥, x N), ⋯⟩ ≤ μ ⟨(x (N + 1), x N), ⋯⟩) →\n    (∀ (z : { p // p.1 < p.2 }) (hz : ⊥ < (↑z).1),\n        μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ z ∨ μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ ⟨(⊥, (↑z).1), hz⟩) →\n      HarderNarasimhan.μBstar μ = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "bot_lt_iff_ne_bot",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "Preorder.toLT",
   "Ne",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Bot.bot",
   "propext",
   "OrderBot"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_16",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderBot α] {a : α}, (⊥ < a) = (a ≠ ⊥)",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μ",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion",
   "Inhabited.default",
   "HarderNarasimhan.impl.CoprimaryFiltration.toHarderNarasimhanFiltration",
   "HarderNarasimhan.impl.instConvexOfConvexITotIntvl",
   "CompleteLinearOrder",
   "HarderNarasimhan.S",
   "Exists",
   "HarderNarasimhan.CoprimaryFiltration.filtration",
   "HarderNarasimhan.instUniqueHarderNarasimhanFiltration",
   "HarderNarasimhan.impl.instμ_AdmissibleℒSμ",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Unique.uniq",
   "Exists.casesOn",
   "Nat",
   "Eq.refl",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "id",
   "Eq.mpr",
   "ConditionallyCompleteLattice.toLattice",
   "CompleteLattice.toBoundedOrder",
   "Submodule.instNontrivial",
   "Module",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Submodule",
   "congrArg",
   "HarderNarasimhan.CoprimaryFiltration",
   "HarderNarasimhan.instLinearOrderS₀",
   "Eq",
   "HarderNarasimhan.impl.prop3d11",
   "CompleteLattice.toConditionallyCompleteLattice",
   "Unique",
   "CommRing.toCommSemiring",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "HarderNarasimhan.impl.prop3d13₂",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "Inhabited",
   "HarderNarasimhan.impl.prop3d13₁",
   "CompletelyDistribLattice.toCompleteLattice",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Unique.toInhabited",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Submodule.completeLattice",
   "inferInstance",
   "HarderNarasimhan.S₀",
   "Module.Finite"],
  "name":
  "HarderNarasimhan.impl.CoprimaryFiltration.filtration_eq_harderNarasimhan_filtration",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (CPFil : HarderNarasimhan.CoprimaryFiltration R M), CPFil.filtration = default.filtration",
  "constCategory": "Theorem"},
 {"references":
  ["le_rfl",
   "SemilatticeInf",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "inf_le_inf",
   "Min.min",
   "LE.le",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "inf_le_inf_right",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeInf α] (a : α) {b c : α}, b ≤ c → b ⊓ a ≤ c ⊓ a",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "Nat.instAddCommMonoid",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Nat.lt_add_one",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "HarderNarasimhan.HarderNarasimhanFiltration.strict_mono",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.μA_pseudo_strict_anti",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} (self : HarderNarasimhan.HarderNarasimhanFiltration μ)\n  (i : ℕ) (hi : i + 1 < Nat.find ⋯),\n  ¬HarderNarasimhan.μA μ ⟨(self.filtration i, self.filtration (i + 1)), ⋯⟩ ≤\n      HarderNarasimhan.μA μ ⟨(self.filtration (i + 1), self.filtration (i + 2)), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Eq.mp",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "GT.gt",
   "congrArg",
   "Prod.fst",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "BoundedOrder.toOrderTop",
   "Eq.symm",
   "HarderNarasimhan.Convex",
   "CompleteLinearOrder",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "propext",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "CompletelyDistribLattice.toCompleteLattice",
   "HarderNarasimhan.impl.rmk2d7",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.remark_2_7",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Convex μ →\n    ∀ (x : ℒ) (h : ⊥ < x ∧ x < ⊤),\n      HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ > HarderNarasimhan.μA μ HarderNarasimhan.TotIntvl →\n        HarderNarasimhan.μA μ ⟨(x, ⊤), ⋯⟩ = HarderNarasimhan.μA μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "SetLike.coe_eq_coe",
   "Membership.mem",
   "SetLike",
   "Eq",
   "Subtype.val",
   "propext"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_13",
  "constType":
  "∀ {A : Type u_1} {B : Type u_2} [i : SetLike A B] {p : A} {x y : ↥p}, (↑x = ↑y) = (x = y)",
  "constCategory": "Theorem"},
 {"references": ["HasSubset.mk", "Set", "HasSubset", "LE.le", "Set.instLE"],
  "name": "Set.instHasSubset",
  "constType": "{α : Type u} → HasSubset (Set α)",
  "constCategory": "Definition"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.hasQuotient",
   "HarderNarasimhan.impl.CP.f2._proof_1",
   "Subtype",
   "PartialOrder.toPreorder",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.Quotient.module",
   "Submodule.module",
   "LinearMap.mk",
   "AddHom.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Membership.mem",
   "Preorder.toLT",
   "HarderNarasimhan.impl.CP.f2._proof_2",
   "DFunLike.coe",
   "Subtype.val",
   "Submodule",
   "Prod.fst",
   "Submodule.Quotient.addCommGroup",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Submodule.mkQ",
   "CommRing.toCommSemiring",
   "SetLike.instMembership",
   "Submodule.addCommGroup",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "Prod.snd",
   "LinearMap",
   "CommRing",
   "Ring.toSemiring",
   "LT.lt",
   "Prod",
   "CommRing.toRing",
   "IsNoetherianRing",
   "AddCommMonoid.toAddCommSemigroup",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Submodule.submoduleOf",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.CP.f2",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] →\n                (I : { z // z.1 < z.2 }) → ↥(↑I).2 →ₗ[R] ↥(↑I).2 ⧸ Submodule.submoduleOf (↑I).1 (↑I).2",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "Nat.succ_le_succ", "instLTNat", "Nat", "Nat.succ"],
  "name": "Nat.succ_lt_succ",
  "constType": "∀ {n m : ℕ}, n < m → n.succ < m.succ",
  "constCategory": "Theorem"},
 {"references": ["LE"],
  "name": "LE.le",
  "constType": "{α : Type u} → [self : LE α] → α → α → Prop",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Not",
   "PartialOrder.toPreorder",
   "not_bot_lt_iff",
   "PartialOrder",
   "Preorder.toLT",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Bot.bot",
   "propext",
   "OrderBot"],
  "name": "HarderNarasimhan.impl.step_cond₂_of_stable._simp_1_1",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderBot α] {a : α}, (¬⊥ < a) = (a = ⊥)",
  "constCategory": "Theorem"},
 {"references": ["Nat", "LE.mk", "LE", "Nat.le"],
  "name": "instLENat",
  "constType": "LE ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Lean.mkAtom",
   "Lean.Name.mkStr4",
   "Lean.Syntax.node",
   "Lean.Name.mkStr1",
   "Array.push",
   "Lean.Syntax",
   "Array.empty",
   "Lean.SourceInfo.none"],
  "name": "AddMonoid.nsmul_succ._autoParam",
  "constType": "Syntax",
  "constCategory": "Definition"},
 {"references":
  ["AddCommMonoid",
   "AddSubmonoid",
   "Module",
   "AddCommMonoid.toAddMonoid",
   "AddMonoid.toAddZeroClass",
   "Submodule",
   "Semiring"],
  "name": "Submodule.toAddSubmonoid",
  "constType":
  "{R : Type u} →\n  {M : Type v} →\n    [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → Submodule R M → AddSubmonoid M",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Ideal.IsPrime",
   "Submodule.Quotient.module",
   "HarderNarasimhan.μ",
   "Membership.mem",
   "Classical.propDecidable",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "Membership.mem.out",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_5",
   "Semiring.toModule",
   "HarderNarasimhan.S",
   "HarderNarasimhan.Coprimary.coprimary",
   "And.left",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "SetLike.instMembership",
   "Exists.choose_spec",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Submodule.addCommGroup",
   "LinearMap",
   "HarderNarasimhan.impl.piecewise_coprimary",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Set.instMembership",
   "Nat",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Top.top",
   "ConditionallyCompleteLattice.toLattice",
   "CompleteLattice.toBoundedOrder",
   "Submodule.submoduleOf",
   "LinearMap.toSpanSingleton",
   "Submodule.hasQuotient",
   "Nat.find",
   "associatedPrimes",
   "Submodule.instNontrivial",
   "Subtype",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "ExistsUnique.exists",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "instOfNatNat",
   "Eq",
   "CompleteLattice.toConditionallyCompleteLattice",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_1",
   "CommRing.toCommSemiring",
   "instHAdd",
   "Set",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "Submodule.instTop",
   "IsAssociatedPrime._proof_1",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "IsAssociatedPrime",
   "CommRing",
   "Exists.choose",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_10",
   "Nat.lt_of_succ_lt",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Submodule.setLike",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "Submodule.completeLattice",
   "HarderNarasimhan.S₀",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.instInhabitedCoprimaryFiltration._proof_11",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (HNFil : HarderNarasimhan.HarderNarasimhanFiltration (HarderNarasimhan.μ R M)) (n : ℕ) (hn : n + 1 < Nat.find ⋯),\n  ⋯.choose.IsPrime",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "And.right",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Or",
   "PartialOrder",
   "LE.le",
   "Nontrivial",
   "HarderNarasimhan.SlopeLike.mk",
   "Subtype.mk",
   "Preorder.toLE",
   "CompleteLattice",
   "And.left"],
  "name": "HarderNarasimhan.SlopeLike.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x y z : ℒ) (h : x < y ∧ y < z),\n      (μ ⟨(x, y), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ < μ ⟨(x, z), ⋯⟩) ∧\n        (μ ⟨(x, y), ⋯⟩ < μ ⟨(x, z), ⋯⟩ ∨ μ ⟨(y, z), ⋯⟩ ≤ μ ⟨(x, z), ⋯⟩) ∧\n          (μ ⟨(x, z), ⋯⟩ < μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(y, z), ⋯⟩) ∧\n            (μ ⟨(x, z), ⋯⟩ ≤ μ ⟨(x, y), ⋯⟩ ∨ μ ⟨(x, z), ⋯⟩ < μ ⟨(y, z), ⋯⟩)) →\n    HarderNarasimhan.SlopeLike μ",
  "constCategory": "Definition"},
 {"references":
  ["Exists", "Exists.elim", "ExistsUnique", "Eq", "ExistsUnique.intro"],
  "name": "existsUnique_of_exists_of_unique",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop}, (∃ x, p x) → (∀ (y₁ y₂ : α), p y₁ → p y₂ → y₁ = y₂) → ∃! x, p x",
  "constCategory": "Theorem"},
 {"references":
  ["implies_congr",
   "Finset",
   "Eq.trans",
   "True",
   "Set",
   "Membership.mem",
   "Set.toFinset",
   "Finset.instHasSubset",
   "Fintype",
   "Set.Elem",
   "congrArg",
   "Set.instMembership",
   "Set.instHasSubset",
   "Set.mem_toFinset._simp_1",
   "iff_self",
   "of_eq_true",
   "HasSubset.Subset",
   "Iff",
   "forall_congr",
   "Finset.instMembership",
   "Set.toFinset_subset_toFinset._simp_1_1"],
  "name": "Set.toFinset_subset_toFinset",
  "constType":
  "∀ {α : Type u_1} {s t : Set α} [inst : Fintype ↑s] [inst_1 : Fintype ↑t], s.toFinset ⊆ t.toFinset ↔ s ⊆ t",
  "constCategory": "Theorem"},
 {"references": ["Bool"],
  "name": "Bool.false",
  "constType": "Bool",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice",
   "LE.le",
   "SemilatticeSup.toPartialOrder",
   "SemilatticeSup",
   "Preorder.toLE"],
  "name": "Lattice.mk",
  "constType":
  "{α : Type u} →\n  [toSemilatticeSup : SemilatticeSup α] →\n    (inf : α → α → α) →\n      (∀ (a b : α), inf a b ≤ a) → (∀ (a b : α), inf a b ≤ b) → (∀ (a b c : α), a ≤ b → a ≤ c → a ≤ inf b c) → Lattice α",
  "constCategory": "Other"},
 {"references": ["AddGroupWithOne", "AddMonoidWithOne"],
  "name": "AddGroupWithOne.toAddMonoidWithOne",
  "constType": "{R : Type u} → [self : AddGroupWithOne R] → AddMonoidWithOne R",
  "constCategory": "Definition"},
 {"references":
  ["Submodule.hasQuotient",
   "Ring.toNonAssocRing",
   "HasQuotient.Quotient",
   "Submodule.Quotient.instSMul._proof_1",
   "Module",
   "AddCommGroup.toAddGroup",
   "AddGroupWithOne.toAddMonoidWithOne",
   "SMulZeroClass.toSMul",
   "AddMonoidWithOne.toAddMonoid",
   "instDistribSMul",
   "Submodule",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "SMul",
   "Ring.toAddGroupWithOne",
   "MonoidWithZero.toMonoid",
   "AddGroup.toSubNegMonoid",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "DistribSMul.toSMulZeroClass",
   "DistribMulAction.toDistribSMul",
   "Submodule.Quotient.instSMul'",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "AddZeroClass.toAddZero",
   "Ring.toSemiring",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "AddCommGroup.toAddCommMonoid",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Ring"],
  "name": "Submodule.Quotient.instSMul",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : Ring R] → [inst_1 : AddCommGroup M] → [inst_2 : _root_.Module R M] → (P : Submodule R M) → SMul R (M ⧸ P)",
  "constCategory": "Definition"},
 {"references":
  ["Set.toFinset_congr",
   "Submodule.ext",
   "HarderNarasimhan.impl.CP.f1._proof_1",
   "Submodule.Quotient.module",
   "Submodule.map",
   "LocalizedModule.mk",
   "Finset.min'",
   "RingHom.id",
   "HarderNarasimhan.impl.prop3d12._simp_1_10",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "HarderNarasimhan.impl.prop3d12._simp_1_8",
   "Classical.not_not._simp_3",
   "HarderNarasimhan.S",
   "LocalizedModule.zero_mk",
   "Exists",
   "LinearMap.ker",
   "LocalizedModule",
   "HarderNarasimhan.impl.prop3d11._simp_1",
   "LinearMap",
   "Ring.toSemiring",
   "LocalizedModule.isModule'",
   "HarderNarasimhan.InIntvl",
   "Top.top",
   "Eq.mpr",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_1",
   "Quotient.out",
   "HarderNarasimhan.impl.prop3d12._simp_1_9",
   "RelEmbedding.toEmbedding",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "HarderNarasimhan._μ._proof_1",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Submodule.Quotient.instZeroQuotient",
   "MulZeroOneClass.toMulOneClass",
   "AddCommMonoid.toAddMonoid",
   "HarderNarasimhan.impl.prop3d11._simp_3",
   "Prod.fst",
   "LocalizedModule.mkLinearMap",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
   "HarderNarasimhan.impl.μmax_eq_μ",
   "Eq",
   "LinearExtension",
   "Set",
   "IsLeast.csInf_eq",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Set.toFinset",
   "eq_self",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.instPartialOrderS₀",
   "Ne",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTheory.DedekindMacNeilleCompletion",
   "Submodule.Quotient.mk",
   "PartialOrder.toPreorder",
   "false_of_nontrivial_of_subsingleton",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Subtype.instLE",
   "Membership.mem",
   "HarderNarasimhan.μ",
   "Preorder.toLT",
   "HarderNarasimhan.μmax",
   "LocalizedModule.instZero",
   "RelEmbedding.instFunLike",
   "Submodule.subtype",
   "LinearMap.semilinearMapClass",
   "Semiring.toNonAssocSemiring",
   "Module.support._proof_1",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "HarderNarasimhan.impl.prop3d12._simp_1_4",
   "forall_congr",
   "PrimeSpectrum.instPartialOrder",
   "Eq.rec",
   "Semiring.toModule",
   "NonAssocSemiring.toMulZeroOneClass",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.impl.prop3d12._simp_1_7",
   "binderNameHint",
   "And.right",
   "PrimeSpectrum.mk",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "AddZeroClass.toAddZero",
   "Exists.casesOn",
   "Finset.instSingleton",
   "Iff.of_eq",
   "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder",
   "AddZero.toZero",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "LinearMap.toSpanSingleton",
   "associatedPrimes",
   "Submodule.instNontrivial",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Eq.mp",
   "Submodule.module",
   "LinearMap.comp",
   "lt_of_le_of_ne",
   "DFunLike.coe",
   "Subsingleton",
   "HarderNarasimhan.instLinearOrderS₀",
   "HarderNarasimhan.impl.prop3d12._simp_1_1",
   "PrimeSpectrum.asIdeal",
   "Set.toFinset_singleton",
   "Not",
   "Submodule.mkQ",
   "Submodule.quotientRel",
   "IsAssociatedPrime._proof_1",
   "HarderNarasimhan.impl.mem_support_of_mem_associatedPrimes",
   "HarderNarasimhan.impl.prop3d12._simp_1_2",
   "Set.instSingletonSet",
   "IsAssociatedPrime",
   "RingHomSurjective.ids",
   "LT.lt",
   "LocalizedModule.subsingleton_iff_ker_eq_top",
   "of_eq_true",
   "One.toOfNat1",
   "le_of_lt",
   "HarderNarasimhan.impl.prop3d12._simp_1_11",
   "False",
   "Subtype.mk",
   "Finset",
   "Eq.trans",
   "Singleton.singleton",
   "Exists.intro",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion",
   "Membership.mem.out",
   "Subtype.val",
   "Quotient.out_eq",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_2",
   "ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice",
   "Set.setOf_eq_eq_singleton'",
   "HarderNarasimhan.impl.prop3d12._simp_1_6",
   "mem_lowerBounds",
   "rfl",
   "ClosureOperator.IsClosed",
   "Submodule.addCommGroup",
   "OrderTheory.coe'",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_4",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Submonoid",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization._proof_3",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Eq.refl",
   "lowerBounds",
   "Classical.byContradiction",
   "AddCommGroup.toAddCommMonoid",
   "Finset.instMembership",
   "CompleteLattice.toBoundedOrder",
   "Set.fintypeSingleton",
   "setOf",
   "AddMonoid.toAddZeroClass",
   "Quotient",
   "Submodule.hasQuotient",
   "LocalizedModule.instAddCommMonoid",
   "HarderNarasimhan.impl.μ_nonempty",
   "congr",
   "InfSet.sInf",
   "HarderNarasimhan._μ",
   "Preorder.toLE",
   "propext",
   "Submodule.instTop",
   "AddCommGroup",
   "OrderEmbedding",
   "OfNat.ofNat",
   "Submonoid.one",
   "PrimeSpectrum",
   "CommRing.toRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.impl.prop3d12._simp_1_3",
   "Submodule.completeLattice",
   "HarderNarasimhan.S₀",
   "Module.Finite",
   "RingHomCompTriple.ids",
   "Prod.mk",
   "Ideal.IsPrime",
   "HarderNarasimhan.impl.associated_primes_quot_koqcl",
   "Subtype.preorder",
   "Quotient.mk",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "PrimeSpectrum.isPrime",
   "And.intro",
   "funext",
   "HarderNarasimhan.impl.ker_of_quot_comp_localization",
   "SetLike.instMembership",
   "Submonoid.instSetLike",
   "And",
   "HarderNarasimhan.impl.CP.f1",
   "True.intro",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "HarderNarasimhan.impl.prop3d12p2",
   "ConditionallyCompleteLattice.toLattice",
   "Submodule.submoduleOf",
   "Subtype",
   "Function.Embedding.toFun",
   "HarderNarasimhan.impl.prop3d12._simp_1_5",
   "Submodule",
   "congrArg",
   "Iff.intro",
   "Mathlib.Tactic.Push.not_exists._simp_1",
   "Submodule.Quotient.addCommGroup",
   "Subtype.prop",
   "Ideal",
   "Ideal.primeCompl",
   "RelEmbedding.instEmbeddingLike",
   "Zero.toOfNat0",
   "RelEmbedding",
   "Finset.min'_mem",
   "Set.instLE",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "True",
   "CommSemiring.toSemiring",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "HarderNarasimhan.impl.prop3d12._simp_1_13",
   "exists_prop_congr",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.impl.CP.f2",
   "IsNoetherianRing",
   "Submodule.setLike",
   "LE.le",
   "Submodule.addCommMonoid"],
  "name": "HarderNarasimhan.impl.prop3d12",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 }),\n  HarderNarasimhan.μA (HarderNarasimhan.μ R M) I = OrderTheory.coe'.toFun {(HarderNarasimhan._μ R M I).toFinset.min' ⋯}",
  "constCategory": "Theorem"},
 {"references":
  ["Eq.trans",
   "SubNegZeroMonoid.toSubNegMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "sub_eq_add_neg",
   "SubNegMonoid.toSub",
   "HSub.hSub",
   "Zero.toOfNat0",
   "neg_zero",
   "Eq",
   "True",
   "instHAdd",
   "Neg.neg",
   "SubNegMonoid.toNeg",
   "add_zero",
   "SubNegZeroMonoid",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "eq_self",
   "NegZeroClass.toNeg",
   "of_eq_true",
   "SubNegMonoid.toAddMonoid",
   "NegZeroClass.toZero",
   "instHSub",
   "AddMonoid.toAddZeroClass"],
  "name": "sub_zero",
  "constType":
  "∀ {G : Type u_3} [inst : SubNegZeroMonoid G] (a : G), a - 0 = a",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "GetElem?.mk",
   "List.instGetElemNatLtLength",
   "instLTNat",
   "Nat",
   "List.get?Internal",
   "GetElem?",
   "List",
   "List.get!Internal",
   "Inhabited",
   "List.length"],
  "name": "List.instGetElem?NatLtLength",
  "constType":
  "{α : Type u_1} → GetElem? (List α) ℕ α fun as i ↦ i < as.length",
  "constCategory": "Definition"},
 {"references": ["Option", "outParam", "GetElem?"],
  "name": "GetElem?.getElem?",
  "constType":
  "{coll : Type u} →\n  {idx : Type v} →\n    {elem : outParam (Type w)} →\n      {valid : outParam (coll → idx → Prop)} → [self : GetElem? coll idx elem valid] → coll → idx → Option elem",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.μB",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Eq.refl",
   "PartialOrder",
   "Nontrivial",
   "Eq.rec",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μB.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S),\n  μ = μ_1 → ∀ (I I_1 : { p // p.1 < p.2 }), I = I_1 → HarderNarasimhan.μB μ I = HarderNarasimhan.μB μ_1 I_1",
  "constCategory": "Theorem"},
 {"references": ["Nat", "NatCast"],
  "name": "NatCast.natCast",
  "constType": "{R : Type u} → [self : NatCast R] → ℕ → R",
  "constCategory": "Definition"},
 {"references":
  ["LE.le.trans_eq",
   "AddZeroClass",
   "instHAdd",
   "LE",
   "CanonicallyOrderedAdd",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "zero_add",
   "LE.le",
   "le_self_add",
   "Zero.toOfNat0",
   "AddZero.toZero"],
  "name": "zero_le",
  "constType":
  "∀ {α : Type u} [inst : AddZeroClass α] [inst_1 : LE α] [CanonicallyOrderedAdd α] (a : α), 0 ≤ a",
  "constCategory": "Theorem"},
 {"references": ["PartialOrder", "CompleteSemilatticeInf"],
  "name": "CompleteSemilatticeInf.toPartialOrder",
  "constType":
  "{α : Type u_8} → [self : CompleteSemilatticeInf α] → PartialOrder α",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Preorder",
   "Preorder.toLT",
   "False",
   "lt_self_iff_false",
   "Eq",
   "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₁._simp_1_9",
  "constType": "∀ {α : Type u_2} [inst : Preorder α] (x : α), (x < x) = False",
  "constCategory": "Theorem"},
 {"references":
  ["rfl", "Subtype", "Subtype.ext", "Subtype.mk", "Eq", "Subtype.val"],
  "name": "Subtype.coe_eta",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} (a : { a // p a }) (h : p ↑a), ⟨↑a, h⟩ = a",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.JordanHolderFiltration",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Type u_1",
  "constCategory": "Other"},
 {"references": ["lt_trans", "LT.lt", "Preorder", "Preorder.toLT", "flip"],
  "name": "gt_trans",
  "constType":
  "∀ {α : Type u_1} [inst : Preorder α] {a b c : α}, b < a → c < b → c < a",
  "constCategory": "Theorem"},
 {"references":
  ["mem_upperBounds",
   "PartialOrder.toPreorder",
   "Subtype.instLE",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "WellFounded.has_min",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "GT.gt",
   "Subtype.val",
   "Set.Elem",
   "IsGreatest",
   "And.intro",
   "Or",
   "HarderNarasimhan.impl.prop3d4",
   "IsTotal.total",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists",
   "HarderNarasimhan.impl.prop3d8₁",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Exists.casesOn",
   "HarderNarasimhan.InIntvl",
   "upperBounds",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "Lattice",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "Subtype",
   "HarderNarasimhan.StI",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "Prod.fst",
   "Or.inl",
   "IsWellFounded.wf",
   "le_of_eq",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "eq_of_le_of_not_lt'",
   "Not",
   "Lattice.toSemilatticeInf",
   "Set",
   "LT.lt",
   "Or.casesOn",
   "IsTotal",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d8₁'",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.μA_DescendingChainCondition μ →\n    ∀ (I : { p // p.1 < p.2 }),\n      HarderNarasimhan.ConvexI I μ →\n        ((IsTotal S fun x1 x2 ↦ x1 ≤ x2) ∨\n            ∀ (z : ℒ) (hzI : HarderNarasimhan.InIntvl I z) (hz : (↑I).1 ≠ z),\n              HarderNarasimhan.IsAttained μ ⟨((↑I).1, z), ⋯⟩) →\n          ∃ s, IsGreatest (HarderNarasimhan.StI μ I) s",
  "constCategory": "Theorem"},
 {"references":
  ["NonAssocSemiring.toNatCast",
   "AddCommMonoidWithOne.mk",
   "NonAssocSemiring.natCast_zero",
   "NonAssocSemiring.toOne",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring",
   "AddCommMonoid.add_comm",
   "AddCommMonoidWithOne",
   "AddCommMonoid.toAddMonoid",
   "AddMonoidWithOne.mk",
   "NonAssocSemiring.natCast_succ"],
  "name": "NonAssocSemiring.toAddCommMonoidWithOne",
  "constType":
  "{α : Type u} → [self : NonAssocSemiring α] → AddCommMonoidWithOne α",
  "constCategory": "Definition"},
 {"references":
  ["Inv.inv",
   "InvOneClass.toInv",
   "Units.instGroup",
   "Units.mk0",
   "MonoidWithZero.toMulZeroOneClass",
   "GroupWithZero",
   "OfNat.ofNat",
   "MulAction.toSMul",
   "DivInvOneMonoid.toInvOneClass",
   "MulAction",
   "MulZeroOneClass.toMulZeroClass",
   "MulZeroClass.toZero",
   "Units.instMulAction",
   "HSMul.hSMul",
   "MonoidWithZero.toMonoid",
   "GroupWithZero.toMonoidWithZero",
   "smul_inv_smul",
   "instHSMul",
   "Ne",
   "Zero.toOfNat0",
   "Eq",
   "DivisionMonoid.toDivInvOneMonoid",
   "Units",
   "GroupWithZero.toDivisionMonoid"],
  "name": "smul_inv_smul₀",
  "constType":
  "∀ {α : Type u_4} {β : Type u_5} [inst : GroupWithZero α] [inst_1 : MulAction α β] {a : α},\n  a ≠ 0 → ∀ (x : β), a • a⁻¹ • x = x",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Prod.mk",
   "Preorder.toLT",
   "And",
   "lt_of_le_of_ne",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.InIntvl",
   "LE.le",
   "Lattice",
   "Ne",
   "Preorder.toLE",
   "And.left",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.ℒₛ._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Lattice ℒ] (I : { p // p.1 < p.2 }) (x : { p // HarderNarasimhan.InIntvl I p }) (p : ℒ),\n  HarderNarasimhan.InIntvl I p → (↑I).1 ≠ p ∧ p < ↑x → ((↑I).1, p).1 < ((↑I).1, p).2",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Max.max",
   "SemilatticeInf.toMin",
   "Lattice.toSemilatticeInf",
   "PartialOrder.toPreorder",
   "Min.min",
   "SemilatticeSup.toMax",
   "LE.le",
   "Lattice",
   "IsModularLattice",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "IsModularLattice.mk",
  "constType":
  "∀ {α : Type u_2} [inst : Lattice α], (∀ {x : α} (y : α) {z : α}, x ≤ z → (x ⊔ y) ⊓ z ≤ x ⊔ y ⊓ z) → IsModularLattice α",
  "constCategory": "Other"},
 {"references":
  ["Not",
   "Exists",
   "Function.not_injective_iff._simp_1_3",
   "Eq.trans",
   "True",
   "And",
   "Function.not_injective_iff._simp_1_2",
   "congrArg",
   "iff_self",
   "of_eq_true",
   "Iff",
   "funext",
   "Ne",
   "Eq",
   "Function.Injective"],
  "name": "Function.not_injective_iff",
  "constType":
  "∀ {α : Sort u_1} {β : Sort u_2} {f : α → β}, ¬Function.Injective f ↔ ∃ a b, f a = f b ∧ a ≠ b",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "LinearOrder",
  "constType": "Type u_2 → Type u_2",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Eq.mpr_not",
   "Membership.mem",
   "Preorder.toLT",
   "Classical.propDecidable",
   "GT.gt",
   "Subtype.val",
   "funext",
   "Eq.rec",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "rfl",
   "Exists",
   "HarderNarasimhan.impl.ℒₛ",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.impl.prop3d4₀func._proof_6",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "dite.congr_simp",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Subtype",
   "instDecidableTrue",
   "Eq.mp",
   "dite_congr",
   "Prod.fst",
   "congrArg",
   "instOfNatNat",
   "congr",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "Not",
   "HarderNarasimhan.impl.prop3d4₀func._proof_2",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "True",
   "instHAdd",
   "Set",
   "HarderNarasimhan.impl.prop3d4₀func",
   "Exists.choose",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "eq_self",
   "HarderNarasimhan.impl.prop3d4₀func._proof_5",
   "Ne",
   "Subtype.mk",
   "dite",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_helper",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }) (i : ℕ),\n  (↑I).1 ≠ ↑(HarderNarasimhan.impl.prop3d4₀func μ I (i + 1)) → (↑I).1 ≠ ↑(HarderNarasimhan.impl.prop3d4₀func μ I i)",
  "constCategory": "Theorem"},
 {"references":
  ["RingHom",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Module",
   "Semiring"],
  "name": "LinearMap",
  "constType":
  "{R : Type u_14} →\n  {S : Type u_15} →\n    [inst : Semiring R] →\n      [inst_1 : Semiring S] →\n        (R →+* S) →\n          (M : Type u_16) →\n            (M₂ : Type u_17) →\n              [inst_2 : AddCommMonoid M] →\n                [inst_3 : AddCommMonoid M₂] → [_root_.Module R M] → [_root_.Module S M₂] → Type (max u_16 u_17)",
  "constCategory": "Other"},
 {"references": ["Semiring", "Ring"],
  "name": "Ring.toSemiring",
  "constType": "{R : Type u} → [self : Ring R] → Semiring R",
  "constCategory": "Definition"},
 {"references": ["Set", "outParam", "SetLike"],
  "name": "SetLike.coe",
  "constType":
  "{A : Type u_1} → {B : outParam (Type u_2)} → [self : SetLike A B] → A → Set B",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "WellFounded.has_min",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "IsWellFounded.wf",
   "WellFoundedGT",
   "OrderBot.toBot",
   "HarderNarasimhan.impl.JHFil._proof_1",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "Exists",
   "Set",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Set.instMembership",
   "LT.lt",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.succ",
   "Lattice",
   "Nontrivial",
   "Nat.below",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "setOf"],
  "name": "HarderNarasimhan.impl.JHFil._proof_3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [hacc : WellFoundedGT ℒ]\n  {S : Type u_2} (μ : { p // p.1 < p.2 } → S) (n : ℕ) (x : Nat.below n.succ),\n  {p | ∃ (h : ⊥ < p), p < x.1 ∧ μ ⟨(⊥, p), h⟩ = μ ⟨(⊥, ⊤), ⋯⟩}.Nonempty →\n    ∃ a ∈ {p | ∃ (h : ⊥ < p), p < x.1 ∧ μ ⟨(⊥, p), h⟩ = μ ⟨(⊥, ⊤), ⋯⟩},\n      ∀ x_1 ∈ {p | ∃ (h : ⊥ < p), p < x.1 ∧ μ ⟨(⊥, p), h⟩ = μ ⟨(⊥, ⊤), ⋯⟩}, ¬x_1 > a",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "HarderNarasimhan.WeakSlopeLike₂.rec",
   "Or",
   "Subtype.prop",
   "PartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.WeakSlopeLike₂.mk",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.WeakSlopeLike₂",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₂.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.WeakSlopeLike₂ μ → Sort u} →\n                (t : HarderNarasimhan.WeakSlopeLike₂ μ) →\n                  ((wsl₂ :\n                        ∀ (z : { p // p.1 < p.2 }) (hz : ⊥ < (↑z).1),\n                          μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ z ∨ μ ⟨(⊥, (↑z).2), ⋯⟩ ≤ μ ⟨(⊥, (↑z).1), hz⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["Inv.inv",
   "Real",
   "Inv.mk",
   "NNReal",
   "NNReal.toReal",
   "OfNat.ofNat",
   "Real.instLE",
   "Real.instInv",
   "Inv",
   "Real.instZero",
   "LE.le",
   "Zero.toOfNat0",
   "Subtype.mk",
   "NNReal.instInv._proof_1"],
  "name": "NNReal.instInv",
  "constType": "Inv NNReal",
  "constCategory": "Definition"},
 {"references":
  ["Lean.Omega.Constraint.upperBound",
   "Lean.Omega.Int.add_le_zero_iff_le_neg'",
   "instDecidableAnd",
   "Bool",
   "Bool.decide_and",
   "Eq.trans",
   "Eq.mp",
   "Lean.Omega.Coeffs",
   "Option.some",
   "Decidable.decide",
   "Int.eq_iff_le_and_ge",
   "congrArg",
   "Lean.Omega.Int.add_nonneg_iff_neg_le'",
   "Decidable.decide.congr_simp",
   "Bool.and",
   "congr",
   "Int.instAdd",
   "Int.instLEInt",
   "Lean.Omega.Constraint.lowerBound",
   "Eq",
   "Bool.true",
   "propext",
   "decide_eq_true_eq",
   "Lean.Omega.UpperBound.sat",
   "instHAdd",
   "Neg.neg",
   "And",
   "Lean.Omega.LowerBound.sat",
   "OfNat.ofNat",
   "Int.instNegInt",
   "Int",
   "HAdd.hAdd",
   "instDecidableEqBool",
   "instOfNat",
   "LE.le",
   "id",
   "Bool.and_eq_true",
   "Lean.Omega.Constraint.mk",
   "Eq.mpr",
   "Int.decLe",
   "Lean.Omega.Coeffs.dot",
   "and_comm",
   "Lean.Omega.Constraint.sat'"],
  "name": "Lean.Omega.Constraint.addEquality_sat",
  "constType":
  "∀ {c : ℤ} {x y : Omega.Coeffs}, c + x.dot y = 0 → { lowerBound := some (-c), upperBound := some (-c) }.sat' x y = true",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "AddGroup",
  "constType": "Type u → Type u",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.trans",
   "WellFounded.has_min",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "GT.gt",
   "Subtype.val",
   "And.intro",
   "PartialOrder",
   "funext",
   "Set.Nonempty.image",
   "And.left",
   "WellFounded",
   "HarderNarasimhan.instWellFoundedGTInterval._simp_3",
   "Exists",
   "And.right",
   "And",
   "HarderNarasimhan.instWellFoundedGTInterval._simp_2",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Exists.casesOn",
   "Set.image",
   "Iff.of_eq",
   "Iff.mpr",
   "Eq.refl",
   "Nontrivial",
   "Subtype",
   "HarderNarasimhan.instWellFoundedGTInterval._simp_4",
   "Eq.mp",
   "Prod.fst",
   "congrArg",
   "WellFounded.wellFounded_iff_has_min",
   "IsWellFounded.wf",
   "WellFoundedGT",
   "HarderNarasimhan.Interval",
   "Set.mem_image_of_mem",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Not",
   "Set.Nonempty",
   "lt_iff_le_not_ge",
   "Set",
   "IsWellFounded.mk",
   "exists_prop_congr",
   "LT.lt",
   "HarderNarasimhan.instWellFoundedGTInterval._simp_1",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "Subtype.mk"],
  "name": "HarderNarasimhan.instWellFoundedGTInterval",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] [hw : WellFoundedGT ℒ]\n  {z : { p // p.1 < p.2 }}, WellFoundedGT (HarderNarasimhan.Interval z)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "instHAdd",
   "_private.Init.Data.Nat.Basic.0.Nat.sub_eq_iff_eq_add.match_1_1",
   "congrArg",
   "Iff.intro",
   "Unit",
   "HAdd.hAdd",
   "Nat",
   "Nat.add_sub_cancel",
   "instSubNat",
   "Nat.sub_add_cancel",
   "Iff",
   "Eq.refl",
   "LE.le",
   "id",
   "HSub.hSub",
   "Eq.mpr",
   "Eq",
   "instHSub",
   "instLENat"],
  "name": "Nat.sub_eq_iff_eq_add",
  "constType": "∀ {b a c : ℕ}, b ≤ a → (a - b = c ↔ a = c + b)",
  "constCategory": "Theorem"},
 {"references":
  ["Exists", "Eq.refl", "Eq.ndrec", "Exists.choose", "Eq.rec", "Eq"],
  "name": "Exists.choose.congr_simp",
  "constType":
  "∀ {α : Sort u_1} {p p_1 : α → Prop} (e_p : p = p_1) (P : ∃ a, p a), P.choose = ⋯.choose",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "instAddNat",
   "HAdd.hAdd",
   "instLTNat",
   "Nat",
   "Nat.succ_lt_succ",
   "instOfNatNat",
   "instHAdd",
   "Fin.succ.match_1",
   "Fin.mk",
   "Fin",
   "OfNat.ofNat"],
  "name": "Fin.succ",
  "constType": "{n : ℕ} → Fin n → Fin (n + 1)",
  "constCategory": "Definition"},
 {"references":
  ["Not",
   "Or",
   "Iff",
   "And",
   "Classical.propDecidable",
   "Decidable.not_and_iff_not_or_not"],
  "name": "Classical.not_and_iff_not_or_not",
  "constType": "∀ {a b : Prop}, ¬(a ∧ b) ↔ ¬a ∨ ¬b",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "instOfNatNat",
   "Iff",
   "LE.le",
   "Nat.pos_iff_ne_zero",
   "Ne",
   "instLENat",
   "OfNat.ofNat"],
  "name": "Nat.one_le_iff_ne_zero",
  "constType": "∀ {n : ℕ}, 1 ≤ n ↔ n ≠ 0",
  "constCategory": "Theorem"},
 {"references":
  ["Submodule.hasQuotient",
   "Submodule.Quotient.mk",
   "HasQuotient.Quotient",
   "IsScalarTower",
   "Module",
   "AddCommGroup.toAddGroup",
   "SMulZeroClass.toSMul",
   "Submodule",
   "SMul",
   "MonoidWithZero.toMonoid",
   "Eq.symm",
   "instHSMul",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "DistribSMul.toSMulZeroClass",
   "DistribMulAction.toDistribSMul",
   "Submodule.Quotient.mk_smul",
   "Submodule.Quotient.instSMul'",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "AddZeroClass.toAddZero",
   "Ring.toSemiring",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "HSMul.hSMul",
   "AddCommGroup.toAddCommMonoid",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Ring"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_18",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M) {S : Type u_3} [inst_3 : SMul S R] [inst_4 : SMul S M] [inst_5 : IsScalarTower S R M] (r : S)\n  (x : M), r • Submodule.Quotient.mk x = Submodule.Quotient.mk (r • x)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "And",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "PartialOrder",
   "LE.le",
   "Nontrivial",
   "HarderNarasimhan.instPartialOrderInterval",
   "HarderNarasimhan.Interval",
   "Subtype.mk",
   "Preorder.toLE",
   "CompleteLattice",
   "HarderNarasimhan.lt_lt"],
  "name": "HarderNarasimhan.Resμ",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        (z : { p // p.1 < p.2 }) →\n          {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → { p // p.1 < p.2 } → S",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "HAdd.hAdd",
   "rel_iff_cov",
   "AddLeftReflectLT",
   "instHAdd",
   "Add",
   "Iff",
   "AddLeftStrictMono",
   "LT"],
  "name": "add_lt_add_iff_left",
  "constType":
  "∀ {α : Type u_1} [inst : Add α] [inst_1 : LT α] [AddLeftStrictMono α] [AddLeftReflectLT α] (a : α) {b c : α},\n  a + b < a + c ↔ b < c",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "Nat.instPreorder",
   "HarderNarasimhan.WeakAscendingChainCondition.mk",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "PartialOrder",
   "Preorder.toLE",
   "le_top",
   "Exists",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "Nat.lt_add_one",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "LT.lt",
   "Prod",
   "HAdd.hAdd",
   "Nat",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "StrictMono"],
  "name": "HarderNarasimhan.WeakAscendingChainCondition.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x : ℕ → ℒ) (smf : StrictMono x), ∃ N, μ ⟨(x N, x (N + 1)), ⋯⟩ ≤ μ ⟨(x N, ⊤), ⋯⟩) →\n    HarderNarasimhan.WeakAscendingChainCondition μ",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "instLTNat", "Nat", "Nat.succ", "Nat.lt_add_one"],
  "name": "Nat.lt_succ_self",
  "constType": "∀ (n : ℕ), n < n.succ",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "Module",
   "CommSemiring.toSemiring",
   "AddCommGroup",
   "Nonempty",
   "CommRing",
   "IsNoetherianRing",
   "HarderNarasimhan.impl.instNonemptyCoprimaryFiltration",
   "HarderNarasimhan.CoprimaryFiltration",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "inferInstance",
   "Module.Finite"],
  "name": "HarderNarasimhan.theorem_3_15₁",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  Nonempty (HarderNarasimhan.CoprimaryFiltration R M)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "LinearOrder",
   "monotone_smul_left_of_nonneg",
   "OfNat.ofNat",
   "PosSMulMono",
   "LinearOrder.toPartialOrder",
   "instDistribLatticeOfLinearOrder",
   "SMul",
   "Preorder",
   "DistribLattice.toLattice",
   "PosSMulReflectLT",
   "HSMul.hSMul",
   "LE.le",
   "instHSMul",
   "Zero.toOfNat0",
   "Zero",
   "PosSMulReflectLT.mk",
   "Preorder.toLE",
   "Monotone.reflect_lt",
   "SemilatticeInf.toPartialOrder"],
  "name": "PosSMulMono.toPosSMulReflectLT",
  "constType":
  "∀ {α : Type u_1} {β : Type u_2} [inst : SMul α β] [inst_1 : Preorder α] [inst_2 : LinearOrder β] [inst_3 : Zero α]\n  [PosSMulMono α β], PosSMulReflectLT α β",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "LinearExtension",
  "constType": "Type u → Type u",
  "constCategory": "Definition"},
 {"references": [],
  "name": "Set",
  "constType": "Type u → Type u",
  "constCategory": "Definition"},
 {"references": ["Finset", "Multiset"],
  "name": "Finset.val",
  "constType": "{α : Type u_4} → Finset α → Multiset α",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "HarderNarasimhan.NashEquilibrium.mk",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "And.intro",
   "HarderNarasimhan.NashEquilibrium",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "CompleteSemilatticeInf.toPartialOrder",
   "funext",
   "Eq.symm",
   "Eq.rec",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Bot.bot",
   "Set.instMembership",
   "Exists.casesOn",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.StrongDescendingChainCondition.wdcc",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Iff",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "Top.top",
   "id",
   "HarderNarasimhan.WeakSlopeLike₂",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "lt_top_iff_ne_top",
   "setOf",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Iff.intro",
   "Prod.fst",
   "congrArg",
   "BoundedOrder.toOrderTop",
   "InfSet.sInf",
   "HarderNarasimhan.WeakSlopeLike₂.wsl₂",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "OrderBot.toBot",
   "bot_ne_top",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Not",
   "HarderNarasimhan.NashEquilibrium.nash_eq",
   "HarderNarasimhan.impl.prop4d3₁",
   "Set",
   "exists_prop_congr",
   "sInf_le",
   "CompleteSemilatticeInf.toInfSet",
   "LT.lt",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.μA",
   "LE.le",
   "le_sInf",
   "eq_of_le_of_ge",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.rmk4d10₃",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.StrongDescendingChainCondition μ →\n    HarderNarasimhan.WeakSlopeLike₂ μ →\n      (HarderNarasimhan.NashEquilibrium μ ↔\n        ∀ (y : ℒ) (hy : y ≠ ⊤), HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl ≤ HarderNarasimhan.μmax μ ⟨(y, ⊤), ⋯⟩)",
  "constCategory": "Theorem"},
 {"references":
  ["Semiring.toNonAssocSemiring",
   "Ideal",
   "Ideal.IsPrime",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Submodule.instTop",
   "Top.top",
   "Ideal.IsPrime.ne_top'",
   "Ne",
   "Semiring.toModule",
   "Semiring"],
  "name": "Ideal.IsPrime.ne_top",
  "constType":
  "∀ {α : Type u} [inst : Semiring α] {I : Ideal α}, I.IsPrime → I ≠ ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["IsLeast",
   "ConditionallyCompleteLattice.toInfSet",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "IsLeast.nonempty",
   "IsGLB.csInf_eq",
   "Set",
   "IsLeast.isGLB",
   "ConditionallyCompleteLattice",
   "InfSet.sInf",
   "ConditionallyCompleteLattice.toLattice",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder"],
  "name": "IsLeast.csInf_eq",
  "constType":
  "∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s : Set α} {a : α}, IsLeast s a → sInf s = a",
  "constCategory": "Theorem"},
 {"references":
  ["instHAdd",
   "AddMonoid",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "MulAction.toSMul",
   "MulAction",
   "AddMonoid.toAddSemigroup",
   "HSMul.hSMul",
   "Monoid",
   "instHSMul",
   "Zero.toOfNat0",
   "Eq",
   "AddZero.toZero",
   "DistribMulAction",
   "AddSemigroup.toAdd",
   "AddMonoid.toAddZeroClass"],
  "name": "DistribMulAction.mk",
  "constType":
  "{M : Type u_12} →\n  {A : Type u_13} →\n    [inst : Monoid M] →\n      [inst_1 : AddMonoid A] →\n        [toMulAction : MulAction M A] →\n          (∀ (a : M), a • 0 = 0) → (∀ (a : M) (x y : A), a • (x + y) = a • x + a • y) → DistribMulAction M A",
  "constCategory": "Other"},
 {"references": ["Iff.of_eq", "Iff", "Eq"],
  "name": "Eq.to_iff",
  "constType": "∀ {a b : Prop}, a = b → (a ↔ b)",
  "constCategory": "Theorem"},
 {"references":
  ["Iff.trans",
   "Max.max",
   "PartialOrder.toPreorder",
   "Iff",
   "eq_comm",
   "LE.le",
   "SemilatticeSup.toMax",
   "SemilatticeSup.toPartialOrder",
   "sup_eq_right",
   "SemilatticeSup",
   "Preorder.toLE",
   "Eq"],
  "name": "right_eq_sup",
  "constType":
  "∀ {α : Type u} [inst : SemilatticeSup α] {a b : α}, b = a ⊔ b ↔ a ≤ b",
  "constCategory": "Theorem"},
 {"references": ["HPow", "outParam"],
  "name": "HPow.hPow",
  "constType":
  "{α : Type u} → {β : Type v} → {γ : outParam (Type w)} → [self : HPow α β γ] → α → β → γ",
  "constCategory": "Definition"},
 {"references":
  ["Semiring.toNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Eq.refl",
   "CommSemiring.toSemiring",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Distrib.toMul",
   "CommSemiring",
   "Eq.symm",
   "instHMul",
   "HMul.hMul",
   "Eq.ndrec",
   "Eq"],
  "name": "Mathlib.Tactic.Ring.mul_congr",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {a a' b b' c : R}, a = a' → b = b' → a' * b' = c → a * b = c",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Decidable",
   "True",
   "Eq.trans",
   "instDecidableTrue",
   "Eq.mpr_not",
   "True.intro",
   "Eq.mpr_prop",
   "congrArg",
   "dite_congr",
   "eq_self",
   "of_eq_true",
   "Eq.refl",
   "Eq",
   "dite"],
  "name": "dite_cond_eq_true",
  "constType":
  "∀ {α : Sort u} {c : Prop} {x : Decidable c} {t : c → α} {e : ¬c → α} (h : c = True), dite c t e = t ⋯",
  "constCategory": "Theorem"},
 {"references": ["Nat", "Pow", "Monoid", "Monoid.npow", "Pow.mk"],
  "name": "Monoid.toNatPow",
  "constType": "{M : Type u_2} → [Monoid M] → Pow M ℕ",
  "constCategory": "Definition"},
 {"references": ["CompleteLinearOrder", "CompleteLattice"],
  "name": "CompleteLinearOrder.toCompleteLattice",
  "constType":
  "{α : Type u_8} → [self : CompleteLinearOrder α] → CompleteLattice α",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "CompleteLattice.le_sInf",
   "CompleteSemilatticeInf.mk",
   "CompleteLattice.toInfSet",
   "CompleteLattice.toLattice",
   "SemilatticeSup.toPartialOrder",
   "CompleteLattice",
   "CompleteSemilatticeInf",
   "CompleteLattice.sInf_le"],
  "name": "CompleteLattice.toCompleteSemilatticeInf",
  "constType":
  "{α : Type u_8} → [self : CompleteLattice α] → CompleteSemilatticeInf α",
  "constCategory": "Definition"},
 {"references": ["HSub.mk", "HSub", "Sub.sub", "Sub"],
  "name": "instHSub",
  "constType": "{α : Type u_1} → [Sub α] → HSub α α α",
  "constCategory": "Definition"},
 {"references": ["forall_const", "Nonempty", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.prop3d4._simp_1_4",
  "constType":
  "∀ {b : Prop} (α : Sort u_1) [i : Nonempty α], (∀ (a : α), b) = b",
  "constCategory": "Theorem"},
 {"references":
  ["MulOneClass.toMulOne",
   "MulOne.toOne",
   "HMul.hMul",
   "OfNat.ofNat",
   "SMul",
   "MulOne.toMul",
   "MulAction",
   "One.toOfNat1",
   "HSMul.hSMul",
   "Monoid.toMulOneClass",
   "Monoid",
   "instHSMul",
   "instHMul",
   "Eq"],
  "name": "MulAction.mk",
  "constType":
  "{α : Type u_9} →\n  {β : Type u_10} →\n    [inst : Monoid α] →\n      [toSMul : SMul α β] → (∀ (b : β), 1 • b = b) → (∀ (x y : α) (b : β), (x * y) • b = x • y • b) → MulAction α β",
  "constCategory": "Other"},
 {"references": ["Subsingleton", "Nontrivial", "False", "not_nontrivial"],
  "name": "false_of_nontrivial_of_subsingleton",
  "constType": "∀ (α : Type u_3) [Nontrivial α] [Subsingleton α], False",
  "constCategory": "Theorem"},
 {"references": ["Not", "Exists", "not_exists", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.prop3d13₂._simp_1",
  "constType": "∀ {α : Sort u_1} {p : α → Prop}, (¬∃ x, p x) = ∀ (x : α), ¬p x",
  "constCategory": "Theorem"},
 {"references":
  ["AddLeftMono",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "eq_true",
   "AddMonoidWithOne.toAddMonoid",
   "Nat.AtLeastTwo",
   "PartialOrder",
   "Nat.one_lt_ofNat",
   "Preorder.toLE",
   "CharZero",
   "Eq",
   "AddMonoidWithOne",
   "AddSemigroup.toAdd",
   "True",
   "instOfNatAtLeastTwo",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "ZeroLEOneClass",
   "LT.lt",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "One.toOfNat1",
   "AddMonoid.toAddSemigroup",
   "AddMonoidWithOne.toOne",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass"],
  "name": "Nat.one_lt_ofNat._simp_1",
  "constType":
  "∀ {α : Type u_1} [inst : AddMonoidWithOne α] [inst_1 : PartialOrder α] [AddLeftMono α] [ZeroLEOneClass α] [CharZero α]\n  {n : ℕ} [inst_5 : n.AtLeastTwo], (1 < OfNat.ofNat n) = True",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Int.instSub",
   "Eq.trans",
   "Classical.propDecidable",
   "Lean.Omega.tidy_sat",
   "Eq.symm",
   "Int.add_one_le_of_lt",
   "Bool.true",
   "instLTNat",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists",
   "Lean.Omega.combo_sat'",
   "BoundedOrder",
   "Prod.snd",
   "Lean.Omega.LinearCombo.coordinate",
   "Prod",
   "instOfNat",
   "Eq.refl",
   "Lattice",
   "Top.top",
   "Lean.Omega.Constraint.addEquality_sat",
   "Lean.Omega.Int.sub_congr",
   "Or.elim",
   "Nat.find",
   "HarderNarasimhan.impl.instμ_Admissible",
   "Bool",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Option.some",
   "Prod.fst",
   "Lean.Omega.LinearCombo.mk",
   "Lean.Omega.LinearCombo.instSub",
   "instOfNatNat",
   "Lean.Omega.Int.ofNat_sub_dichotomy",
   "Int.instAdd",
   "WellFoundedGT",
   "Preorder.toLE",
   "Eq",
   "instNatCastInt",
   "Lean.Omega.Int.add_congr",
   "OfNat.ofNat",
   "Int",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "Lean.Omega.Int.ofNat_lt_of_lt",
   "Option.none",
   "instHSub",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Lean.Omega.LinearCombo.coordinate_eval_3",
   "le_of_le_of_eq",
   "Preorder.toLT",
   "Lean.Omega.LinearCombo.coordinate_eval_4",
   "GE.ge",
   "Lean.Omega.Int.ofNat_le_of_le",
   "HSub.hSub",
   "Int.instLEInt",
   "Lean.Omega.LinearCombo.add_eval",
   "CompleteLinearOrder",
   "List.cons",
   "SemilatticeInf.toPartialOrder",
   "Neg.neg",
   "And.right",
   "And",
   "Lean.Omega.Constraint.addInequality_sat",
   "HarderNarasimhan.TotIntvl",
   "Int.instNegInt",
   "instDecidableEqBool",
   "Nat",
   "Nat.lt_of_not_le",
   "Nontrivial",
   "id",
   "Lean.Omega.LinearCombo.instAdd",
   "Nat.cast",
   "instDecidableAnd",
   "Subtype",
   "HarderNarasimhan.impl.HNFil",
   "Lean.Omega.Constraint.combine_sat'",
   "Lean.Omega.LinearCombo.coordinate_eval_0",
   "Int.sub_eq_zero_of_eq",
   "Decidable.decide",
   "Lean.Omega.Coeffs.ofList",
   "BoundedOrder.toOrderTop",
   "Lean.Omega.Constraint.not_sat'_of_isImpossible",
   "of_decide_eq_true",
   "Not",
   "List.nil",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "Lean.Omega.LinearCombo",
   "Nat.decLe",
   "Lean.Omega.Constraint.isImpossible",
   "Exists.choose",
   "Int.ofNat_nonneg",
   "Int.sub_nonneg_of_le",
   "LT.lt",
   "Lean.Omega.LinearCombo.sub_eval",
   "instSubNat",
   "LE.le",
   "False",
   "Lean.Omega.Constraint.mk",
   "Lean.Omega.LinearCombo.eval",
   "instLENat",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.theorem3d10._proof_1_9",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S)\n  (hμ : HarderNarasimhan.μA_DescendingChainCondition μ) (hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ)\n  (f : ℕ → ℒ) (hffin : ∃ n, f n = ⊤) (n : ℕ) (h₂ : ∃ N ≥ n + 1, HarderNarasimhan.impl.HNFil μ (n + 1) ≤ f N),\n  Nat.find h₂ ≤ Nat.find hffin → ¬Nat.find h₂ - 1 ≤ Nat.find hffin → False",
  "constCategory": "Theorem"},
 {"references": ["LE.le", "LE"],
  "name": "GE.ge",
  "constType": "{α : Type u} → [LE α] → α → α → Prop",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "OrderDual.toDual",
   "OrderDual",
   "Subtype",
   "PartialOrder.toPreorder",
   "Equiv.instEquivLike",
   "Prod.mk",
   "Preorder.toLT",
   "Subtype.val",
   "DFunLike.coe",
   "Equiv",
   "Prod.fst",
   "OrderDual.ofDual",
   "OrderDual.instNontrivial",
   "Subtype.prop",
   "OrderDual.instLT",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "EquivLike.toFunLike",
   "OrderDual.instCompleteLattice",
   "OrderDual.instPartialOrder",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.impl.dualμBstar_eq_μAstar",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "Subtype.mk",
   "OrderDual.instBoundedOrder",
   "CompleteLattice"],
  "name": "HarderNarasimhan.dualμBstar_eq_μAstar",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  OrderDual.ofDual\n    ((HarderNarasimhan.μBstar fun p ↦ OrderDual.toDual (μ ⟨((↑p).2, (↑p).1), ⋯⟩)) = HarderNarasimhan.μAstar μ)",
  "constCategory": "Theorem"},
 {"references":
  ["rfl",
   "Not",
   "instLTNat",
   "And.right",
   "Iff.mp",
   "And",
   "DecidablePred",
   "Nat.findGreatest",
   "Nat.findGreatest_eq_iff",
   "OfNat.ofNat",
   "LT.lt",
   "Nat",
   "instOfNatNat",
   "LE.le",
   "Ne",
   "Eq",
   "instLENat"],
  "name": "Nat.findGreatest_is_greatest",
  "constType":
  "∀ {k : ℕ} {P : ℕ → Prop} [inst : DecidablePred P] {n : ℕ}, Nat.findGreatest P n < k → k ≤ n → ¬P k",
  "constCategory": "Theorem"},
 {"references":
  ["Finset",
   "Set",
   "Set.toFinset",
   "Finset.instHasSubset",
   "Finset.toSet",
   "Iff.rfl",
   "Set.coe_toFinset",
   "Finset.coe_subset",
   "Fintype",
   "Set.Elem",
   "congrArg",
   "Set.instHasSubset",
   "HasSubset.Subset",
   "Iff",
   "Eq.symm",
   "id",
   "Eq.mpr",
   "Eq",
   "propext"],
  "name": "Set.subset_toFinset",
  "constType":
  "∀ {α : Type u_1} {t : Set α} {s : Finset α} [inst : Fintype ↑t], s ⊆ t.toFinset ↔ ↑s ⊆ t",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Real.instPreorder",
   "PartialOrder.toPreorder",
   "Module",
   "AddCommGroup.toAddGroup",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.rec",
   "MulAction.toSMul",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "AddGroup.toSubNegMonoid",
   "Preorder.toLE",
   "AddSemigroup.toAdd",
   "PosSMulStrictMono",
   "Real",
   "AddCommGroup.add_comm",
   "instHAdd",
   "LinearOrder",
   "AddCommMonoid.mk",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "Real.semiring",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.mk",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "Real.instZero",
   "AddMonoid.toAddSemigroup",
   "LE.le"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.casesOn",
  "constType":
  "{V : Type u_1} →\n  {motive : HarderNarasimhan.TotallyOrderedRealVectorSpace V → Sort u} →\n    (t : HarderNarasimhan.TotallyOrderedRealVectorSpace V) →\n      ([toAddCommGroup : AddCommGroup V] →\n          [toModule : _root_.Module ℝ V] →\n            [toLinearOrder : LinearOrder V] →\n              [toPosSMulStrictMono : PosSMulStrictMono ℝ V] →\n                (elim_AddLeftMono : ∀ {y z : V} (x : V), y ≤ z → x + y ≤ x + z) →\n                  motive\n                    { toAddCommGroup := toAddCommGroup, toModule := toModule, toLinearOrder := toLinearOrder,\n                      toPosSMulStrictMono := toPosSMulStrictMono, elim_AddLeftMono := elim_AddLeftMono }) →\n        motive t",
  "constCategory": "Definition"},
 {"references": ["rfl", "cast", "HEq.rec", "HEq", "Eq"],
  "name": "eq_of_heq",
  "constType": "∀ {α : Sort u} {a a' : α}, a ≍ a' → a = a'",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.IntervalSemistableRel._proof_1",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "Exists",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "SetRel",
   "LT.lt",
   "Prod",
   "Lattice",
   "Nontrivial",
   "HarderNarasimhan.IntervalSemistableRel.match_1",
   "Subtype.mk",
   "CompleteLattice",
   "setOf",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.IntervalSemistableRel",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] → [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → SetRel ℒ ℒ",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Prod",
   "Lattice.toSemilatticeInf",
   "PartialOrder.toPreorder",
   "Subtype",
   "Lattice",
   "Preorder.toLT",
   "Prod.snd",
   "CompleteLattice",
   "Prod.fst",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.Convex",
  "constType":
  "{ℒ : Type u_1} → [inst : Lattice ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "SetLike.coe_eq_coe",
   "Membership.mem",
   "SetLike",
   "Eq",
   "Subtype.val",
   "propext"],
  "name": "HarderNarasimhan.impl.submoduleOf_map_subtype._simp_1_2",
  "constType":
  "∀ {A : Type u_1} {B : Type u_2} [i : SetLike A B] {p : A} {x y : ↥p}, (↑x = ↑y) = (x = y)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Subtype.instLE",
   "Membership.mem",
   "Preorder.toLT",
   "bot_le",
   "Membership.mem.out",
   "GT.gt",
   "HarderNarasimhan.S₂I",
   "Subtype.val",
   "Set.Elem",
   "HarderNarasimhan.S₁I",
   "IsGreatest",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "And.intro",
   "Or",
   "Eq.symm",
   "HarderNarasimhan.impl.prop3d8₁'",
   "HarderNarasimhan.Convex",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.impl.prop3d8₂",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists",
   "HarderNarasimhan.impl.prop3d8₁",
   "lt_of_le_of_lt",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.St",
   "HarderNarasimhan.IsAttained",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "Set.instMembership",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "HarderNarasimhan.in_TotIntvl",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "HarderNarasimhan.StI",
   "Subtype",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "congrArg",
   "Prod.fst",
   "Or.inl",
   "WellFoundedGT",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "propext",
   "Lattice.toSemilatticeInf",
   "Set",
   "Exists.choose",
   "Or.casesOn",
   "LT.lt",
   "IsTotal",
   "HarderNarasimhan.μA",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.proposition_3_8",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [WellFoundedGT ℒ] {S : Type u_2}\n  [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Convex μ →\n    ((IsTotal S fun x1 x2 ↦ x1 ≤ x2) ∨ ∀ (z : ℒ) (hz : ⊥ ≠ z), HarderNarasimhan.IsAttained μ ⟨(⊥, z), ⋯⟩) →\n      ((IsTotal ↑(HarderNarasimhan.St μ) fun x1 x2 ↦ x1 ≤ x2) ∧\n          (HarderNarasimhan.μA_DescendingChainCondition μ → ∃ s, IsGreatest (HarderNarasimhan.St μ) s)) ∧\n        ∀ (x : ℒ) (hxSt : x ∈ HarderNarasimhan.St μ) (y : ℒ) (hxy : y > x),\n          HarderNarasimhan.μA μ ⟨(⊥, y), ⋯⟩ = HarderNarasimhan.μA μ ⟨(x, y), hxy⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.find_eq_zero",
   "Nat.find",
   "Nat",
   "Exists",
   "instOfNatNat",
   "DecidablePred",
   "Eq",
   "OfNat.ofNat",
   "propext"],
  "name": "HarderNarasimhan.impl.JH_pos_len._simp_1_1",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (h : ∃ n, p n), (Nat.find h = 0) = p 0",
  "constCategory": "Theorem"},
 {"references":
  ["LinearOrder.toPartialOrder",
   "Nat",
   "PartialOrder",
   "inferInstance",
   "Nat.instLinearOrder"],
  "name": "Nat.instPartialOrder",
  "constType": "PartialOrder ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "Subtype.val",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Nat.instPreorder",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.StrongDescendingChainCondition'.mk",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.StrongDescendingChainCondition'",
   "lt_iff_le_not_ge",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.instLatticeInterval",
   "Prod.snd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.instNontrivialInterval",
   "StrictAnti",
   "Nat",
   "Iff.mpr",
   "LE.le",
   "Lattice",
   "Nontrivial",
   "HarderNarasimhan.StrongDescendingChainCondition'.wdcc'",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instStrongDescendingChainCondition'IntervalResμ",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} [h : HarderNarasimhan.StrongDescendingChainCondition' μ]\n  {I : { p // p.1 < p.2 }}, HarderNarasimhan.StrongDescendingChainCondition' (HarderNarasimhan.Resμ I μ)",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "GT.gt",
   "Subtype.val",
   "Prod.fst",
   "WellFoundedGT",
   "Preorder.toLE",
   "HarderNarasimhan.impl.ℒₛ._proof_1",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "Exists",
   "Set",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.μA",
   "Lattice",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "HarderNarasimhan.impl.ℒₛ._proof_2",
   "CompleteLattice",
   "setOf"],
  "name": "HarderNarasimhan.impl.ℒₛ",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] →\n      [BoundedOrder ℒ] →\n        [WellFoundedGT ℒ] →\n          {S : Type u_2} →\n            [CompleteLattice S] →\n              ({ p // p.1 < p.2 } → S) →\n                (I : { p // p.1 < p.2 }) → (x : { p // HarderNarasimhan.InIntvl I p }) → (↑I).1 ≠ ↑x → Set ℒ",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "FunLike",
   "SetLike.instMembership",
   "LinearMap.ker",
   "SemilinearMapClass",
   "Module",
   "Membership.mem",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "DFunLike.coe",
   "OfNat.ofNat",
   "Submodule",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "Zero.toOfNat0",
   "Eq",
   "AddZero.toZero",
   "propext",
   "LinearMap.mem_ker",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "HarderNarasimhan.impl.annihilator_lift._simp_1_1",
  "constType":
  "∀ {R : Type u_1} {R₂ : Type u_2} {M : Type u_5} {M₂ : Type u_7} [inst : Semiring R] [inst_1 : Semiring R₂]\n  [inst_2 : AddCommMonoid M] [inst_3 : AddCommMonoid M₂] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module R₂ M₂]\n  {τ₁₂ : R →+* R₂} {F : Type u_11} [inst_6 : FunLike F M M₂] [inst_7 : SemilinearMapClass F τ₁₂ M M₂] {f : F} {y : M},\n  (y ∈ LinearMap.ker f) = (f y = 0)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Set",
   "IsGreatest",
   "SupSet.sSup",
   "ConditionallyCompleteLattice",
   "ConditionallyCompleteLattice.toLattice",
   "ConditionallyCompleteLattice.toSupSet",
   "Preorder.toLE",
   "IsGreatest.isLUB",
   "Eq",
   "IsLUB.csSup_eq",
   "IsGreatest.nonempty",
   "SemilatticeInf.toPartialOrder"],
  "name": "IsGreatest.csSup_eq",
  "constType":
  "∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s : Set α} {a : α}, IsGreatest s a → sSup s = a",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.IsAttained._proof_1",
   "PartialOrder.toPreorder",
   "Subtype",
   "Exists",
   "Prod.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.μmax",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.InIntvl",
   "PartialOrder",
   "Nontrivial",
   "Ne",
   "Subtype.mk",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice"],
  "name": "HarderNarasimhan.IsAttained",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] →\n      [BoundedOrder ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → { p // p.1 < p.2 } → Prop",
  "constCategory": "Definition"},
 {"references": ["semiOutParam"],
  "name": "CoeOut",
  "constType": "Sort u → semiOutParam (Sort v) → Sort (max (max 1 u) v)",
  "constCategory": "Other"},
 {"references": ["Int.neg", "Neg", "Neg.mk", "Int"],
  "name": "Int.instNegInt",
  "constType": "Neg ℤ",
  "constCategory": "Definition"},
 {"references":
  ["FunLike",
   "EmbeddingLike.apply_eq_iff_eq",
   "EmbeddingLike",
   "Eq",
   "DFunLike.coe",
   "propext"],
  "name": "HarderNarasimhan.impl.semistable_res_iff_semistable_quot._simp_1_2",
  "constType":
  "∀ {F : Sort u_1} {α : Sort u_2} {β : Sort u_3} [inst : FunLike F α β] [i : EmbeddingLike F α β] (f : F) {x y : α},\n  (f x = f y) = (x = y)",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Preorder",
   "Preorder.toLT",
   "False",
   "lt_self_iff_false",
   "Eq",
   "propext"],
  "name": "HarderNarasimhan.impl.JHFil_prop₂._simp_1_12",
  "constType": "∀ {α : Type u_2} [inst : Preorder α] (x : α), (x < x) = False",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "lt_iff_le_and_ne.match_1_1",
   "LE.le.lt_of_ne",
   "Preorder.toLT",
   "And",
   "Iff.intro",
   "LT.lt",
   "And.intro",
   "ne_of_lt",
   "le_of_lt",
   "Iff",
   "PartialOrder",
   "LE.le",
   "Ne",
   "Preorder.toLE"],
  "name": "lt_iff_le_and_ne",
  "constType":
  "∀ {α : Type u_2} [inst : PartialOrder α] {a b : α}, a < b ↔ a ≤ b ∧ a ≠ b",
  "constCategory": "Theorem"},
 {"references": ["Iff", "Iff.rfl", "Eq.rec", "Eq"],
  "name": "Iff.of_eq",
  "constType": "∀ {a b : Prop}, a = b → (a ↔ b)",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "HarderNarasimhan.Affine.mk",
   "HarderNarasimhan.Affine",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "LE.le",
   "SemilatticeSup.toMax",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Affine.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (a b : ℒ) (h : ¬a ≤ b), μ ⟨(a ⊓ b, a), ⋯⟩ = μ ⟨(b, a ⊔ b), ⋯⟩) → HarderNarasimhan.Affine μ",
  "constCategory": "Definition"},
 {"references": ["AddZero", "Zero"],
  "name": "AddZero.toZero",
  "constType": "{M : Type u_2} → [self : AddZero M] → Zero M",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.WeakSlopeLike₁.mk",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Or",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₁.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤), μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩) →\n    HarderNarasimhan.WeakSlopeLike₁ μ",
  "constCategory": "Definition"},
 {"references": ["LE.le", "LE", "GE.ge"],
  "name": "GE.ge.le",
  "constType": "∀ {α : Type u_2} [inst : LE α] {a b : α}, a ≥ b → b ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["CommRing.toCommSemiring",
   "Ideal",
   "Set",
   "Module",
   "CommSemiring.toSemiring",
   "AddCommGroup.toAddCommMonoid",
   "AddCommGroup",
   "IsAssociatedPrime",
   "CommRing",
   "setOf"],
  "name": "associatedPrimes",
  "constType":
  "(R : Type u_1) → [inst : CommRing R] → (M : Type u_2) → [inst_1 : AddCommGroup M] → [_root_.Module R M] → Set (Ideal R)",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.impl.dualμAstar_eq_μBstar._simp_1_2",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "Equiv",
   "And.intro",
   "SupSet.sSup",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "funext",
   "Eq.symm",
   "Eq.rec",
   "And.left",
   "rfl",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Set.instMembership",
   "Exists.casesOn",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Iff.mpr",
   "HarderNarasimhan.μmax._proof_1",
   "Nontrivial",
   "id",
   "Top.top",
   "Set.ext",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "OrderDual.instBoundedOrder",
   "setOf",
   "HarderNarasimhan.μAstar",
   "OrderDual",
   "OrderDual.toDual",
   "Ne.symm",
   "Equiv.instEquivLike",
   "Subtype",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "DFunLike.coe",
   "Iff.intro",
   "congrArg",
   "OrderDual.ofDual",
   "Prod.fst",
   "OrderDual.instNontrivial",
   "HarderNarasimhan.μmin",
   "Subtype.prop",
   "OrderDual.instLT",
   "BoundedOrder.toOrderTop",
   "congr",
   "InfSet.sInf",
   "OrderDual.instCompleteLattice",
   "EquivLike.toFunLike",
   "OrderDual.instPartialOrder",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice.toConditionallyCompleteLattice",
   "propext",
   "Not",
   "Set",
   "exists_prop_congr",
   "CompleteSemilatticeInf.toInfSet",
   "LT.lt",
   "HarderNarasimhan.μA._proof_1",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "ConditionallyCompleteLattice.toSupSet",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.dualμAstar_eq_μBstar",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  OrderDual.ofDual\n    ((HarderNarasimhan.μAstar fun p ↦ OrderDual.toDual (μ ⟨((↑p).2, (↑p).1), ⋯⟩)) = HarderNarasimhan.μBstar μ)",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "mt",
   "PartialOrder.toPreorder",
   "PartialOrder",
   "LE.le",
   "Preorder.toLT",
   "Ne",
   "Eq",
   "Preorder.toLE",
   "le_antisymm",
   "lt_of_le_not_ge"],
  "name": "lt_of_le_of_ne",
  "constType":
  "∀ {α : Type u_1} [inst : PartialOrder α] {a b : α}, a ≤ b → a ≠ b → a < b",
  "constCategory": "Theorem"},
 {"references":
  ["Eq.trans",
   "True",
   "List",
   "Lean.Omega.LinearCombo.coordinate",
   "OfNat.ofNat",
   "congrArg",
   "Int",
   "eq_self",
   "Lean.Omega.LinearCombo.coordinate_eval",
   "Nat",
   "of_eq_true",
   "Lean.Omega.Coeffs.ofList",
   "Lean.Omega.Coeffs.get",
   "instOfNatNat",
   "Lean.Omega.LinearCombo.eval",
   "Lean.Omega.IntList.get_cons_zero",
   "Eq",
   "List.cons"],
  "name": "Lean.Omega.LinearCombo.coordinate_eval_0",
  "constType":
  "∀ {a0 : ℤ} {t : List ℤ}, (Omega.LinearCombo.coordinate 0).eval (Omega.Coeffs.ofList (a0 :: t)) = a0",
  "constCategory": "Theorem"},
 {"references": ["DFunLike", "outParam"],
  "name": "DFunLike.coe",
  "constType":
  "{F : Sort u_1} → {α : outParam (Sort u_2)} → {β : outParam (α → Sort u_3)} → [self : DFunLike F α β] → F → (a : α) → β a",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "PartialOrder.toPreorder",
   "Subtype",
   "HarderNarasimhan.NashEquilibrium.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "Nontrivial",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice"],
  "name": "HarderNarasimhan.NashEquilibrium.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.NashEquilibrium μ → Sort u} →\n                ((nash_eq : HarderNarasimhan.μAstar μ = HarderNarasimhan.μBstar μ) → motive ⋯) →\n                  (t : HarderNarasimhan.NashEquilibrium μ) → motive t",
  "constCategory": "Other"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Eq.mp",
   "Iff.mp",
   "Classical.propDecidable",
   "Preorder.toLT",
   "Subtype.val",
   "HarderNarasimhan.impl.prop3d4₀func.congr_simp",
   "congrArg",
   "Prod.fst",
   "Subtype.prop",
   "instOfNatNat",
   "Eq.symm",
   "WellFoundedGT",
   "HarderNarasimhan.impl.prop3d4₀func_len",
   "Eq.rec",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.impl.prop3d4₀func",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "LT.lt",
   "Prod",
   "Nat",
   "Nat.find_spec",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "HarderNarasimhan.impl.prop3d4₀func_fin_len",
   "Lattice",
   "Nontrivial",
   "False",
   "Ne",
   "lt_self_iff_false",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_len_nonzero",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 })\n  (hμDCC : HarderNarasimhan.μA_DescendingChainCondition μ), HarderNarasimhan.impl.prop3d4₀func_len μ I hμDCC ≠ 0",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Subsingleton",
  "constType": "Sort u → Prop",
  "constCategory": "Other"},
 {"references":
  ["LinearMap.range_eq_top",
   "IsNoetherian",
   "isNoetherian_pi'",
   "LinearMap.instFunLike",
   "Module",
   "LinearMap.range",
   "isNoetherian_of_isNoetherianRing_of_finite.match_1",
   "Pi.addCommMonoid",
   "Fin",
   "Fin.fintype",
   "DFunLike.coe",
   "Finite.of_fintype",
   "Submodule",
   "Pi.Function.module",
   "LinearMap.semilinearMapClass",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "Module.Finite.exists_fin'",
   "Eq",
   "Semiring.toModule",
   "Exists",
   "Submodule.instTop",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "AddCommGroup",
   "LinearMap",
   "Function.Surjective",
   "RingHomSurjective.ids",
   "Ring.toSemiring",
   "Ring.toAddCommGroup",
   "Nat",
   "IsNoetherianRing",
   "Iff.mpr",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "isNoetherian_of_surjective",
   "Module.Finite",
   "Ring"],
  "name": "isNoetherian_of_isNoetherianRing_of_finite",
  "constType":
  "∀ (R : Type u_1) (M : Type u_2) [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]\n  [IsNoetherianRing R] [Module.Finite R M], IsNoetherian R M",
  "constCategory": "Theorem"},
 {"references":
  ["Finset",
   "True",
   "Eq.trans",
   "Set",
   "Singleton.singleton",
   "Membership.mem",
   "Set.toFinset",
   "Fintype",
   "Set.instSingletonSet",
   "Set.Elem",
   "Set.instMembership",
   "congrArg",
   "Finset.mem_singleton._simp_1",
   "Set.mem_toFinset._simp_1",
   "Finset.instSingleton",
   "iff_self",
   "of_eq_true",
   "congr",
   "Iff",
   "Finset.instMembership",
   "Set.mem_singleton_iff._simp_1",
   "Eq",
   "Finset.ext"],
  "name": "Set.toFinset_singleton",
  "constType":
  "∀ {α : Type u_1} (a : α) [inst : Fintype ↑{a}], {a}.toFinset = {a}",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.lt_of_le_of_lt",
   "instLTNat",
   "Nat.find",
   "Exists",
   "And",
   "DecidablePred",
   "Exists.intro",
   "Iff.intro",
   "LT.lt",
   "And.intro",
   "Nat.find_lt_iff.match_1_1",
   "Nat",
   "Nat.find_spec",
   "Iff",
   "Nat.find_min'"],
  "name": "Nat.find_lt_iff",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (h : ∃ n, p n) (n : ℕ), Nat.find h < n ↔ ∃ m < n, p m",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "True",
   "HarderNarasimhan.InIntvl",
   "PartialOrder",
   "Nontrivial",
   "eq_true",
   "BoundedOrder",
   "HarderNarasimhan.in_TotIntvl",
   "HarderNarasimhan.TotIntvl",
   "Eq",
   "Preorder.toLE"],
  "name": "HarderNarasimhan.impl.semistable_of_step_cond₂._simp_1_3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] (x : ℒ),\n  HarderNarasimhan.InIntvl HarderNarasimhan.TotIntvl x = True",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "instAddNat",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "HarderNarasimhan.ConvexI",
   "Preorder.toLT",
   "instZeroLEOneClass",
   "Exists.intro",
   "GT.gt",
   "Nat.instAddCommMonoid",
   "CompleteSemilatticeInf.toPartialOrder",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.impl.prop3d2",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists",
   "Nat.instPartialOrder",
   "CompleteLattice.toLattice",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Exists.casesOn",
   "Prod",
   "not_lt_of_ge",
   "Nat",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.in_TotIntvl",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "SemilatticeSup.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "Nat.instPreorder",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Nat.instSemiring",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "HarderNarasimhan.μA_DescendingChainCondition.mk",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "HarderNarasimhan.μA",
   "LE.le",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.cor3d3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] (S : Type u_2)\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ →\n    (∀ (f : ℕ → ℒ) (h : StrictAnti f), ∃ N, HarderNarasimhan.μA μ ⟨(f (N + 1), f N), ⋯⟩ = ⊤) →\n      HarderNarasimhan.μA_DescendingChainCondition μ",
  "constCategory": "Theorem"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.rmk4d14₁._simp_1_3",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["HAdd.hAdd",
   "SubNegMonoid.toAddMonoid",
   "instHAdd",
   "AddCommGroup.toAddGroup",
   "AddMonoid.toAddSemigroup",
   "AddCommGroup",
   "AddGroup.toSubNegMonoid",
   "Eq",
   "AddSemigroup.toAdd"],
  "name": "AddCommGroup.add_comm",
  "constType":
  "∀ {G : Type u} [self : AddCommGroup G] (a b : G), a + b = b + a",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "implies_congr",
   "Eq.trans",
   "Eq.mpr_not",
   "Classical.propDecidable",
   "eq_true",
   "Exists.intro",
   "Membership.mem.out",
   "Subtype.val",
   "Nat.sub_one_add_one",
   "Eq.symm",
   "Eq.ndrec",
   "HarderNarasimhan.impl.ℒₛ._proof_1",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "HarderNarasimhan.impl.prop3d4₀func_defprop3₀",
   "Exists",
   "Exists.choose_spec",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Nat.find_spec",
   "HarderNarasimhan.InIntvl",
   "HarderNarasimhan.impl.prop3d4₀func_fin_len",
   "eq_false",
   "Eq.refl",
   "Lattice",
   "Exists.choose.congr_simp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "instOfNatNat",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "HarderNarasimhan.impl.prop3d4₀func._proof_2",
   "Set",
   "OfNat.ofNat",
   "HarderNarasimhan.impl.prop3d4₀func_defprop3._simp_1_6",
   "HAdd.hAdd",
   "dite_cond_eq_true",
   "HarderNarasimhan.μA",
   "HarderNarasimhan.impl.prop3d4₀func._proof_5",
   "Ne",
   "dite",
   "instHSub",
   "HarderNarasimhan.impl.ℒₛ._proof_2",
   "CompleteLattice",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "WellFounded.has_min",
   "Membership.mem",
   "Nat.sub_one_lt",
   "Preorder.toLT",
   "Iff.mp",
   "GT.gt",
   "And.intro",
   "funext",
   "forall_congr",
   "HSub.hSub",
   "Eq.rec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "of_eq_false",
   "HarderNarasimhan.impl.ℒₛ",
   "And.right",
   "And",
   "HarderNarasimhan.impl.prop3d4₀func._proof_6",
   "Nat",
   "Nontrivial",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "Eq.mp",
   "le_trans",
   "congrArg",
   "dite_congr",
   "HarderNarasimhan.impl.prop3d4₀func_len_nonzero",
   "Subtype.prop",
   "IsWellFounded.wf",
   "HarderNarasimhan.impl.prop3d4₀func_len",
   "dite_cond_eq_false",
   "Not",
   "Set.Nonempty",
   "Lattice.toSemilatticeInf",
   "eq_of_le_of_not_lt",
   "instHAdd",
   "HarderNarasimhan.impl.prop3d4₀func",
   "Exists.choose",
   "Eq.mpr_prop",
   "LT.lt",
   "ne_of_lt",
   "instSubNat",
   "of_eq_true",
   "le_of_lt",
   "HarderNarasimhan.μA.congr_simp",
   "LE.le",
   "False",
   "Subtype.mk",
   "lt_self_iff_false"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_defprop3",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 })\n  (hμDCC : HarderNarasimhan.μA_DescendingChainCondition μ) (y : ℒ)\n  (hy :\n    (↑I).1 < y ∧ y ≤ ↑(HarderNarasimhan.impl.prop3d4₀func μ I (HarderNarasimhan.impl.prop3d4₀func_len μ I hμDCC - 1))),\n  ¬HarderNarasimhan.μA μ ⟨((↑I).1, y), ⋯⟩ >\n      HarderNarasimhan.μA μ\n        ⟨((↑I).1, ↑(HarderNarasimhan.impl.prop3d4₀func μ I (HarderNarasimhan.impl.prop3d4₀func_len μ I hμDCC - 1))), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "Singleton.singleton",
   "Membership.mem",
   "Iff.mp",
   "Exists.intro",
   "SMulZeroClass.toSMul",
   "Submodule.span",
   "Membership.mem.out",
   "And.intro",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "Semiring.toModule",
   "Submodule.annihilator",
   "DistribSMul.toSMulZeroClass",
   "And.left",
   "SetLike.instMembership",
   "LinearMap.ker",
   "Exists",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "DistribMulAction.toDistribSMul",
   "AddZeroClass.toAddZero",
   "LinearMap",
   "Set.instMembership",
   "Exists.casesOn",
   "Iff.mpr",
   "HSMul.hSMul",
   "AddCommGroup.toAddCommMonoid",
   "id",
   "Eq.mpr",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "LinearMap.instFunLike",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "AddCommMonoid.toAddMonoid",
   "Submodule",
   "congrArg",
   "Ideal",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "PrimeSpectrum.asIdeal",
   "Eq",
   "Preorder.toLE",
   "CommRing.toCommSemiring",
   "Set",
   "Module.support",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "CommSemiring.toSemiring",
   "IsAssociatedPrime._proof_1",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "CommRing",
   "IsAssociatedPrime",
   "Set.instSingletonSet",
   "OfNat.ofNat",
   "PrimeSpectrum",
   "Module.toDistribMulAction",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Module.mem_support_iff_exists_annihilator",
   "Submodule.mem_annihilator_span_singleton",
   "And.casesOn"],
  "name": "HarderNarasimhan.impl.mem_support_of_mem_associatedPrimes",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M] {x : Ideal R}\n  (hx : x ∈ associatedPrimes R M), { asIdeal := x, isPrime := ⋯ } ∈ Module.support R M",
  "constCategory": "Theorem"},
 {"references":
  ["Nat",
   "Nat.casesOn",
   "Nat.succ",
   "instOfNatNat",
   "Unit.unit",
   "OfNat.ofNat",
   "Unit"],
  "name": "HarderNarasimhan.impl.JHFil.match_1",
  "constType":
  "(motive : ℕ → Sort u_1) → (k : ℕ) → (Unit → motive 0) → ((n : ℕ) → motive n.succ) → motive k",
  "constCategory": "Definition"},
 {"references": ["LE.le", "LE", "ge_iff_le", "Eq", "GE.ge", "propext"],
  "name": "HarderNarasimhan.impl.lem2d4₂I._simp_1_1",
  "constType": "∀ {α : Type u_1} [inst : LE α] {x y : α}, (x ≥ y) = (y ≤ x)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "Exists",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.μA_DescendingChainCondition.mk",
   "StrictAnti",
   "Nat",
   "HarderNarasimhan.μA",
   "Lattice",
   "Nontrivial",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μA_DescendingChainCondition.mk._flat_ctor",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (a : ℒ) (f : ℕ → ℒ) (h₁ : ∀ (n : ℕ), f n > a),\n      StrictAnti f → ∃ N, ¬HarderNarasimhan.μA μ ⟨(a, f N), ⋯⟩ < HarderNarasimhan.μA μ ⟨(a, f (N + 1)), ⋯⟩) →\n    HarderNarasimhan.μA_DescendingChainCondition μ",
  "constCategory": "Definition"},
 {"references":
  ["Set.mem_singleton_iff",
   "Set",
   "Singleton.singleton",
   "Membership.mem",
   "Eq",
   "Set.instSingletonSet",
   "propext",
   "Set.instMembership"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_2",
  "constType": "∀ {α : Type u} {a b : α}, (a ∈ {b}) = (a = b)",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.find_eq_zero",
   "Nat.find",
   "Nat",
   "Exists",
   "instOfNatNat",
   "DecidablePred",
   "Eq",
   "OfNat.ofNat",
   "propext"],
  "name": "HarderNarasimhan.impl.subseq_prop6._simp_1_6",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (h : ∃ n, p n), (Nat.find h = 0) = p 0",
  "constCategory": "Theorem"},
 {"references":
  ["CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.SlopeLike",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "Or",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "And.left",
   "Not",
   "bot_lt_iff_ne_bot",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Iff.mpr",
   "HarderNarasimhan.impl.rmk4d15",
   "Nontrivial",
   "LE.le",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "lt_top_iff_ne_top",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.remark_4_15",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.SlopeLike μ →\n    ∀ (x : ℒ) (hx : x ≠ ⊥ ∧ x ≠ ⊤),\n      μ ⟨(⊥, x), ⋯⟩ ≤ μ HarderNarasimhan.TotIntvl ∨ ¬μ HarderNarasimhan.TotIntvl ≤ μ ⟨(x, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Real",
   "NNReal",
   "Semiring.toMonoidWithZero",
   "instSemiringNNReal",
   "AddMonoid",
   "Real.semiring",
   "DistribMulAction.compHom",
   "RingHom.toMonoidHom",
   "Semiring.toNonAssocSemiring",
   "NNReal.toRealHom",
   "Real.instMonoid",
   "MonoidWithZero.toMonoid",
   "DistribMulAction"],
  "name": "NNReal.instDistribMulActionOfReal",
  "constType":
  "{M : Type u_1} → [inst : AddMonoid M] → [DistribMulAction ℝ M] → DistribMulAction NNReal M",
  "constCategory": "Definition"},
 {"references": ["Nonempty", "Classical.choice"],
  "name": "Nonempty.some",
  "constType": "{α : Sort u_3} → Nonempty α → α",
  "constCategory": "Definition"},
 {"references":
  ["RingHomSurjective.invPair",
   "RingHomSurjective.mk",
   "Semiring.toNonAssocSemiring",
   "RingHomSurjective",
   "RingHom.id",
   "RingHomInvPair.ids",
   "RingHomSurjective.is_surjective",
   "Semiring"],
  "name": "RingHomSurjective.ids",
  "constType":
  "∀ {R₁ : Type u_1} [inst : Semiring R₁], RingHomSurjective (RingHom.id R₁)",
  "constCategory": "Theorem"},
 {"references":
  ["Iff.trans",
   "instLTNat",
   "Iff.rfl",
   "OfNat.ofNat",
   "congrArg",
   "LT.lt",
   "Nat",
   "Nat.succ",
   "instOfNatNat",
   "Iff",
   "LE.le",
   "id",
   "Eq.mpr",
   "Nat.le_zero_eq",
   "Eq",
   "Nat.lt_succ_iff",
   "instLENat"],
  "name": "Nat.lt_one_iff",
  "constType": "∀ {n : ℕ}, n < 1 ↔ n = 0",
  "constCategory": "Theorem"},
 {"references":
  ["associatedPrimes",
   "CommRing.toCommSemiring",
   "Module",
   "Set",
   "CommSemiring.toSemiring",
   "Membership.mem",
   "AddCommGroup",
   "CommRing",
   "HarderNarasimhan.Coprimary.mk",
   "Set.instMembership",
   "IsNoetherianRing",
   "HarderNarasimhan.Coprimary",
   "Ideal",
   "AddCommGroup.toAddCommMonoid",
   "ExistsUnique"],
  "name": "HarderNarasimhan.Coprimary.rec",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : AddCommGroup M] →\n          [inst_3 : _root_.Module R M] →\n            {motive : HarderNarasimhan.Coprimary R M → Sort u} →\n              ((coprimary : ∃! p, p ∈ associatedPrimes R M) → motive ⋯) →\n                (t : HarderNarasimhan.Coprimary R M) → motive t",
  "constCategory": "Other"},
 {"references":
  ["Not",
   "absurd",
   "LT.lt",
   "Preorder",
   "lt_irrefl",
   "Preorder.toLT",
   "False",
   "Ne",
   "Eq.rec",
   "Eq"],
  "name": "ne_of_lt",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] {a b : α}, a < b → a ≠ b",
  "constCategory": "Theorem"},
 {"references": ["Nat", "Sub.mk", "Nat.sub", "Sub"],
  "name": "instSubNat",
  "constType": "Sub ℕ",
  "constCategory": "Definition"},
 {"references": ["LE.le", "LE", "ge_iff_le", "Eq", "GE.ge", "propext"],
  "name": "HarderNarasimhan.impl.prop3d4._simp_1_3",
  "constType": "∀ {α : Type u_1} [inst : LE α] {x y : α}, (x ≥ y) = (y ≤ x)",
  "constCategory": "Theorem"},
 {"references":
  ["AddZeroClass",
   "True",
   "LE",
   "CanonicallyOrderedAdd",
   "eq_true",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "zero_le",
   "LE.le",
   "Zero.toOfNat0",
   "Eq",
   "AddZero.toZero"],
  "name": "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_10",
  "constType":
  "∀ {α : Type u} [inst : AddZeroClass α] [inst_1 : LE α] [CanonicallyOrderedAdd α] (a : α), (0 ≤ a) = True",
  "constCategory": "Theorem"},
 {"references": ["Top", "LE", "OrderTop"],
  "name": "OrderTop.toTop",
  "constType": "{α : Type u} → {inst : LE α} → [self : OrderTop α] → Top α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "Nat.le_trans",
   "Nat",
   "instHAdd",
   "LE.le",
   "Nat.le_add_right",
   "instLENat"],
  "name": "Nat.le_add_right_of_le",
  "constType": "∀ {n m k : ℕ}, n ≤ m → n ≤ m + k",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype.coe_injective",
   "Subtype",
   "Iff",
   "Ne",
   "Function.Injective.ne_iff",
   "Subtype.val"],
  "name": "Subtype.coe_ne_coe",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {a b : Subtype p}, ↑a ≠ ↑b ↔ a ≠ b",
  "constCategory": "Theorem"},
 {"references": ["Nat", "Nat.add", "Add", "Add.mk"],
  "name": "instAddNat",
  "constType": "Add ℕ",
  "constCategory": "Definition"},
 {"references":
  ["HAdd.hAdd", "instHAdd", "Add", "LE.le", "LE", "CovariantClass"],
  "name": "AddLeftMono",
  "constType": "(M : Type u_1) → [Add M] → [LE M] → Prop",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.semistableI",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "Exists.intro",
   "Membership.mem.out",
   "GT.gt",
   "HarderNarasimhan.μmax",
   "HarderNarasimhan.S₂I",
   "Subtype.val",
   "HarderNarasimhan.S₁I",
   "And.intro",
   "ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice",
   "SupSet.sSup",
   "HarderNarasimhan.μBstar",
   "le_of_not_gt",
   "sSup_le",
   "HarderNarasimhan.S₁I._proof_1",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.symm",
   "CompleteLinearOrder",
   "Eq.rec",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Exists",
   "Exists.choose_spec",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "Bot.bot",
   "Set.instMembership",
   "Prod",
   "Exists.casesOn",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Iff.mpr",
   "HarderNarasimhan.μmax._proof_1",
   "Nontrivial",
   "Lattice",
   "id",
   "Top.top",
   "Eq.mpr",
   "HarderNarasimhan.in_TotIntvl",
   "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder",
   "sSup_le_sSup_of_isCofinalFor",
   "HarderNarasimhan.Semistable",
   "setOf",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "sInf_le_sInf_of_isCoinitialFor",
   "Ne.symm",
   "Subtype",
   "Eq.mp",
   "le_trans",
   "OmegaCompletePartialOrder.toPartialOrder",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "lt_of_le_of_ne",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "congrArg",
   "Prod.fst",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.impl.rmk4d10₀",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
   "ConditionallyCompleteLinearOrder.toLinearOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "propext",
   "HarderNarasimhan.impl.semistable_iff",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "Set",
   "Exists.choose",
   "CompletelyDistribLattice.toCompleteLattice",
   "LT.lt",
   "HarderNarasimhan.μA._proof_1",
   "HarderNarasimhan.μA",
   "LE.le",
   "CompleteSemilatticeSup.toPartialOrder",
   "Ne",
   "Subtype.mk",
   "ConditionallyCompleteLattice.toSupSet",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.prop4d18₁",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Semistable μ → HarderNarasimhan.μBstar μ ≤ HarderNarasimhan.μAstar μ",
  "constCategory": "Theorem"},
 {"references":
  ["Eq.propIntro",
   "Subtype",
   "HEq.refl",
   "Eq.refl",
   "Eq.symm",
   "HEq",
   "Subtype.mk",
   "Eq.ndrec",
   "Subtype.mk.noConfusion",
   "Eq",
   "Eq.casesOn"],
  "name": "Subtype.mk.injEq",
  "constType":
  "∀ {α : Sort u} {p : α → Prop} (val : α) (property : p val) (val_1 : α) (property_1 : p val_1),\n  (⟨val, property⟩ = ⟨val_1, property_1⟩) = (val = val_1)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "HAdd.hAdd",
   "Nat",
   "instOfNatNat",
   "instHAdd",
   "Fin.mk",
   "Fin",
   "Nat.lt_succ_self",
   "OfNat.ofNat"],
  "name": "Fin.last",
  "constType": "(n : ℕ) → Fin (n + 1)",
  "constCategory": "Definition"},
 {"references":
  ["lt_trans",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Membership.mem",
   "Preorder.toLT",
   "Classical.propDecidable",
   "Exists.intro",
   "sup_le",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "And.intro",
   "CompleteSemilatticeInf.toPartialOrder",
   "Eq.ndrec",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Set.instMembership",
   "Prod",
   "Exists.casesOn",
   "HarderNarasimhan.impl.lem2d4₂I",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Iff.mpr",
   "Nontrivial",
   "Lattice",
   "inf_le_left",
   "ConditionallyCompleteLattice.toLattice",
   "setOf",
   "inf_le_right",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "SemilatticeInf.toMin",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "le_trans",
   "Prod.fst",
   "le_inf",
   "InfSet.sInf",
   "HarderNarasimhan.impl.lem2d4₁",
   "Preorder.toLE",
   "Eq",
   "CompleteLattice.toConditionallyCompleteLattice",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "le_sInf_iff",
   "Set",
   "sInf_le",
   "LT.lt",
   "CompleteSemilatticeInf.toInfSet",
   "HarderNarasimhan.μA._proof_1",
   "le_of_lt",
   "Min.min",
   "HarderNarasimhan.μA",
   "LE.le",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "dite",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop2d6₁I",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (I : { p // p.1 < p.2 }) (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.ConvexI I μ →\n    ∀ (x : ℒ),\n      HarderNarasimhan.InIntvl I x →\n        ∀ (y : ℒ),\n          HarderNarasimhan.InIntvl I y →\n            ∀ (z : ℒ),\n              HarderNarasimhan.InIntvl I z →\n                ∀ (h : x < y ∧ y < z),\n                  HarderNarasimhan.μA μ ⟨(x, y), ⋯⟩ ⊓ HarderNarasimhan.μA μ ⟨(y, z), ⋯⟩ ≤\n                    HarderNarasimhan.μA μ ⟨(x, z), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["String", "Lean.Name"],
  "name": "Lean.Name.str",
  "constType": "Name → String → Name",
  "constCategory": "Other"},
 {"references":
  ["instAddNat",
   "ite",
   "instHAdd",
   "DecidablePred",
   "Nat.brecOn",
   "OfNat.ofNat",
   "Unit",
   "HAdd.hAdd",
   "Nat",
   "instOfNatNat",
   "Nat.succ",
   "Nat.below",
   "Nat.findGreatest.match_1"],
  "name": "Nat.findGreatest",
  "constType": "(P : ℕ → Prop) → [DecidablePred P] → ℕ → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_6",
   "PartialOrder.toPreorder",
   "CompleteLattice.toInfSet",
   "BiheytingAlgebra.toHNot",
   "Lattice.mk",
   "Lattice.inf",
   "BoundedOrder.mk",
   "GeneralizedHeytingAlgebra.toOrderTop",
   "CompleteLinearOrder",
   "HeytingAlgebra.toOrderBot",
   "BiheytingAlgebra",
   "SemilatticeInf.toPartialOrder",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_14",
   "SemilatticeSup.sup",
   "LinearOrder",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_2",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_1",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_16",
   "LinearOrder.toOrd",
   "LinearOrder.toDecidableLT",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_8",
   "CompleteLattice.toBoundedOrder",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_15",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_9",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_13",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_3",
   "CompleteLattice.toSupSet",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_7",
   "GeneralizedHeytingAlgebra.toHImp",
   "instDistribLatticeOfLinearOrder",
   "CompleteLinearOrder.mk",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_12",
   "HeytingAlgebra.toGeneralizedHeytingAlgebra",
   "Preorder.toLE",
   "OrderTheory.instLinearOrderDedekindMacNeilleCompletion",
   "BiheytingAlgebra.toHeytingAlgebra",
   "Lattice.toSemilatticeInf",
   "CompleteLattice.mk",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_10",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_5",
   "BiheytingAlgebra.toSDiff",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "LinearOrder.toPartialOrder",
   "LinearOrder.toDecidableEq",
   "DistribLattice.toLattice",
   "LinearOrder.toDecidableLE",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_11",
   "SemilatticeSup.mk",
   "GeneralizedHeytingAlgebra.toLattice",
   "HeytingAlgebra.toHasCompl",
   "LinearOrder.toBiheytingAlgebra",
   "CompleteLattice",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion._proof_4",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion",
  "constType":
  "{α : Type u_1} → [inst : LinearOrder α] → CompleteLinearOrder (OrderTheory.DedekindMacNeilleCompletion α)",
  "constCategory": "Definition"},
 {"references": ["LE", "BoundedOrder", "OrderTop", "OrderBot"],
  "name": "BoundedOrder.mk",
  "constType":
  "{α : Type u} → [inst : LE α] → [toOrderTop : OrderTop α] → [toOrderBot : OrderBot α] → BoundedOrder α",
  "constCategory": "Other"},
 {"references":
  ["Quotient",
   "Setoid",
   "Setoid.r",
   "Quotient.mk",
   "Quot.out_eq",
   "Eq",
   "Quotient.out"],
  "name": "Quotient.out_eq",
  "constType": "∀ {α : Sort u_1} {s : Setoid α} (q : Quotient s), ⟦q.out⟧ = q",
  "constCategory": "Theorem"},
 {"references":
  ["Set.instHasCompl",
   "BiheytingAlgebra.toHeytingAlgebra",
   "HasCompl.compl",
   "Set",
   "Inter.inter",
   "Set.instEmptyCollection",
   "EmptyCollection.emptyCollection",
   "Eq",
   "BooleanAlgebra.toBiheytingAlgebra",
   "Set.instInter",
   "Set.instBooleanAlgebra",
   "inf_compl_eq_bot"],
  "name": "Set.inter_compl_self",
  "constType": "∀ {α : Type u_1} (s : Set α), s ∩ sᶜ = ∅",
  "constCategory": "Theorem"},
 {"references":
  ["AddUnits",
   "instHAdd",
   "And",
   "eq_zero_of_add_left",
   "AddCommMonoid.toAddMonoid",
   "add_zero",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "Iff.intro",
   "HAdd.hAdd",
   "And.intro",
   "AddCommMonoid",
   "Subsingleton",
   "Iff",
   "Eq.symm",
   "eq_zero_of_add_right",
   "Zero.toOfNat0",
   "Eq.ndrec",
   "Eq",
   "AddZero.toZero",
   "And.casesOn",
   "AddMonoid.toAddZeroClass"],
  "name": "add_eq_zero",
  "constType":
  "∀ {α : Type u} [inst : AddCommMonoid α] [Subsingleton (AddUnits α)] {a b : α}, a + b = 0 ↔ a = 0 ∧ b = 0",
  "constCategory": "Theorem"},
 {"references":
  ["Ring.toNonAssocRing",
   "Submodule.Quotient.module",
   "HarderNarasimhan.CoprimaryFiltration.piecewise_coprimary",
   "Classical.propDecidable",
   "AddGroupWithOne.toAddMonoidWithOne",
   "SMulZeroClass.toSMul",
   "HarderNarasimhan.impl.prop3d12",
   "Finset.min'",
   "RingHom.id",
   "Eq.symm",
   "Module.IsNoetherian.finite",
   "HarderNarasimhan.impl.quot_ntl'",
   "HarderNarasimhan.S",
   "instLTNat",
   "LinearMap.ker",
   "Exists",
   "HarderNarasimhan.instLatticeInterval",
   "HarderNarasimhan.impl.prop3d11._simp_1",
   "LinearMap",
   "HarderNarasimhan.impl.CoprimaryFiltration.toHarderNarasimhanFiltration._simp_1_1",
   "Ring.toSemiring",
   "not_lt_of_ge",
   "HarderNarasimhan.CoprimaryFiltration.fin_len",
   "Top.top",
   "Eq.mpr",
   "lt_top_iff_ne_top",
   "HarderNarasimhan.Semistable",
   "Nat.find",
   "RelEmbedding.toEmbedding",
   "HarderNarasimhan._μ._proof_1",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "CommSemiring",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "Eq",
   "LinearExtension",
   "Set",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Set.toFinset",
   "AddZero.toAdd",
   "eq_self",
   "Nat.lt_of_succ_lt",
   "HarderNarasimhan.instPartialOrderS₀",
   "Ne",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTheory.DedekindMacNeilleCompletion",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Subtype.instLE",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "HarderNarasimhan.μ",
   "Membership.mem",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "Nat.instAddCommMonoid",
   "RelEmbedding.instFunLike",
   "Submodule.subtype",
   "Semiring.toNonAssocSemiring",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "eq_of_heq",
   "PrimeSpectrum.instPartialOrder",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Semiring.toModule",
   "Eq.rec",
   "HarderNarasimhan.CoprimaryFiltration.monotone",
   "SemilatticeInf.toPartialOrder",
   "DistribSMul.toSMulZeroClass",
   "And.left",
   "Nat.instPartialOrder",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "PrimeSpectrum.mk",
   "HarderNarasimhan.CoprimaryFiltration.strict_mono_associated_prime",
   "AddZeroClass.toAddZero",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat.lt_add_one",
   "Exists.casesOn",
   "isNoetherian_submodule'",
   "Nat",
   "Finset.instSingleton",
   "AddZero.toZero",
   "LinearMap.toSpanSingleton",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Submodule.instNontrivial",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Eq.mp",
   "Submodule.module",
   "HarderNarasimhan.CoprimaryFiltration.strict_mono",
   "Nat.instAddCancelCommMonoid",
   "DFunLike.coe",
   "instDistribLatticeOfLinearOrder",
   "BoundedOrder.toOrderTop",
   "isNoetherian_of_isNoetherianRing_of_finite",
   "HarderNarasimhan.instLinearOrderS₀",
   "HarderNarasimhan.impl.prop3d13₂._simp_4",
   "Not",
   "instHAdd",
   "IsAssociatedPrime._proof_1",
   "IsAssociatedPrime",
   "LT.lt",
   "lt_add_one",
   "of_eq_true",
   "One.toOfNat1",
   "Submodule.Quotient.nontrivial_of_lt_top",
   "le_of_lt",
   "ExistsUnique.unique",
   "Subtype.mk",
   "LT",
   "OrderTop.toTop",
   "instAddNat",
   "Finset",
   "Eq.trans",
   "Singleton.singleton",
   "Exists.intro",
   "HarderNarasimhan.impl.quot_ntl",
   "Membership.mem.out",
   "instDistribSMul",
   "Subtype.val",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "Submodule.submoduleOf._proof_1",
   "Eq.ndrec",
   "HarderNarasimhan.Coprimary.coprimary",
   "Exists.choose_spec",
   "ClosureOperator.IsClosed",
   "Submodule.addCommGroup",
   "OrderTheory.coe'",
   "Prod.snd",
   "HarderNarasimhan.S₀_order'",
   "Set.instMembership",
   "Prod",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Eq.refl",
   "Nat.instStarOrderedRing",
   "Finset.instMembership",
   "HEq",
   "AddCommGroup.toAddCommMonoid",
   "CompleteLattice.toBoundedOrder",
   "AddMonoid.toAddZeroClass",
   "Submodule.hasQuotient",
   "HarderNarasimhan.impl.μ_nonempty",
   "Submodule.mem_top",
   "Nat.instPreorder",
   "ExistsUnique.exists",
   "instOfNatNat",
   "HarderNarasimhan.CoprimaryFiltration",
   "HarderNarasimhan._μ",
   "Preorder.toLE",
   "HarderNarasimhan.impl.CoprimaryFiltration.toHarderNarasimhanFiltration._simp_1_2",
   "CompleteLattice.toConditionallyCompleteLattice",
   "propext",
   "Submodule.instOrderTop",
   "Nat.instAddMonoid",
   "Set.mem_toFinset",
   "Submodule.instTop",
   "AddCommGroup",
   "HarderNarasimhan.instBoundedOrderInterval",
   "OrderEmbedding",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "PrimeSpectrum",
   "CommRing.toRing",
   "LinearOrder.toPartialOrder",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.μA",
   "Nat.le_of_succ_le",
   "Submodule.completeLattice",
   "ExistsUnique",
   "HarderNarasimhan.S₀",
   "Module.Finite",
   "HarderNarasimhan.CoprimaryFiltration.first_eq_bot",
   "Ideal.IsPrime",
   "Prod.mk",
   "Subtype.preorder",
   "Iff.mp",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "AddMonoidWithOne.toAddMonoid",
   "HarderNarasimhan.Coprimary",
   "Ring.toAddGroupWithOne",
   "Nat.instIsOrderedAddMonoid",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "SetLike.instMembership",
   "HarderNarasimhan.CoprimaryFiltration.filtration",
   "Nat.instStarRing",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "ConditionallyCompleteLattice.toLattice",
   "Submodule.submoduleOf",
   "Subtype",
   "Module.Finite.quotient",
   "Submodule.Quotient.instSMul._proof_1",
   "Function.Embedding.toFun",
   "HarderNarasimhan.impl.rmk4d14₂",
   "Submodule",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Submodule.Quotient.addCommGroup",
   "Nat.instOne",
   "Ideal",
   "HarderNarasimhan.Interval",
   "Finset.min'_mem",
   "Set.instLE",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "True",
   "HEq.refl",
   "CommSemiring.toSemiring",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "Exists.choose",
   "Eq.casesOn",
   "HarderNarasimhan.instNontrivialInterval",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "LE.le",
   "Submodule.addCommMonoid",
   "HarderNarasimhan.impl.semistable_res_iff_semistable_quot"],
  "name":
  "HarderNarasimhan.impl.CoprimaryFiltration.toHarderNarasimhanFiltration",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M]\n  (a : HarderNarasimhan.CoprimaryFiltration R M), ∃ HNFil, a.filtration = HNFil.filtration",
  "constCategory": "Theorem"},
 {"references":
  ["ConditionallyCompleteLattice", "ConditionallyCompleteLinearOrder"],
  "name": "ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice",
  "constType":
  "{α : Type u_5} → [self : ConditionallyCompleteLinearOrder α] → ConditionallyCompleteLattice α",
  "constCategory": "Definition"},
 {"references":
  ["CommRing.toCommSemiring",
   "associatedPrimes",
   "Module",
   "Set",
   "CommSemiring.toSemiring",
   "Membership.mem",
   "AddCommGroup",
   "Iff.rfl",
   "IsAssociatedPrime",
   "CommRing",
   "Set.instMembership",
   "Ideal",
   "Iff",
   "AddCommGroup.toAddCommMonoid"],
  "name": "AssociatePrimes.mem_iff",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] {I : Ideal R} {M : Type u_2} [inst_1 : AddCommGroup M]\n  [inst_2 : _root_.Module R M], I ∈ associatedPrimes R M ↔ IsAssociatedPrime I M",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "AddZeroClass",
   "CanonicallyOrderedAdd",
   "nonpos_iff_eq_zero",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "PartialOrder",
   "LE.le",
   "Zero.toOfNat0",
   "Preorder.toLE",
   "Eq",
   "AddZero.toZero",
   "propext"],
  "name": "HarderNarasimhan.impl.prop4d8._simp_1_10",
  "constType":
  "∀ {α : Type u} [inst : AddZeroClass α] [inst_1 : PartialOrder α] [CanonicallyOrderedAdd α] {a : α}, (a ≤ 0) = (a = 0)",
  "constCategory": "Theorem"},
 {"references": ["SubNegMonoid", "Sub"],
  "name": "SubNegMonoid.toSub",
  "constType": "{G : Type u} → [self : SubNegMonoid G] → Sub G",
  "constCategory": "Definition"},
 {"references":
  ["implies_congr",
   "PartialOrder.toPreorder",
   "Finset",
   "Eq.trans",
   "Membership.mem",
   "WithTop",
   "WithTop.some",
   "congrArg",
   "Finset.inf",
   "WithTop.orderTop",
   "WithTop.top",
   "funext",
   "WithTop.coe_ne_top._simp_1",
   "forall_congr",
   "Preorder.toLE",
   "Eq",
   "Finset.Nonempty",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "Exists",
   "Classical.not_forall._simp_1",
   "Function.comp",
   "SemilatticeInf",
   "Classical.not_not._simp_1",
   "WithTop.semilatticeInf",
   "Eq.refl",
   "Top.top",
   "Finset.instMembership",
   "id",
   "False",
   "imp_false._simp_1",
   "Ne",
   "Eq.mpr",
   "Finset.inf_eq_top_iff._simp_1",
   "OrderTop.toTop"],
  "name": "Finset.inf'._proof_1",
  "constType":
  "∀ {α : Type u_1} {β : Type u_2} [inst : SemilatticeInf α] (s : Finset β),\n  s.Nonempty → ∀ (f : β → α), s.inf (WithTop.some ∘ f) ≠ ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["neg_add_cancel_right",
   "AddRightStrictMono",
   "congrArg",
   "sub_eq_add_neg",
   "SubNegMonoid.toSub",
   "HSub.hSub",
   "Eq.symm",
   "AddGroup.toSubNegMonoid",
   "AddGroup.covconv_swap",
   "Eq",
   "propext",
   "instHAdd",
   "add_lt_add_iff_right",
   "Neg.neg",
   "SubNegMonoid.toNeg",
   "Iff.rfl",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "LT.lt",
   "HAdd.hAdd",
   "SubNegMonoid.toAddMonoid",
   "Iff",
   "id",
   "AddGroup",
   "Eq.mpr",
   "instHSub",
   "LT",
   "AddMonoid.toAddZeroClass"],
  "name": "sub_lt_iff_lt_add",
  "constType":
  "∀ {α : Type u} [inst : AddGroup α] [inst_1 : LT α] [AddRightStrictMono α] {a b c : α}, a - c < b ↔ a < b + c",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "Eq.trans",
   "Submodule.Quotient.module",
   "Singleton.singleton",
   "Ideal.IsPrime.isPrimary",
   "Union.union",
   "Ideal.instHasQuotient_1",
   "PrimeSpectrum.isPrime",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring",
   "associatedPrimes.eq_empty_of_subsingleton",
   "Set.instUnion",
   "Semiring.toModule",
   "NonUnitalCommRing.toNonUnitalNonAssocCommRing",
   "Ideal.Quotient.commRing",
   "LinearMap",
   "NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring",
   "Ideal.radical",
   "Set.finite_empty._simp_1",
   "NegZeroClass.toZero",
   "AddCommGroup.toAddCommMonoid",
   "RingHomInvPair.ids",
   "Set.Finite",
   "associatedPrimes",
   "LinearMap.instFunLike",
   "HasQuotient.Quotient",
   "Module",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "CommRing.toNonUnitalCommRing",
   "LinearEquiv",
   "Set.instEmptyCollection",
   "EmptyCollection.emptyCollection",
   "SubNegZeroMonoid.toNegZeroClass",
   "DFunLike.coe",
   "congrArg",
   "Submodule.Quotient.addCommGroup",
   "Subsingleton",
   "associatedPrimes.eq_singleton_of_isPrimary",
   "Ideal",
   "Set.Finite.union",
   "PrimeSpectrum.asIdeal",
   "Eq",
   "IsNoetherianRing.induction_on_isQuotientEquivQuotientPrime",
   "LinearEquiv.AssociatedPrimes.eq",
   "Set.Finite.subset",
   "CommRing.toCommSemiring",
   "Set.finite_singleton._simp_1",
   "True",
   "Set",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "AddCommGroup",
   "CommRing",
   "Set.instSingletonSet",
   "Function.Exact",
   "Function.Surjective",
   "PrimeSpectrum",
   "Ring.toAddCommGroup",
   "CommRing.toRing",
   "IsNoetherianRing",
   "AddCommGroup.toDivisionAddCommMonoid",
   "of_eq_true",
   "associatedPrimes.subset_union_of_exact",
   "Function.Injective",
   "Module.Finite"],
  "name": "associatedPrimes.finite",
  "constType":
  "∀ (A : Type u) [inst : CommRing A] (M : Type v) [inst_1 : AddCommGroup M] [inst_2 : _root_.Module A M]\n  [IsNoetherianRing A] [Module.Finite A M], (associatedPrimes A M).Finite",
  "constCategory": "Theorem"},
 {"references":
  ["Exists", "Subtype", "Subtype.exists", "Subtype.mk", "Eq", "propext"],
  "name": "HarderNarasimhan.impl.prop3d12._simp_1_6",
  "constType":
  "∀ {α : Sort u} {p : α → Prop} {q : { a // p a } → Prop}, (∃ x, q x) = ∃ a, ∃ (b : p a), q ⟨a, b⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Preorder",
   "Set",
   "Iff",
   "LE.le",
   "lowerBounds",
   "Membership.mem",
   "Iff.rfl",
   "Preorder.toLE",
   "Set.instMembership"],
  "name": "mem_lowerBounds",
  "constType":
  "∀ {α : Type u_1} [inst : Preorder α] {s : Set α} {a : α}, a ∈ lowerBounds s ↔ ∀ x ∈ s, a ≤ x",
  "constCategory": "Theorem"},
 {"references": ["Inter", "Set", "Set.inter", "Inter.mk"],
  "name": "Set.instInter",
  "constType": "{α : Type u} → Inter (Set α)",
  "constCategory": "Definition"},
 {"references":
  ["Int.instAddCommGroup",
   "AddCommGroup.toAddGroup",
   "AddGroup",
   "inferInstance",
   "Int"],
  "name": "Int.instAddGroup",
  "constType": "AddGroup ℤ",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "Nat.instPreorder",
   "instOfNatNat",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "Exists",
   "instHAdd",
   "BoundedOrder",
   "Prod.snd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Prod",
   "StrictAnti",
   "Nat",
   "HarderNarasimhan.μA",
   "Lattice",
   "Nontrivial",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μA_DescendingChainCondition.μ_dcc",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.μA_DescendingChainCondition μ]\n  (a : ℒ) (f : ℕ → ℒ) (h₁ : ∀ (n : ℕ), f n > a),\n  StrictAnti f → ∃ N, ¬HarderNarasimhan.μA μ ⟨(a, f N), ⋯⟩ < HarderNarasimhan.μA μ ⟨(a, f (N + 1)), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "not_top_lt",
   "Preorder",
   "eq_false",
   "Top.top",
   "Preorder.toLT",
   "False",
   "OrderTop",
   "Eq",
   "Preorder.toLE",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_7",
  "constType":
  "∀ {α : Type u} [inst : Preorder α] [inst_1 : OrderTop α] {a : α}, (⊤ < a) = False",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.impl.semistable_iff",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "HarderNarasimhan.semistableI",
   "Preorder.toLT",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Iff",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "HarderNarasimhan.Semistable",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.semistable_iff",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.Semistable μ ↔ HarderNarasimhan.semistableI μ HarderNarasimhan.TotIntvl",
  "constCategory": "Theorem"},
 {"references":
  ["NonUnitalCommRing",
   "NonUnitalCommRing.toNonUnitalRing",
   "NonUnitalRing.toNonUnitalNonAssocRing",
   "NonUnitalNonAssocCommRing.mk",
   "NonUnitalCommRing.mul_comm",
   "NonUnitalNonAssocCommRing"],
  "name": "NonUnitalCommRing.toNonUnitalNonAssocCommRing",
  "constType":
  "{α : Type u} → [self : NonUnitalCommRing α] → NonUnitalNonAssocCommRing α",
  "constCategory": "Definition"},
 {"references":
  ["SetLike.instMembership",
   "Module",
   "Membership.mem",
   "DistribMulAction.toDistribSMul",
   "Semiring.toMonoidWithZero",
   "SMulZeroClass.toSMul",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "Submodule",
   "Module.toDistribMulAction",
   "AddCommMonoid",
   "Submodule.setLike",
   "Submodule.smul_mem'",
   "MonoidWithZero.toMonoid",
   "HSMul.hSMul",
   "instHSMul",
   "AddZero.toZero",
   "DistribSMul.toSMulZeroClass",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "Submodule.smul_mem",
  "constType":
  "∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] {module_M : _root_.Module R M}\n  (p : Submodule R M) {x : M} (r : R), x ∈ p → r • x ∈ p",
  "constCategory": "Theorem"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "PartialOrder.toPreorder",
   "Subtype",
   "HarderNarasimhan.NashEquilibrium.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.NashEquilibrium.rec",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.μBstar",
   "PartialOrder",
   "Nontrivial",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice"],
  "name": "HarderNarasimhan.NashEquilibrium.casesOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.NashEquilibrium μ → Sort u} →\n                (t : HarderNarasimhan.NashEquilibrium μ) →\n                  ((nash_eq : HarderNarasimhan.μAstar μ = HarderNarasimhan.μBstar μ) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["LT.lt",
   "Preorder",
   "le_top",
   "LT.lt.trans_le",
   "LT.lt.ne",
   "Top.top",
   "Preorder.toLT",
   "OrderTop",
   "Ne",
   "Preorder.toLE",
   "OrderTop.toTop"],
  "name": "ne_top_of_lt",
  "constType":
  "∀ {α : Type u} [inst : Preorder α] [inst_1 : OrderTop α] {a b : α}, a < b → a ≠ ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["Exists", "Exists.intro", "Eq", "forall_exists_index", "propext"],
  "name": "HarderNarasimhan.impl.rmk4d10₁._simp_1_3",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {q : (∃ x, p x) → Prop}, (∀ (h : ∃ x, p x), q h) = ∀ (x : α) (h : p x), q ⋯",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "Iff.mp",
   "DecidablePred",
   "Nat.findGreatest",
   "Nat.findGreatest_eq_iff",
   "congrArg",
   "False.elim",
   "instOfNatNat",
   "Nat.findGreatest_eq_zero_iff",
   "Eq.symm",
   "Eq.ndrec",
   "Eq",
   "And.left",
   "Nat.casesAuxOn",
   "rfl",
   "Not",
   "instLTNat",
   "instHAdd",
   "And.right",
   "And",
   "Nat.zero_lt_succ",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "LT.lt",
   "Nat",
   "Nat.succ",
   "Eq.refl",
   "LE.le",
   "id",
   "instDecidableEqNat",
   "Ne",
   "Eq.mpr",
   "dite",
   "instLENat"],
  "name": "Nat.findGreatest_spec",
  "constType":
  "∀ {m : ℕ} {P : ℕ → Prop} [inst : DecidablePred P] {n : ℕ}, m ≤ n → P m → P (Nat.findGreatest P n)",
  "constCategory": "Theorem"},
 {"references": ["List.nil", "List.IsChain", "List.cons"],
  "name": "List.IsChain.singleton",
  "constType":
  "∀ {α : Type u_1} {R : α → α → Prop} (a : α), List.IsChain R [a]",
  "constCategory": "Other"},
 {"references":
  ["Set.instHasSubset",
   "HasSubset.Subset",
   "Set",
   "Singleton.singleton",
   "Membership.mem",
   "Eq",
   "Set.instSingletonSet",
   "Set.singleton_subset_iff",
   "propext",
   "Set.instMembership"],
  "name": "HarderNarasimhan.impl.prop3d12p2._simp_1_3",
  "constType": "∀ {α : Type u} {a : α} {s : Set α}, ({a} ⊆ s) = (a ∈ s)",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "RelSeries.toFun",
   "instHAdd",
   "Fin.instOfNat",
   "RelSeries",
   "Fin",
   "SetRel",
   "RelSeries.head._proof_1",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "Nat",
   "instOfNatNat",
   "RelSeries.length"],
  "name": "RelSeries.head",
  "constType": "{α : Type u_1} → {r : SetRel α α} → RelSeries r → α",
  "constCategory": "Definition"},
 {"references":
  ["RingHom",
   "Submodule.toAddSubmonoid",
   "SemilinearMapClass",
   "Module",
   "Submodule.comap._proof_2",
   "AddCommMonoid.toAddMonoid",
   "DFunLike.coe",
   "Submodule",
   "AddSubsemigroup.mk",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.map._proof_1",
   "Submodule.comap._proof_3",
   "FunLike",
   "Set.preimage",
   "AddSubmonoid.mk",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "AddSubmonoid.comap",
   "SetLike.coe",
   "Submodule.comap._proof_1",
   "AddSubmonoid",
   "Submodule.mk",
   "Submodule.setLike",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "Submodule.comap",
  "constType":
  "{R : Type u_1} →\n  {R₂ : Type u_3} →\n    {M : Type u_5} →\n      {M₂ : Type u_7} →\n        [inst : Semiring R] →\n          [inst_1 : Semiring R₂] →\n            [inst_2 : AddCommMonoid M] →\n              [inst_3 : AddCommMonoid M₂] →\n                [inst_4 : _root_.Module R M] →\n                  [inst_5 : _root_.Module R₂ M₂] →\n                    {σ₁₂ : R →+* R₂} →\n                      {F : Type u_9} →\n                        [inst_6 : FunLike F M M₂] →\n                          [SemilinearMapClass F σ₁₂ M M₂] → F → Submodule R₂ M₂ → Submodule R M",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "SizeOf",
   "Nat.lt_add_one",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.HarderNarasimhanFiltration.rec",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "SizeOf.sizeOf",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "instSizeOfDefault",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration._sizeOf_1",
  "constType":
  "{ℒ : Type u_1} →\n  {inst : Nontrivial ℒ} →\n    {inst_1 : Lattice ℒ} →\n      {inst_2 : BoundedOrder ℒ} →\n        {S : Type u_2} →\n          {inst_3 : CompleteLattice S} →\n            {μ : { p // p.1 < p.2 } → S} → [SizeOf ℒ] → [SizeOf S] → HarderNarasimhan.HarderNarasimhanFiltration μ → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Subtype.val",
   "strictAnti_nat_of_succ_lt",
   "CompleteSemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition.μ_dcc",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists",
   "HarderNarasimhan.impl.prop3d4₀func_defprop1",
   "BoundedOrder",
   "HarderNarasimhan.impl.prop3d4₀func_strict_decreasing",
   "HarderNarasimhan.impl.prop3d4₀func_helper",
   "Prod.snd",
   "Exists.casesOn",
   "Prod",
   "Nat",
   "HarderNarasimhan.InIntvl",
   "Ne.lt_of_le",
   "Classical.byContradiction",
   "Nontrivial",
   "Lattice",
   "id",
   "Eq.mpr",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "gt_iff_lt",
   "Subtype",
   "Ne.symm",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "lt_of_le_of_ne",
   "Prod.fst",
   "congrArg",
   "Mathlib.Tactic.Push.not_exists._simp_1",
   "Subtype.prop",
   "instOfNatNat",
   "WellFoundedGT",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Not",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.impl.prop3d4₀func",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.μA",
   "LE.le",
   "False",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.prop3d4₀func_fin_len",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S) (I : { p // p.1 < p.2 }),\n  HarderNarasimhan.μA_DescendingChainCondition μ → ∃ i, ↑(HarderNarasimhan.impl.prop3d4₀func μ I i) = (↑I).1",
  "constCategory": "Theorem"},
 {"references":
  ["rfl",
   "RingHom",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "RingHomInvPair.mk",
   "RingHomInvPair",
   "RingHom.comp",
   "Semiring"],
  "name": "RingHomInvPair.ids",
  "constType":
  "∀ {R₁ : Type u_1} [inst : Semiring R₁], RingHomInvPair (RingHom.id R₁) (RingHom.id R₁)",
  "constCategory": "Theorem"},
 {"references":
  ["Set",
   "Module",
   "Submodule.instMin._proof_3",
   "Inter.inter",
   "AddSubmonoid.mk",
   "Min",
   "AddCommMonoid.toAddMonoid",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "Min.mk",
   "Submodule.instMin._proof_2",
   "Submodule",
   "AddSubsemigroup.mk",
   "AddCommMonoid",
   "SetLike.coe",
   "Submodule.setLike",
   "Submodule.mk",
   "Submodule.instMin._proof_1",
   "Set.instInter",
   "Semiring",
   "AddMonoid.toAddZeroClass"],
  "name": "Submodule.instMin",
  "constType":
  "{R : Type u_1} →\n  {M : Type u_3} → [inst : Semiring R] → [inst_1 : AddCommMonoid M] → [inst_2 : _root_.Module R M] → Min (Submodule R M)",
  "constCategory": "Definition"},
 {"references":
  ["DivInvMonoid.toInv",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "GroupWithZero.toDivInvMonoid",
   "MulZeroClass.toMul",
   "Preorder.toLT",
   "HMul.hMul",
   "MonoidWithZero.toMulZeroOneClass",
   "CommGroupWithZero.toDivisionCommMonoid",
   "Subtype.val",
   "mul_inv_cancel_right₀",
   "not_false_eq_true",
   "LinearOrderedCommMonoidWithZero.toCommMonoidWithZero",
   "SemilatticeInf.toPartialOrder",
   "InvOneClass.toInv",
   "covariant_swap_mul_of_covariant_mul",
   "LinearOrderedCommGroupWithZero.toLinearOrderedCommMonoidWithZero",
   "CommMonoidWithZero.toCommMonoid",
   "MulZeroOneClass.toMulZeroClass",
   "eq_false",
   "id",
   "instHMul",
   "IsOrderedMonoid.toMulLeftMono",
   "CommGroupWithZero.toGroupWithZero",
   "DivisionMonoid.toDivInvOneMonoid",
   "ContravariantClass.mk",
   "Subtype",
   "Eq.mp",
   "LinearOrderedCommMonoidWithZero.toLinearOrder",
   "congrArg",
   "instDistribLatticeOfLinearOrder",
   "LT.lt.ne'",
   "congr",
   "GroupWithZero.toMonoidWithZero",
   "Subtype.property",
   "MulPosReflectLE",
   "mul_le_mul_right'",
   "Zero.toOfNat0",
   "LinearOrderedCommGroupWithZero.toCommGroupWithZero",
   "LinearOrderedCommGroupWithZero",
   "Preorder.toLE",
   "Eq",
   "DivisionCommMonoid.toDivisionMonoid",
   "Not",
   "Inv.inv",
   "Lattice.toSemilatticeInf",
   "LinearOrderedCommMonoidWithZero.toIsOrderedMonoid",
   "True",
   "OfNat.ofNat",
   "LT.lt",
   "DistribLattice.toLattice",
   "DivInvOneMonoid.toInvOneClass",
   "of_eq_true",
   "MulZeroClass.toZero",
   "CommMonoid.toCommSemigroup",
   "LE.le",
   "False",
   "MulPosReflectLE.mk"],
  "name": "LinearOrderedCommGroupWithZero.toMulPosReflectLE",
  "constType":
  "∀ {α : Type u_1} [inst : LinearOrderedCommGroupWithZero α], MulPosReflectLE α",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Subtype",
   "And",
   "Preorder.toLT",
   "Subtype.ext",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "PartialOrder",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.Interval",
   "Eq",
   "Preorder.toLE",
   "le_antisymm"],
  "name": "HarderNarasimhan.instPartialOrderInterval._proof_4",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {z : { p // p.1 < p.2 }}\n  (a b : HarderNarasimhan.Interval z), ↑a ≤ ↑b → ↑b ≤ ↑a → a = b",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.cast",
   "True",
   "Eq.trans",
   "Mathlib.Meta.NormNum.IsInt.mk",
   "AddGroupWithOne.toAddMonoidWithOne",
   "Mathlib.Meta.NormNum.IsNat.to_isInt.match_1_1",
   "Int.cast",
   "congrArg",
   "Int",
   "eq_self",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "Ring.toAddGroupWithOne",
   "of_eq_true",
   "Mathlib.Meta.NormNum.IsInt",
   "AddGroupWithOne.toIntCast",
   "Int.cast_natCast",
   "Int.ofNat",
   "Eq",
   "Mathlib.Meta.NormNum.IsNat",
   "instNatCastInt",
   "Ring"],
  "name": "Mathlib.Meta.NormNum.IsNat.to_isInt",
  "constType":
  "∀ {α : Type u_1} [inst : Ring α] {a : α} {n : ℕ},\n  Mathlib.Meta.NormNum.IsNat a n → Mathlib.Meta.NormNum.IsInt a (Int.ofNat n)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Prod.mk",
   "Subtype.instLE",
   "Singleton.singleton",
   "Membership.mem",
   "HarderNarasimhan.μ",
   "Iff.mp",
   "Preorder.toLT",
   "List.tfae_of_cycle",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "HarderNarasimhan.impl.rmk4d14₁",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "Finset.min'",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "List.TFAE",
   "PrimeSpectrum.instPartialOrder",
   "HarderNarasimhan.S",
   "List.cons",
   "List.IsChain.cons_cons",
   "ClosureOperator.IsClosed",
   "OrderTheory.coe'",
   "Prod.snd",
   "Bot.bot",
   "List.IsChain.singleton",
   "Set.instMembership",
   "Prod",
   "HarderNarasimhan.μ_nonempty",
   "Finset.instSingleton",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Iff.mpr",
   "Iff",
   "Nontrivial",
   "Submodule.instBot",
   "Top.top",
   "AddCommGroup.toAddCommMonoid",
   "ConditionallyCompleteLattice.toLattice",
   "CompleteLattice.toBoundedOrder",
   "HarderNarasimhan.Semistable",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Submodule.instNontrivial",
   "RelEmbedding.toEmbedding",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Function.Embedding.toFun",
   "HarderNarasimhan.impl.rmk4d14₂",
   "Prod.fst",
   "Ideal",
   "HarderNarasimhan._μ",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice.toConditionallyCompleteLattice",
   "Set.instLE",
   "List.nil",
   "CommRing.toCommSemiring",
   "LinearExtension",
   "Set",
   "Submodule.instTop",
   "CommSemiring.toSemiring",
   "Set.toFinset",
   "AddCommGroup",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "CommRing",
   "PrimeSpectrum",
   "LT.lt",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "HarderNarasimhan.μA",
   "LE.le",
   "Submodule.completeLattice",
   "ExistsUnique",
   "HarderNarasimhan.S₀",
   "Subtype.mk",
   "bot_lt_top",
   "Module.Finite",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "HarderNarasimhan.remark_3_14",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M],\n  [HarderNarasimhan.Semistable (HarderNarasimhan.μ R M),\n      ∀ (N : HarderNarasimhan.ℒ R M) (hN : ⊥ < N),\n        HarderNarasimhan.μA (HarderNarasimhan.μ R M) ⟨(⊥, N), hN⟩ =\n          OrderTheory.coe'.toFun {(HarderNarasimhan._μ R M ⟨(⊥, ⊤), ⋯⟩).toFinset.min' ⋯},\n      ∃! p, p ∈ associatedPrimes R M].TFAE",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "instLTNat",
   "instHAdd",
   "Nat.pred",
   "OfNat.ofNat",
   "Unit",
   "LT.lt",
   "HAdd.hAdd",
   "Nat",
   "instOfNatNat",
   "LE.le",
   "id",
   "_private.Init.Data.Nat.Lemmas.0.Nat.le_of_pred_lt.match_1_1",
   "instLENat",
   "Nat.le_of_lt"],
  "name": "Nat.le_of_pred_lt",
  "constType": "∀ {n : ℕ} {m : ℕ}, m.pred < n → m ≤ n",
  "constCategory": "Theorem"},
 {"references": ["Exists", "And", "Eq", "propext", "exists_eq_right"],
  "name": "HarderNarasimhan.instWellFoundedGTInterval._simp_4",
  "constType":
  "∀ {α : Sort u_1} {p : α → Prop} {a' : α}, (∃ a, p a ∧ a = a') = p a'",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.NashEquilibrium.mk",
   "Preorder.toLT",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "And.intro",
   "Or",
   "HarderNarasimhan.NashEquilibrium",
   "PartialOrder",
   "HarderNarasimhan.μBstar",
   "HarderNarasimhan.WeakAscendingChainCondition.wacc",
   "Eq.symm",
   "And.left",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.TotIntvl",
   "HarderNarasimhan.impl.prop4d1₂",
   "Bot.bot",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.WeakSlopeLike₂.mk",
   "Iff",
   "Eq.refl",
   "Nontrivial",
   "Top.top",
   "HarderNarasimhan.μAstar",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Or.inr",
   "HarderNarasimhan.WeakSlopeLike₁.mk",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Prod.fst",
   "Iff.intro",
   "Subtype.prop",
   "Or.inl",
   "HarderNarasimhan.μmin",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "HarderNarasimhan.StrongDescendingChainCondition",
   "Preorder.toLE",
   "Eq",
   "HarderNarasimhan.impl.prop4d11₂",
   "HarderNarasimhan.NashEquilibrium.nash_eq",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "LT.lt",
   "Or.casesOn",
   "le_of_lt",
   "LE.le",
   "eq_of_le_of_ge",
   "HarderNarasimhan.impl.prop4d11₁",
   "Subtype.mk",
   "Eq.le",
   "OrderTop.toTop",
   "CompleteLattice",
   "HarderNarasimhan.SlopeLike.slopelike"],
  "name": "HarderNarasimhan.impl.prop4d16₂",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.SlopeLike μ →\n    HarderNarasimhan.WeakAscendingChainCondition μ →\n      HarderNarasimhan.StrongDescendingChainCondition μ →\n        (HarderNarasimhan.μmin μ HarderNarasimhan.TotIntvl = HarderNarasimhan.μmax μ HarderNarasimhan.TotIntvl ↔\n          HarderNarasimhan.NashEquilibrium μ)",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Subtype.val",
   "HarderNarasimhan.S₁I",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "HarderNarasimhan.InIntvl",
   "Eq.refl",
   "Nontrivial",
   "Lattice",
   "Ne",
   "Eq.ndrec",
   "Eq.rec",
   "Eq",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.S₁I.congr_simp",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ μ_1 : { p // p.1 < p.2 } → S),\n  μ = μ_1 →\n    ∀ (I I_1 : { p // p.1 < p.2 }) (e_I : I = I_1) (x x_1 : ℒ) (e_x : x = x_1) (hxI : HarderNarasimhan.InIntvl I x)\n      (hx : (↑I).1 ≠ x), HarderNarasimhan.S₁I μ I x hxI hx = HarderNarasimhan.S₁I μ_1 I_1 x_1 ⋯ ⋯",
  "constCategory": "Theorem"},
 {"references": ["SubtractionMonoid", "SubtractionCommMonoid"],
  "name": "SubtractionCommMonoid.toSubtractionMonoid",
  "constType":
  "{G : Type u} → [self : SubtractionCommMonoid G] → SubtractionMonoid G",
  "constCategory": "Definition"},
 {"references": ["Equiv.refl", "OrderDual", "Equiv"],
  "name": "OrderDual.ofDual",
  "constType": "{α : Type u_1} → αᵒᵈ ≃ α",
  "constCategory": "Definition"},
 {"references":
  ["MulAction.toSMul",
   "MulActionWithZero",
   "MonoidWithZero.toMonoid",
   "HSMul.hSMul",
   "instHSMul",
   "Zero.toOfNat0",
   "Zero",
   "Eq",
   "OfNat.ofNat",
   "MonoidWithZero",
   "MulActionWithZero.toMulAction"],
  "name": "MulActionWithZero.smul_zero",
  "constType":
  "∀ {M₀ : Type u_2} {A : Type u_7} {inst : MonoidWithZero M₀} {inst_1 : Zero A} [self : MulActionWithZero M₀ A] (r : M₀),\n  r • 0 = 0",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "instLTNat",
   "Or.inr",
   "Nat",
   "False.elim",
   "Or.inl",
   "Or",
   "_private.Init.Data.Nat.Basic.0.Nat.lt_or_gt_of_ne.match_1_1",
   "Nat.lt_trichotomy",
   "Ne",
   "GT.gt",
   "Eq"],
  "name": "Nat.lt_or_gt_of_ne",
  "constType": "∀ {a b : ℕ}, a ≠ b → a < b ∨ a > b",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Ideal.IsPrime",
   "Membership.mem",
   "Exists.intro",
   "Equiv",
   "And.intro",
   "Semiring.toNonAssocSemiring",
   "Ideal.sInf_isPrime_of_isChain",
   "CompleteSemilatticeInf.toPartialOrder",
   "Maximal.le_of_ge",
   "Semiring.toModule",
   "And.left",
   "Exists",
   "And.right",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "And",
   "Set.instMembership",
   "Exists.casesOn",
   "OrderDual.instPreorder",
   "Maximal",
   "HasSubset.Subset",
   "id",
   "Eq.mpr",
   "setOf",
   "IsChain",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "OrderDual",
   "OrderDual.toDual",
   "Equiv.instEquivLike",
   "Submodule.instInfSet",
   "CommSemiring",
   "OmegaCompletePartialOrder.toPartialOrder",
   "DFunLike.coe",
   "OrderDual.ofDual",
   "congrArg",
   "Ideal",
   "Ideal.minimalPrimes",
   "EquivLike.toFunLike",
   "InfSet.sInf",
   "Maximal.prop",
   "zorn_le_nonempty₀",
   "OrderDual.instLE",
   "Preorder.toLE",
   "Eq",
   "propext",
   "le_sInf_iff",
   "IsChain.symm",
   "Set",
   "CommSemiring.toSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "OrderDual.le_toDual",
   "sInf_le",
   "Set.instHasSubset",
   "CompleteSemilatticeInf.toInfSet",
   "LE.le",
   "Submodule.completeLattice",
   "inferInstance",
   "OrderDual.ofDual_toDual",
   "CompleteLattice.toCompleteSemilatticeInf",
   "And.casesOn"],
  "name": "Ideal.exists_minimalPrimes_le",
  "constType":
  "∀ {R : Type u_1} [inst : CommSemiring R] {I J : Ideal R} [J.IsPrime], I ≤ J → ∃ p ∈ I.minimalPrimes, p ≤ J",
  "constCategory": "Theorem"},
 {"references":
  ["Set.Nonempty",
   "Set",
   "Set.not_nonempty_empty",
   "eq_false",
   "False",
   "Eq",
   "Set.instEmptyCollection",
   "EmptyCollection.emptyCollection"],
  "name": "HarderNarasimhan.impl.JHFil_prop₁._simp_1_7",
  "constType": "∀ {α : Type u}, ∅.Nonempty = False",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Iff.mp",
   "Preorder.toLT",
   "Exists.intro",
   "bot_le",
   "Subtype.val",
   "Equiv",
   "PartialOrder",
   "OrderDual.instTop",
   "Eq.ndrec",
   "Exists",
   "lt_of_le_of_lt",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "OrderDual.instOrderTop",
   "Nat.lt_add_one",
   "Prod",
   "Exists.casesOn",
   "Nat",
   "OrderDual.instPreorder",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.impl.fine",
   "Eq.refl",
   "Nontrivial",
   "id",
   "Top.top",
   "StrictMono",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "OrderDual",
   "Subtype",
   "Equiv.instEquivLike",
   "Eq.mp",
   "OmegaCompletePartialOrder.toPartialOrder",
   "DFunLike.coe",
   "congrArg",
   "Nat.instPreorder",
   "Prod.fst",
   "OrderDual.ofDual",
   "Subtype.prop",
   "instOfNatNat",
   "OrderDual.instLT",
   "EquivLike.toFunLike",
   "OrderBot.toBot",
   "OrderDual.instLE",
   "Eq",
   "Preorder.toLE",
   "le_top",
   "OrderDual.ofDual_le_ofDual",
   "instHAdd",
   "OfNat.ofNat",
   "lt_of_lt_of_le",
   "LT.lt",
   "HAdd.hAdd",
   "StrictAnti",
   "LE.le",
   "Subtype.mk",
   "CompleteLattice",
   "HarderNarasimhan.impl.instCoeSubtypeProdOrderDualLtFstSndOfNontrivialOfBoundedOrder_harderNarasimhan._proof_1"],
  "name": "HarderNarasimhan.impl.h₁_dual_of_h₁",
  "constType":
  "∀ {ℒ : Type u_1} [Nontrivial ℒ] [inst : PartialOrder ℒ] [inst_1 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_2 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S},\n  (∀ (x : ℕ → ℒ) (saf : StrictAnti x), ∃ N, μ ⟨(⊥, x N), ⋯⟩ ≤ μ ⟨(x (N + 1), x N), ⋯⟩) →\n    ∀ (x : ℕ → ℒᵒᵈ) (smf : StrictMono x),\n      ∃ N, (fun p ↦ μ ⟨((↑p).2, (↑p).1), ⋯⟩) ⟨(x N, x (N + 1)), ⋯⟩ ≤ (fun p ↦ μ ⟨((↑p).2, (↑p).1), ⋯⟩) ⟨(x N, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references": ["Top", "LE.le", "Top.top", "LE", "OrderTop"],
  "name": "OrderTop.mk",
  "constType":
  "{α : Type u} → [inst : LE α] → [toTop : Top α] → (∀ (a : α), a ≤ ⊤) → OrderTop α",
  "constCategory": "Other"},
 {"references": ["Add", "Distrib"],
  "name": "Distrib.toAdd",
  "constType": "{R : Type u_1} → [self : Distrib R] → Add R",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Real.instPreorder",
   "PartialOrder.toPreorder",
   "Module",
   "AddCommGroup.toAddGroup",
   "MulAction.toSMul",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "AddGroup.toSubNegMonoid",
   "Preorder.toLE",
   "AddSemigroup.toAdd",
   "PosSMulStrictMono",
   "Real",
   "AddCommGroup.add_comm",
   "instHAdd",
   "LinearOrder",
   "AddCommMonoid.mk",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "Real.semiring",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "Module.toDistribMulAction",
   "SubNegMonoid.toAddMonoid",
   "Real.instZero",
   "AddMonoid.toAddSemigroup",
   "LE.le"],
  "name": "HarderNarasimhan.TotallyOrderedRealVectorSpace.mk",
  "constType":
  "{V : Type u_1} →\n  [toAddCommGroup : AddCommGroup V] →\n    [toModule : _root_.Module ℝ V] →\n      [toLinearOrder : LinearOrder V] →\n        [toPosSMulStrictMono : PosSMulStrictMono ℝ V] →\n          (∀ {y z : V} (x : V), y ≤ z → x + y ≤ x + z) → HarderNarasimhan.TotallyOrderedRealVectorSpace V",
  "constCategory": "Other"},
 {"references": ["HAdd", "outParam"],
  "name": "HAdd.hAdd",
  "constType":
  "{α : Type u} → {β : Type v} → {γ : outParam (Type w)} → [self : HAdd α β γ] → α → β → γ",
  "constCategory": "Definition"},
 {"references": ["PartialOrder", "LinearOrder"],
  "name": "LinearOrder.toPartialOrder",
  "constType": "{α : Type u_2} → [self : LinearOrder α] → PartialOrder α",
  "constCategory": "Definition"},
 {"references":
  ["le_refl", "Preorder", "True", "LE.le", "eq_true", "Eq", "Preorder.toLE"],
  "name": "HarderNarasimhan.impl.prop4d1₁_seq._simp_3",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), (a ≤ a) = True",
  "constCategory": "Theorem"},
 {"references":
  ["LinearOrder.toPartialOrder",
   "PartialOrder.toPreorder",
   "DecidableLE",
   "LinearOrder",
   "Preorder.toLE"],
  "name": "LinearOrder.toDecidableLE",
  "constType": "{α : Type u_2} → [self : LinearOrder α] → DecidableLE α",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "LinearMap.instFunLike",
   "Eq.mp",
   "Module",
   "LinearMap.range",
   "Submodule.module",
   "Membership.mem",
   "Submodule.map",
   "congrArg",
   "Submodule",
   "Submodule.subtype",
   "LinearMap.semilinearMapClass",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "RingHom.id",
   "CompleteSemilatticeInf.toPartialOrder",
   "Preorder.toLE",
   "SetLike.instMembership",
   "LinearMap.map_le_range",
   "LinearMap",
   "RingHomSurjective.ids",
   "Submodule.range_subtype",
   "Submodule.setLike",
   "LE.le",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "CompleteLattice.toCompleteSemilatticeInf",
   "Semiring"],
  "name": "Submodule.map_subtype_le",
  "constType":
  "∀ {R : Type u_1} {M : Type u_5} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M) (p' : Submodule R ↥p), Submodule.map p.subtype p' ≤ p",
  "constCategory": "Theorem"},
 {"references":
  ["IsStrictOrderedRing.mk",
   "PartialOrder.toPreorder",
   "IsOrderedCancelAddMonoid.mk",
   "Nat.le_of_add_le_add_left",
   "Eq.mp",
   "Exists.intro",
   "Nat.add_le_add_left",
   "congrArg",
   "Semiring.toNonAssocSemiring",
   "Nat.mul_lt_mul_of_pos_right",
   "Nat.instSemiring",
   "Nat.ne_of_lt",
   "instOfNatNat",
   "Zero.toOfNat0",
   "AddCommMagma.toAdd",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "Nontrivial.mk",
   "Preorder.toLE",
   "Eq",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "add_comm",
   "IsOrderedAddMonoid.mk",
   "IsStrictOrderedRing",
   "Exists",
   "Nat.instPartialOrder",
   "instHAdd",
   "ZeroLEOneClass.mk",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Nat.zero_lt_succ",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "Nat",
   "Nat.zero_lt_one",
   "One.toOfNat1",
   "AddCommMonoid.toAddCommSemigroup",
   "MulZeroClass.toZero",
   "AddMonoidWithOne.toOne",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "LE.le",
   "Nat.mul_lt_mul_of_pos_left",
   "id",
   "Ne",
   "Eq.mpr",
   "Nat.le_of_lt"],
  "name": "Nat.instIsStrictOrderedRing",
  "constType": "IsStrictOrderedRing ℕ",
  "constCategory": "Theorem"},
 {"references":
  ["SubtractionMonoid.toSubNegZeroMonoid",
   "AddCommGroup.toAddCancelCommMonoid",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "AddCommGroup.toAddGroup",
   "Preorder.toLT",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "AddGroup.toSubtractionMonoid",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "IsOrderedAddMonoid",
   "PartialOrder",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Zero.toOfNat0",
   "AddGroup.toSubNegMonoid",
   "Neg.neg",
   "IsOrderedAddMonoid.toAddLeftMono",
   "AddCommGroup",
   "AddZero.toAdd",
   "AddZeroClass.toAddZero",
   "OfNat.ofNat",
   "neg_neg_iff_pos",
   "LT.lt",
   "NegZeroClass.toNeg",
   "AddCommGroup.toDivisionAddCommMonoid",
   "SubNegMonoid.toAddMonoid",
   "Iff.mpr",
   "AddCommGroup.toAddCommMonoid",
   "NegZeroClass.toZero",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "AddMonoid.toAddZeroClass"],
  "name": "neg_neg_of_pos",
  "constType":
  "∀ {α : Type u} [inst : AddCommGroup α] [inst_1 : PartialOrder α] [IsOrderedAddMonoid α] {a : α}, 0 < a → -a < 0",
  "constCategory": "Theorem"},
 {"references":
  ["IsModularLattice.mk",
   "PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "And",
   "Preorder.toLT",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "Prod.snd",
   "IsModularLattice.sup_inf_le_assoc_of_le",
   "Subtype.val",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "LE.le",
   "Nontrivial",
   "Lattice",
   "IsModularLattice",
   "HarderNarasimhan.Interval",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.impl.instIsModularLatticeInterval",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [iml : IsModularLattice ℒ]\n  {I : { p // p.1 < p.2 }}, IsModularLattice (HarderNarasimhan.Interval I)",
  "constCategory": "Theorem"},
 {"references":
  ["Ring.toNonAssocRing",
   "Bool.false",
   "Classical.propDecidable",
   "AddGroupWithOne.toAddMonoidWithOne",
   "Int.instCommSemiring",
   "eq_top_iff",
   "congrFun",
   "le_of_not_gt",
   "Int.instLTInt",
   "Eq.symm",
   "gt_trans",
   "NonAssocSemiring.toAddCommMonoidWithOne",
   "instLatticeInt",
   "instLTNat",
   "BoundedOrder",
   "Ring.toSemiring",
   "Nat.le_succ",
   "instOfNat",
   "AddMonoid.toAddSemigroup",
   "Mathlib.Meta.NormNum.isNat_lt_true",
   "Top.top",
   "Int.negOfNat",
   "Int.instCharZero",
   "Nat.find",
   "HarderNarasimhan.impl.instμ_Admissible",
   "Mathlib.Tactic.Ring.add_mul",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.le_refl",
   "Mathlib.Tactic.Linarith.lt_irrefl",
   "Prod.fst",
   "Nat.instNeZeroSucc",
   "Nat.instSemiring",
   "CompleteLinearOrder.toConditionallyCompleteLinearOrderBot",
   "Mathlib.Tactic.Ring.neg_one_mul",
   "Int.instIsStrictOrderedRing",
   "Eq",
   "HarderNarasimhan.impl.theorem3d10",
   "instNatCastInt",
   "Mathlib.Tactic.Ring.neg_zero",
   "Int.instIsOrderedAddMonoid",
   "instOfNatAtLeastTwo",
   "AddZero.toAdd",
   "HPow.hPow",
   "Mathlib.Tactic.Ring.mul_congr",
   "Nat.cast_add",
   "CompletelyDistribLattice.toCompleteLattice",
   "Nat.lt_of_succ_lt",
   "Monoid.toNatPow",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "instHSub",
   "Nat.instAtLeastTwoHAddOfNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Mathlib.Meta.NormNum.IsNat.of_raw",
   "HarderNarasimhan.ConvexI",
   "Mathlib.Meta.NormNum.IsInt.of_raw",
   "Mathlib.Tactic.Ring.add_pf_zero_add",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "HarderNarasimhan.HarderNarasimhanFiltration.first_eq_bot",
   "HarderNarasimhan.HarderNarasimhanFiltration.fin_len",
   "GT.gt",
   "Nat.instAddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Mathlib.Tactic.Ring.add_pf_add_overlap",
   "Int.instLEInt",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "HarderNarasimhan.Convex",
   "CompleteLinearOrder",
   "AddGroup.toSubNegMonoid",
   "Eq.rec",
   "Int.ofNat",
   "SemilatticeInf.toPartialOrder",
   "Nat.instPartialOrder",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "Mathlib.Tactic.Ring.mul_zero",
   "AddZeroClass.toAddZero",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Mathlib.Tactic.Linarith.mul_neg",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "Mathlib.Tactic.Ring.atom_pf",
   "NonUnitalNormedCommRing.toNonUnitalCommRing",
   "ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.cast",
   "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration",
   "Eq.mp",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.strict_mono",
   "BoundedOrder.toOrderTop",
   "Mathlib.Tactic.Ring.add_pf_add_lt",
   "HarderNarasimhan.HarderNarasimhanFiltration.piecewise_semistable",
   "AddCommMonoidWithOne.toAddMonoidWithOne",
   "instHAdd",
   "Distrib.toMul",
   "Mathlib.Tactic.Ring.cast_pos",
   "Mathlib.Tactic.Ring.add_congr",
   "LT.lt",
   "lt_add_one",
   "One.toOfNat1",
   "Mathlib.Tactic.Ring.neg_add",
   "Mathlib.Tactic.Ring.add_pf_add_zero",
   "Mathlib.Tactic.Ring.neg_congr",
   "Mathlib.Tactic.Linarith.sub_nonpos_of_le",
   "Subtype.mk",
   "OrderTop.toTop",
   "NormedCommRing.toNonUnitalNormedCommRing",
   "instAddNat",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "Mathlib.Tactic.Linarith.add_lt_of_neg_of_le",
   "Eq.trans",
   "Mathlib.Meta.NormNum.IsInt.to_raw_eq",
   "Inhabited.default",
   "HarderNarasimhan.impl.ConvexI_TotIntvl_iff_Convex",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "HarderNarasimhan.HarderNarasimhanFiltration.ext",
   "Nat.le_succ_of_le",
   "NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring",
   "SubNegMonoid.toSub",
   "Mathlib.Tactic.Ring.add_overlap_pf_zero",
   "Mathlib.Tactic.Ring.sub_pf",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "NonUnitalCommRing.toNonUnitalNonAssocCommRing",
   "Prod.snd",
   "instNeZeroNatHAdd_1",
   "Prod",
   "Nat.find_spec",
   "Nat.instStarOrderedRing",
   "Eq.refl",
   "Lattice",
   "AddMonoidWithOne.toOne",
   "Nat.rawCast",
   "AddMonoid.toAddZeroClass",
   "Mathlib.Meta.NormNum.IsNat.to_isInt",
   "Bool",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "Int.add_one_le_iff",
   "Int.instRing",
   "Mathlib.Tactic.Ring.add_pf_add_overlap_zero",
   "Int.instAddCommGroup",
   "instOfNatNat",
   "Int.instAdd",
   "ConditionallyCompleteLinearOrder.toLinearOrder",
   "WellFoundedGT",
   "Preorder.toLE",
   "Mathlib.Tactic.Ring.mul_add",
   "propext",
   "lt_of_not_ge",
   "Nat.le_induction",
   "Nat.instAddMonoid",
   "Distrib.toAdd",
   "IsStrictOrderedRing.toIsOrderedRing",
   "Mathlib.Tactic.Zify.natCast_lt._simp_1",
   "OfNat.ofNat",
   "Int",
   "HAdd.hAdd",
   "LinearOrder.toPartialOrder",
   "AddGroupWithOne.toAddGroup",
   "AddCommGroup.toDivisionAddCommMonoid",
   "MulZeroClass.toZero",
   "HarderNarasimhan.μA",
   "NonUnitalNonAssocSemiring.toMulZeroClass",
   "Int.instNormedCommRing",
   "neg_neg_of_pos",
   "Nat.cast_one",
   "Mathlib.Tactic.Ring.zero_mul",
   "Prod.mk",
   "HMul.hMul",
   "Int.rawCast",
   "AddMonoidWithOne.toAddMonoid",
   "Ring.toAddGroupWithOne",
   "funext",
   "HSub.hSub",
   "Mathlib.Meta.NormNum.IsInt.to_isNat",
   "Mathlib.Tactic.Linarith.zero_lt_one",
   "Nat.instIsOrderedAddMonoid",
   "Nat.instLinearOrder",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "AddSemigroup.toAdd",
   "instHPow",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Neg.neg",
   "Nat.instStarRing",
   "IsOrderedAddMonoid.toAddLeftMono",
   "HarderNarasimhan.TotIntvl",
   "NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring",
   "Iff.mpr",
   "Nontrivial",
   "id",
   "instHMul",
   "Mathlib.Meta.NormNum.isNat_ofNat",
   "HarderNarasimhan.HarderNarasimhanFiltration.monotone",
   "Subtype",
   "Mathlib.Tactic.Ring.neg_mul",
   "Mathlib.Meta.NormNum.isInt_add",
   "HarderNarasimhan.impl.HNFil",
   "SubNegZeroMonoid.toNegZeroClass",
   "congrArg",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instOne",
   "Mathlib.Tactic.Ring.instCommSemiringNat",
   "MonoidWithZero.toMonoid",
   "Zero.toOfNat0",
   "Mathlib.Tactic.Ring.sub_congr",
   "Mathlib.Tactic.Ring.cast_zero",
   "Mathlib.Meta.NormNum.isInt_mul",
   "Mathlib.Tactic.Ring.of_eq",
   "Lattice.toSemilatticeInf",
   "CommSemiring.toSemiring",
   "Mathlib.Tactic.Zify.natCast_le._simp_1",
   "Semiring.toMonoidWithZero",
   "HarderNarasimhan.HarderNarasimhanFiltration.μA_pseudo_strict_anti",
   "NegZeroClass.toNeg",
   "Int.instSemiring",
   "HarderNarasimhan.HarderNarasimhanFiltration.filtration",
   "LE.le",
   "Mathlib.Tactic.Ring.add_pf_add_gt",
   "instLENat",
   "Int.instAddMonoid"],
  "name": "HarderNarasimhan.instUniqueHarderNarasimhanFiltration._proof_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLinearOrder S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  (a : HarderNarasimhan.HarderNarasimhanFiltration μ), a = default",
  "constCategory": "Theorem"},
 {"references": ["Neg"],
  "name": "Neg.mk",
  "constType": "{α : Type u} → (α → α) → Neg α",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "top_ne_bot",
   "BoundedOrder",
   "Bot.bot",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "eq_false",
   "Nontrivial",
   "Top.top",
   "False",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "OrderTop.toTop"],
  "name": "HarderNarasimhan.impl.JH_pos_len._simp_1_2",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : BoundedOrder α] [Nontrivial α], (⊤ = ⊥) = False",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "SemilatticeInf.toMin",
   "PartialOrder.toPreorder",
   "Subtype",
   "Prod.mk",
   "SemilatticeSup.toPartialOrder",
   "Preorder.toLT",
   "Prod.fst",
   "CompleteSemilatticeInf.toPartialOrder",
   "HarderNarasimhan.Convex.mk",
   "HarderNarasimhan.Convex",
   "Preorder.toLE",
   "HarderNarasimhan.Convex.rec",
   "SemilatticeInf.toPartialOrder",
   "inf_lt_left",
   "Not",
   "Lattice.toSemilatticeInf",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Max.max",
   "Min.min",
   "Iff.mpr",
   "Lattice",
   "LE.le",
   "SemilatticeSup.toMax",
   "Subtype.mk",
   "right_lt_sup",
   "CompleteLattice.toCompleteSemilatticeInf",
   "CompleteLattice"],
  "name": "HarderNarasimhan.Convex.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Lattice ℒ] →\n    {S : Type u_2} →\n      [inst_1 : CompleteLattice S] →\n        {μ : { p // p.1 < p.2 } → S} →\n          {motive : HarderNarasimhan.Convex μ → Sort u} →\n            (t : HarderNarasimhan.Convex μ) →\n              ((convex : ∀ (x y : ℒ) (h : ¬x ≤ y), μ ⟨(x ⊓ y, x), ⋯⟩ ≤ μ ⟨(y, x ⊔ y), ⋯⟩) → motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Eq.trans",
   "True",
   "instHAdd",
   "List",
   "Lean.Omega.IntList.get",
   "Lean.Omega.LinearCombo.coordinate",
   "OfNat.ofNat",
   "congrArg",
   "Int",
   "HAdd.hAdd",
   "eq_self",
   "Lean.Omega.LinearCombo.coordinate_eval",
   "Nat",
   "Lean.Omega.IntList.get_cons_succ",
   "of_eq_true",
   "Lean.Omega.Coeffs.ofList",
   "Lean.Omega.Coeffs.get",
   "instOfNatNat",
   "Lean.Omega.LinearCombo.eval",
   "Lean.Omega.IntList.get_cons_zero",
   "Eq",
   "List.cons"],
  "name": "Lean.Omega.LinearCombo.coordinate_eval_5",
  "constType":
  "∀ {a0 a1 a2 a3 a4 a5 : ℤ} {t : List ℤ},\n  (Omega.LinearCombo.coordinate 5).eval (Omega.Coeffs.ofList (a0 :: a1 :: a2 :: a3 :: a4 :: a5 :: t)) = a5",
  "constCategory": "Theorem"},
 {"references":
  ["Set.mem_singleton_iff",
   "Set",
   "Singleton.singleton",
   "Membership.mem",
   "Eq",
   "Set.instSingletonSet",
   "propext",
   "Set.instMembership"],
  "name": "HarderNarasimhan.impl.rmk4d14₂._simp_1_4",
  "constType": "∀ {α : Type u} {a b : α}, (a ∈ {b}) = (a = b)",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.cast",
   "AddMonoidWithOne.toAddMonoid",
   "congrArg",
   "instOfNatNat",
   "Zero.toOfNat0",
   "Nat.cast_succ",
   "Eq",
   "AddMonoidWithOne",
   "AddSemigroup.toAdd",
   "instHAdd",
   "AddZeroClass.toAddZero",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "HAdd.hAdd",
   "zero_add",
   "Nat",
   "AddMonoidWithOne.toNatCast",
   "One.toOfNat1",
   "Nat.succ",
   "Eq.refl",
   "AddMonoid.toAddSemigroup",
   "Nat.cast_zero",
   "AddMonoidWithOne.toOne",
   "id",
   "Eq.mpr",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass"],
  "name": "Nat.cast_one",
  "constType": "∀ {R : Type u_1} [inst : AddMonoidWithOne R], ↑1 = 1",
  "constCategory": "Theorem"},
 {"references": ["Preorder", "Preorder.le_refl", "LE.le", "Preorder.toLE"],
  "name": "le_refl",
  "constType": "∀ {α : Type u_1} [inst : Preorder α] (a : α), a ≤ a",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "SubtractionMonoid.toSubNegZeroMonoid",
   "HarderNarasimhan.SlopeLike",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "HarderNarasimhan.impl.prop4d8",
   "Preorder.toLT",
   "instZeroNNReal",
   "GT.gt",
   "Semiring.toNonAssocSemiring",
   "PartialOrder",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toLinearOrder",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "NonUnitalNonAssocSemiring.toDistrib",
   "And.right",
   "NNReal",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Prod",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "NegZeroClass.toZero",
   "Subtype",
   "instSemiringNNReal",
   "SubtractionCommMonoid.toSubtractionMonoid",
   "SubNegZeroMonoid.toNegZeroClass",
   "Prod.fst",
   "instDistribLatticeOfLinearOrder",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "Zero.toOfNat0",
   "Eq",
   "Preorder.toLE",
   "Distrib.toAdd",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "OrderTheory.instCompleteLatticeDedekindMacNeilleCompletion",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toAddCommGroup",
   "OfNat.ofNat",
   "HarderNarasimhan.μQuotient",
   "HAdd.hAdd",
   "LT.lt",
   "DistribLattice.toLattice",
   "AddCommMonoid.toAddCommSemigroup",
   "AddCommGroup.toDivisionAddCommMonoid",
   "Subtype.mk",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "HarderNarasimhan.SlopeLike_of_μQuotient",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {V : Type u_2}\n  [inst_3 : HarderNarasimhan.TotallyOrderedRealVectorSpace V] [Nontrivial V] (r : { p // p.1 < p.2 } → NNReal)\n  (d : { p // p.1 < p.2 } → V),\n  (∀ (x y z : ℒ) (h : x < y ∧ y < z),\n      d ⟨(x, z), ⋯⟩ = d ⟨(x, y), ⋯⟩ + d ⟨(y, z), ⋯⟩ ∧ r ⟨(x, z), ⋯⟩ = r ⟨(x, y), ⋯⟩ + r ⟨(y, z), ⋯⟩) →\n    (∀ (x y : ℒ) (h : x < y), r ⟨(x, y), h⟩ = 0 → d ⟨(x, y), h⟩ > 0) →\n      HarderNarasimhan.SlopeLike (HarderNarasimhan.μQuotient r d)",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "Lean.Name",
  "constType": "Type",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "PartialOrder",
   "LE.le",
   "top_le_iff",
   "Top.top",
   "OrderTop",
   "Eq",
   "Preorder.toLE",
   "OrderTop.toTop",
   "propext"],
  "name": "HarderNarasimhan.impl.hHFil_of_hNSeries._simp_1_9",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderTop α] {a : α}, (⊤ ≤ a) = (a = ⊤)",
  "constCategory": "Theorem"},
 {"references": ["Iff"],
  "name": "Iff.mp",
  "constType": "∀ {a b : Prop}, (a ↔ b) → a → b",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.ConvexI",
   "Prod.mk",
   "Eq.mpr_not",
   "Classical.propDecidable",
   "Preorder.toLT",
   "IsGreatest",
   "HarderNarasimhan.impl.HNFil._proof_3",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Exists.choose_spec",
   "BoundedOrder",
   "HarderNarasimhan.TotIntvl",
   "Prod.snd",
   "Prod",
   "Nat",
   "Eq.refl",
   "Iff.mpr",
   "eq_false",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "id",
   "Eq.mpr",
   "lt_top_iff_ne_top",
   "Subtype",
   "HarderNarasimhan.StI",
   "HarderNarasimhan.impl.HNFil",
   "dite_congr",
   "Prod.fst",
   "congrArg",
   "BoundedOrder.toOrderTop",
   "instOfNatNat",
   "WellFoundedGT",
   "instDecidableFalse",
   "Preorder.toLE",
   "Eq",
   "Not",
   "HarderNarasimhan.impl.HNFil._proof_4",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "instHAdd",
   "Exists.choose",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "False",
   "Ne",
   "Subtype.mk",
   "dite",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.impl.HNFil_prop_of_def",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S)\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.ConvexI HarderNarasimhan.TotIntvl μ]\n  [h : HarderNarasimhan.μ_Admissible μ] (n : ℕ) (h' : HarderNarasimhan.impl.HNFil μ n ≠ ⊤),\n  IsGreatest (HarderNarasimhan.StI μ ⟨(HarderNarasimhan.impl.HNFil μ n, ⊤), ⋯⟩) (HarderNarasimhan.impl.HNFil μ (n + 1))",
  "constCategory": "Theorem"},
 {"references":
  ["Nat.find",
   "Nat",
   "Exists",
   "Nat.find_le_iff",
   "LE.le",
   "And",
   "DecidablePred",
   "Eq",
   "instLENat",
   "propext"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_22",
  "constType":
  "∀ {p : ℕ → Prop} [inst : DecidablePred p] (h : ∃ n, p n) (n : ℕ), (Nat.find h ≤ n) = ∃ m ≤ n, p m",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Set.Nonempty",
   "Exists",
   "Eq.trans",
   "True",
   "Set",
   "Membership.mem",
   "EmptyCollection.emptyCollection",
   "Set.instEmptyCollection",
   "congrArg",
   "Set.instMembership",
   "iff_self",
   "of_eq_true",
   "Set.not_nonempty_iff_eq_empty._simp_1_3",
   "Set.not_nonempty_iff_eq_empty._simp_1_2",
   "Iff",
   "congr",
   "Eq"],
  "name": "Set.not_nonempty_iff_eq_empty",
  "constType": "∀ {α : Type u} {s : Set α}, ¬s.Nonempty ↔ s = ∅",
  "constCategory": "Theorem"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nat",
   "Nontrivial",
   "Lattice",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.ctorIdx",
  "constType":
  "{ℒ : Type u_1} →\n  {inst : Nontrivial ℒ} →\n    {inst_1 : Lattice ℒ} →\n      {inst_2 : BoundedOrder ℒ} →\n        {S : Type u_2} →\n          {inst_3 : CompleteLattice S} →\n            {μ : { p // p.1 < p.2 } → S} → HarderNarasimhan.HarderNarasimhanFiltration μ → ℕ",
  "constCategory": "Definition"},
 {"references":
  ["RingHom.toMonoidHom",
   "NNReal.toRealHom",
   "Semiring.toNonAssocSemiring",
   "Real",
   "MulAction",
   "MulAction.compHom",
   "Real.instMonoid",
   "MonoidWithZero.toMonoid",
   "NNReal",
   "instSemiringNNReal",
   "Semiring.toMonoidWithZero",
   "Real.semiring"],
  "name": "NNReal.instMulActionOfReal",
  "constType": "{M : Type u_1} → [MulAction ℝ M] → MulAction NNReal M",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "Eq.trans",
   "Prod.mk",
   "Iff.mp",
   "Preorder.toLT",
   "Exists.intro",
   "Subtype.val",
   "HarderNarasimhan.μmax",
   "Subtype.coe_inj",
   "And.intro",
   "SupSet.sSup",
   "PartialOrder",
   "funext",
   "Eq.symm",
   "Eq.rec",
   "And.left",
   "Exists",
   "And.right",
   "And",
   "BoundedOrder",
   "Prod.snd",
   "Prod",
   "Exists.casesOn",
   "Iff.of_eq",
   "HarderNarasimhan.InIntvl",
   "Iff.mpr",
   "Eq.refl",
   "Nontrivial",
   "HarderNarasimhan.μmax._proof_1",
   "id",
   "HarderNarasimhan.μmax_res_intvl._simp_1_1",
   "Eq.mpr",
   "HarderNarasimhan.lt_lt",
   "setOf",
   "Subtype",
   "le_trans",
   "and_true",
   "CompleteSemilatticeSup.toSupSet",
   "CompleteLattice.toCompleteSemilatticeSup",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "congrArg",
   "Iff.intro",
   "Subtype.prop",
   "congr",
   "HarderNarasimhan.Interval",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Not",
   "True",
   "Set",
   "HarderNarasimhan.instBoundedOrderInterval",
   "exists_prop_congr",
   "LT.lt",
   "eq_self",
   "HarderNarasimhan.instNontrivialInterval",
   "SupSet",
   "LE.le",
   "HarderNarasimhan.instPartialOrderInterval",
   "Ne",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.μmax_res_intvl",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {I : { p // p.1 < p.2 }}\n  {S : Type u_2} [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S} {J : { p // p.1 < p.2 }},\n  HarderNarasimhan.μmax (HarderNarasimhan.Resμ I μ) J = HarderNarasimhan.μmax μ ⟨(↑(↑J).1, ↑(↑J).2), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁.mk",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "Subtype.val",
   "Prod.fst",
   "Or",
   "Subtype.prop",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "HarderNarasimhan.WeakSlopeLike₁",
   "Preorder.toLE",
   "BoundedOrder",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Nontrivial",
   "LE.le",
   "HarderNarasimhan.WeakSlopeLike₁.rec",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice"],
  "name": "HarderNarasimhan.WeakSlopeLike₁.recOn",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : PartialOrder ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.WeakSlopeLike₁ μ → Sort u} →\n                (t : HarderNarasimhan.WeakSlopeLike₁ μ) →\n                  ((wsl₁ :\n                        ∀ (z : { p // p.1 < p.2 }) (hz : (↑z).2 < ⊤),\n                          μ z ≤ μ ⟨((↑z).1, ⊤), ⋯⟩ ∨ μ ⟨((↑z).2, ⊤), hz⟩ ≤ μ ⟨((↑z).1, ⊤), ⋯⟩) →\n                      motive ⋯) →\n                    motive t",
  "constCategory": "Definition"},
 {"references":
  ["eq_self",
   "Eq.substr",
   "True",
   "Eq.trans",
   "of_eq_true",
   "Eq.refl",
   "forall_congr",
   "Eq.symm",
   "Eq.rec",
   "Eq",
   "congrArg"],
  "name": "forall_prop_domain_congr",
  "constType":
  "∀ {p₁ p₂ : Prop} {q₁ : p₁ → Prop} {q₂ : p₂ → Prop} (h₁ : p₁ = p₂),\n  (∀ (a : p₂), q₁ ⋯ = q₂ a) → (∀ (a : p₁), q₁ a) = ∀ (a : p₂), q₂ a",
  "constCategory": "Theorem"},
 {"references":
  ["Not",
   "Set.instHasSubset",
   "HasSubset.Subset",
   "Set",
   "Iff",
   "Set.subset_empty_iff",
   "Membership.mem",
   "Eq",
   "Set.instEmptyCollection",
   "EmptyCollection.emptyCollection",
   "Iff.symm",
   "Set.instMembership"],
  "name": "Set.eq_empty_iff_forall_notMem",
  "constType": "∀ {α : Type u} {s : Set α}, s = ∅ ↔ ∀ (x : α), x ∉ s",
  "constCategory": "Theorem"},
 {"references":
  ["DistribSMul.mk",
   "SMulZeroClass.mk",
   "DistribMulAction.smul_zero",
   "AddMonoid",
   "AddZeroClass.toAddZero",
   "DistribSMul",
   "DistribMulAction.smul_add",
   "MulAction.toSMul",
   "Monoid",
   "DistribMulAction.toMulAction",
   "AddZero.toZero",
   "DistribMulAction",
   "AddMonoid.toAddZeroClass"],
  "name": "DistribMulAction.toDistribSMul",
  "constType":
  "{M : Type u_1} → {A : Type u_7} → [inst : Monoid M] → [inst_1 : AddMonoid A] → [DistribMulAction M A] → DistribSMul M A",
  "constCategory": "Definition"},
 {"references": ["True"],
  "name": "True.intro",
  "constType": "True",
  "constCategory": "Other"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "BoundedOrder.toOrderBot",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "Nontrivial",
   "Top.top",
   "OrderBot.toBot",
   "Subtype.mk",
   "Preorder.toLE",
   "OrderTop.toTop",
   "bot_lt_top"],
  "name": "HarderNarasimhan.TotIntvl",
  "constType":
  "{ℒ : Type u_1} → [Nontrivial ℒ] → [inst : PartialOrder ℒ] → [BoundedOrder ℒ] → { p // p.1 < p.2 }",
  "constCategory": "Definition"},
 {"references":
  ["PartialOrder.toPreorder",
   "HarderNarasimhan.impl.CP.f1._proof_1",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Submodule.Quotient.module",
   "Membership.mem",
   "Preorder.toLT",
   "Subtype.val",
   "PrimeSpectrum.isPrime",
   "Semiring.toNonAssocSemiring",
   "Finset.min'",
   "RingHom.id",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "SetLike.instMembership",
   "LocalizedModule",
   "Submodule.addCommGroup",
   "Prod.snd",
   "LinearMap",
   "Prod",
   "LocalizedModule.isModule'",
   "Nontrivial",
   "AddCommGroup.toAddCommMonoid",
   "Submodule.submoduleOf",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Submodule.hasQuotient",
   "Subtype",
   "HasQuotient.Quotient",
   "Module",
   "Submodule.module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "LocalizedModule.instAddCommMonoid",
   "HarderNarasimhan.impl.μ_nonempty",
   "LocalizedModule.mkLinearMap",
   "Prod.fst",
   "Submodule",
   "Submodule.Quotient.addCommGroup",
   "Ideal.primeCompl",
   "PrimeSpectrum.asIdeal",
   "HarderNarasimhan._μ",
   "CommRing.toCommSemiring",
   "LinearExtension",
   "CommSemiring.toSemiring",
   "Set.toFinset",
   "AddCommGroup",
   "CommRing",
   "LT.lt",
   "PrimeSpectrum",
   "CommRing.toRing",
   "IsNoetherianRing",
   "HarderNarasimhan.ℒ",
   "Submodule.setLike",
   "Submodule.completeLattice",
   "Submodule.addCommMonoid",
   "Module.Finite"],
  "name": "HarderNarasimhan.impl.CP.f1",
  "constType":
  "{R : Type u_1} →\n  [inst : CommRing R] →\n    [inst_1 : IsNoetherianRing R] →\n      {M : Type u_2} →\n        [inst_2 : Nontrivial M] →\n          [inst_3 : AddCommGroup M] →\n            [inst_4 : _root_.Module R M] →\n              [inst_5 : Module.Finite R M] →\n                (I : { z // z.1 < z.2 }) →\n                  ↥(↑I).2 ⧸ Submodule.submoduleOf (↑I).1 (↑I).2 →ₗ[R]\n                    LocalizedModule ((HarderNarasimhan._μ R M I).toFinset.min' ⋯).asIdeal.primeCompl\n                      (↥(↑I).2 ⧸ Submodule.submoduleOf (↑I).1 (↑I).2)",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Int.instSub",
   "Eq.trans",
   "Classical.propDecidable",
   "HarderNarasimhan.JordanHolderFiltration.filtration",
   "Nat.findGreatest",
   "HarderNarasimhan.JordanHolderFiltration",
   "Lean.Omega.tidy_sat",
   "Eq.symm",
   "Int.add_one_le_of_lt",
   "Bool.true",
   "instLTNat",
   "Lean.Omega.combo_sat'",
   "BoundedOrder",
   "Prod.snd",
   "Lean.Omega.LinearCombo.coordinate",
   "Prod",
   "BoundedOrder.toOrderBot",
   "instOfNat",
   "Eq.refl",
   "Lattice",
   "Lean.Omega.Constraint.addEquality_sat",
   "Lean.Omega.Int.sub_congr",
   "Or.elim",
   "Nat.find",
   "Bool",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Option.some",
   "Nat.lt_or_gt_of_ne",
   "Prod.fst",
   "Lean.Omega.LinearCombo.mk",
   "Lean.Omega.LinearCombo.instSub",
   "instOfNatNat",
   "Lean.Omega.Int.ofNat_sub_dichotomy",
   "Int.instAdd",
   "Eq",
   "Preorder.toLE",
   "instNatCastInt",
   "Lean.Omega.Int.add_congr",
   "OfNat.ofNat",
   "Int",
   "HAdd.hAdd",
   "CompletelyDistribLattice.toCompleteLattice",
   "Lean.Omega.LinearCombo.coordinate_eval_1",
   "Option.none",
   "Lean.Omega.Int.ofNat_lt_of_lt",
   "instHSub",
   "PartialOrder.toPreorder",
   "le_of_le_of_eq",
   "Lean.Omega.LinearCombo.coordinate_eval_3",
   "Preorder.toLT",
   "Lean.Omega.LinearCombo.coordinate_eval_4",
   "GT.gt",
   "Lean.Omega.Int.ofNat_le_of_le",
   "HSub.hSub",
   "Int.instLEInt",
   "Lean.Omega.LinearCombo.add_eval",
   "CompleteLinearOrder",
   "List.cons",
   "And.left",
   "SemilatticeInf.toPartialOrder",
   "Neg.neg",
   "And.right",
   "And",
   "Lean.Omega.Constraint.addInequality_sat",
   "Bot.bot",
   "Int.instNegInt",
   "instDecidableEqBool",
   "Nat",
   "Nontrivial",
   "Nat.lt_of_not_le",
   "id",
   "Lean.Omega.LinearCombo.instAdd",
   "Nat.cast",
   "Subtype",
   "Lean.Omega.Constraint.combine_sat'",
   "Int.sub_eq_zero_of_eq",
   "Decidable.decide",
   "Lean.Omega.Coeffs.ofList",
   "OrderBot.toBot",
   "Lean.Omega.Constraint.not_sat'_of_isImpossible",
   "of_decide_eq_true",
   "Not",
   "List.nil",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "Lean.Omega.LinearCombo",
   "Lean.Omega.Constraint.isImpossible",
   "Int.ofNat_nonneg",
   "Int.sub_nonneg_of_le",
   "LT.lt",
   "Lean.Omega.LinearCombo.sub_eval",
   "instSubNat",
   "LE.le",
   "Int.natCast_add",
   "False",
   "Lean.Omega.Constraint.mk",
   "Lean.Omega.LinearCombo.eval",
   "HarderNarasimhan.JordanHolderFiltration.fin_len",
   "instLENat"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._proof_1_29",
  "constType":
  "∀ (n : ℕ) (ℒ : Type u_1) (ntl : Nontrivial ℒ) (l : Lattice ℒ) (bo : BoundedOrder ℒ) (S : Type u_2)\n  (clo : CompleteLinearOrder S) (μ : { p // p.1 < p.2 } → S) (JHy JHx : HarderNarasimhan.JordanHolderFiltration μ),\n  Nat.findGreatest (fun n ↦ JHx.filtration (Nat.find ⋯ - 1) ≤ JHy.filtration n) (Nat.find ⋯ - 1) ≤ Nat.find ⋯ - 1 →\n    ¬Nat.findGreatest (fun n ↦ JHx.filtration (Nat.find ⋯ - 1) ≤ JHy.filtration n) (Nat.find ⋯ - 1) + 1 ≤\n          Nat.find ⋯ - 1 →\n      Nat.findGreatest (fun n ↦ JHx.filtration (Nat.find ⋯ - 1) ≤ JHy.filtration n) (Nat.find ⋯ - 1) + 1 ≤ Nat.find ⋯ →\n        ¬Nat.findGreatest (fun n ↦ JHx.filtration (Nat.find ⋯ - 1) ≤ JHy.filtration n) (Nat.find ⋯ - 1) + 1 =\n              Nat.find ⋯ →\n          False",
  "constCategory": "Theorem"},
 {"references": ["Max"],
  "name": "Max.mk",
  "constType": "{α : Type u} → (α → α → α) → Max α",
  "constCategory": "Other"},
 {"references":
  ["LT.lt",
   "Not",
   "instLTNat",
   "Nat",
   "Nat.lt_or_ge",
   "LE.le",
   "Or.resolve_right",
   "GT.gt",
   "GE.ge",
   "instLENat"],
  "name": "Nat.gt_of_not_le",
  "constType": "∀ {n m : ℕ}, ¬n ≤ m → n > m",
  "constCategory": "Theorem"},
 {"references":
  ["Not", "False.elim", "Decidable", "Decidable.byCases", "id", "False"],
  "name": "Decidable.byContradiction",
  "constType": "∀ {p : Prop} [dec : Decidable p], (¬p → False) → p",
  "constCategory": "Theorem"},
 {"references":
  ["instLTNat",
   "HEq.refl",
   "Fin",
   "Eq.casesOn",
   "LT.lt",
   "Eq.propIntro",
   "Nat",
   "Eq.refl",
   "Fin.mk",
   "Fin.mk.noConfusion",
   "HEq",
   "Eq.symm",
   "Eq",
   "Eq.ndrec"],
  "name": "Fin.mk.injEq",
  "constType":
  "∀ {n : ℕ} (val : ℕ) (isLt : val < n) (val_1 : ℕ) (isLt_1 : val_1 < n), (⟨val, isLt⟩ = ⟨val_1, isLt_1⟩) = (val = val_1)",
  "constCategory": "Theorem"},
 {"references":
  ["Ring.toAddGroupWithOne",
   "AddGroupWithOne.toAddMonoidWithOne",
   "inferInstance",
   "AddMonoidWithOne",
   "Ring"],
  "name": "Mathlib.Meta.NormNum.instAddMonoidWithOne",
  "constType": "{α : Type u} → [Ring α] → AddMonoidWithOne α",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Nat.lt_add_one",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.mk._flat_ctor",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              (filtration : ℕ → ℒ) →\n                Monotone filtration →\n                  filtration 0 = ⊥ →\n                    (fin_len : ∃ n, filtration n = ⊤) →\n                      (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                        (∀ (i : ℕ) (h : i < Nat.find fin_len),\n                            HarderNarasimhan.Semistable\n                              (HarderNarasimhan.Resμ ⟨(filtration i, filtration (i + 1)), ⋯⟩ μ)) →\n                          (∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len),\n                              ¬HarderNarasimhan.μA μ ⟨(filtration i, filtration (i + 1)), ⋯⟩ ≤\n                                  HarderNarasimhan.μA μ ⟨(filtration (i + 1), filtration (i + 2)), ⋯⟩) →\n                            HarderNarasimhan.HarderNarasimhanFiltration μ",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "gt_iff_lt", "Eq", "GT.gt", "LT", "propext"],
  "name": "HarderNarasimhan.impl.theorem3d10._simp_1_11",
  "constType": "∀ {α : Type u_1} [inst : LT α] {x y : α}, (x > y) = (y < x)",
  "constCategory": "Theorem"},
 {"references":
  ["SetLike.instMembership",
   "Subtype",
   "ZeroMemClass.zero_mem",
   "Zero.mk",
   "Membership.mem",
   "Zero.toOfNat0",
   "SetLike",
   "Subtype.mk",
   "Zero",
   "OfNat.ofNat",
   "ZeroMemClass"],
  "name": "ZeroMemClass.zero",
  "constType":
  "{A : Type u_3} →\n  {M₁ : Type u_4} → [inst : SetLike A M₁] → [inst_1 : Zero M₁] → [hA : ZeroMemClass A M₁] → (S' : A) → Zero ↥S'",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.S₀_order",
   "Finset",
   "Eq.trans",
   "Singleton.singleton",
   "Submodule.Quotient.module",
   "Membership.mem.out",
   "Subtype.val",
   "Finset.min'",
   "Eq.symm",
   "Exists",
   "Submodule.addCommGroup",
   "Prod.snd",
   "Set.instMembership",
   "HarderNarasimhan.impl.prop3d12p2._simp_1_3",
   "Prod",
   "HarderNarasimhan.InIntvl",
   "Iff",
   "Finset.instMembership",
   "AddCommGroup.toAddCommMonoid",
   "Eq.mpr",
   "Submodule.hasQuotient",
   "HasQuotient.Quotient",
   "HarderNarasimhan._μ._proof_1",
   "Module",
   "OmegaCompletePartialOrder.toPartialOrder",
   "HarderNarasimhan.impl.μ_nonempty",
   "Prod.fst",
   "HarderNarasimhan._μ",
   "Eq",
   "Preorder.toLE",
   "propext",
   "Set.mem_toFinset",
   "LinearExtension",
   "Set",
   "Finset.val",
   "Set.toFinset",
   "AddCommGroup",
   "PrimeSpectrum",
   "CommRing.toRing",
   "HarderNarasimhan.ℒ",
   "HarderNarasimhan.instPartialOrderS₀",
   "Submodule.completeLattice",
   "Ne",
   "HarderNarasimhan.S₀",
   "HarderNarasimhan.impl.prop3d12p2._simp_1_1",
   "HarderNarasimhan.impl.prop3d12p1",
   "Module.Finite",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.instLES₀",
   "Prod.mk",
   "instLinearOrderLinearExtensionOfPartialOrder",
   "Membership.mem",
   "Iff.mp",
   "Preorder.toLT",
   "Finset.toSet",
   "Finset.coe_singleton",
   "HarderNarasimhan.instFintypeElemLinearExtensionPrimeSpectrum_μ",
   "PrimeSpectrum.instPartialOrder",
   "SemilatticeInf.toPartialOrder",
   "And.left",
   "SetLike.instMembership",
   "And.right",
   "PrimeSpectrum.mk",
   "Exists.casesOn",
   "Finset.instSingleton",
   "HasSubset.Subset",
   "Nontrivial",
   "id",
   "Submodule.submoduleOf",
   "Multiset.instMembership",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "associatedPrimes",
   "Subtype",
   "Eq.mp",
   "Submodule.module",
   "le_trans",
   "lt_of_le_of_ne",
   "congrArg",
   "Submodule",
   "instDistribLatticeOfLinearOrder",
   "Submodule.Quotient.addCommGroup",
   "Ideal",
   "HarderNarasimhan.impl.prop3d12p2._simp_1_2",
   "PrimeSpectrum.asIdeal",
   "Finset.min'_mem",
   "CommRing.toCommSemiring",
   "Lattice.toSemilatticeInf",
   "CommSemiring.toSemiring",
   "Finset.instHasSubset",
   "CommRing",
   "Set.instSingletonSet",
   "Multiset",
   "LT.lt",
   "Set.instHasSubset",
   "IsNoetherianRing",
   "DistribLattice.toLattice",
   "Submodule.setLike",
   "LE.le",
   "Subtype.mk",
   "Submodule.addCommMonoid"],
  "name": "HarderNarasimhan.impl.prop3d12p2",
  "constType":
  "∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsNoetherianRing R] {M : Type u_2} [inst_2 : Nontrivial M]\n  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : Module.Finite R M] (I : { z // z.1 < z.2 })\n  (N'' : HarderNarasimhan.ℒ R M) (ha1 : HarderNarasimhan.InIntvl I N'') (ha2 : N'' ≠ (↑I).2),\n  {(HarderNarasimhan._μ R M I).toFinset.min' ⋯} ≤ (HarderNarasimhan._μ R M ⟨(N'', (↑I).2), ⋯⟩).toFinset",
  "constCategory": "Theorem"},
 {"references": ["exists_prop", "Exists", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.μmax_res_intvl._simp_1_1",
  "constType": "∀ {b a : Prop}, (∃ (_ : a), b) = (a ∧ b)",
  "constCategory": "Theorem"},
 {"references": ["ConditionallyCompleteLattice", "Lattice"],
  "name": "ConditionallyCompleteLattice.toLattice",
  "constType":
  "{α : Type u_5} → [self : ConditionallyCompleteLattice α] → Lattice α",
  "constCategory": "Definition"},
 {"references":
  ["True",
   "LE.le",
   "LE",
   "bot_le",
   "eq_true",
   "OrderBot.toBot",
   "Eq",
   "Bot.bot",
   "OrderBot"],
  "name":
  "HarderNarasimhan.impl.induction_on_length_of_JordanHolderFiltration._simp_1_11",
  "constType":
  "∀ {α : Type u} [inst : LE α] [inst_1 : OrderBot α] {a : α}, (⊥ ≤ a) = True",
  "constCategory": "Theorem"},
 {"references":
  ["LinearMap.ker",
   "Subtype",
   "SetLike.instMembership",
   "LinearMap.instFunLike",
   "Module",
   "Submodule.module",
   "LinearMap.ker_eq_bot_of_injective",
   "Membership.mem",
   "Subtype.ext",
   "LinearMap",
   "Bot.bot",
   "Submodule.subtype",
   "Submodule",
   "LinearMap.semilinearMapClass",
   "AddCommMonoid",
   "Semiring.toNonAssocSemiring",
   "Submodule.setLike",
   "RingHom.id",
   "Submodule.instBot",
   "Eq",
   "Submodule.addCommMonoid",
   "Semiring"],
  "name": "Submodule.ker_subtype",
  "constType":
  "∀ {R : Type u_1} {M : Type u_5} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]\n  (p : Submodule R M), LinearMap.ker p.subtype = ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["IsScalarTower.left",
   "Module",
   "IsScalarTower",
   "Semiring.toMonoidWithZero",
   "AddCommGroup",
   "AddCommMonoid.toAddMonoid",
   "Monoid.toMulAction",
   "Ring.toSemiring",
   "MulAction.toSMul",
   "Module.toDistribMulAction",
   "MonoidWithZero.toMonoid",
   "AddCommGroup.toAddCommMonoid",
   "DistribMulAction.toMulAction",
   "Ring"],
  "name": "Submodule.Quotient.instSMul._proof_1",
  "constType":
  "∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M],\n  IsScalarTower R R M",
  "constCategory": "Theorem"},
 {"references": ["Not", "Iff", "Classical.propDecidable", "Decidable.not_not"],
  "name": "Classical.not_not",
  "constType": "∀ {a : Prop}, ¬¬a ↔ a",
  "constCategory": "Theorem"},
 {"references": ["Function.Embedding"],
  "name": "Function.Embedding.toFun",
  "constType": "{α : Sort u_1} → {β : Sort u_2} → (α ↪ β) → α → β",
  "constCategory": "Definition"},
 {"references":
  ["Int.cast_add",
   "Int.add",
   "Distrib.toAdd",
   "Mathlib.Meta.NormNum.isInt_add.match_1_1",
   "Ring.toNonAssocRing",
   "NonUnitalNonAssocSemiring.toDistrib",
   "Mathlib.Meta.NormNum.IsInt.mk",
   "instHAdd",
   "AddGroupWithOne.toAddMonoidWithOne",
   "AddMonoidWithOne.toAddMonoid",
   "Int.cast",
   "Int",
   "HAdd.hAdd",
   "NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring",
   "Ring.toAddGroupWithOne",
   "AddMonoid.toAddSemigroup",
   "Mathlib.Meta.NormNum.IsInt",
   "Int.instAdd",
   "Eq.symm",
   "AddGroupWithOne.toIntCast",
   "Eq",
   "NonAssocRing.toNonUnitalNonAssocRing",
   "AddSemigroup.toAdd",
   "Ring"],
  "name": "Mathlib.Meta.NormNum.isInt_add",
  "constType":
  "∀ {α : Type u_1} [inst : Ring α] {f : α → α → α} {a b : α} {a' b' c : ℤ},\n  f = HAdd.hAdd →\n    Mathlib.Meta.NormNum.IsInt a a' →\n      Mathlib.Meta.NormNum.IsInt b b' → a'.add b' = c → Mathlib.Meta.NormNum.IsInt (f a b) c",
  "constCategory": "Theorem"},
 {"references": ["IsTotal", "Or"],
  "name": "IsTotal.mk",
  "constType":
  "∀ {α : Sort u_1} {r : α → α → Prop}, (∀ (a b : α), r a b ∨ r b a) → IsTotal α r",
  "constCategory": "Other"},
 {"references":
  ["HarderNarasimhan.μAstar",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "PartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Eq.refl",
   "Nontrivial",
   "Top.top",
   "Subtype.mk",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.μAstar.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.μAstar μ = HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["LT.lt",
   "Ordering.gt",
   "Decidable",
   "ite",
   "DecidableEq",
   "Ordering.eq",
   "Ordering.lt",
   "Eq",
   "Ordering",
   "LT"],
  "name": "compareOfLessAndEq",
  "constType":
  "{α : Type u_1} → (x y : α) → [inst : LT α] → [Decidable (x < y)] → [DecidableEq α] → Ordering",
  "constCategory": "Definition"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "HarderNarasimhan.impl.HNFil",
   "Prod.fst",
   "instOfNatNat",
   "HarderNarasimhan.impl.instConvexITotIntvl",
   "WellFoundedGT",
   "HarderNarasimhan.Convex",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "SemilatticeInf.toPartialOrder",
   "HarderNarasimhan.μA_DescendingChainCondition",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.μ_Admissible",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "OfNat.ofNat",
   "LT.lt",
   "Prod",
   "eq_self",
   "Nat",
   "BoundedOrder.toOrderBot",
   "of_eq_true",
   "Lattice",
   "Nontrivial",
   "CompleteLattice"],
  "name": "HarderNarasimhan.instInhabitedHarderNarasimhanFiltration._proof_2",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [inst_3 : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_4 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}\n  [hμ : HarderNarasimhan.μA_DescendingChainCondition μ] [hμcvx : HarderNarasimhan.Convex μ]\n  [h : HarderNarasimhan.μ_Admissible μ], HarderNarasimhan.impl.HNFil μ 0 = ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["lt_trans",
   "HarderNarasimhan.SlopeLike",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "Or",
   "PartialOrder",
   "Eq",
   "Preorder.toLE",
   "And.left",
   "And.right",
   "And",
   "BoundedOrder",
   "HarderNarasimhan.impl.prop4d6",
   "Prod.snd",
   "LT.lt",
   "Prod",
   "Iff",
   "Nontrivial",
   "Subtype.mk",
   "CompleteLattice"],
  "name": "HarderNarasimhan.seesaw",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  HarderNarasimhan.SlopeLike μ ↔\n    ∀ (x y z : ℒ) (h : x < y ∧ y < z),\n      μ ⟨(x, y), ⋯⟩ < μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ < μ ⟨(y, z), ⋯⟩ ∨\n        μ ⟨(x, y), ⋯⟩ > μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ > μ ⟨(y, z), ⋯⟩ ∨\n          μ ⟨(x, y), ⋯⟩ = μ ⟨(x, z), ⋯⟩ ∧ μ ⟨(x, z), ⋯⟩ = μ ⟨(y, z), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "HarderNarasimhan.impl.prop4d20",
   "HarderNarasimhan.Resμ",
   "Prod.fst",
   "HarderNarasimhan.NashEquilibrium",
   "HarderNarasimhan.WeakSlopeLike₁",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "HarderNarasimhan.WeakAscendingChainCondition",
   "BoundedOrder",
   "HarderNarasimhan.instBoundedOrderInterval",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "HarderNarasimhan.instNontrivialInterval",
   "BoundedOrder.toOrderBot",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "HarderNarasimhan.instPartialOrderInterval",
   "Ne",
   "Subtype.mk",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.proposition_4_20",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] (μ : { p // p.1 < p.2 } → S),\n  (∀ (x : ℒ) (hx : x ≠ ⊥), HarderNarasimhan.WeakAscendingChainCondition (HarderNarasimhan.Resμ ⟨(⊥, x), ⋯⟩ μ)) →\n    (∀ (x : ℒ) (hx : x ≠ ⊥), HarderNarasimhan.WeakSlopeLike₁ (HarderNarasimhan.Resμ ⟨(⊥, x), ⋯⟩ μ)) →\n      HarderNarasimhan.NashEquilibrium μ → HarderNarasimhan.Semistable μ",
  "constCategory": "Theorem"},
 {"references": ["Not", "IsIrrefl", "IsIrrefl.irrefl"],
  "name": "irrefl",
  "constType":
  "∀ {α : Sort u_1} {r : α → α → Prop} [IsIrrefl α r] (a : α), ¬r a a",
  "constCategory": "Theorem"},
 {"references":
  ["Lean.mkAtom",
   "Lean.Name.mkStr4",
   "Lean.Syntax.node",
   "Lean.Name.mkStr1",
   "Array.push",
   "Lean.Syntax",
   "Array.empty",
   "Lean.SourceInfo.none"],
  "name": "Preorder.lt_iff_le_not_ge._autoParam",
  "constType": "Syntax",
  "constCategory": "Definition"},
 {"references":
  ["WellFounded",
   "Not",
   "Set.Nonempty",
   "Exists",
   "Set",
   "WellFounded.has_min",
   "Membership.mem",
   "And",
   "Exists.intro",
   "Iff.intro",
   "Set.instMembership",
   "Exists.casesOn",
   "Acc",
   "WellFounded.intro",
   "Iff",
   "Classical.byContradiction",
   "Acc.intro",
   "False",
   "And.casesOn",
   "setOf"],
  "name": "WellFounded.wellFounded_iff_has_min",
  "constType":
  "∀ {α : Type u_1} {r : α → α → Prop}, WellFounded r ↔ ∀ (s : Set α), s.Nonempty → ∃ m ∈ s, ∀ x ∈ s, ¬r x m",
  "constCategory": "Theorem"},
 {"references":
  ["Lattice.toSemilatticeSup",
   "Subtype",
   "PartialOrder.toPreorder",
   "HarderNarasimhan.FiniteTotalPayoff",
   "Prod.mk",
   "Preorder.toLT",
   "SemilatticeSup.toPartialOrder",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "CompleteLattice.toLattice",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toBoundedOrder",
   "OrderTop.toTop",
   "CompleteLattice",
   "bot_lt_top"],
  "name": "HarderNarasimhan.FiniteTotalPayoff.mk",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] {S : Type u_2}\n  [inst_3 : CompleteLattice S] {μ : { p // p.1 < p.2 } → S}, μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤ → HarderNarasimhan.FiniteTotalPayoff μ",
  "constCategory": "Other"},
 {"references":
  ["AddCancelCommMonoid.toAddLeftCancelMonoid",
   "AddCancelCommMonoid",
   "AddCancelMonoid",
   "AddCommMonoid.toAddCommSemigroup",
   "IsRightCancelAdd",
   "AddCancelMonoid.mk",
   "AddCommSemigroup.toAddCommMagma",
   "AddCommMagma.toAdd",
   "AddCancelCommMonoid.toAddCancelMonoid._proof_1",
   "AddCancelCommMonoid.toAddCommMonoid"],
  "name": "AddCancelCommMonoid.toAddCancelMonoid",
  "constType": "(M : Type u) → [AddCancelCommMonoid M] → AddCancelMonoid M",
  "constCategory": "Definition"},
 {"references":
  ["MulOneClass.toMulOne",
   "Ideal.one_notMem",
   "Ideal.IsPrime",
   "Set",
   "NonAssocSemiring.toNonUnitalNonAssocSemiring",
   "NonUnitalNonAssocSemiring.toAddCommMonoid",
   "Ideal.primeCompl._proof_1",
   "MulZeroOneClass.toMulOneClass",
   "Subsemigroup.mk",
   "Submonoid",
   "Set.instHasCompl",
   "Submonoid.mk",
   "MulOne.toMul",
   "SetLike.coe",
   "Semiring.toNonAssocSemiring",
   "Ideal",
   "Submodule.setLike",
   "HasCompl.compl",
   "Semiring.toModule",
   "NonAssocSemiring.toMulZeroOneClass",
   "Semiring"],
  "name": "Ideal.primeCompl",
  "constType":
  "{α : Type u} → [inst : Semiring α] → (P : Ideal α) → [hp : P.IsPrime] → Submonoid α",
  "constCategory": "Definition"},
 {"references":
  ["Finset",
   "PartialOrder.toPreorder",
   "Eq.trans",
   "Finset.coe_inf'",
   "Membership.mem",
   "WithTop",
   "WithTop.some",
   "congrArg",
   "Finset.inf",
   "instDistribLatticeOfLinearOrder",
   "WithTop.orderTop",
   "Finset.min'",
   "Eq",
   "Preorder.toLE",
   "Eq.rec",
   "Finset.Nonempty",
   "SemilatticeInf.toPartialOrder",
   "Lattice.toSemilatticeInf",
   "True",
   "LinearOrder",
   "Function.comp",
   "eq_self",
   "DistribLattice.toLattice",
   "of_eq_true",
   "WithTop.semilatticeInf",
   "Eq.refl",
   "Finset.instMembership",
   "id",
   "Finset.inf'_congr",
   "Finset.mem_of_min",
   "Finset.inf'"],
  "name": "Finset.min'_mem",
  "constType":
  "∀ {α : Type u_2} [inst : LinearOrder α] (s : Finset α) (H : s.Nonempty), s.min' H ∈ s",
  "constCategory": "Theorem"},
 {"references":
  ["Iff.trans",
   "ne_comm",
   "PartialOrder.toPreorder",
   "Preorder.toLT",
   "LE.le.lt_iff_ne",
   "bot_le",
   "Bot.bot",
   "LT.lt",
   "Iff",
   "PartialOrder",
   "Ne",
   "OrderBot.toBot",
   "Preorder.toLE",
   "OrderBot"],
  "name": "bot_lt_iff_ne_bot",
  "constType":
  "∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderBot α] {a : α}, ⊥ < a ↔ a ≠ ⊥",
  "constCategory": "Theorem"},
 {"references": [],
  "name": "True",
  "constType": "Prop",
  "constCategory": "Other"},
 {"references":
  ["PartialOrder.toPreorder",
   "Lattice.toSemilatticeInf",
   "Subtype",
   "Preorder.toLT",
   "BoundedOrder",
   "Prod.snd",
   "Prod.fst",
   "Prod",
   "LT.lt",
   "Nontrivial",
   "Lattice",
   "WellFoundedGT",
   "Preorder.toLE",
   "CompleteLattice",
   "SemilatticeInf.toPartialOrder"],
  "name": "HarderNarasimhan.μ_Admissible",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : Lattice ℒ] →\n      [BoundedOrder ℒ] → [WellFoundedGT ℒ] → {S : Type u_2} → [CompleteLattice S] → ({ p // p.1 < p.2 } → S) → Prop",
  "constCategory": "Other"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Subtype.instLE",
   "AddCommGroup.toAddGroup",
   "Preorder.toLT",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "SMulZeroClass.toSMul",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion",
   "GT.gt",
   "instZeroNNReal",
   "NNReal.instLinearOrder",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toLinearOrder",
   "PartialOrder",
   "AddGroup.toSubNegMonoid",
   "CoheytingAlgebra.toOrderTop",
   "DistribSMul.toSMulZeroClass",
   "SemilatticeInf.toPartialOrder",
   "Real",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "ClosureOperator.IsClosed",
   "NNReal",
   "DistribMulAction.toDistribSMul",
   "OrderTheory.coe'",
   "BoundedOrder",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Prod",
   "LinearOrder.toDecidableLT",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Eq.refl",
   "Nontrivial",
   "HSMul.hSMul",
   "Top.top",
   "NNReal.instInv",
   "AddCommGroup.toAddCommMonoid",
   "CompleteDistribLattice.toCoframe",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "GeneralizedCoheytingAlgebra.toLattice",
   "Subtype",
   "RelEmbedding.toEmbedding",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "SemilatticeSup.toPartialOrder",
   "Function.Embedding.toFun",
   "instSemiringNNReal",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "instDistribLatticeOfLinearOrder",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "Eq",
   "Preorder.toLE",
   "Set.instLE",
   "Not",
   "Inv.inv",
   "Lattice.toSemilatticeInf",
   "Set",
   "Semiring.toMonoidWithZero",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toAddCommGroup",
   "Real.semiring",
   "NNReal.instDistribMulActionOfReal",
   "OfNat.ofNat",
   "HarderNarasimhan.μQuotient",
   "LT.lt",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toModule",
   "Module.toDistribMulAction",
   "DistribLattice.toLattice",
   "SubNegMonoid.toAddMonoid",
   "LE.le",
   "dite",
   "OrderTop.toTop",
   "instPartialOrderNNReal",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "HarderNarasimhan.μQuotient.eq_1",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : PartialOrder ℒ] [inst_2 : BoundedOrder ℒ] {V : Type u_2}\n  [inst_3 : HarderNarasimhan.TotallyOrderedRealVectorSpace V] (r : { p // p.1 < p.2 } → NNReal)\n  (d : { p // p.1 < p.2 } → V) (z : { p // p.1 < p.2 }),\n  HarderNarasimhan.μQuotient r d z = if x : r z > 0 then OrderTheory.coe'.toFun ((r z)⁻¹ • d z) else ⊤",
  "constCategory": "Theorem"},
 {"references":
  ["instAddNat",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Preorder.toLT",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Nat.instAddCommMonoid",
   "Monotone",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.HarderNarasimhanFiltration.mk",
   "SemilatticeInf.toPartialOrder",
   "instLTNat",
   "Exists",
   "Nat.instPartialOrder",
   "Nat.instStarRing",
   "HarderNarasimhan.instLatticeInterval",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Nat.lt_add_one",
   "HarderNarasimhan.HarderNarasimhanFiltration",
   "Prod",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "HarderNarasimhan.Semistable",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "Nat.find",
   "Subtype",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Nat.instAddCancelCommMonoid",
   "HarderNarasimhan.Resμ",
   "Nat.instPreorder",
   "Prod.fst",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "Nat.instOne",
   "Nat.instSemiring",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "HarderNarasimhan.Interval",
   "OrderBot.toBot",
   "Eq",
   "Preorder.toLE",
   "Not",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "HarderNarasimhan.instBoundedOrderInterval",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "HAdd.hAdd",
   "HarderNarasimhan.instNontrivialInterval",
   "lt_add_one",
   "le_of_lt",
   "HarderNarasimhan.μA",
   "LE.le",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "instLENat",
   "CompleteLattice"],
  "name": "HarderNarasimhan.HarderNarasimhanFiltration.rec",
  "constType":
  "{ℒ : Type u_1} →\n  [inst : Nontrivial ℒ] →\n    [inst_1 : Lattice ℒ] →\n      [inst_2 : BoundedOrder ℒ] →\n        {S : Type u_2} →\n          [inst_3 : CompleteLattice S] →\n            {μ : { p // p.1 < p.2 } → S} →\n              {motive : HarderNarasimhan.HarderNarasimhanFiltration μ → Sort u} →\n                ((filtration : ℕ → ℒ) →\n                    (monotone : Monotone filtration) →\n                      (first_eq_bot : filtration 0 = ⊥) →\n                        (fin_len : ∃ n, filtration n = ⊤) →\n                          (strict_mono : ∀ (i j : ℕ), i < j → j ≤ Nat.find fin_len → filtration i < filtration j) →\n                            (piecewise_semistable :\n                                ∀ (i : ℕ) (h : i < Nat.find fin_len),\n                                  HarderNarasimhan.Semistable\n                                    (HarderNarasimhan.Resμ ⟨(filtration i, filtration (i + 1)), ⋯⟩ μ)) →\n                              (μA_pseudo_strict_anti :\n                                  ∀ (i : ℕ) (hi : i + 1 < Nat.find fin_len),\n                                    ¬HarderNarasimhan.μA μ ⟨(filtration i, filtration (i + 1)), ⋯⟩ ≤\n                                        HarderNarasimhan.μA μ ⟨(filtration (i + 1), filtration (i + 2)), ⋯⟩) →\n                                motive\n                                  { filtration := filtration, monotone := monotone, first_eq_bot := first_eq_bot,\n                                    fin_len := fin_len, strict_mono := strict_mono,\n                                    piecewise_semistable := piecewise_semistable,\n                                    μA_pseudo_strict_anti := μA_pseudo_strict_anti }) →\n                  (t : HarderNarasimhan.HarderNarasimhanFiltration μ) → motive t",
  "constCategory": "Other"},
 {"references": ["exists_prop", "Exists", "And", "Eq", "propext"],
  "name": "HarderNarasimhan.μB_res_intvl._simp_1_2",
  "constType": "∀ {b a : Prop}, (∃ (_ : a), b) = (a ∧ b)",
  "constCategory": "Theorem"},
 {"references":
  ["Subtype",
   "PartialOrder.toPreorder",
   "Prod.mk",
   "Preorder.toLT",
   "GT.gt",
   "Prod.fst",
   "BoundedOrder.toOrderTop",
   "CompleteSemilatticeInf.toPartialOrder",
   "OrderBot.toBot",
   "Preorder.toLE",
   "SemilatticeInf.toPartialOrder",
   "Not",
   "bot_lt_iff_ne_bot",
   "Lattice.toSemilatticeInf",
   "BoundedOrder",
   "Prod.snd",
   "Bot.bot",
   "LT.lt",
   "Prod",
   "BoundedOrder.toOrderBot",
   "HarderNarasimhan.μA",
   "Iff.mpr",
   "Lattice",
   "Nontrivial",
   "Top.top",
   "Ne",
   "Subtype.mk",
   "CompleteLattice.toCompleteSemilatticeInf",
   "OrderTop.toTop",
   "bot_lt_top",
   "CompleteLattice",
   "HarderNarasimhan.Semistable"],
  "name": "HarderNarasimhan.Semistable.semistable",
  "constType":
  "∀ {ℒ : Type u_1} {inst : Nontrivial ℒ} {inst_1 : Lattice ℒ} {inst_2 : BoundedOrder ℒ} {S : Type u_2}\n  {inst_3 : CompleteLattice S} {μ : { p // p.1 < p.2 } → S} [self : HarderNarasimhan.Semistable μ] (x : ℒ) (hx : x ≠ ⊥),\n  ¬HarderNarasimhan.μA μ ⟨(⊥, x), ⋯⟩ > HarderNarasimhan.μA μ ⟨(⊥, ⊤), ⋯⟩",
  "constCategory": "Theorem"},
 {"references":
  ["Module.toMulActionWithZero._proof_1",
   "Module",
   "Semiring.toMonoidWithZero",
   "AddCommMonoid.toAddMonoid",
   "AddZeroClass.toAddZero",
   "Module.zero_smul",
   "MulActionWithZero.mk",
   "AddCommMonoid",
   "Module.toDistribMulAction",
   "MulAction",
   "MulActionWithZero",
   "MonoidWithZero.toMonoid",
   "DistribMulAction.toMulAction",
   "inferInstance",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "Semiring"],
  "name": "Module.toMulActionWithZero",
  "constType":
  "{R : Type u_5} →\n  {M : Type u_6} → {x : Semiring R} → {x_1 : AddCommMonoid M} → [_root_.Module R M] → MulActionWithZero R M",
  "constCategory": "Definition"},
 {"references": ["Exists", "Classical.choose"],
  "name": "Exists.choose",
  "constType": "{α : Sort u_1} → {p : α → Prop} → (∃ a, p a) → α",
  "constCategory": "Definition"},
 {"references":
  ["HarderNarasimhan.TotallyOrderedRealVectorSpace",
   "Lattice.toSemilatticeSup",
   "PartialOrder.toPreorder",
   "Subtype.instLE",
   "AddCommGroup.toAddGroup",
   "Preorder.toLT",
   "CompleteBooleanAlgebra.toCompleteLattice",
   "SMulZeroClass.toSMul",
   "OrderTheory.instCompleteLinearOrderDedekindMacNeilleCompletion",
   "instZeroNNReal",
   "GT.gt",
   "NNReal.instLinearOrder",
   "OrderTheory.DedekindMacNeilleClosureOperator",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toLinearOrder",
   "PartialOrder",
   "AddGroup.toSubNegMonoid",
   "CoheytingAlgebra.toOrderTop",
   "DistribSMul.toSMulZeroClass",
   "SemilatticeInf.toPartialOrder",
   "Real",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "ClosureOperator.IsClosed",
   "NNReal",
   "DistribMulAction.toDistribSMul",
   "OrderTheory.coe'",
   "BoundedOrder",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Prod",
   "LinearOrder.toDecidableLT",
   "Set.instCompleteAtomicBooleanAlgebra",
   "Nontrivial",
   "HSMul.hSMul",
   "Top.top",
   "NNReal.instInv",
   "AddCommGroup.toAddCommMonoid",
   "CompleteDistribLattice.toCoframe",
   "AddZero.toZero",
   "AddMonoid.toAddZeroClass",
   "CompleteLattice.instOmegaCompletePartialOrder",
   "GeneralizedCoheytingAlgebra.toLattice",
   "Subtype",
   "RelEmbedding.toEmbedding",
   "CompleteAtomicBooleanAlgebra.toCompleteBooleanAlgebra",
   "OmegaCompletePartialOrder.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "SemilatticeSup.toPartialOrder",
   "Function.Embedding.toFun",
   "instSemiringNNReal",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Prod.fst",
   "instDistribLatticeOfLinearOrder",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "MonoidWithZero.toMonoid",
   "instHSMul",
   "Zero.toOfNat0",
   "Preorder.toLE",
   "Set.instLE",
   "Not",
   "Inv.inv",
   "Lattice.toSemilatticeInf",
   "Set",
   "Semiring.toMonoidWithZero",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toAddCommGroup",
   "Real.semiring",
   "NNReal.instDistribMulActionOfReal",
   "OfNat.ofNat",
   "LT.lt",
   "HarderNarasimhan.TotallyOrderedRealVectorSpace.toModule",
   "Module.toDistribMulAction",
   "DistribLattice.toLattice",
   "SubNegMonoid.toAddMonoid",
   "LE.le",
   "dite",
   "OrderTop.toTop",
   "instPartialOrderNNReal",
   "OrderTheory.DedekindMacNeilleCompletion"],
  "name": "HarderNarasimhan.μQuotient",
  "constType":
  "{ℒ : Type u_1} →\n  [Nontrivial ℒ] →\n    [inst : PartialOrder ℒ] →\n      [BoundedOrder ℒ] →\n        {V : Type u_2} →\n          [inst_2 : HarderNarasimhan.TotallyOrderedRealVectorSpace V] →\n            ({ p // p.1 < p.2 } → NNReal) →\n              ({ p // p.1 < p.2 } → V) → { p // p.1 < p.2 } → OrderTheory.DedekindMacNeilleCompletion V",
  "constCategory": "Definition"},
 {"references": ["Or.rec", "Or.inr", "Or.inl", "Or"],
  "name": "Or.casesOn",
  "constType":
  "∀ {a b : Prop} {motive : a ∨ b → Prop} (t : a ∨ b), (∀ (h : a), motive ⋯) → (∀ (h : b), motive ⋯) → motive t",
  "constCategory": "Definition"},
 {"references": ["LT.lt", "Preorder", "Preorder.toLT"],
  "name": "StrictAnti",
  "constType":
  "{α : Type u} → {β : Type v} → [Preorder α] → [Preorder β] → (α → β) → Prop",
  "constCategory": "Definition"},
 {"references": ["Lattice", "DistribLattice"],
  "name": "DistribLattice.toLattice",
  "constType": "{α : Type u_1} → [self : DistribLattice α] → Lattice α",
  "constCategory": "Definition"},
 {"references":
  ["DivInvMonoid.toInv",
   "DivInvOneMonoid.toDivInvMonoid",
   "InvOneClass",
   "DivInvOneMonoid.inv_one",
   "DivInvMonoid.toMonoid",
   "Monoid.toOne",
   "DivInvOneMonoid",
   "InvOneClass.mk"],
  "name": "DivInvOneMonoid.toInvOneClass",
  "constType": "{G : Type u_2} → [self : DivInvOneMonoid G] → InvOneClass G",
  "constCategory": "Definition"},
 {"references":
  ["instAddNat",
   "Lattice.toSemilatticeSup",
   "HarderNarasimhan.SlopeLike",
   "Nat.instSuccAddOrder",
   "PartialOrder.toPreorder",
   "AddLeftCancelSemigroup.toIsLeftCancelAdd",
   "Prod.mk",
   "Classical.propDecidable",
   "instZeroLEOneClass",
   "Preorder.toLT",
   "Nat.instAddCommMonoid",
   "HarderNarasimhan.impl.JHFil_fin_len._simp_1_1",
   "AddLeftCancelMonoid.toAddLeftCancelSemigroup",
   "CompleteLinearOrder",
   "Eq.rec",
   "Nat.instIsOrderedAddMonoid",
   "HarderNarasimhan.impl.JHFil_prop₁",
   "strictAnti_of_add_one_lt",
   "SemilatticeInf.toPartialOrder",
   "CoheytingAlgebra.toOrderTop",
   "Exists",
   "Nat.instPartialOrder",
   "CoheytingAlgebra.toGeneralizedCoheytingAlgebra",
   "Nat.instStarRing",
   "BoundedOrder",
   "IsOrderedAddMonoid.toAddLeftMono",
   "Prod.snd",
   "AddZeroClass.toAddZero",
   "Bot.bot",
   "Exists.casesOn",
   "Prod",
   "Nat.instIsSuccArchimedean",
   "Decidable.byContradiction",
   "Nat",
   "BoundedOrder.toOrderBot",
   "Iff.mpr",
   "Nat.instStarOrderedRing",
   "Nontrivial",
   "Lattice",
   "Top.top",
   "CompleteDistribLattice.toCoframe",
   "AddMonoid.toAddZeroClass",
   "HarderNarasimhan.Semistable",
   "Ne.symm",
   "Subtype",
   "GeneralizedCoheytingAlgebra.toLattice",
   "Eq.mp",
   "SemilatticeSup.toPartialOrder",
   "Order.Coframe.toCoheytingAlgebra",
   "CompleteLinearOrder.toCompletelyDistribLattice",
   "Nat.instAddCancelCommMonoid",
   "Prod.fst",
   "Nat.instPreorder",
   "AddCancelCommMonoid.toAddLeftCancelMonoid",
   "Nat.instNeZeroSucc",
   "CompletelyDistribLattice.toCompleteDistribLattice",
   "Nat.instSemiring",
   "Nat.instOne",
   "instOfNatNat",
   "BoundedOrder.toOrderTop",
   "IsMax",
   "WellFoundedGT",
   "OrderBot.toBot",
   "Preorder.toLE",
   "Eq",
   "Not",
   "bot_lt_iff_ne_bot",
   "Nat.instAddMonoid",
   "Lattice.toSemilatticeInf",
   "instHAdd",
   "AddZero.toAdd",
   "OfNat.ofNat",
   "LT.lt",
   "CompletelyDistribLattice.toCompleteLattice",
   "HAdd.hAdd",
   "StrictAnti",
   "lt_add_one",
   "One.toOfNat1",
   "HarderNarasimhan.impl.JHFil_anti_mono",
   "HarderNarasimhan.impl.JHFil",
   "False",
   "Ne",
   "Subtype.mk",
   "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
   "OrderTop.toTop",
   "bot_lt_top"],
  "name": "HarderNarasimhan.impl.JHFil_fin_len",
  "constType":
  "∀ {ℒ : Type u_1} [inst : Nontrivial ℒ] [inst_1 : Lattice ℒ] [inst_2 : BoundedOrder ℒ] [hacc : WellFoundedGT ℒ]\n  {S : Type u_2} [inst_3 : CompleteLinearOrder S] (μ : { p // p.1 < p.2 } → S) (hμ : μ ⟨(⊥, ⊤), ⋯⟩ ≠ ⊤)\n  (hμsl : HarderNarasimhan.SlopeLike μ) (hst : HarderNarasimhan.Semistable μ)\n  (hdc : ∀ (x : ℕ → ℒ) (sax : StrictAnti x), ∃ N, μ ⟨(x (N + 1), x N), ⋯⟩ = ⊤),\n  ∃ N, HarderNarasimhan.impl.JHFil μ hμ hμsl hst hdc N = ⊥",
  "constCategory": "Theorem"},
 {"references":
  ["Int.instAddCommGroup",
   "SubNegMonoid.toAddMonoid",
   "AddCommGroup.toAddGroup",
   "inferInstance",
   "AddMonoid",
   "AddGroup.toSubNegMonoid",
   "Int"],
  "name": "Int.instAddMonoid",
  "constType": "AddMonoid ℤ",
  "constCategory": "Definition"}]