import Mathlib.SetTheory.Cardinal.Aleph
import Mathlib.Order.Closure


instance {Œ± : Type} [PartialOrder Œ±] (T : ClosureOperator (Set Œ±)): CompleteLattice (ClosureOperator.Closeds T) where
  top :=‚ü®Set.univ,ClosureOperator.isClosed_iff_closure_le.mpr fun ‚¶Éa‚¶Ñ a ‚Ü¶ trivial‚ü©
  le_top A := fun ‚¶Éa‚¶Ñ a ‚Ü¶ trivial
  bot := by
    use T ‚àÖ
    exact ClosureOperator.isClosed_closure T ‚àÖ
  bot_le A := by
    intro a ha
    simp at *
    rw [‚Üê ClosureOperator.IsClosed.closure_eq A.property]
    exact (T.monotone <| Set.empty_subset A.val) ha
  inf A B := by
    use A.val ‚à© B.val
    refine ClosureOperator.isClosed_iff_closure_le.mpr ?_
    intro x hx
    simp [*] at *
    rw [‚Üê ClosureOperator.IsClosed.closure_eq A.property,‚Üê ClosureOperator.IsClosed.closure_eq B.property]
    exact ‚ü®(T.monotone <| Set.inter_subset_left) hx,(T.monotone <| Set.inter_subset_right) hx‚ü©
  le_inf A B C h1 h2 := by
    exact fun a ha ‚Ü¶ ‚ü®h1 ha,h2 ha‚ü©
  inf_le_left A B := by
    intro a b
    exact b.1
  inf_le_right A B := by
    intro a b
    exact b.2
  sup A B := ‚ü®T (A.val ‚à™ B.val), ClosureOperator.isClosed_closure T (A.val ‚à™ B.val)‚ü©
  sup_le A B C h1 h2 := by
    intro a ha
    simp at *
    rw [‚Üê ClosureOperator.IsClosed.closure_eq C.property]
    exact (T.monotone <| Set.union_subset h1 h2) ha
  le_sup_left := by
    intro A B
    nth_rw 1 [Subtype.coe_eq_of_eq_mk (ClosureOperator.IsClosed.closure_eq A.property).symm]
    exact ClosureOperator.monotone T <| Set.subset_union_left
  le_sup_right := by
    intro A B
    nth_rw 1 [Subtype.coe_eq_of_eq_mk (ClosureOperator.IsClosed.closure_eq B.property).symm]
    exact ClosureOperator.monotone T <| Set.subset_union_right
  sInf ùíÆ := by
    use ‚ãÇ a ‚àà ùíÆ, a.val
    refine ClosureOperator.isClosed_iff_closure_le.mpr ?_
    intro x hx
    simp at *
    intro S hS hSb
    rw [‚Üê ClosureOperator.IsClosed.closure_eq hS]
    have : ‚ãÇ a ‚àà ùíÆ, a.val ‚äÜ S := by
      intro x hx
      simp at hx
      exact hx S hS hSb
    exact T.monotone this hx
  le_sInf ùíÆ A hA := by
    intro x h
    simp at *
    intro S hS hSb
    exact hA S hS hSb h
  sInf_le ùíÆ A:= by
    intro hA x hx
    simp at *
    exact hx A.val A.prop hA
  sSup ùíÆ := ‚ü®T (‚ãÉ a ‚àà ùíÆ, a.val),ClosureOperator.isClosed_closure T (‚ãÉ a ‚àà ùíÆ, a.val)‚ü©
  le_sSup ùíÆ A hA:= by
    intro x hx
    simp at *
    rw [‚Üê ClosureOperator.IsClosed.closure_eq A.property] at hx
    exact ClosureOperator.monotone T (Set.subset_biUnion_of_mem hA) hx
  sSup_le ùíÆ A hA := by
    intro x hx
    simp
    rw [‚Üê ClosureOperator.IsClosed.closure_eq A.property]
    refine ClosureOperator.monotone T ?_ hx
    intro y hy
    simp at hy
    rcases hy with ‚ü®S, ‚ü®hS, hP‚ü©, hSb‚ü©
    exact hA ‚ü®S, hS‚ü© hP hSb


namespace DedekindMacNeille

lemma Conn (Œ± : Type) [PartialOrder Œ±] : GaloisConnection (fun A ‚Ü¶ (OrderDual.toDual (upperBounds A))) (fun A : (Set Œ±)·µí·µà ‚Ü¶ lowerBounds A.ofDual) := fun _ _ ‚Ü¶ ‚ü®fun h _ ha ‚¶É_‚¶Ñ a_3 ‚Ü¶ h a_3 ha, fun h _ ha ‚¶É_‚¶Ñ a_2 ‚Ü¶ h a_2 ha‚ü©

def Cl (Œ± : Type) [PartialOrder Œ±] : ClosureOperator (Set Œ±) := GaloisConnection.closureOperator <| Conn Œ±

abbrev DedekindMacNeilleCompletion (Œ± : Type) [PartialOrder Œ±] := (Cl Œ±).Closeds

instance {Œ± : Type} [PartialOrder Œ±] : CompleteLattice (DedekindMacNeilleCompletion Œ±) := inferInstance


def coe' {Œ± : Type} [PartialOrder Œ±] : Œ± ‚Ü™o DedekindMacNeilleCompletion Œ± := by
  have : Function.Injective fun x ‚Ü¶ (Cl Œ±).toCloseds {x} := by
    intro x y hxy
    simp at hxy
    apply Subtype.coe_inj.2 at hxy
    have : (Cl Œ±) {x} = (Cl Œ±) {y} := hxy
    unfold Cl at this
    simp at this
    have h : x ‚àà lowerBounds (Set.Ici y) := this ‚ñ∏ fun ‚¶Éa‚¶Ñ a ‚Ü¶ a
    have h' : y ‚àà lowerBounds (Set.Ici x) := this ‚ñ∏ (fun ‚¶Éa‚¶Ñ a ‚Ü¶ a)
    exact le_antisymm (h.out <| Set.mem_Ici.2 <| le_refl y) (h'.out <| Set.mem_Ici.2 <| le_refl x)
  use ‚ü®fun x ‚Ü¶ (Cl Œ±).toCloseds {x},this‚ü©
  intro a b
  simp
  constructor
  ¬∑ intro h
    have : a ‚àà lowerBounds (Set.Ici b) := by
      unfold ClosureOperator.toCloseds at h
      simp at h
      unfold Cl at h
      simp at h
      exact h
    exact this.out Set.left_mem_Ici
  ¬∑ intro h x hx
    have h' : x ‚àà (Cl Œ±) {a} := hx.out
    unfold Cl at h'
    simp at h'
    exact fun ‚¶É_‚¶Ñ a_1 ‚Ü¶ ((lowerBounds_mono_set <| Set.Ici_subset_Ici.mpr h) h') (a_1 rfl)

instance {Œ± : Type} [PartialOrder Œ±]: Coe Œ± (DedekindMacNeilleCompletion Œ±) := ‚ü®coe'.toFun‚ü©

theorem universal_property {Œ± : Type} [PartialOrder Œ±] (Œ≤ : Type) [CompleteLattice Œ≤] (f : Œ± ‚Ü™o Œ≤) : ‚àÉ f' : DedekindMacNeilleCompletion Œ± ‚Ü™o Œ≤, f = f' ‚àò coe' := by admit

--TODO: joint-dense, meet-dense

end DedekindMacNeille
