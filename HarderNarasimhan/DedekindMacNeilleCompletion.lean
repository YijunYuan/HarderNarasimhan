import Mathlib.SetTheory.Cardinal.Aleph
import Mathlib.Order.Closure


instance {Œ± : Type} [PartialOrder Œ±] (T : ClosureOperator (Set Œ±)): CompleteLattice (ClosureOperator.Closeds T) where
  top :=‚ü®Set.univ,ClosureOperator.isClosed_iff_closure_le.mpr fun ‚¶Éa‚¶Ñ a ‚Ü¶ trivial‚ü©
  le_top A := fun ‚¶Éa‚¶Ñ a ‚Ü¶ trivial
  bot := ‚ü®T ‚àÖ, ClosureOperator.isClosed_closure T ‚àÖ‚ü©
  bot_le A := by
    intro a ha
    simp at *
    exact (ClosureOperator.IsClosed.closure_eq A.property) ‚ñ∏ (T.monotone <| Set.empty_subset A.val) ha
  inf A B := ‚ü®A.val ‚à© B.val,ClosureOperator.isClosed_iff_closure_le.mpr fun x hx ‚Ü¶ (ClosureOperator.IsClosed.closure_eq A.property) ‚ñ∏ (ClosureOperator.IsClosed.closure_eq B.property) ‚ñ∏ ‚ü®(T.monotone <| Set.inter_subset_left) hx,(T.monotone <| Set.inter_subset_right) hx‚ü©‚ü©
  le_inf A B C h1 h2 := fun a ha ‚Ü¶ ‚ü®h1 ha,h2 ha‚ü©
  inf_le_left A B := fun ‚¶Éa‚¶Ñ b ‚Ü¶ b.1
  inf_le_right A B := fun ‚¶Éa‚¶Ñ b ‚Ü¶ b.right
  sup A B := ‚ü®T (A.val ‚à™ B.val), ClosureOperator.isClosed_closure T (A.val ‚à™ B.val)‚ü©
  sup_le A B C h1 h2 := by
    intro a ha
    simp at *
    exact (ClosureOperator.IsClosed.closure_eq C.property) ‚ñ∏ (T.monotone <| Set.union_subset h1 h2) ha
  le_sup_left := by
    intro A B
    nth_rw 1 [Subtype.coe_eq_of_eq_mk (ClosureOperator.IsClosed.closure_eq A.property).symm]
    exact ClosureOperator.monotone T <| Set.subset_union_left
  le_sup_right := by
    intro A B
    nth_rw 1 [Subtype.coe_eq_of_eq_mk (ClosureOperator.IsClosed.closure_eq B.property).symm]
    exact ClosureOperator.monotone T <| Set.subset_union_right
  sInf ùíÆ := by
    refine ‚ü®‚ãÇ a ‚àà ùíÆ, a.val,ClosureOperator.isClosed_iff_closure_le.mpr fun x hx ‚Ü¶ ?_‚ü©
    simp at *
    refine fun S hS hSb ‚Ü¶ (ClosureOperator.IsClosed.closure_eq hS) ‚ñ∏ T.monotone (fun x hx ‚Ü¶ ?_) hx
    simp at hx
    exact hx S hS hSb
  le_sInf ùíÆ A hA := by
    intro x h
    simp at *
    exact fun S hS hSb ‚Ü¶ hA S hS hSb h
  sInf_le ùíÆ A:= by
    intro hA x hx
    simp at *
    exact hx A.val A.prop hA
  sSup ùíÆ := ‚ü®T (‚ãÉ a ‚àà ùíÆ, a.val),ClosureOperator.isClosed_closure T (‚ãÉ a ‚àà ùíÆ, a.val)‚ü©
  le_sSup ùíÆ A hA:= fun x hx ‚Ü¶ ClosureOperator.monotone T (Set.subset_biUnion_of_mem hA) <| (ClosureOperator.IsClosed.closure_eq A.property).symm ‚ñ∏ hx
  sSup_le ùíÆ A hA := by
    intro x hx
    simp
    refine (ClosureOperator.IsClosed.closure_eq A.property) ‚ñ∏ ClosureOperator.monotone T (fun y hy ‚Ü¶ ?_) hx
    simp at hy
    exact Exists.casesOn hy fun S h ‚Ü¶ And.casesOn h fun left hSb ‚Ü¶ Exists.casesOn left fun hS hP ‚Ü¶ hA ‚ü®S, hS‚ü© hP hSb


section DedekindMacNeille
lemma DedekindMacNeilleConnection (Œ± : Type) [PartialOrder Œ±] : GaloisConnection (fun A ‚Ü¶ (OrderDual.toDual (upperBounds A))) (fun A : (Set Œ±)·µí·µà ‚Ü¶ lowerBounds A.ofDual) := fun _ _ ‚Ü¶ ‚ü®fun h _ ha ‚¶É_‚¶Ñ a_3 ‚Ü¶ h a_3 ha, fun h _ ha ‚¶É_‚¶Ñ a_2 ‚Ü¶ h a_2 ha‚ü©


def DedekindMacNeilleClosureOperator (Œ± : Type) [PartialOrder Œ±] : ClosureOperator (Set Œ±) := GaloisConnection.closureOperator <| DedekindMacNeilleConnection Œ±


abbrev DedekindMacNeilleCompletion (Œ± : Type) [PartialOrder Œ±] := (DedekindMacNeilleClosureOperator Œ±).Closeds


instance {Œ± : Type} [PartialOrder Œ±] : CompleteLattice (DedekindMacNeilleCompletion Œ±) := inferInstance


def coe' {Œ± : Type} [PartialOrder Œ±] : Œ± ‚Ü™o DedekindMacNeilleCompletion Œ± := by
  have inj: ‚àÄ x : Œ±, (DedekindMacNeilleClosureOperator Œ±).IsClosed (Set.Iic x) := fun x ‚Ü¶ Set.ext fun y ‚Ü¶ ‚ü®fun hy ‚Ü¶ hy (by simp [upperBounds]),fun hy x_1 ha ‚Ü¶ ha hy‚ü©
  have : Function.Injective fun x ‚Ü¶ (‚ü®Set.Iic x,inj x‚ü© : DedekindMacNeilleCompletion Œ±) := by
    intro a b hab
    simp at hab
    exact le_antisymm (hab ‚ñ∏ Set.right_mem_Iic).out (hab.symm ‚ñ∏ Set.right_mem_Iic).out
  use ‚ü®fun x ‚Ü¶ ‚ü®Set.Iic x, inj x‚ü©,this‚ü©
  simp


instance {Œ± : Type} [PartialOrder Œ±]: Coe Œ± (DedekindMacNeilleCompletion Œ±) := ‚ü®coe'.toFun‚ü©




theorem universal_property {Œ± : Type} [PartialOrder Œ±] (Œ≤ : Type) [CompleteLattice Œ≤] (f : Œ± ‚Ü™o Œ≤) : ‚àÉ f' : DedekindMacNeilleCompletion Œ± ‚Ü™o Œ≤, f = f' ‚àò coe' := by
  let g := fun x : DedekindMacNeilleCompletion Œ± ‚Ü¶ sSup <| lowerBounds <| upperBounds <| f '' x.val
  have : ‚àÄ (a b : DedekindMacNeilleCompletion Œ±), g a ‚â§ g b ‚Üî a ‚â§ b := by
    intro a b
    constructor
    ¬∑ intro h

      sorry
    ¬∑ intro h
      simp [g,upperBounds]
      exact fun y hy ‚Ü¶ hy.out fun w hw ‚Ü¶ le_sSup fun ‚¶Éa‚¶Ñ a ‚Ü¶ a w (h hw)
  refine ‚ü®‚ü®‚ü®g,?_‚ü©,?_‚ü©,?_‚ü©
  ¬∑ exact fun x y h ‚Ü¶ le_antisymm ((this x y).1 <| (le_antisymm_iff.1 h).1) ((this y x).1 <| (le_antisymm_iff.1 h).2)
  ¬∑ simp
    exact fun x hx y hy ‚Ü¶ this ‚ü®x, hx‚ü© ‚ü®y, hy‚ü©
  ¬∑ refine funext fun x ‚Ü¶ ?_
    simp [g,coe']
    apply le_antisymm
    ¬∑ exact le_sSup fun a ha ‚Ü¶ ha.out <| Set.mem_image_of_mem f Set.right_mem_Iic
    ¬∑ refine sSup_le fun _ hb ‚Ü¶ hb ?_
      simp [upperBounds]

--TODO: joint-dense, meet-dense
end DedekindMacNeille
