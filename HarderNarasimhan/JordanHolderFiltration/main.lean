import Mathlib.Order.CompleteLattice.Defs
import Mathlib.Order.BoundedOrder.Basic
import HarderNarasimhan.Semistability.Defs
import HarderNarasimhan.SlopeLike.Impl


open Classical


noncomputable def JHFil {‚Ñí : Type} [Nontrivial ‚Ñí] [Lattice ‚Ñí] [BoundedOrder ‚Ñí] [hacc: WellFoundedGT ‚Ñí]
{S : Type} [CompleteLinearOrder S]
(Œº : {p : ‚Ñí √ó ‚Ñí // p.1 < p.2} ‚Üí S)
(hŒº : Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü© ‚â† ‚ä§)
(hŒºsl : SlopeLike Œº) (hst : semistable Œº)
(hdc: ‚àÄ x : ‚Ñï ‚Üí ‚Ñí, (sax : StrictAnti x) ‚Üí ‚àÉ N : ‚Ñï, Œº ‚ü®(x (N +1), x N), sax <| by linarith‚ü© = ‚ä§) (k : ‚Ñï) : ‚Ñí :=
  match k with
  | 0 => ‚ä§
  | n + 1 =>
    let ùíÆ := {p : ‚Ñí | ‚àÉ h : ‚ä• < p, p < JHFil Œº hŒº hŒºsl hst hdc n ‚àß Œº ‚ü®(‚ä•,p),h‚ü© = Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü©}
    if hùíÆ : ùíÆ.Nonempty then
      (hacc.wf.has_min ùíÆ hùíÆ).choose
    else
      ‚ä•

lemma JHFil_anti_mono {‚Ñí : Type} [Nontrivial ‚Ñí] [Lattice ‚Ñí] [BoundedOrder ‚Ñí] [hacc: WellFoundedGT ‚Ñí]
{S : Type} [CompleteLinearOrder S]
(Œº : {p : ‚Ñí √ó ‚Ñí // p.1 < p.2} ‚Üí S)
(hŒº : Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü© ‚â† ‚ä§)
(hŒºsl : SlopeLike Œº) (hst : semistable Œº)
(hdc: ‚àÄ x : ‚Ñï ‚Üí ‚Ñí, (sax : StrictAnti x) ‚Üí ‚àÉ N : ‚Ñï, Œº ‚ü®(x (N +1), x N), sax <| by linarith‚ü© = ‚ä§) :
‚àÄ k : ‚Ñï, JHFil Œº hŒº hŒºsl hst hdc k > ‚ä• ‚Üí JHFil Œº hŒº hŒºsl hst hdc k > JHFil Œº hŒº hŒºsl hst hdc (k + 1) := by
  intro k hk
  simp only [JHFil]
  by_cases h : {p : ‚Ñí | ‚àÉ h : ‚ä• < p, p < JHFil Œº hŒº hŒºsl hst hdc k ‚àß Œº ‚ü®(‚ä•,p),h‚ü© = Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü©}.Nonempty
  ¬∑ simp only [h]
    exact (hacc.wf.has_min _ h).choose_spec.1.2.1
  ¬∑ simp only [h]
    exact hk

lemma fuck {Œ± : Type} {a b c : Œ±} (h‚ÇÅ: a = b) (h‚ÇÇ: c = b) : a = c := Eq.symm
  <| (congrArg (fun _a ‚Ü¶ c = _a) h‚ÇÅ.symm) ‚ñ∏ h‚ÇÇ


lemma JHFil_prop‚ÇÅ {‚Ñí : Type} [Nontrivial ‚Ñí] [Lattice ‚Ñí] [BoundedOrder ‚Ñí] [hacc: WellFoundedGT ‚Ñí]
{S : Type} [CompleteLinearOrder S]
(Œº : {p : ‚Ñí √ó ‚Ñí // p.1 < p.2} ‚Üí S)
(hŒº : Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü© ‚â† ‚ä§)
(hŒºsl : SlopeLike Œº) (hst : semistable Œº)
(hdc: ‚àÄ x : ‚Ñï ‚Üí ‚Ñí, (sax : StrictAnti x) ‚Üí ‚àÉ N : ‚Ñï, Œº ‚ü®(x (N +1), x N), sax <| by linarith‚ü© = ‚ä§) :
‚àÄ k : ‚Ñï,  (hk : JHFil Œº hŒº hŒºsl hst hdc k > ‚ä•) ‚Üí Œº ‚ü®(JHFil Œº hŒº hŒºsl hst hdc (k + 1),JHFil Œº hŒº hŒºsl hst hdc k),JHFil_anti_mono Œº hŒº hŒºsl hst hdc k hk‚ü© = Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü© := by
  intro k
  induction' k with k hk
  . intro hk'
    simp only [JHFil]
    by_cases this : {p : ‚Ñí | ‚àÉ h : ‚ä• < p, p < ‚ä§ ‚àß Œº ‚ü®(‚ä•,p),h‚ü© = Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü©}.Nonempty
    ¬∑ simp only [this]
      have this' := (hacc.wf.has_min _ this).choose_spec.1.2.2
      exact ((Or.resolve_left <| (Or.resolve_left <| (impl.prop4d6 Œº).1 hŒºsl ‚ä• (hacc.wf.has_min _ this).choose ‚ä§ ‚ü®(hacc.wf.has_min _ this).choose_spec.1.choose,(hacc.wf.has_min _ this).choose_spec.1.out.choose_spec.1‚ü©) (by aesop)) (by aesop)).2.symm
    ¬∑ simp only [this]
      simp
  ¬∑ intro hk'
    have jh_kp1_ntop : {p : ‚Ñí | ‚àÉ h : ‚ä• < p, p < JHFil Œº hŒº hŒºsl hst hdc k ‚àß Œº ‚ü®(‚ä•,p),h‚ü© = Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü©}.Nonempty := by
      by_contra!
      simp only [JHFil,this] at hk'
      simp [*] at hk'
    have jh_kp1_ntop' : JHFil Œº hŒº hŒºsl hst hdc k > ‚ä• := by
      refine lt_trans hk' ?_
      simp only [JHFil,jh_kp1_ntop]
      exact (hacc.wf.has_min _ jh_kp1_ntop).choose_spec.1.out.choose_spec.1
    have k_prop := hk jh_kp1_ntop'
    have bot_jh_kp1_eq_ans := (hacc.wf.has_min _ jh_kp1_ntop).choose_spec.1.2.2
    by_cases jh_kp2_ntop : {p : ‚Ñí | ‚àÉ h : ‚ä• < p, p < JHFil Œº hŒº hŒºsl hst hdc (k + 1) ‚àß Œº ‚ü®(‚ä•,p),h‚ü© = Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü©}.Nonempty
    ¬∑ have stupid : Œº ‚ü®(‚ä•, (hacc.wf.has_min _ jh_kp2_ntop).choose), (hacc.wf.has_min _ jh_kp2_ntop).choose_spec.1.out.1‚ü© = Œº ‚ü®(‚ä•, JHFil Œº hŒº hŒºsl hst hdc (k + 1)), hk'‚ü© := by
        rw [(hacc.wf.has_min _ jh_kp2_ntop).choose_spec.1.out.choose_spec.2,‚Üê bot_jh_kp1_eq_ans]
        simp only [JHFil,jh_kp1_ntop ]
        simp
      have hfinal : Œº ‚ü®(‚ä•, JHFil Œº hŒº hŒºsl hst hdc (k + 1)), hk'‚ü© = Œº ‚ü®((hacc.wf.has_min _ jh_kp2_ntop).choose, JHFil Œº hŒº hŒºsl hst hdc (k + 1)), (hacc.wf.has_min _ jh_kp2_ntop).choose_spec.1.out.choose_spec.1‚ü© := by
        refine (Or.resolve_left ((Or.resolve_left <| (impl.prop4d6 Œº).1 hŒºsl ‚ä• (hacc.wf.has_min _ jh_kp2_ntop).choose (JHFil Œº hŒº hŒºsl hst hdc (k + 1)) ‚ü®(hacc.wf.has_min _ jh_kp2_ntop).choose_spec.1.out.choose,(hacc.wf.has_min _ jh_kp2_ntop).choose_spec.1.out.choose_spec.1‚ü©) (?_)) (?_)).2
        ¬∑ apply not_and_iff_not_or_not.2
          refine Or.inl ?_
          simp only [stupid]
          simp only [JHFil,jh_kp1_ntop]
          simp
        ¬∑ apply not_and_iff_not_or_not.2
          refine Or.inl ?_
          simp only [stupid]
          simp only [JHFil,jh_kp1_ntop]
          simp
      conv_lhs =>
        arg 1
        arg 1
        arg 1
        unfold JHFil
        simp only [jh_kp2_ntop]
        simp
      simp at hfinal
      rw [‚Üê hfinal]
      simp only [JHFil,jh_kp1_ntop]
      simp
      simp at bot_jh_kp1_eq_ans
      exact bot_jh_kp1_eq_ans
    ¬∑ conv_lhs =>
        arg 1
        arg 1
        arg 1
        unfold JHFil
        simp only [jh_kp2_ntop]
        simp
      induction' k with r hr
      ¬∑ unfold JHFil
        simp only [jh_kp1_ntop]
        have this' := (hacc.wf.has_min _ jh_kp1_ntop).choose_spec.1.2.2
        simp
        have : Œº ‚ü®(‚ä•, (hacc.wf.has_min _ jh_kp1_ntop).choose), by
          simp only [JHFil] at jh_kp1_ntop
          simp only [JHFil,jh_kp1_ntop] at hk'
          simp at hk'
          simp
          exact hk'‚ü© = Œº ‚ü®(‚ä•, ‚ä§), bot_lt_top‚ü© := by
            refine ((Or.resolve_left <| (Or.resolve_left <| (impl.prop4d6 Œº).1 hŒºsl ‚ä• (hacc.wf.has_min _ jh_kp1_ntop).choose ‚ä§ ‚ü®(hacc.wf.has_min _ jh_kp1_ntop).choose_spec.1.choose,(hacc.wf.has_min _ jh_kp1_ntop).choose_spec.1.out.choose_spec.1‚ü©) ?_) ?_).1
            ¬∑ apply not_and_iff_not_or_not.2
              refine Or.inl ?_
              simp
              simp at this'
              exact le_of_eq this'.symm
            ¬∑ apply not_and_iff_not_or_not.2
              refine Or.inl ?_
              simp
              simp at this'
              exact le_of_eq this'
        simp at this
        exact this
      ¬∑ #check hr sorry sorry sorry sorry sorry sorry sorry

        sorry




lemma JHFil_fin_len {‚Ñí : Type} [Nontrivial ‚Ñí] [Lattice ‚Ñí] [BoundedOrder ‚Ñí] [hacc: WellFoundedGT ‚Ñí]
{S : Type} [CompleteLinearOrder S]
(Œº : {p : ‚Ñí √ó ‚Ñí // p.1 < p.2} ‚Üí S)
(hŒº : Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü© ‚â† ‚ä§)
(hŒºsl : SlopeLike Œº) (hst : semistable Œº)
(hdc: ‚àÄ x : ‚Ñï ‚Üí ‚Ñí, (sax : StrictAnti x) ‚Üí ‚àÉ N : ‚Ñï, Œº ‚ü®(x (N +1), x N), sax <| by linarith‚ü© = ‚ä§) :
‚àÉ N : ‚Ñï, JHFil Œº hŒº hŒºsl hst hdc N = ‚ä• := by
  by_contra hc
  simp at hc
  rcases hdc (fun n => JHFil Œº hŒº hŒºsl hst hdc n) <| strictAnti_of_add_one_lt <| fun n _ ‚Ü¶ JHFil_anti_mono Œº hŒº hŒºsl hst hdc n (bot_lt_iff_ne_bot.2 <| hc n) with ‚ü®N, hN‚ü©

  sorry


theorem thm4d25 {‚Ñí : Type} [Nontrivial ‚Ñí] [Lattice ‚Ñí] [BoundedOrder ‚Ñí] [WellFoundedGT ‚Ñí]
{S : Type} [CompleteLinearOrder S]
(Œº : {p : ‚Ñí √ó ‚Ñí // p.1 < p.2} ‚Üí S)
(hŒº : Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü© ‚â† ‚ä§)
(hŒºsl : SlopeLike Œº) (hst : semistable Œº)
(hdc: ‚àÄ x : ‚Ñï ‚Üí ‚Ñí, (sax : StrictAnti x) ‚Üí ‚àÉ N : ‚Ñï, Œº ‚ü®(x (N +1), x N), sax <| by linarith‚ü© = ‚ä§) :
‚àÉ y : ‚Ñï ‚Üí ‚Ñí, ‚àÉ say : StrictAnti y, ‚àÉ hfl : (‚àÉ N :‚Ñï, y N =‚ä•),
(
  y 0 = ‚ä§
) ‚àß (
  ‚àÄ i : ‚Ñï, (hpos : 1 ‚â§ i) ‚Üí i ‚â§ Nat.find hfl ‚Üí
  (
    Œº ‚ü®(y i, y (i - 1)), say <| Nat.sub_one_lt_of_lt hpos‚ü© = Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü©
  ) ‚àß (
    ‚àÄ z : ‚Ñí, (h' : y i < z) ‚Üí (h'' : z < y (i - 1)) ‚Üí Œº ‚ü®(y i, z), h'‚ü© = Œº ‚ü®(y i, y (i - 1)), say <| Nat.sub_one_lt_of_lt hpos‚ü©
  )
)
:= sorry






class JordanHolderFiltration {‚Ñí : Type} [Nontrivial ‚Ñí] [Lattice ‚Ñí] [BoundedOrder ‚Ñí] [WellFoundedGT ‚Ñí]
{S : Type} [CompleteLinearOrder S]
(Œº : {p : ‚Ñí √ó ‚Ñí // p.1 < p.2} ‚Üí S) {hŒº : Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü© ‚â† ‚ä§}
{hŒºsl : SlopeLike Œº} {hst : semistable Œº}
{hdc: ‚àÄ x : ‚Ñï ‚Üí ‚Ñí, (sax : StrictAnti x) ‚Üí ‚àÉ N : ‚Ñï, Œº ‚ü®(x (N +1), x N), sax <| by linarith‚ü© = ‚ä§} where
  filtration : ‚Ñï ‚Üí ‚Ñí
  strict_anti : StrictAnti filtration
  fin_len : ‚àÉ N : ‚Ñï, filtration N =‚ä•
  first_top : filtration 0 = ‚ä§
  step_cond‚ÇÅ : ‚àÄ i : ‚Ñï, (hpos : 1 ‚â§ i) ‚Üí i ‚â§ Nat.find fin_len ‚Üí
    (Œº ‚ü®(filtration i, filtration (i - 1)), strict_anti <| Nat.sub_one_lt_of_lt hpos‚ü© = Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü©)
  step_cond‚ÇÇ : ‚àÄ i : ‚Ñï, (hpos : 1 ‚â§ i) ‚Üí i ‚â§ Nat.find fin_len ‚Üí
    ‚àÄ z : ‚Ñí, (h' : filtration i < z) ‚Üí (h'' : z < filtration (i - 1)) ‚Üí
    Œº ‚ü®(filtration i, z), h'‚ü© = Œº ‚ü®(filtration i, filtration (i - 1)), strict_anti <| Nat.sub_one_lt_of_lt hpos‚ü©


instance {‚Ñí : Type} [Nontrivial ‚Ñí] [Lattice ‚Ñí] [BoundedOrder ‚Ñí] [WellFoundedGT ‚Ñí]
{S : Type} [CompleteLinearOrder S]
{Œº : {p : ‚Ñí √ó ‚Ñí // p.1 < p.2} ‚Üí S} {hŒº : Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü© ‚â† ‚ä§}
{hŒºsl : SlopeLike Œº} {hst : semistable Œº}
{hdc: ‚àÄ x : ‚Ñï ‚Üí ‚Ñí, (sax : StrictAnti x) ‚Üí ‚àÉ N : ‚Ñï, Œº ‚ü®(x (N +1), x N), sax <| by linarith‚ü© = ‚ä§}
: Nonempty (@JordanHolderFiltration ‚Ñí _ _ _ _ S _ Œº hŒº hŒºsl hst hdc) := by
  refine exists_true_iff_nonempty.mp ?_
  use JordanHolderFiltration.mk (thm4d25 Œº hŒº hŒºsl hst hdc).choose (thm4d25 Œº hŒº hŒºsl hst hdc).choose_spec.choose (thm4d25 Œº hŒº hŒºsl hst hdc).choose_spec.choose_spec.choose (thm4d25 Œº hŒº hŒºsl hst hdc).choose_spec.choose_spec.choose_spec.1 (fun i hpos h'‚Ü¶ ((thm4d25 Œº hŒº hŒºsl hst hdc).choose_spec.choose_spec.choose_spec.2 i hpos h').1) (fun i hpos h'‚Ü¶ ((thm4d25 Œº hŒº hŒºsl hst hdc).choose_spec.choose_spec.choose_spec.2 i hpos h').2)


lemma rmk4d26 {‚Ñí : Type} [Nontrivial ‚Ñí] [Lattice ‚Ñí] [BoundedOrder ‚Ñí] [WellFoundedGT ‚Ñí]
{S : Type} [CompleteLinearOrder S]
{Œº : {p : ‚Ñí √ó ‚Ñí // p.1 < p.2} ‚Üí S} {hŒº : Œº ‚ü®(‚ä•,‚ä§),bot_lt_top‚ü© ‚â† ‚ä§}
{hŒºsl : SlopeLike Œº} {hst : semistable Œº}
{hdc: ‚àÄ x : ‚Ñï ‚Üí ‚Ñí, (sax : StrictAnti x) ‚Üí ‚àÉ N : ‚Ñï, Œº ‚ü®(x (N +1), x N), sax <| by linarith‚ü© = ‚ä§} :
‚àÄ f‚ÇÅ f‚ÇÇ : @JordanHolderFiltration ‚Ñí _ _ _ _ S _ Œº hŒº hŒºsl hst hdc, Nat.find f‚ÇÅ.fin_len = Nat.find f‚ÇÇ.fin_len
:= sorry
