import Mathlib.SetTheory.Cardinal.Aleph
import Mathlib.Order.Closure

namespace OrderTheory
instance {Œ± : Type*} [PartialOrder Œ±] (T : ClosureOperator (Set Œ±)): CompleteLattice (ClosureOperator.Closeds T) where
  top :=‚ü®Set.univ,ClosureOperator.isClosed_iff_closure_le.mpr fun ‚¶Éa‚¶Ñ a ‚Ü¶ trivial‚ü©
  le_top A := fun ‚¶Éa‚¶Ñ a ‚Ü¶ trivial
  bot := ‚ü®T ‚àÖ, ClosureOperator.isClosed_closure T ‚àÖ‚ü©
  bot_le A := by
    intro a ha
    simp only at *
    exact (ClosureOperator.IsClosed.closure_eq A.property) ‚ñ∏ (T.monotone <| Set.empty_subset A.val) ha
  inf A B := ‚ü®A.val ‚à© B.val,ClosureOperator.isClosed_iff_closure_le.mpr fun x hx ‚Ü¶ (ClosureOperator.IsClosed.closure_eq A.property) ‚ñ∏ (ClosureOperator.IsClosed.closure_eq B.property) ‚ñ∏ ‚ü®(T.monotone <| Set.inter_subset_left) hx,(T.monotone <| Set.inter_subset_right) hx‚ü©‚ü©
  le_inf A B C h1 h2 := fun a ha ‚Ü¶ ‚ü®h1 ha,h2 ha‚ü©
  inf_le_left A B := fun ‚¶Éa‚¶Ñ b ‚Ü¶ b.1
  inf_le_right A B := fun ‚¶Éa‚¶Ñ b ‚Ü¶ b.right
  sup A B := ‚ü®T (A.val ‚à™ B.val), ClosureOperator.isClosed_closure T (A.val ‚à™ B.val)‚ü©
  sup_le A B C h1 h2 := by
    intro a ha
    simp only at *
    exact (ClosureOperator.IsClosed.closure_eq C.property) ‚ñ∏ (T.monotone <| Set.union_subset h1 h2) ha
  le_sup_left := by
    intro A B
    nth_rw 1 [Subtype.coe_eq_of_eq_mk (ClosureOperator.IsClosed.closure_eq A.property).symm]
    exact ClosureOperator.monotone T Set.subset_union_left
  le_sup_right := by
    intro A B
    nth_rw 1 [Subtype.coe_eq_of_eq_mk (ClosureOperator.IsClosed.closure_eq B.property).symm]
    exact ClosureOperator.monotone T Set.subset_union_right
  sInf ùíÆ := by
    refine ‚ü®‚ãÇ a ‚àà ùíÆ, a.val,ClosureOperator.isClosed_iff_closure_le.mpr fun x hx ‚Ü¶ ?_‚ü©
    simp only [Set.mem_iInter, Subtype.forall] at *
    refine fun S hS hSb ‚Ü¶ (ClosureOperator.IsClosed.closure_eq hS) ‚ñ∏ T.monotone (fun x hx ‚Ü¶ ?_) hx
    simp only [Set.mem_iInter, Subtype.forall] at hx
    exact hx S hS hSb
  le_sInf ùíÆ A hA := by
    intro x h
    simp only [Subtype.forall, Set.mem_iInter] at *
    exact fun S hS hSb ‚Ü¶ hA S hS hSb h
  sInf_le ùíÆ A:= by
    intro hA x hx
    simp only [Set.mem_iInter, Subtype.forall] at *
    exact hx A.val A.prop hA
  sSup ùíÆ := ‚ü®T (‚ãÉ a ‚àà ùíÆ, a.val),ClosureOperator.isClosed_closure T (‚ãÉ a ‚àà ùíÆ, a.val)‚ü©
  le_sSup ùíÆ A hA:= fun x hx ‚Ü¶ ClosureOperator.monotone T (Set.subset_biUnion_of_mem hA) <| (ClosureOperator.IsClosed.closure_eq A.property).symm ‚ñ∏ hx
  sSup_le ùíÆ A hA := by
    intro x hx
    simp only
    refine (ClosureOperator.IsClosed.closure_eq A.property) ‚ñ∏ ClosureOperator.monotone T (fun y hy ‚Ü¶ ?_) hx
    simp only [Set.mem_iUnion, exists_prop, Subtype.exists, exists_and_right] at hy
    exact Exists.casesOn hy fun S h ‚Ü¶ And.casesOn h fun left hSb ‚Ü¶ Exists.casesOn left fun hS hP ‚Ü¶ hA ‚ü®S, hS‚ü© hP hSb


section DedekindMacNeille
lemma DedekindMacNeilleConnection (Œ± : Type*) [PartialOrder Œ±] : GaloisConnection (fun A ‚Ü¶ (OrderDual.toDual (upperBounds A))) (fun A : (Set Œ±)·µí·µà ‚Ü¶ lowerBounds A.ofDual) := fun _ _ ‚Ü¶ ‚ü®fun h _ ha ‚¶É_‚¶Ñ a_3 ‚Ü¶ h a_3 ha, fun h _ ha ‚¶É_‚¶Ñ a_2 ‚Ü¶ h a_2 ha‚ü©


def DedekindMacNeilleClosureOperator (Œ± : Type*) [PartialOrder Œ±] : ClosureOperator (Set Œ±) := GaloisConnection.closureOperator <| DedekindMacNeilleConnection Œ±


abbrev DedekindMacNeilleCompletion (Œ± : Type*) [PartialOrder Œ±] := (DedekindMacNeilleClosureOperator Œ±).Closeds


instance {Œ± : Type*} [PartialOrder Œ±] : CompleteLattice (DedekindMacNeilleCompletion Œ±) := inferInstance

instance {Œ± : Type*} [LinearOrder Œ±] : IsTotal (DedekindMacNeilleCompletion Œ±) instCompleteLatticeDedekindMacNeilleCompletion.le := by
  refine { total := ?_ }
  intro a b
  rcases a with ‚ü®A, hA‚ü©
  rcases b with ‚ü®B, hB‚ü©
  simp only [Subtype.mk_le_mk, Set.le_eq_subset]
  apply or_iff_not_imp_left.2
  intro h1
  rcases Set.not_subset_iff_exists_mem_not_mem.1 h1 with ‚ü®a‚ÇÄ,ha‚ÇÄ‚ü©
  intro b hb
  rw [‚Üê hB] at hb
  simp only [GaloisConnection.lowerAdjoint_toFun, OrderDual.ofDual_toDual] at hb
  by_contra hc
  rw [‚Üê hA] at hc
  simp only [GaloisConnection.lowerAdjoint_toFun, OrderDual.ofDual_toDual] at hc
  unfold lowerBounds at hc
  simp only [Set.mem_setOf_eq, not_forall, Classical.not_imp, not_le] at hc
  rcases hc with ‚ü®a',ha'1,ha'2‚ü©
  have hhb : b ‚àà upperBounds A := upperBounds_mono (fun ‚¶Éa‚¶Ñ a ‚Ü¶ a) (le_of_lt ha'2) ha'1
  have hB : B = lowerBounds (upperBounds B) := by
    nth_rw 1 [‚Üê hB]
    simp only [GaloisConnection.lowerAdjoint_toFun, OrderDual.ofDual_toDual]
  exact ha‚ÇÄ.2 <| hB ‚ñ∏ lowerBounds_mono (fun ‚¶Éa‚¶Ñ a ‚Ü¶ a) (hhb ha‚ÇÄ.1) hb

--open Classical

noncomputable instance {Œ± : Type*} [LinearOrder Œ±] : LinearOrder (DedekindMacNeilleCompletion Œ±) := {
  instCompleteLatticeDedekindMacNeilleCompletion with
  le_total := instIsTotalDedekindMacNeilleCompletionLe.total
  toDecidableLE := Classical.decRel LE.le
  min_def a b := by
    by_cases h : a ‚â§ b
    ¬∑ simp only [h, inf_of_le_left, ‚ÜìreduceIte]
    ¬∑ simp only [h, ‚ÜìreduceIte, inf_eq_right]
      simpa [h] using instIsTotalDedekindMacNeilleCompletionLe.total a b
  max_def a b := by
    by_cases h : a ‚â§ b
    ¬∑ simp only [h, sup_of_le_right, ‚ÜìreduceIte]
    ¬∑ simp only [h, ‚ÜìreduceIte, sup_eq_left]
      simpa only [h, false_or] using instIsTotalDedekindMacNeilleCompletionLe.total a b
  }

noncomputable instance {Œ± : Type*} [LinearOrder Œ±] : CompleteLinearOrder (DedekindMacNeilleCompletion Œ±) :=
  {instLinearOrderDedekindMacNeilleCompletion , LinearOrder.toBiheytingAlgebra, instCompleteLatticeDedekindMacNeilleCompletion with}


def coe' {Œ± : Type*} [PartialOrder Œ±] : Œ± ‚Ü™o DedekindMacNeilleCompletion Œ± := by
  have inj: ‚àÄ x : Œ±, (DedekindMacNeilleClosureOperator Œ±).IsClosed (Set.Iic x) := fun x ‚Ü¶ Set.ext fun y ‚Ü¶ ‚ü®fun hy ‚Ü¶ hy (by simp only [upperBounds,
    GaloisConnection.lowerAdjoint_toFun, Set.mem_Iic, OrderDual.ofDual_toDual, Set.mem_setOf_eq,
    imp_self, implies_true]),fun hy x_1 ha ‚Ü¶ ha hy‚ü©
  have : Function.Injective fun x ‚Ü¶ (‚ü®Set.Iic x,inj x‚ü© : DedekindMacNeilleCompletion Œ±) := by
    intro a b hab
    simp only [Subtype.mk.injEq] at hab
    exact le_antisymm (hab ‚ñ∏ Set.right_mem_Iic).out (hab.symm ‚ñ∏ Set.right_mem_Iic).out
  use ‚ü®fun x ‚Ü¶ ‚ü®Set.Iic x, inj x‚ü©,this‚ü©
  simp only [Function.Embedding.coeFn_mk, Subtype.mk_le_mk, Set.le_eq_subset, Set.Iic_subset_Iic,
    implies_true]


instance {Œ± : Type*} [PartialOrder Œ±]: Coe Œ± (DedekindMacNeilleCompletion Œ±) := ‚ü®coe'.toFun‚ü©


theorem DedekindMacNeilleCompletion_minimality {Œ± : Type*} [PartialOrder Œ±] {Œ≤ : Type*} [CompleteLattice Œ≤] (f : Œ± ‚Ü™o Œ≤) : ‚àÉ f' : DedekindMacNeilleCompletion Œ± ‚Ü™o Œ≤, f = f' ‚àò coe' := by
  let g := fun x : DedekindMacNeilleCompletion Œ± ‚Ü¶ sSup <| lowerBounds <| upperBounds <| f '' x.val
  have : ‚àÄ (A B : DedekindMacNeilleCompletion Œ±), g A ‚â§ g B ‚Üî A ‚â§ B := by
    refine fun A B ‚Ü¶ ‚ü®?_,?_‚ü©
    ¬∑ intro h
      by_contra!
      rcases (Set.not_subset.1 this) with ‚ü®a, haA, haB‚ü©
      have : ‚àÉ u ‚àà upperBounds B, ¬¨ a ‚â§ u := by
        by_contra!
        exact haB ((ClosureOperator.IsClosed.closure_eq B.property) ‚ñ∏ this)
      refine (fun w ‚Ü¶ this.choose_spec.2 (f.map_rel_iff'.1 w)) ?_
      have h‚ÇÅ : f a ‚â§ g A := le_sSup fun u hu ‚Ü¶ hu (Exists.intro a ‚ü®haA, rfl‚ü©)
      have h‚ÇÇ : g B ‚â§ f (this.choose) := by
        refine sSup_le fun y hy ‚Ü¶ hy ?_
        simp only [upperBounds, Set.mem_image, forall_exists_index, and_imp,
          forall_apply_eq_imp_iff‚ÇÇ, Set.mem_setOf_eq, OrderEmbedding.le_iff_le]
        exact this.choose_spec.1.out
      exact le_trans h‚ÇÅ <| le_trans h h‚ÇÇ
    ¬∑ intro h
      simp only [upperBounds, Set.mem_image, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ,
        sSup_le_iff, g]
      exact fun y hy ‚Ü¶ hy.out fun w hw ‚Ü¶ le_sSup fun ‚¶Éa‚¶Ñ a ‚Ü¶ a w (h hw)
  refine ‚ü®‚ü®‚ü®g,fun x y h ‚Ü¶ le_antisymm ((this x y).1 <| (le_antisymm_iff.1 h).1) ((this y x).1 <| (le_antisymm_iff.1 h).2)‚ü©,?_‚ü©,?_‚ü©
  ¬∑ simp only [Function.Embedding.coeFn_mk, Subtype.forall, Subtype.mk_le_mk, Set.le_eq_subset, g]
    exact fun x hx y hy ‚Ü¶ this ‚ü®x, hx‚ü© ‚ü®y, hy‚ü©
  ¬∑ refine funext fun x ‚Ü¶ ?_
    simp only [RelEmbedding.coe_mk, Function.Embedding.coeFn_mk, coe', Function.comp_apply, g]
    refine le_antisymm (le_sSup fun a ha ‚Ü¶ ha.out <| Set.mem_image_of_mem f Set.right_mem_Iic) <| sSup_le fun _ hb ‚Ü¶ hb ?_
    simp only [upperBounds, Set.mem_image, Set.mem_Iic, forall_exists_index, and_imp,
      forall_apply_eq_imp_iff‚ÇÇ, Set.mem_setOf_eq, OrderEmbedding.le_iff_le, imp_self, implies_true,
      g]

--TODO: joint-dense, meet-dense
end DedekindMacNeille

end OrderTheory
